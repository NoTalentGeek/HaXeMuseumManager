(function (console, $hx_exports) { "use strict";
$hx_exports.openfl = $hx_exports.openfl || {};
$hx_exports.lime = $hx_exports.lime || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.config = null;
ApplicationMain.preloader = null;
ApplicationMain.create = function() {
	var app = new openfl_display_Application();
	app.create(ApplicationMain.config);
	var display = new NMEPreloader();
	ApplicationMain.preloader = new openfl_display_Preloader(display);
	app.setPreloader(ApplicationMain.preloader);
	ApplicationMain.preloader.onComplete.add(ApplicationMain.init);
	ApplicationMain.preloader.create(ApplicationMain.config);
	var urls = [];
	var types = [];
	urls.push("styles/windows/popup.png");
	types.push("IMAGE");
	urls.push("styles/windows/optionbox.png");
	types.push("IMAGE");
	urls.push("styles/windows/accordion.css");
	types.push("TEXT");
	urls.push("styles/windows/menus.css");
	types.push("TEXT");
	urls.push("styles/windows/button.png");
	types.push("IMAGE");
	urls.push("styles/windows/textinput.png");
	types.push("IMAGE");
	urls.push("styles/windows/buttons.css");
	types.push("TEXT");
	urls.push("styles/windows/vprogress.png");
	types.push("IMAGE");
	urls.push("styles/windows/hprogress.png");
	types.push("IMAGE");
	urls.push("styles/windows/listview.png");
	types.push("IMAGE");
	urls.push("styles/windows/accordion.min.css");
	types.push("TEXT");
	urls.push("styles/windows/buttons.min.css");
	types.push("TEXT");
	urls.push("styles/windows/sliders.css");
	types.push("TEXT");
	urls.push("styles/windows/windows.css");
	types.push("TEXT");
	urls.push("styles/windows/vscroll.png");
	types.push("IMAGE");
	urls.push("styles/windows/calendar.css");
	types.push("TEXT");
	urls.push("styles/windows/listview.min.css");
	types.push("TEXT");
	urls.push("styles/windows/popups.css");
	types.push("TEXT");
	urls.push("styles/windows/container.png");
	types.push("IMAGE");
	urls.push("styles/windows/hscroll.png");
	types.push("IMAGE");
	urls.push("styles/windows/listview.css");
	types.push("TEXT");
	urls.push("styles/windows/glyphs/vscroll_thumb_gripper_up.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/vscroll_thumb_gripper_down.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/vscroll_thumb_gripper_over.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/right_arrow.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/hscroll_thumb_gripper_down.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/left_arrow.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/hscroll_thumb_gripper_up.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/up_arrow.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/down_arrow.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/hscroll_thumb_gripper_over.png");
	types.push("IMAGE");
	urls.push("styles/windows/checkbox.png");
	types.push("IMAGE");
	urls.push("styles/windows/tab.png");
	types.push("IMAGE");
	urls.push("styles/windows/tabs.css");
	types.push("TEXT");
	urls.push("styles/windows/scrolls.min.css");
	types.push("TEXT");
	urls.push("styles/windows/scrolls.css");
	types.push("TEXT");
	urls.push("styles/windows/rtf.css");
	types.push("TEXT");
	urls.push("styles/gradient/circle_dark.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_right2.png");
	types.push("IMAGE");
	urls.push("styles/gradient/gripper_vertical_disabled.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_down_dark.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_left.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_down_disabled.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_down.png");
	types.push("IMAGE");
	urls.push("styles/gradient/gradient_mobile.min.css");
	types.push("TEXT");
	urls.push("styles/gradient/arrow_right_dark.png");
	types.push("IMAGE");
	urls.push("styles/gradient/cross_light_small.png");
	types.push("IMAGE");
	urls.push("styles/gradient/gripper_horizontal.png");
	types.push("IMAGE");
	urls.push("styles/gradient/gradient.css");
	types.push("TEXT");
	urls.push("styles/gradient/cross_dark_disabled.png");
	types.push("IMAGE");
	urls.push("styles/gradient/gradient.min.css");
	types.push("TEXT");
	urls.push("styles/gradient/gripper_vertical.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_left_disabled.png");
	types.push("IMAGE");
	urls.push("styles/gradient/gripper_horizontal_disabled.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_right.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_right_disabled.png");
	types.push("IMAGE");
	urls.push("styles/gradient/cross_dark.png");
	types.push("IMAGE");
	urls.push("styles/gradient/hsplitter_gripper.png");
	types.push("IMAGE");
	urls.push("styles/gradient/gradient_mobile.css");
	types.push("TEXT");
	urls.push("styles/gradient/arrow_up_disabled.png");
	types.push("IMAGE");
	urls.push("styles/gradient/vsplitter_gripper.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_up.png");
	types.push("IMAGE");
	urls.push("styles/default/circle.png");
	types.push("IMAGE");
	urls.push("styles/default/up_down.png");
	types.push("IMAGE");
	urls.push("styles/default/collapse.png");
	types.push("IMAGE");
	urls.push("styles/default/cross.png");
	types.push("IMAGE");
	urls.push("styles/default/expand.png");
	types.push("IMAGE");
	urls.push("fonts/Oxygen.eot");
	types.push("BINARY");
	urls.push("fonts/Oxygen-Bold.woff");
	types.push("BINARY");
	urls.push("fonts/Oxygen-Bold.eot");
	types.push("BINARY");
	urls.push("fonts/Oxygen.svg");
	types.push("TEXT");
	urls.push("fonts/Oxygen-Bold.woff2");
	types.push("BINARY");
	urls.push("fonts/Oxygen-Bold.svg");
	types.push("TEXT");
	urls.push("Oxygen Regular");
	types.push("FONT");
	urls.push("Oxygen Bold");
	types.push("FONT");
	urls.push("fonts/Oxygen.woff2");
	types.push("BINARY");
	urls.push("fonts/Oxygen.woff");
	types.push("BINARY");
	urls.push("assets/ui/demo.xml");
	types.push("TEXT");
	urls.push("assets/ui/example.xml");
	types.push("TEXT");
	urls.push("assets/ui/example.txt");
	types.push("TEXT");
	urls.push("assets/ui/example.hx");
	types.push("TEXT");
	urls.push("assets/img/rtfview/edit-italic.png");
	types.push("IMAGE");
	urls.push("assets/img/rtfview/edit-alignment-center.png");
	types.push("IMAGE");
	urls.push("assets/img/rtfview/edit-bold.png");
	types.push("IMAGE");
	urls.push("assets/img/rtfview/edit-alignment-right.png");
	types.push("IMAGE");
	urls.push("assets/img/rtfview/edit-underline.png");
	types.push("IMAGE");
	urls.push("assets/img/rtfview/edit-alignment-left.png");
	types.push("IMAGE");
	urls.push("assets/img/rtfview/edit-alignment-justify.png");
	types.push("IMAGE");
	urls.push("assets/img/rtfview/edit-list.png");
	types.push("IMAGE");
	urls.push("assets/css/code.min.css");
	types.push("TEXT");
	urls.push("assets/css/rtf.min.css");
	types.push("TEXT");
	urls.push("assets/css/code.css");
	types.push("TEXT");
	urls.push("assets/css/rtf.css");
	types.push("TEXT");
	urls.push("assets/openfl.svg");
	types.push("TEXT");
	urls.push("img/rtfview/edit-italic.png");
	types.push("IMAGE");
	urls.push("img/rtfview/edit-alignment-center.png");
	types.push("IMAGE");
	urls.push("img/rtfview/edit-bold.png");
	types.push("IMAGE");
	urls.push("img/rtfview/edit-alignment-right.png");
	types.push("IMAGE");
	urls.push("img/rtfview/edit-underline.png");
	types.push("IMAGE");
	urls.push("img/rtfview/edit-alignment-left.png");
	types.push("IMAGE");
	urls.push("img/rtfview/edit-alignment-justify.png");
	types.push("IMAGE");
	urls.push("img/rtfview/edit-list.png");
	types.push("IMAGE");
	urls.push("css/code.min.css");
	types.push("TEXT");
	urls.push("css/rtf.min.css");
	types.push("TEXT");
	urls.push("css/code.css");
	types.push("TEXT");
	urls.push("css/rtf.css");
	types.push("TEXT");
	urls.push("assets/Layout/UIPopupAddObjectMuseum.xml");
	types.push("TEXT");
	urls.push("assets/Layout/UIMain.xml");
	types.push("TEXT");
	urls.push("layout/UIPopupAddObjectMuseum.xml");
	types.push("TEXT");
	urls.push("layout/UIMain.xml");
	types.push("TEXT");
	if(ApplicationMain.config.assetsPrefix != null) {
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(types[i] != "FONT") urls[i] = ApplicationMain.config.assetsPrefix + urls[i];
		}
	}
	ApplicationMain.preloader.load(urls,types);
	var result = app.exec();
};
ApplicationMain.init = function() {
	var loaded = 0;
	var total = 0;
	var library_onLoad = function(__) {
		loaded++;
		if(loaded == total) ApplicationMain.start();
	};
	ApplicationMain.preloader = null;
	if(total == 0) ApplicationMain.start();
};
ApplicationMain.main = function() {
	ApplicationMain.config = { build : "975", company : "Company Name", file : "HaXeOpenFLMuseumManager", fps : 60, name : "HaXeOpenFLMuseumManager", orientation : "", packageName : "com.sample.haxeopenflmuseummanager", version : "1.0.0", windows : [{ antialiasing : 0, background : 16777215, borderless : false, depthBuffer : false, display : 0, fullscreen : false, hardware : true, height : 576, parameters : "{}", resizable : false, stencilBuffer : true, title : "HaXeOpenFLMuseumManager", vsync : false, width : 1024, x : null, y : null}]};
};
ApplicationMain.start = function() {
	var hasMain = false;
	var entryPoint = Type.resolveClass("Main");
	var _g = 0;
	var _g1 = Type.getClassFields(entryPoint);
	while(_g < _g1.length) {
		var methodName = _g1[_g];
		++_g;
		if(methodName == "main") {
			hasMain = true;
			break;
		}
	}
	lime_Assets.initialize();
	if(hasMain) Reflect.callMethod(entryPoint,Reflect.field(entryPoint,"main"),[]); else {
		var instance = Type.createInstance(DocumentClass,[]);
	}
	if(openfl_Lib.current.stage.window.__fullscreen) openfl_Lib.current.stage.dispatchEvent(new openfl_events_FullScreenEvent(openfl_events_FullScreenEvent.FULL_SCREEN,false,false,true,true));
	openfl_Lib.current.stage.dispatchEvent(new openfl_events_Event(openfl_events_Event.RESIZE,false,false));
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
openfl_events_IEventDispatcher.prototype = {
	__class__: openfl_events_IEventDispatcher
};
var openfl_events_EventDispatcher = function(target) {
	if(target != null) this.__targetDispatcher = target;
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.__sortByPriority = function(l1,l2) {
	if(l1.priority == l2.priority) return 0; else if(l1.priority > l2.priority) return -1; else return 1;
};
openfl_events_EventDispatcher.prototype = {
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		if(this.__eventMap == null) {
			this.__dispatching = new haxe_ds_StringMap();
			this.__eventMap = new haxe_ds_StringMap();
			this.__newEventMap = new haxe_ds_StringMap();
		}
		if(!this.__eventMap.exists(type)) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			this.__eventMap.set(type,list);
		} else {
			var list1;
			if(this.__dispatching.get(type) == true) {
				if(!this.__newEventMap.exists(type)) {
					var _this = this.__eventMap.get(type);
					list1 = _this.slice();
					this.__newEventMap.set(type,list1);
				} else list1 = this.__newEventMap.get(type);
			} else list1 = this.__eventMap.get(type);
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(Reflect.compareMethods(list1[i].callback,listener)) return;
			}
			list1.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			list1.sort(openfl_events_EventDispatcher.__sortByPriority);
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) event.target = this.__targetDispatcher; else event.target = this;
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) return false;
		if(this.__dispatching.get(type) == true && this.__newEventMap.exists(type)) return this.__newEventMap.get(type).length > 0; else return this.__eventMap.exists(type);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		if(this.__eventMap == null) return;
		var list = this.__eventMap.get(type);
		if(list == null) return;
		var dispatching = this.__dispatching.get(type) == true;
		if(dispatching) {
			if(!this.__newEventMap.exists(type)) {
				var _this = this.__eventMap.get(type);
				list = _this.slice();
				this.__newEventMap.set(type,list);
			} else list = this.__newEventMap.get(type);
		}
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,useCapture)) {
				list.splice(i,1);
				break;
			}
		}
		if(!dispatching) {
			if(list.length == 0) this.__eventMap.remove(type);
			if(!this.__eventMap.iterator().hasNext()) {
				this.__eventMap = null;
				this.__newEventMap = null;
			}
		}
	}
	,toString: function() {
		var full = Type.getClassName(js_Boot.getClass(this));
		var $short = full.split(".").pop();
		return "[object " + $short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) return false;
		var type = event.type;
		var list;
		if(this.__dispatching.get(type) == true) {
			list = this.__newEventMap.get(type);
			if(list == null) return false;
			list = list.slice();
		} else {
			list = this.__eventMap.get(type);
			if(list == null) return false;
			this.__dispatching.set(type,true);
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) event.target = this.__targetDispatcher; else event.target = this;
		}
		event.currentTarget = this;
		var capture = event.eventPhase == openfl_events_EventPhase.CAPTURING_PHASE;
		var index = 0;
		var listener;
		while(index < list.length) {
			listener = list[index];
			if(listener.useCapture == capture) {
				listener.callback(event);
				if(event.__isCancelledNow) break;
			}
			if(listener == list[index]) index++;
		}
		if(this.__newEventMap != null && this.__newEventMap.exists(type)) {
			var list1 = this.__newEventMap.get(type);
			if(list1.length > 0) this.__eventMap.set(type,list1); else this.__eventMap.remove(type);
			if(!this.__eventMap.iterator().hasNext()) {
				this.__eventMap = null;
				this.__newEventMap = null;
			} else this.__newEventMap.remove(type);
		}
		this.__dispatching.set(event.type,false);
		return true;
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl_display_IBitmapDrawable.prototype = {
	__class__: openfl_display_IBitmapDrawable
};
var openfl_display_DisplayObject = function() {
	this.__cacheAsBitmapSmooth = true;
	this.__cacheAsBitmap = false;
	this.__maskCached = false;
	openfl_events_EventDispatcher.call(this);
	this.__alpha = 1;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__renderTransform = new openfl_geom_Matrix();
	this.__offset = new openfl_geom_Point();
	this.__worldOffset = new openfl_geom_Point();
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	getBounds: function(targetCoordinateSpace) {
		var matrix;
		if(targetCoordinateSpace != null) {
			matrix = this.__getWorldTransform().clone();
			matrix.concat(targetCoordinateSpace.__getWorldTransform().clone().invert());
		} else {
			matrix = openfl_geom_Matrix.__temp;
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		pos = pos.clone();
		this.__getWorldTransform().__transformInversePoint(pos);
		return pos;
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		if(this.parent != null) {
			var bounds = new openfl_geom_Rectangle();
			this.__getBounds(bounds,this.__getWorldTransform());
			return bounds.containsPoint(new openfl_geom_Point(x,y));
		}
		return false;
	}
	,localToGlobal: function(point) {
		return this.__getWorldTransform().transformPoint(point);
	}
	,__broadcast: function(event,notifyChilden) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCancelled) return true;
			return result;
		}
		return false;
	}
	,__dispatchEvent: function(event) {
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCancelled) return true;
		if(event.bubbles && this.parent != null && this.parent != this) {
			event.eventPhase = openfl_events_EventPhase.BUBBLING_PHASE;
			if(event.target == null) event.target = this;
			this.parent.__dispatchEvent(event);
		}
		return result;
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) this.__graphics.__getBounds(rect,matrix);
	}
	,__getCursor: function() {
		return null;
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getBounds(rect,this.__transform);
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect == null) this.__getBounds(rect,matrix); else {
			var r = openfl_geom_Rectangle.__temp;
			r.copyFrom(this.__scrollRect);
			r.__transform(r,matrix);
			rect.__expand(matrix.tx,matrix.ty,r.width,r.height);
		}
	}
	,__getWorldTransform: function() {
		if(this.__transformDirty || openfl_display_DisplayObject.__worldTransformDirty > 0) {
			var list = [];
			var current = this;
			var transformDirty = this.__transformDirty;
			if(this.parent == null) {
				if(transformDirty) this.__update(true,false);
			} else while(current.parent != null) {
				list.push(current);
				current = current.parent;
				if(current.__transformDirty) transformDirty = true;
			}
			if(transformDirty) {
				var i = list.length;
				while(--i >= 0) list[i].__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.__graphics != null) {
			if(!hitObject.get_visible() || this.__isMask) return false;
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getWorldTransform())) {
				if(stack != null && !interactiveOnly) stack.push(hitObject);
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getWorldTransform())) return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoShape.render(this,renderSession);
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
	}
	,__renderCanvas: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasShape.render(this,renderSession);
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
	}
	,__renderDOM: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_dom_DOMShape.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.__cacheAsBitmap) {
			this.__cacheGL(renderSession);
			return;
		}
		if(this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
		if(this.__graphics != null) {
			if(this.__graphics.__hardware) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this,renderSession); else {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics,renderSession);
				openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession);
			}
		}
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
		if(this.__scrollRect != null) renderSession.maskManager.popRect();
	}
	,__drawGraphicsGL: function(renderSession) {
		if(this.__graphics != null) {
			if(this.__graphics.__hardware) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this,renderSession); else {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics,renderSession);
				openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession);
			}
		}
	}
	,__preRenderGL: function(renderSession) {
		if(this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
	}
	,__postRenderGL: function(renderSession) {
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
		if(this.__scrollRect != null) renderSession.maskManager.popRect();
	}
	,__cacheGL: function(renderSession) {
		var hasCacheMatrix = this.__cacheAsBitmapMatrix != null;
		var x = this.__cachedBitmapBounds.x;
		var y = this.__cachedBitmapBounds.y;
		var w = this.__cachedBitmapBounds.width;
		var h = this.__cachedBitmapBounds.height;
		if(this.__cacheGLMatrix == null) this.__cacheGLMatrix = new openfl_geom_Matrix();
		if(hasCacheMatrix) {
			var bmpBounds = openfl_geom_Rectangle.__temp;
			this.__cachedBitmapBounds.__transform(bmpBounds,this.__cacheAsBitmapMatrix);
			x = bmpBounds.x;
			y = bmpBounds.y;
			w = bmpBounds.width;
			h = bmpBounds.height;
			this.__cacheGLMatrix = this.__cacheAsBitmapMatrix.clone();
		} else this.__cacheGLMatrix.identity();
		if(w <= 0 && h <= 0) throw new js__$Boot_HaxeError("Error creating a cached bitmap. The texture size is " + w + "x" + h);
		if(this.__updateCachedBitmap || this.__updateFilters) {
			if(this.__cachedFilterBounds != null) {
				w += Math.abs(this.__cachedFilterBounds.x) + Math.abs(this.__cachedFilterBounds.width);
				h += Math.abs(this.__cachedFilterBounds.y) + Math.abs(this.__cachedFilterBounds.height);
			}
			if(this.__cachedBitmap == null) this.__cachedBitmap = openfl_display_BitmapData.__asRenderTexture();
			this.__cachedBitmap.__resize(Math.ceil(w),Math.ceil(h));
			var m = this.__cacheGLMatrix.clone();
			m.translate(-x,-y);
			var shader = this.__shader;
			this.__shader = null;
			this.__cachedBitmap.__drawGL(renderSession,this,m,null,null,null,true,false,true);
			this.__shader = shader;
			this.__updateCachedBitmap = false;
		}
		if(this.__updateFilters) {
			openfl_filters_BitmapFilter.__applyFilters(this.__filters,renderSession,this.__cachedBitmap,this.__cachedBitmap,null,null);
			this.__updateFilters = false;
		}
		this.__cacheGLMatrix.invert();
		this.__cacheGLMatrix.__translateTransformed(x,y);
		this.__cacheGLMatrix.concat(this.__renderTransform);
		this.__cacheGLMatrix.translate(this.__offset.x,this.__offset.y);
		renderSession.spriteBatch.renderBitmapData(this.__cachedBitmap,this.__cacheAsBitmapSmooth,this.__cacheGLMatrix,this.__worldColorTransform,this.__worldAlpha,this.blendMode,this.__shader,openfl_display_PixelSnapping.ALWAYS);
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) {
				if(this.stage.get_focus() == this) this.stage.set_focus(null);
				this.dispatchEvent(new openfl_events_Event(openfl_events_Event.REMOVED_FROM_STAGE,false,false));
			}
			this.stage = stage;
			if(stage != null) this.dispatchEvent(new openfl_events_Event(openfl_events_Event.ADDED_TO_STAGE,false,false));
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__updateCachedBitmap = true;
			this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl_display_DisplayObject.__worldTransformDirty++;
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		this.__updateTransforms();
		if(this.parent != null && this.__isMask) this.__maskCached = false;
		if(updateChildren && this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
		if(!transformOnly && this.__mask != null && !this.__mask.__maskCached) {
			if(this.__maskGraphics == null) this.__maskGraphics = new openfl_display_Graphics();
			this.__maskGraphics.clear();
			this.__mask.__update(true,true,this.__maskGraphics);
			this.__mask.__maskCached = true;
		}
		if(maskGraphics != null) this.__updateMask(maskGraphics);
		if(!transformOnly && this.__cacheAsBitmap) {
			if(this.__updateCachedBitmap || this.__updateFilters) {
				if(this.__cachedBitmapBounds == null) this.__cachedBitmapBounds = new openfl_geom_Rectangle();
				if(this.cacheAsBitmapBounds != null) this.__cachedBitmapBounds.copyFrom(this.cacheAsBitmapBounds); else {
					this.__cachedBitmapBounds.setEmpty();
					this.__getRenderBounds(this.__cachedBitmapBounds,openfl_geom_Matrix.__identity);
				}
				if(this.__filters != null) {
					if(this.__cachedFilterBounds == null) this.__cachedFilterBounds = new openfl_geom_Rectangle();
					this.__cachedFilterBounds.setEmpty();
					openfl_filters_BitmapFilter.__expandBounds(this.__filters,this.__cachedFilterBounds,openfl_geom_Matrix.__identity);
					this.__cachedBitmapBounds.x += this.__cachedFilterBounds.x;
					this.__cachedBitmapBounds.y += this.__cachedFilterBounds.y;
				}
			}
		}
		if(!transformOnly) {
			if(!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) this.__worldColorTransform = this.get_transform().get_colorTransform().__clone();
			if(this.parent != null) {
				this.__worldAlpha = this.get_alpha() * this.parent.__worldAlpha;
				this.__worldColorTransform.__combine(this.parent.__worldColorTransform);
				if(this.blendMode == null || this.blendMode == openfl_display_BlendMode.NORMAL) this.__blendMode = this.parent.__blendMode;
				if(this.shader == null) this.__shader = this.parent.__shader;
			} else this.__worldAlpha = this.get_alpha();
			if(updateChildren && this.__renderDirty) this.__renderDirty = false;
		}
	}
	,__updateChildren: function(transformOnly) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(!this.__renderable && !this.__isMask) return;
		this.__worldAlpha = this.get_alpha();
		if(this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
	}
	,__updateMask: function(maskGraphics) {
		if(this.__graphics != null) {
			maskGraphics.__commands.overrideMatrix(this.__worldTransform);
			maskGraphics.__commands.append(this.__graphics.__commands);
			maskGraphics.set___dirty(true);
			maskGraphics.__visible = true;
			if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl_geom_Rectangle();
			this.__graphics.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		var overrided = overrideTransform != null;
		var local;
		if(overrided) local = new openfl_geom_Matrix(overrideTransform.a,overrideTransform.b,overrideTransform.c,overrideTransform.d,overrideTransform.tx,overrideTransform.ty); else local = this.__transform;
		if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
		if(!overrided && this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			this.__worldTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
			this.__worldTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
			this.__worldTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
			this.__worldTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
			this.__worldTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			this.__worldTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
			this.__worldOffset.copyFrom(this.parent.__worldOffset);
		} else {
			this.__worldTransform.copyFrom(local);
			this.__worldOffset.setTo(0,0);
		}
		if(this.__scrollRect != null) {
			this.__offset = this.__worldTransform.deltaTransformPoint(this.__scrollRect.get_topLeft());
			this.__worldOffset.offset(this.__offset.x,this.__offset.y);
		} else this.__offset.setTo(0,0);
		this.__renderTransform.copyFrom(this.__worldTransform);
		this.__renderTransform.translate(-this.__worldOffset.x,-this.__worldOffset.y);
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) value = 1.0;
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__alpha = value;
	}
	,set_blendMode: function(value) {
		this.__blendMode = value;
		return this.blendMode = value;
	}
	,set_shader: function(value) {
		this.__shader = value;
		return this.shader = value;
	}
	,get_cacheAsBitmap: function() {
		return this.__cacheAsBitmap;
	}
	,set_cacheAsBitmap: function(value) {
		if(!this.__renderDirty) {
			this.__updateCachedBitmap = true;
			this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return this.__forceCacheAsBitmap?this.__cacheAsBitmap = true:this.__cacheAsBitmap = value;
	}
	,get_cacheAsBitmapMatrix: function() {
		return this.__cacheAsBitmapMatrix;
	}
	,set_cacheAsBitmapMatrix: function(value) {
		if(!this.__renderDirty) {
			this.__updateCachedBitmap = true;
			this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return this.__cacheAsBitmapMatrix = new openfl_geom_Matrix(value.a,value.b,value.c,value.d,value.tx,value.ty);
	}
	,get_cacheAsBitmapSmooth: function() {
		return this.__cacheAsBitmapSmooth;
	}
	,set_cacheAsBitmapSmooth: function(value) {
		return this.__cacheAsBitmapSmooth = value;
	}
	,get_filters: function() {
		if(this.__filters == null) return []; else return this.__filters.slice();
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) {
			this.__filters = value;
			this.__forceCacheAsBitmap = true;
			this.__cacheAsBitmap = true;
			this.__updateFilters = true;
		} else {
			this.__filters = null;
			this.__forceCacheAsBitmap = false;
			this.__cacheAsBitmap = false;
			this.__updateFilters = false;
		}
		if(!this.__renderDirty) {
			this.__updateCachedBitmap = true;
			this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return value;
	}
	,get_height: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		return bounds.height;
	}
	,set_height: function(value) {
		var bounds = new openfl_geom_Rectangle();
		var matrix = openfl_geom_Matrix.__temp;
		matrix.identity();
		this.__getBounds(bounds,matrix);
		if(value != bounds.height) this.set_scaleY(value / bounds.height); else this.set_scaleY(1);
		return value;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value != this.__mask) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskCached = false;
			this.__mask.__setTransformDirty();
			this.__mask.__setRenderDirty();
			this.__maskGraphics = null;
		}
		if(value != null) value.__isMask = true;
		return this.__mask = value;
	}
	,get_mouseX: function() {
		var mouseX;
		if(this.stage != null) mouseX = this.stage.__mouseX; else mouseX = openfl_Lib.current.stage.__mouseX;
		var mouseY;
		if(this.stage != null) mouseY = this.stage.__mouseY; else mouseY = openfl_Lib.current.stage.__mouseY;
		return this.__getWorldTransform().__transformInverseX(mouseX,mouseY);
	}
	,get_mouseY: function() {
		var mouseX;
		if(this.stage != null) mouseX = this.stage.__mouseX; else mouseX = openfl_Lib.current.stage.__mouseX;
		var mouseY;
		if(this.stage != null) mouseY = this.stage.__mouseY; else mouseY = openfl_Lib.current.stage.__mouseY;
		return this.__getWorldTransform().__transformInverseY(mouseX,mouseY);
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) return openfl_Lib.current;
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			var __scaleX = this.get_scaleX();
			var __scaleY = this.get_scaleY();
			this.__transform.a = this.__rotationCosine * __scaleX;
			this.__transform.b = this.__rotationSine * __scaleX;
			this.__transform.c = -this.__rotationSine * __scaleY;
			this.__transform.d = this.__rotationCosine * __scaleY;
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return value;
	}
	,get_scaleX: function() {
		if(this.__transform.b == 0) return this.__transform.a; else return Math.sqrt(this.__transform.a * this.__transform.a + this.__transform.b * this.__transform.b);
	}
	,set_scaleX: function(value) {
		if(this.__transform.c == 0) {
			if(value != this.__transform.a) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.a = value;
		} else {
			var a = this.__rotationCosine * value;
			var b = this.__rotationSine * value;
			if(this.__transform.a != a || this.__transform.b != b) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.a = a;
			this.__transform.b = b;
		}
		return value;
	}
	,get_scaleY: function() {
		if(this.__transform.c == 0) return this.__transform.d; else return Math.sqrt(this.__transform.c * this.__transform.c + this.__transform.d * this.__transform.d);
	}
	,set_scaleY: function(value) {
		if(this.__transform.c == 0) {
			if(value != this.__transform.d) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.d = value;
		} else {
			var c = -this.__rotationSine * value;
			var d = this.__rotationCosine * value;
			if(this.__transform.d != d || this.__transform.c != c) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.c = c;
			this.__transform.d = d;
		}
		return value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) return null;
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		if(value != this.__scrollRect) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scrollRect = value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) this.__objectTransform = new openfl_geom_Transform(this);
		return this.__objectTransform;
	}
	,set_transform: function(value) {
		if(value == null) throw new js__$Boot_HaxeError(new openfl_errors_TypeError("Parameter transform must be non-null."));
		if(this.__objectTransform == null) this.__objectTransform = new openfl_geom_Transform(this);
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl_display_DisplayObject.__worldTransformDirty++;
		}
		this.__objectTransform.set_matrix(value.get_matrix());
		this.__objectTransform.set_colorTransform(value.get_colorTransform().__clone());
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		return bounds.width;
	}
	,set_width: function(value) {
		var bounds = new openfl_geom_Rectangle();
		var matrix = openfl_geom_Matrix.__temp;
		matrix.identity();
		this.__getBounds(bounds,matrix);
		if(value != bounds.width) this.set_scaleX(value / bounds.width); else this.set_scaleX(1);
		return value;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_shader:"set_shader",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_cacheAsBitmapSmooth:"set_cacheAsBitmapSmooth",get_cacheAsBitmapSmooth:"get_cacheAsBitmapSmooth",set_cacheAsBitmapMatrix:"set_cacheAsBitmapMatrix",get_cacheAsBitmapMatrix:"get_cacheAsBitmapMatrix",set_cacheAsBitmap:"set_cacheAsBitmap",get_cacheAsBitmap:"get_cacheAsBitmap",set_blendMode:"set_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = false;
	this.tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	requestSoftKeyboard: function() {
		openfl_Lib.notImplemented("InteractiveObject.requestSoftKeyboard");
		return false;
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) this.parent.__getInteractive(stack);
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) return false;
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,get_tabEnabled: function() {
		return this.__tabEnabled;
	}
	,set_tabEnabled: function(value) {
		return this.__tabEnabled = value;
	}
	,__class__: openfl_display_InteractiveObject
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_tabEnabled:"set_tabEnabled",get_tabEnabled:"get_tabEnabled"})
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = [];
	this.__removedChildren = [];
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	addChild: function(child) {
		if(child != null) {
			if(child.parent != null) child.parent.removeChild(child);
			this.__children.push(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__updateCachedBitmap = true;
				child.__updateFilters = child.get_filters() != null && child.get_filters().length > 0;
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl_events_Event(openfl_events_Event.ADDED,true);
			event.target = child;
			child.__dispatchEvent(event);
		}
		return child;
	}
	,addChildAt: function(child,index) {
		if(index > this.__children.length || index < 0) throw new js__$Boot_HaxeError("Invalid index position " + index);
		if(child.parent == this) HxOverrides.remove(this.__children,child); else {
			if(child.parent != null) child.parent.removeChild(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__updateCachedBitmap = true;
				child.__updateFilters = child.get_filters() != null && child.get_filters().length > 0;
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl_events_Event(openfl_events_Event.ADDED,true);
			event.target = child;
			child.__dispatchEvent(event);
		}
		this.__children.splice(index,0,child);
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.__children[index];
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) return child;
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == child) return i;
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		var stack = [];
		this.__hitTest(point.x,point.y,false,stack,false,this);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			child.__dispatchEvent(new openfl_events_Event(openfl_events_Event.REMOVED,true));
			if(this.stage != null) child.__setStageReference(null);
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__updateCachedBitmap = true;
				child.__updateFilters = child.get_filters() != null && child.get_filters().length > 0;
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.removeChild(this.__children[index]);
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) return;
		}
		if(beginIndex > this.__children.length - 1) return; else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) throw new js__$Boot_HaxeError(new openfl_errors_RangeError("The supplied index is out of bounds."));
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			numRemovals--;
		}
	}
	,resolve: function(fieldName) {
		if(this.__children == null) return null;
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == fieldName) return child;
		}
		return null;
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = HxOverrides.indexOf(this.__children,child1,0);
			var index2 = HxOverrides.indexOf(this.__children,child2,0);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
		}
	}
	,swapChildrenAt: function(index1,index2) {
		var swap = this.__children[index1];
		this.__children[index1] = this.__children[index2];
		this.__children[index2] = swap;
		swap = null;
	}
	,__broadcast: function(event,notifyChilden) {
		if(event.target == null) event.target = this;
		var result = openfl_display_InteractiveObject.prototype.__broadcast.call(this,event,notifyChilden);
		if(!event.__isCancelled && notifyChilden) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__broadcast(event,true);
				if(event.__isCancelled) return true;
			}
		}
		return result;
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) return;
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_scaleX() == 0 || child.get_scaleY() == 0) continue;
			child.__getBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) return;
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_scaleX() == 0 || child.get_scaleY() == 0 || child.__isMask) continue;
			child.__getRenderBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) return false;
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
		if(this.get_scrollRect() != null && !this.get_scrollRect().containsPoint(this.globalToLocal(new openfl_geom_Point(x,y)))) return false;
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i])) {
					if(stack != null) stack.push(hitObject);
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i])) {
							hitTest = true;
							if(interactive) break;
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,hitObject);
					return true;
				}
			}
		} else while(--i >= 0) this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i]);
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) return true;
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
		if(this.get_scrollRect() != null) renderSession.maskManager.pushRect(this.get_scrollRect(),this.__worldTransform);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairo(renderSession);
		}
		if(this.__removedChildren.length > 0) this.__removedChildren.splice(0,this.__removedChildren.length);
		if(this.__mask != null) renderSession.maskManager.popMask();
		if(this.get_scrollRect() != null) renderSession.maskManager.popRect();
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairoMask(renderSession);
		}
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		if(this.get_scrollRect() != null) renderSession.maskManager.pushRect(this.get_scrollRect(),this.__worldTransform);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCanvas(renderSession);
		}
		if(this.__removedChildren.length > 0) this.__removedChildren.splice(0,this.__removedChildren.length);
		if(this.__mask != null) renderSession.maskManager.popMask();
		if(this.get_scrollRect() != null) renderSession.maskManager.popRect();
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
	}
	,__renderDOM: function(renderSession) {
		openfl_display_InteractiveObject.prototype.__renderDOM.call(this,renderSession);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderDOM(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.length) {
			var orphan = _g11[_g2];
			++_g2;
			if(orphan.stage == null) orphan.__renderDOM(renderSession);
		}
		if(this.__removedChildren.length > 0) this.__removedChildren.splice(0,this.__removedChildren.length);
		if(this.__mask != null) renderSession.maskManager.popMask();
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.__cacheAsBitmap) {
			this.__cacheGL(renderSession);
			return;
		}
		if(this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
		if(this.__graphics != null) {
			if(this.__graphics.__hardware) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this,renderSession); else {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics,renderSession);
				openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession);
			}
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderGL(renderSession);
		}
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
		if(this.__scrollRect != null) renderSession.maskManager.popRect();
		if(this.__removedChildren.length > 0) this.__removedChildren.splice(0,this.__removedChildren.length);
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) this.__dispatchEvent(new openfl_events_Event(openfl_events_Event.REMOVED_FROM_STAGE,false,false));
			this.stage = stage;
			if(stage != null) this.__dispatchEvent(new openfl_events_Event(openfl_events_Event.ADDED_TO_STAGE,false,false));
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setStageReference(stage);
				}
			}
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(!this.__renderable && !this.__isMask) return;
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__update(transformOnly,true);
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
	this.loaderInfo = openfl_display_LoaderInfo.create(null);
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = ["openfl","display","Sprite"];
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
		if(this.stage != null) this.stage.__startDrag(this,lockCenter,bounds);
	}
	,stopDrag: function() {
		if(this.stage != null) this.stage.__stopDrag(this);
	}
	,__getCursor: function() {
		if(this.buttonMode && this.useHandCursor) return lime_ui_MouseCursor.POINTER; else return null;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled && this.hitArea.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				stack[stack.length - 1] = hitObject;
				return true;
			}
		} else {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) return false;
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
			if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject)) return interactiveOnly; else if((!interactiveOnly || this.mouseEnabled) && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getWorldTransform())) {
				if(stack != null) stack.push(hitObject);
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) return true; else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getWorldTransform())) return true;
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics();
			this.__graphics.__owner = this;
		}
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		return this.__tabEnabled || this.buttonMode;
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics"})
});
var Main = function() {
	this.uiPopupAddMuseumObjectMuseum = null;
	this.loopCounterMainInt = 0;
	this.collectionGlobalObject = new CollectionGlobal();
	var _g = this;
	openfl_display_Sprite.call(this);
	haxe_ui_toolkit_core_Toolkit.init();
	haxe_ui_toolkit_core_Toolkit.setTransitionForClass(haxe_ui_toolkit_containers_Accordion,"none");
	haxe_ui_toolkit_core_Toolkit.openFullscreen(function(_root) {
		var uiMainObject = haxe_ui_toolkit_core_Toolkit.processXmlResource("layout/UIMain.xml");
		_g.collectionGlobalObject.SetUIMainObjectVoid(uiMainObject);
		_root.addChild(uiMainObject);
		_g.uiPopupAddMuseumObjectMuseum = new UIPopupAddObjectMuseum(_g.collectionGlobalObject,_root);
		var uiMuseumAbsoluteObject = _root.findChild("UIMuseumAbsolute",haxe_ui_toolkit_containers_Absolute,true);
		_g.collectionGlobalObject.SetUIMuseumAbsoluteObjectVoid(uiMuseumAbsoluteObject);
	});
	CollectionTagGeneral.TagGeneralStructVoid(this.collectionGlobalObject);
	CollectionPremadeTag.PremadeTagStructVoid(this.collectionGlobalObject);
	CollectionPremade.PremadeFloorObjectVoid(this.collectionGlobalObject);
	CollectionPremade.PremadeRoomObjectVoid(this.collectionGlobalObject);
	CollectionPremade.PremadeExhibitionObjectVoid(this.collectionGlobalObject);
	CollectionPremade.PremadeVisitorObjectVoid(100,this.collectionGlobalObject);
	this.addEventListener(openfl_events_Event.ENTER_FRAME,$bind(this,this.Update));
};
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.__super__ = openfl_display_Sprite;
Main.prototype = $extend(openfl_display_Sprite.prototype,{
	Update: function(event) {
		this.UpdateSlowVoid();
		this.uiPopupAddMuseumObjectMuseum.UpdateVoid();
	}
	,UpdateSlowVoid: function() {
		var leastCommonMultipleFloat = CollectionFunction.GenerateLeastCommonMultipleFloat(this.collectionGlobalObject.GetExhibitionObjectArray().length,this.collectionGlobalObject.GetFloorObjectArray().length);
		leastCommonMultipleFloat = CollectionFunction.GenerateLeastCommonMultipleFloat(leastCommonMultipleFloat,this.collectionGlobalObject.GetRoomObjectArray().length);
		leastCommonMultipleFloat = CollectionFunction.GenerateLeastCommonMultipleFloat(leastCommonMultipleFloat,this.collectionGlobalObject.GetVisitorObjectArray().length);
		var leastCommonMultipleInt = Math.round(leastCommonMultipleFloat);
		if(this.loopCounterMainInt > leastCommonMultipleInt) this.loopCounterMainInt = 0;
		this.collectionGlobalObject.GetExhibitionObjectArray()[this.loopCounterMainInt % this.collectionGlobalObject.GetExhibitionObjectArray().length].UpdateVoid();
		this.collectionGlobalObject.GetFloorObjectArray()[this.loopCounterMainInt % this.collectionGlobalObject.GetFloorObjectArray().length].UpdateVoid();
		this.collectionGlobalObject.GetRoomObjectArray()[this.loopCounterMainInt % this.collectionGlobalObject.GetRoomObjectArray().length].UpdateVoid();
		this.collectionGlobalObject.GetVisitorObjectArray()[this.loopCounterMainInt % this.collectionGlobalObject.GetVisitorObjectArray().length].AIAutoExhibitionChangeVoid();
		this.loopCounterMainInt++;
	}
	,UpdateNormalVoid: function() {
		var leastCommonMultipleFloat = CollectionFunction.GenerateLeastCommonMultipleFloat(this.collectionGlobalObject.GetExhibitionObjectArray().length,this.collectionGlobalObject.GetFloorObjectArray().length);
		leastCommonMultipleFloat = CollectionFunction.GenerateLeastCommonMultipleFloat(leastCommonMultipleFloat,this.collectionGlobalObject.GetRoomObjectArray().length);
		var leastCommonMultipleInt = Math.round(leastCommonMultipleFloat);
		if(this.loopCounterMainInt > leastCommonMultipleInt) this.loopCounterMainInt = 0;
		this.collectionGlobalObject.GetExhibitionObjectArray()[this.loopCounterMainInt % this.collectionGlobalObject.GetExhibitionObjectArray().length].UpdateVoid();
		this.collectionGlobalObject.GetFloorObjectArray()[this.loopCounterMainInt % this.collectionGlobalObject.GetFloorObjectArray().length].UpdateVoid();
		this.collectionGlobalObject.GetRoomObjectArray()[this.loopCounterMainInt % this.collectionGlobalObject.GetRoomObjectArray().length].UpdateVoid();
		this.loopCounterMainInt++;
		var loopCounter1Int = 0;
		while(loopCounter1Int < this.collectionGlobalObject.GetVisitorObjectArray().length) {
			this.collectionGlobalObject.GetVisitorObjectArray()[loopCounter1Int].AIAutoExhibitionChangeVoid();
			loopCounter1Int++;
		}
	}
	,UpdateFastVoid: function() {
		var loopCounter1Int = 0;
		while(loopCounter1Int < this.collectionGlobalObject.GetFloorObjectArray().length) {
			this.collectionGlobalObject.GetFloorObjectArray()[loopCounter1Int].UpdateVoid();
			loopCounter1Int++;
		}
		loopCounter1Int = 0;
		while(loopCounter1Int < this.collectionGlobalObject.GetRoomObjectArray().length) {
			this.collectionGlobalObject.GetRoomObjectArray()[loopCounter1Int].UpdateVoid();
			loopCounter1Int++;
		}
		loopCounter1Int = 0;
		while(loopCounter1Int < this.collectionGlobalObject.GetExhibitionObjectArray().length) {
			this.collectionGlobalObject.GetExhibitionObjectArray()[loopCounter1Int].UpdateVoid();
			loopCounter1Int++;
		}
		loopCounter1Int = 0;
		while(loopCounter1Int < this.collectionGlobalObject.GetVisitorObjectArray().length) {
			this.collectionGlobalObject.GetVisitorObjectArray()[loopCounter1Int].AIAutoExhibitionChangeVoid();
			loopCounter1Int++;
		}
	}
	,__class__: Main
});
var DocumentClass = function() {
	openfl_Lib.current.addChild(this);
	Main.call(this);
	this.dispatchEvent(new openfl_events_Event(openfl_events_Event.ADDED_TO_STAGE,false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = Main;
DocumentClass.prototype = $extend(Main.prototype,{
	__class__: DocumentClass
});
var EnumMuseumType = $hxClasses["EnumMuseumType"] = { __ename__ : true, __constructs__ : ["EXH","FLR","ROM"] };
EnumMuseumType.EXH = ["EXH",0];
EnumMuseumType.EXH.toString = $estr;
EnumMuseumType.EXH.__enum__ = EnumMuseumType;
EnumMuseumType.FLR = ["FLR",1];
EnumMuseumType.FLR.toString = $estr;
EnumMuseumType.FLR.__enum__ = EnumMuseumType;
EnumMuseumType.ROM = ["ROM",2];
EnumMuseumType.ROM.toString = $estr;
EnumMuseumType.ROM.__enum__ = EnumMuseumType;
var EnumMuseumMode = $hxClasses["EnumMuseumMode"] = { __ename__ : true, __constructs__ : ["REQ_CH_PARENT","MRK_DEL"] };
EnumMuseumMode.REQ_CH_PARENT = ["REQ_CH_PARENT",0];
EnumMuseumMode.REQ_CH_PARENT.toString = $estr;
EnumMuseumMode.REQ_CH_PARENT.__enum__ = EnumMuseumMode;
EnumMuseumMode.MRK_DEL = ["MRK_DEL",1];
EnumMuseumMode.MRK_DEL.toString = $estr;
EnumMuseumMode.MRK_DEL.__enum__ = EnumMuseumMode;
var EnumTagFeelType = $hxClasses["EnumTagFeelType"] = { __ename__ : true, __constructs__ : ["NEGATIVE","NEUTRAL","POSITIVE"] };
EnumTagFeelType.NEGATIVE = ["NEGATIVE",0];
EnumTagFeelType.NEGATIVE.toString = $estr;
EnumTagFeelType.NEGATIVE.__enum__ = EnumTagFeelType;
EnumTagFeelType.NEUTRAL = ["NEUTRAL",1];
EnumTagFeelType.NEUTRAL.toString = $estr;
EnumTagFeelType.NEUTRAL.__enum__ = EnumTagFeelType;
EnumTagFeelType.POSITIVE = ["POSITIVE",2];
EnumTagFeelType.POSITIVE.toString = $estr;
EnumTagFeelType.POSITIVE.__enum__ = EnumTagFeelType;
var EnumTagType = $hxClasses["EnumTagType"] = { __ename__ : true, __constructs__ : ["ADJ","ADV","NOUN_ALIVE_ABSTRACT","NOUN_ALIVE_CONCRETE","NOUN_INANIMATE_HOLD_ABSTRACT","NOUN_INANIMATE_HOLD_CONCRETE","NOUN_INANIMATE_PLACE_ABSTRACT","NOUN_INANIMATE_PLACE_CONCRETE_NO_OWNER","NOUN_INANIMATE_PLACE_CONCRETE_OWNER","NOUN_INANIMATE_SEE_ABSTRACT","NOUN_INANIMATE_SEE_CONCRETE","NOUN_INANIMATE_TITLE","NOUN_INANIMATE_WEAR_ABSTRACT","NOUN_INANIMATE_WEAR_CONCRETE","VERB_INTRANSITIVE","VERB_TRANSITIVE"] };
EnumTagType.ADJ = ["ADJ",0];
EnumTagType.ADJ.toString = $estr;
EnumTagType.ADJ.__enum__ = EnumTagType;
EnumTagType.ADV = ["ADV",1];
EnumTagType.ADV.toString = $estr;
EnumTagType.ADV.__enum__ = EnumTagType;
EnumTagType.NOUN_ALIVE_ABSTRACT = ["NOUN_ALIVE_ABSTRACT",2];
EnumTagType.NOUN_ALIVE_ABSTRACT.toString = $estr;
EnumTagType.NOUN_ALIVE_ABSTRACT.__enum__ = EnumTagType;
EnumTagType.NOUN_ALIVE_CONCRETE = ["NOUN_ALIVE_CONCRETE",3];
EnumTagType.NOUN_ALIVE_CONCRETE.toString = $estr;
EnumTagType.NOUN_ALIVE_CONCRETE.__enum__ = EnumTagType;
EnumTagType.NOUN_INANIMATE_HOLD_ABSTRACT = ["NOUN_INANIMATE_HOLD_ABSTRACT",4];
EnumTagType.NOUN_INANIMATE_HOLD_ABSTRACT.toString = $estr;
EnumTagType.NOUN_INANIMATE_HOLD_ABSTRACT.__enum__ = EnumTagType;
EnumTagType.NOUN_INANIMATE_HOLD_CONCRETE = ["NOUN_INANIMATE_HOLD_CONCRETE",5];
EnumTagType.NOUN_INANIMATE_HOLD_CONCRETE.toString = $estr;
EnumTagType.NOUN_INANIMATE_HOLD_CONCRETE.__enum__ = EnumTagType;
EnumTagType.NOUN_INANIMATE_PLACE_ABSTRACT = ["NOUN_INANIMATE_PLACE_ABSTRACT",6];
EnumTagType.NOUN_INANIMATE_PLACE_ABSTRACT.toString = $estr;
EnumTagType.NOUN_INANIMATE_PLACE_ABSTRACT.__enum__ = EnumTagType;
EnumTagType.NOUN_INANIMATE_PLACE_CONCRETE_NO_OWNER = ["NOUN_INANIMATE_PLACE_CONCRETE_NO_OWNER",7];
EnumTagType.NOUN_INANIMATE_PLACE_CONCRETE_NO_OWNER.toString = $estr;
EnumTagType.NOUN_INANIMATE_PLACE_CONCRETE_NO_OWNER.__enum__ = EnumTagType;
EnumTagType.NOUN_INANIMATE_PLACE_CONCRETE_OWNER = ["NOUN_INANIMATE_PLACE_CONCRETE_OWNER",8];
EnumTagType.NOUN_INANIMATE_PLACE_CONCRETE_OWNER.toString = $estr;
EnumTagType.NOUN_INANIMATE_PLACE_CONCRETE_OWNER.__enum__ = EnumTagType;
EnumTagType.NOUN_INANIMATE_SEE_ABSTRACT = ["NOUN_INANIMATE_SEE_ABSTRACT",9];
EnumTagType.NOUN_INANIMATE_SEE_ABSTRACT.toString = $estr;
EnumTagType.NOUN_INANIMATE_SEE_ABSTRACT.__enum__ = EnumTagType;
EnumTagType.NOUN_INANIMATE_SEE_CONCRETE = ["NOUN_INANIMATE_SEE_CONCRETE",10];
EnumTagType.NOUN_INANIMATE_SEE_CONCRETE.toString = $estr;
EnumTagType.NOUN_INANIMATE_SEE_CONCRETE.__enum__ = EnumTagType;
EnumTagType.NOUN_INANIMATE_TITLE = ["NOUN_INANIMATE_TITLE",11];
EnumTagType.NOUN_INANIMATE_TITLE.toString = $estr;
EnumTagType.NOUN_INANIMATE_TITLE.__enum__ = EnumTagType;
EnumTagType.NOUN_INANIMATE_WEAR_ABSTRACT = ["NOUN_INANIMATE_WEAR_ABSTRACT",12];
EnumTagType.NOUN_INANIMATE_WEAR_ABSTRACT.toString = $estr;
EnumTagType.NOUN_INANIMATE_WEAR_ABSTRACT.__enum__ = EnumTagType;
EnumTagType.NOUN_INANIMATE_WEAR_CONCRETE = ["NOUN_INANIMATE_WEAR_CONCRETE",13];
EnumTagType.NOUN_INANIMATE_WEAR_CONCRETE.toString = $estr;
EnumTagType.NOUN_INANIMATE_WEAR_CONCRETE.__enum__ = EnumTagType;
EnumTagType.VERB_INTRANSITIVE = ["VERB_INTRANSITIVE",14];
EnumTagType.VERB_INTRANSITIVE.toString = $estr;
EnumTagType.VERB_INTRANSITIVE.__enum__ = EnumTagType;
EnumTagType.VERB_TRANSITIVE = ["VERB_TRANSITIVE",15];
EnumTagType.VERB_TRANSITIVE.toString = $estr;
EnumTagType.VERB_TRANSITIVE.__enum__ = EnumTagType;
var EnumTagTypeSub = $hxClasses["EnumTagTypeSub"] = { __ename__ : true, __constructs__ : ["ADJ","ADV","NOUN","NOUN_POS","NOUN_S","NOUN_S_POS","VERB_1","VERB_2","VERB_3","VERB_ING","VERB_S"] };
EnumTagTypeSub.ADJ = ["ADJ",0];
EnumTagTypeSub.ADJ.toString = $estr;
EnumTagTypeSub.ADJ.__enum__ = EnumTagTypeSub;
EnumTagTypeSub.ADV = ["ADV",1];
EnumTagTypeSub.ADV.toString = $estr;
EnumTagTypeSub.ADV.__enum__ = EnumTagTypeSub;
EnumTagTypeSub.NOUN = ["NOUN",2];
EnumTagTypeSub.NOUN.toString = $estr;
EnumTagTypeSub.NOUN.__enum__ = EnumTagTypeSub;
EnumTagTypeSub.NOUN_POS = ["NOUN_POS",3];
EnumTagTypeSub.NOUN_POS.toString = $estr;
EnumTagTypeSub.NOUN_POS.__enum__ = EnumTagTypeSub;
EnumTagTypeSub.NOUN_S = ["NOUN_S",4];
EnumTagTypeSub.NOUN_S.toString = $estr;
EnumTagTypeSub.NOUN_S.__enum__ = EnumTagTypeSub;
EnumTagTypeSub.NOUN_S_POS = ["NOUN_S_POS",5];
EnumTagTypeSub.NOUN_S_POS.toString = $estr;
EnumTagTypeSub.NOUN_S_POS.__enum__ = EnumTagTypeSub;
EnumTagTypeSub.VERB_1 = ["VERB_1",6];
EnumTagTypeSub.VERB_1.toString = $estr;
EnumTagTypeSub.VERB_1.__enum__ = EnumTagTypeSub;
EnumTagTypeSub.VERB_2 = ["VERB_2",7];
EnumTagTypeSub.VERB_2.toString = $estr;
EnumTagTypeSub.VERB_2.__enum__ = EnumTagTypeSub;
EnumTagTypeSub.VERB_3 = ["VERB_3",8];
EnumTagTypeSub.VERB_3.toString = $estr;
EnumTagTypeSub.VERB_3.__enum__ = EnumTagTypeSub;
EnumTagTypeSub.VERB_ING = ["VERB_ING",9];
EnumTagTypeSub.VERB_ING.toString = $estr;
EnumTagTypeSub.VERB_ING.__enum__ = EnumTagTypeSub;
EnumTagTypeSub.VERB_S = ["VERB_S",10];
EnumTagTypeSub.VERB_S.toString = $estr;
EnumTagTypeSub.VERB_S.__enum__ = EnumTagTypeSub;
var CollectionFunction = function() {
};
$hxClasses["CollectionFunction"] = CollectionFunction;
CollectionFunction.__name__ = ["CollectionFunction"];
CollectionFunction.ClearArray = function(_dynamicArray) {
	_dynamicArray.length = 0;
};
CollectionFunction.FindMuseumObject = function(_collectionGlobalObject,_enumMuseumType,_nameAlt) {
	var tempObjectArray = [];
	if(_enumMuseumType == EnumMuseumType.EXH) tempObjectArray = _collectionGlobalObject.GetExhibitionObjectArray(); else if(_enumMuseumType == EnumMuseumType.FLR) tempObjectArray = _collectionGlobalObject.GetFloorObjectArray(); else if(_enumMuseumType == EnumMuseumType.ROM) tempObjectArray = _collectionGlobalObject.GetRoomObjectArray();
	var loopCounter1Int = 0;
	while(loopCounter1Int < tempObjectArray.length) {
		if(_nameAlt == tempObjectArray[loopCounter1Int].GetNameStruct().nameAltString) {
			return tempObjectArray[loopCounter1Int];
			break;
		}
		loopCounter1Int++;
	}
	return null;
};
CollectionFunction.FindTagObject = function(_collectionGlobalObject,_nameString) {
	var loopCounter1Int = 0;
	while(loopCounter1Int < _collectionGlobalObject.GetTagObjectArray().length) {
		if(_nameString == _collectionGlobalObject.GetTagObjectArray()[loopCounter1Int].GetNameString()) {
			return _collectionGlobalObject.GetTagObjectArray()[loopCounter1Int];
			break;
		}
		loopCounter1Int++;
	}
	return null;
};
CollectionFunction.IsExistInArrayBool = function(_dynamicArray,_dynamicElement) {
	var loopCounter1Int = 0;
	while(loopCounter1Int < _dynamicArray.length) {
		if(_dynamicArray[loopCounter1Int] == _dynamicElement) return true;
		loopCounter1Int++;
	}
	return false;
};
CollectionFunction.PickRandomFromArrayT = function(_tArray) {
	var randomInt = Math.round(Math.random() * (_tArray.length - 1));
	var elementT = _tArray[randomInt];
	return elementT;
};
CollectionFunction.PickRandomTagObjectArray = function(_collectionGlobalObject) {
	var tempTagObjectArray = [];
	var chanceFloat = 1.0;
	while(chanceFloat > Math.random()) {
		var randomIndexInt = Math.round(Math.random() * (_collectionGlobalObject.GetTagObjectArray().length - 1));
		while((function($this) {
			var $r;
			var x = _collectionGlobalObject.GetTagObjectArray()[randomIndexInt];
			$r = HxOverrides.indexOf(tempTagObjectArray,x,0);
			return $r;
		}(this)) > -1) randomIndexInt = Math.round(Math.random() * (_collectionGlobalObject.GetTagObjectArray().length - 1));
		tempTagObjectArray.push(_collectionGlobalObject.GetTagObjectArray()[randomIndexInt]);
		chanceFloat -= 0.05;
	}
	return tempTagObjectArray;
};
CollectionFunction.GenerateGreatestCommonDivisorFloat = function(_number1Float,_number2Float) {
	if(_number2Float == 0) return _number1Float; else return CollectionFunction.GenerateGreatestCommonDivisorFloat(_number2Float,_number1Float % _number2Float);
};
CollectionFunction.GenerateLeastCommonMultipleFloat = function(_number1Float,_number2Float) {
	return _number1Float * _number2Float / CollectionFunction.GenerateGreatestCommonDivisorFloat(_number1Float,_number2Float);
};
CollectionFunction.prototype = {
	__class__: CollectionFunction
};
var CollectionGlobal = function() {
	this.visitorObjectArray = [];
	this.uiMuseumAbsoluteObject = null;
	this.uiMainObject = null;
	this.tagObjectArray = [];
	this.tagGeneralObjectArray = [];
	this.selectedVisitorObject = null;
	this.selectedTagObject = null;
	this.selectedMuseumObject = null;
	this.roomObjectArray = [];
	this.museumUIOffsetInt = 5;
	this.indexGlobalVisitorInt = 0;
	this.floorObjectArray = [];
	this.exhibitionObjectArray = [];
	this.exhibitionFullThresholdInt = 0;
	this.archiveExhibitionObject = null;
	this.archiveExhibitionObject = new ObjectMuseum(this,"EXH_ARC","Exhibition Archive","XXX_XXX",[],EnumMuseumType.EXH);
};
$hxClasses["CollectionGlobal"] = CollectionGlobal;
CollectionGlobal.__name__ = ["CollectionGlobal"];
CollectionGlobal.prototype = {
	DetermineExhibitionFullThresholdVoid: function() {
		if(this.exhibitionObjectArray.length >= this.visitorObjectArray.length) this.exhibitionFullThresholdInt = Math.ceil(this.exhibitionObjectArray.length / this.visitorObjectArray.length); else if(this.exhibitionObjectArray.length < this.visitorObjectArray.length) this.exhibitionFullThresholdInt = Math.ceil(this.visitorObjectArray.length / this.exhibitionObjectArray.length);
	}
	,GetUIMuseumAbsoluteObject: function() {
		return this.uiMuseumAbsoluteObject;
	}
	,GetArchiveExhibitionObject: function() {
		return this.archiveExhibitionObject;
	}
	,GetExhibitionFullThresholdInt: function() {
		return this.exhibitionFullThresholdInt;
	}
	,GetExhibitionObjectArray: function() {
		return this.exhibitionObjectArray;
	}
	,GetFloorObjectArray: function() {
		return this.floorObjectArray;
	}
	,GetMuseumUIOffsetInt: function() {
		return this.museumUIOffsetInt;
	}
	,GetRoomObjectArray: function() {
		return this.roomObjectArray;
	}
	,GetSelectedMuseumObject: function() {
		return this.selectedMuseumObject;
	}
	,GetSelectedTagObject: function() {
		return this.selectedTagObject;
	}
	,GetSelectedVisitorObject: function() {
		return this.selectedVisitorObject;
	}
	,GetTagGeneralObjectArray: function() {
		return this.tagGeneralObjectArray;
	}
	,GetTagObjectArray: function() {
		return this.tagObjectArray;
	}
	,GetUIMainObject: function() {
		return this.uiMainObject;
	}
	,GetVisitorObjectArray: function() {
		return this.visitorObjectArray;
	}
	,PutIndexGlobalVisitorInt: function() {
		var tempIndexGlobalVisitorInt = this.indexGlobalVisitorInt;
		this.indexGlobalVisitorInt++;
		return tempIndexGlobalVisitorInt;
	}
	,SetUIMuseumAbsoluteObjectVoid: function(_absoluteObject) {
		this.uiMuseumAbsoluteObject = _absoluteObject;
	}
	,SetUIMainObjectVoid: function(_iDisplayObject) {
		this.uiMainObject = _iDisplayObject;
	}
	,SetExhibitionFullThresholdInt: function(_exhibitionFullThresholdInt) {
		this.exhibitionFullThresholdInt = _exhibitionFullThresholdInt;
	}
	,SetExhibitionObjectArrayVoid: function(_exhibitionObjectArray) {
		this.exhibitionObjectArray = _exhibitionObjectArray;
	}
	,SetFloorObjectArrayVoid: function(_floorObjectArray) {
		this.floorObjectArray = _floorObjectArray;
	}
	,SetRoomObjectArrayVoid: function(_roomObjectArray) {
		this.roomObjectArray = _roomObjectArray;
	}
	,SetSelectedMuseumObjectVoid: function(_selectedMuseumObject) {
		this.selectedMuseumObject = _selectedMuseumObject;
	}
	,SetSelectedTagObjectVoid: function(_selectedTagObject) {
		this.selectedTagObject = _selectedTagObject;
	}
	,SetSelectedVisitorObjectVoid: function(_selectedVisitorObject) {
		this.selectedVisitorObject = _selectedVisitorObject;
	}
	,SetTagObjectArrayVoid: function(_tagObjectArray) {
		this.tagObjectArray = _tagObjectArray;
	}
	,SetVisitorObjectArrayVoid: function(_visitorObjectArray) {
		this.visitorObjectArray = _visitorObjectArray;
	}
	,__class__: CollectionGlobal
};
var CollectionPremade = function() {
};
$hxClasses["CollectionPremade"] = CollectionPremade;
CollectionPremade.__name__ = ["CollectionPremade"];
CollectionPremade.PremadeExhibitionObjectVoid = function(_collectionGlobalObject) {
	new ObjectMuseum(_collectionGlobalObject,"EXH_001","First Exhibition","ROM_001",CollectionFunction.PickRandomTagObjectArray(_collectionGlobalObject),EnumMuseumType.EXH);
	new ObjectMuseum(_collectionGlobalObject,"EXH_002","Second Exhibition","ROM_001",CollectionFunction.PickRandomTagObjectArray(_collectionGlobalObject),EnumMuseumType.EXH);
	new ObjectMuseum(_collectionGlobalObject,"EXH_003","Third Exhibition","ROM_002",CollectionFunction.PickRandomTagObjectArray(_collectionGlobalObject),EnumMuseumType.EXH);
	new ObjectMuseum(_collectionGlobalObject,"EXH_004","Fourth Exhibition","ROM_002",CollectionFunction.PickRandomTagObjectArray(_collectionGlobalObject),EnumMuseumType.EXH);
	new ObjectMuseum(_collectionGlobalObject,"EXH_005","Fifth Exhibition","ROM_003",CollectionFunction.PickRandomTagObjectArray(_collectionGlobalObject),EnumMuseumType.EXH);
	new ObjectMuseum(_collectionGlobalObject,"EXH_006","Sixth Exhibition","ROM_003",CollectionFunction.PickRandomTagObjectArray(_collectionGlobalObject),EnumMuseumType.EXH);
	new ObjectMuseum(_collectionGlobalObject,"EXH_007","Seventh Exhibition","ROM_004",CollectionFunction.PickRandomTagObjectArray(_collectionGlobalObject),EnumMuseumType.EXH);
	new ObjectMuseum(_collectionGlobalObject,"EXH_008","Eighth Exhibition","ROM_004",CollectionFunction.PickRandomTagObjectArray(_collectionGlobalObject),EnumMuseumType.EXH);
	new ObjectMuseum(_collectionGlobalObject,"EXH_009","Ninth Exhibition","ROM_005",CollectionFunction.PickRandomTagObjectArray(_collectionGlobalObject),EnumMuseumType.EXH);
	new ObjectMuseum(_collectionGlobalObject,"EXH_010","Tenth Exhibition","ROM_005",CollectionFunction.PickRandomTagObjectArray(_collectionGlobalObject),EnumMuseumType.EXH);
	new ObjectMuseum(_collectionGlobalObject,"EXH_011","Eleventh Exhibition","ROM_006",CollectionFunction.PickRandomTagObjectArray(_collectionGlobalObject),EnumMuseumType.EXH);
	new ObjectMuseum(_collectionGlobalObject,"EXH_012","Twelveth Exhibition","ROM_006",CollectionFunction.PickRandomTagObjectArray(_collectionGlobalObject),EnumMuseumType.EXH);
};
CollectionPremade.PremadeFloorObjectVoid = function(_collectionGlobalObject) {
	new ObjectMuseum(_collectionGlobalObject,"FLR_001","First Floor","XXX_XXX",CollectionFunction.PickRandomTagObjectArray(_collectionGlobalObject),EnumMuseumType.FLR);
	new ObjectMuseum(_collectionGlobalObject,"FLR_002","Second Floor","XXX_XXX",CollectionFunction.PickRandomTagObjectArray(_collectionGlobalObject),EnumMuseumType.FLR);
	new ObjectMuseum(_collectionGlobalObject,"FLR_003","Third Floor","XXX_XXX",CollectionFunction.PickRandomTagObjectArray(_collectionGlobalObject),EnumMuseumType.FLR);
};
CollectionPremade.PremadeRoomObjectVoid = function(_collectionGlobalObject) {
	new ObjectMuseum(_collectionGlobalObject,"ROM_001","First Room","FLR_001",CollectionFunction.PickRandomTagObjectArray(_collectionGlobalObject),EnumMuseumType.ROM);
	new ObjectMuseum(_collectionGlobalObject,"ROM_002","Second Room","FLR_001",CollectionFunction.PickRandomTagObjectArray(_collectionGlobalObject),EnumMuseumType.ROM);
	new ObjectMuseum(_collectionGlobalObject,"ROM_003","Third Room","FLR_002",CollectionFunction.PickRandomTagObjectArray(_collectionGlobalObject),EnumMuseumType.ROM);
	new ObjectMuseum(_collectionGlobalObject,"ROM_004","Fourth Room","FLR_002",CollectionFunction.PickRandomTagObjectArray(_collectionGlobalObject),EnumMuseumType.ROM);
	new ObjectMuseum(_collectionGlobalObject,"ROM_005","Fifth Room","FLR_003",CollectionFunction.PickRandomTagObjectArray(_collectionGlobalObject),EnumMuseumType.ROM);
	new ObjectMuseum(_collectionGlobalObject,"ROM_006","Sixth Room","FLR_003",CollectionFunction.PickRandomTagObjectArray(_collectionGlobalObject),EnumMuseumType.ROM);
};
CollectionPremade.PremadeVisitorObjectVoid = function(_amountInt,_collectionGlobalObject) {
	var loopCounter1Int = 0;
	while(loopCounter1Int < _amountInt) {
		var visitorObject = new ObjectVisitor(_collectionGlobalObject,CollectionFunction.PickRandomFromArrayT(_collectionGlobalObject.GetExhibitionObjectArray()),_collectionGlobalObject.PutIndexGlobalVisitorInt(),"Visitor " + loopCounter1Int);
		loopCounter1Int++;
	}
};
CollectionPremade.prototype = {
	__class__: CollectionPremade
};
var CollectionPremadeTag = function() {
};
$hxClasses["CollectionPremadeTag"] = CollectionPremadeTag;
CollectionPremadeTag.__name__ = ["CollectionPremadeTag"];
CollectionPremadeTag.PremadeTagStructVoid = function(_collectionGlobalObject) {
	CollectionPremadeTag.PremadeTagStructAdjVoid(_collectionGlobalObject);
	CollectionPremadeTag.PremadeTagStructAdvVoid(_collectionGlobalObject);
	CollectionPremadeTag.PremadeTagStructNounAliveAbstractVoid(_collectionGlobalObject);
	CollectionPremadeTag.PremadeTagStructNounAliveConcreteVoid(_collectionGlobalObject);
	CollectionPremadeTag.PremadeTagStructNounInanimateHoldAbstractVoid(_collectionGlobalObject);
	CollectionPremadeTag.PremadeTagStructNounInanimateHoldConcreteVoid(_collectionGlobalObject);
	CollectionPremadeTag.PremadeTagStructNounInanimatePlaceAbstractVoid(_collectionGlobalObject);
	CollectionPremadeTag.PremadeTagStructNounInanimatePlaceConcreteNoOwnerVoid(_collectionGlobalObject);
	CollectionPremadeTag.PremadeTagStructNounInanimatePlaceConcreteOwnerVoid(_collectionGlobalObject);
	CollectionPremadeTag.PremadeTagStructNounInanimateSeeAbstractVoid(_collectionGlobalObject);
	CollectionPremadeTag.PremadeTagStructNounInanimateSeeConcreteVoid(_collectionGlobalObject);
	CollectionPremadeTag.PremadeTagStructNounInanimateTitleAbstractVoid(_collectionGlobalObject);
	CollectionPremadeTag.PremadeTagStructNounInanimateWearAbstractVoid(_collectionGlobalObject);
	CollectionPremadeTag.PremadeTagStructNounInanimateWearConcreteVoid(_collectionGlobalObject);
	CollectionPremadeTag.PremadeTagStructVerbVoidIntransitiveVoid(_collectionGlobalObject);
	CollectionPremadeTag.PremadeTagStructVerbVoidTransitiveVoid(_collectionGlobalObject);
};
CollectionPremadeTag.PremadeTagStructAdjVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEGATIVE,false,"Awful",EnumTagType.ADJ).SetAdjectiveStringObject("awful");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEGATIVE,false,"Bad",EnumTagType.ADJ).SetAdjectiveStringObject("bad");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.POSITIVE,false,"Excellent",EnumTagType.ADJ).SetAdjectiveStringObject("excellent");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.POSITIVE,false,"Good",EnumTagType.ADJ).SetAdjectiveStringObject("good");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Soft",EnumTagType.ADJ).SetAdjectiveStringObject("soft");
};
CollectionPremadeTag.PremadeTagStructAdvVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEGATIVE,false,"Desperate",EnumTagType.ADV).SetAdverbStringObject("desperately");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEGATIVE,false,"Slow",EnumTagType.ADV).SetAdverbStringObject("bad");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.POSITIVE,false,"Perfect",EnumTagType.ADV).SetAdverbStringObject("excellent");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.POSITIVE,false,"Quick",EnumTagType.ADV).SetAdverbStringObject("good");
};
CollectionPremadeTag.PremadeTagStructNounAliveAbstractVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEGATIVE,false,"Assasin",EnumTagType.NOUN_ALIVE_ABSTRACT).SetNounStringObject("assasin").SetNounPosStringObject("assasin's").SetNounSStringObject("assasins").SetNounSPosStringObject("assasins'");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEGATIVE,false,"Boy",EnumTagType.NOUN_ALIVE_ABSTRACT).SetNounStringObject("boy").SetNounPosStringObject("boy's").SetNounSStringObject("boys").SetNounSPosStringObject("boys'");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Dragon",EnumTagType.NOUN_ALIVE_ABSTRACT).SetNounStringObject("dragon").SetNounPosStringObject("dragon's").SetNounSStringObject("dragons").SetNounSPosStringObject("dragons'");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Iraqi",EnumTagType.NOUN_ALIVE_ABSTRACT).SetNounStringObject("iraqi").SetNounPosStringObject("iraqi's").SetNounSStringObject("iraqis").SetNounSPosStringObject("iraqis'");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Italian",EnumTagType.NOUN_ALIVE_ABSTRACT).SetNounStringObject("italian").SetNounPosStringObject("italian's").SetNounSStringObject("italians").SetNounSPosStringObject("italians'");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Painter",EnumTagType.NOUN_ALIVE_ABSTRACT).SetNounStringObject("painter").SetNounPosStringObject("painter's").SetNounSStringObject("painters").SetNounSPosStringObject("painters'");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Romanian",EnumTagType.NOUN_ALIVE_ABSTRACT).SetNounStringObject("romanian").SetNounPosStringObject("romanian's").SetNounSStringObject("romanians").SetNounSPosStringObject("romanians'");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Russian",EnumTagType.NOUN_ALIVE_ABSTRACT).SetNounStringObject("russian").SetNounPosStringObject("russian's").SetNounSStringObject("russians").SetNounSPosStringObject("russians'");
};
CollectionPremadeTag.PremadeTagStructNounAliveConcreteVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Andy",EnumTagType.NOUN_ALIVE_CONCRETE).SetNounStringObject("Andy").SetNounPosStringObject("Andy's");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Bodhisattva",EnumTagType.NOUN_ALIVE_CONCRETE).SetNounStringObject("Bodhisattva").SetNounPosStringObject("Bodhisattva's");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Buddha",EnumTagType.NOUN_ALIVE_CONCRETE).SetNounStringObject("Buddha").SetNounPosStringObject("Buddha's");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Dimitri",EnumTagType.NOUN_ALIVE_CONCRETE).SetNounStringObject("Dimitri").SetNounPosStringObject("Dimitri's");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Julius Caesar",EnumTagType.NOUN_ALIVE_CONCRETE).SetNounStringObject("Julius Caesar").SetNounPosStringObject("Julius Caesar's");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Maria",EnumTagType.NOUN_ALIVE_CONCRETE).SetNounStringObject("Maria").SetNounPosStringObject("Maria's");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Medusa",EnumTagType.NOUN_ALIVE_CONCRETE).SetNounStringObject("Medusa").SetNounPosStringObject("Medusa's");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Mikael",EnumTagType.NOUN_ALIVE_CONCRETE).SetNounStringObject("Mikael").SetNounPosStringObject("Mikael's");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Napoleon",EnumTagType.NOUN_ALIVE_CONCRETE).SetNounStringObject("Napoleon").SetNounPosStringObject("Napoleon's");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Ramses",EnumTagType.NOUN_ALIVE_CONCRETE).SetNounStringObject("Ramses").SetNounPosStringObject("Ramses'");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Sphinx",EnumTagType.NOUN_ALIVE_CONCRETE).SetNounStringObject("Sphinx").SetNounPosStringObject("Sphinx's");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Washington",EnumTagType.NOUN_ALIVE_CONCRETE).SetNounStringObject("Washington").SetNounPosStringObject("Washington's");
};
CollectionPremadeTag.PremadeTagStructNounInanimateHoldAbstractVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEGATIVE,false,"Grudge",EnumTagType.NOUN_INANIMATE_HOLD_ABSTRACT).SetNounStringObject("grudge").SetNounSStringObject("grudges");
};
CollectionPremadeTag.PremadeTagStructNounInanimateHoldConcreteVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Bat",EnumTagType.NOUN_INANIMATE_HOLD_CONCRETE).SetNounStringObject("bat").SetNounSStringObject("bats");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Gun",EnumTagType.NOUN_INANIMATE_HOLD_CONCRETE).SetNounStringObject("gun").SetNounSStringObject("guns");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Hand",EnumTagType.NOUN_INANIMATE_HOLD_CONCRETE).SetNounStringObject("hand").SetNounSStringObject("hands");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Pencil",EnumTagType.NOUN_INANIMATE_HOLD_CONCRETE).SetNounStringObject("pencil").SetNounSStringObject("pencils");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Sword",EnumTagType.NOUN_INANIMATE_HOLD_CONCRETE).SetNounStringObject("sword").SetNounSStringObject("swords");
};
CollectionPremadeTag.PremadeTagStructNounInanimatePlaceAbstractVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Mind",EnumTagType.NOUN_INANIMATE_PLACE_ABSTRACT).SetNounStringObject("mind").SetNounSStringObject("minds");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Intuition",EnumTagType.NOUN_INANIMATE_PLACE_ABSTRACT).SetNounStringObject("intuition").SetNounSStringObject("intuitions");
};
CollectionPremadeTag.PremadeTagStructNounInanimatePlaceConcreteNoOwnerVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"India",EnumTagType.NOUN_INANIMATE_PLACE_CONCRETE_NO_OWNER).SetNounStringObject("India");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Italia",EnumTagType.NOUN_INANIMATE_PLACE_CONCRETE_NO_OWNER).SetNounStringObject("Italia");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Netherlands",EnumTagType.NOUN_INANIMATE_PLACE_CONCRETE_NO_OWNER).SetNounStringObject("Netherlands");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"RussiaRussia",EnumTagType.NOUN_INANIMATE_PLACE_CONCRETE_NO_OWNER).SetNounStringObject("Russia");
};
CollectionPremadeTag.PremadeTagStructNounInanimatePlaceConcreteOwnerVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Country",EnumTagType.NOUN_INANIMATE_PLACE_CONCRETE_OWNER).SetNounStringObject("country").SetNounSStringObject("countries");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Harbor",EnumTagType.NOUN_INANIMATE_PLACE_CONCRETE_OWNER).SetNounStringObject("harbor").SetNounSStringObject("harbors");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"House",EnumTagType.NOUN_INANIMATE_PLACE_CONCRETE_OWNER).SetNounStringObject("house").SetNounSStringObject("houses");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"School",EnumTagType.NOUN_INANIMATE_PLACE_CONCRETE_OWNER).SetNounStringObject("school").SetNounSStringObject("schools");
};
CollectionPremadeTag.PremadeTagStructNounInanimateSeeAbstractVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Vision",EnumTagType.NOUN_INANIMATE_SEE_ABSTRACT).SetNounStringObject("vision");
};
CollectionPremadeTag.PremadeTagStructNounInanimateSeeConcreteVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Lightning",EnumTagType.NOUN_INANIMATE_SEE_CONCRETE).SetNounStringObject("lightning");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Moonlight",EnumTagType.NOUN_INANIMATE_SEE_CONCRETE).SetNounStringObject("moonlight");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Rainbow",EnumTagType.NOUN_INANIMATE_SEE_CONCRETE).SetNounStringObject("rainbow");
};
CollectionPremadeTag.PremadeTagStructNounInanimateTitleAbstractVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Commendation",EnumTagType.NOUN_INANIMATE_TITLE).SetNounStringObject("commendation").SetNounSStringObject("commendations");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Job",EnumTagType.NOUN_INANIMATE_TITLE).SetNounStringObject("job").SetNounSStringObject("jobs");
};
CollectionPremadeTag.PremadeTagStructNounInanimateWearAbstractVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.POSITIVE,false,"Pride",EnumTagType.NOUN_INANIMATE_WEAR_ABSTRACT).SetNounStringObject("pride");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEGATIVE,false,"Shame",EnumTagType.NOUN_INANIMATE_WEAR_ABSTRACT).SetNounStringObject("shame");
};
CollectionPremadeTag.PremadeTagStructNounInanimateWearConcreteVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Crown",EnumTagType.NOUN_INANIMATE_WEAR_CONCRETE).SetNounStringObject("crown").SetNounSStringObject("crowns");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Shirt",EnumTagType.NOUN_INANIMATE_WEAR_CONCRETE).SetNounStringObject("shirt").SetNounSStringObject("shirts");
};
CollectionPremadeTag.PremadeTagStructVerbVoidIntransitiveVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEGATIVE,false,"Die",EnumTagType.VERB_INTRANSITIVE).SetVerb1StringObject("die").SetVerb2StringObject("died").SetVerb3StringObject("died").SetVerbIngStringObject("dying").SetVerbSStringObject("dies");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Jump",EnumTagType.VERB_INTRANSITIVE).SetVerb1StringObject("jump").SetVerb2StringObject("jumped").SetVerb3StringObject("jumped").SetVerbIngStringObject("jumping").SetVerbSStringObject("jumps");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Run",EnumTagType.VERB_INTRANSITIVE).SetVerb1StringObject("run").SetVerb2StringObject("ran").SetVerb3StringObject("ran").SetVerbIngStringObject("running").SetVerbSStringObject("runs");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Sing",EnumTagType.VERB_INTRANSITIVE).SetVerb1StringObject("sing").SetVerb2StringObject("sang").SetVerb3StringObject("sung").SetVerbIngStringObject("singing").SetVerbSStringObject("sings");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Sleep",EnumTagType.VERB_INTRANSITIVE).SetVerb1StringObject("sleep").SetVerb2StringObject("slept").SetVerb3StringObject("slept").SetVerbIngStringObject("sleeping").SetVerbSStringObject("sleeps");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Work",EnumTagType.VERB_INTRANSITIVE).SetVerb1StringObject("work").SetVerb2StringObject("worked").SetVerb3StringObject("worked").SetVerbIngStringObject("working").SetVerbSStringObject("works");
};
CollectionPremadeTag.PremadeTagStructVerbVoidTransitiveVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Buy",EnumTagType.VERB_TRANSITIVE).SetVerb1StringObject("buy").SetVerb2StringObject("bought").SetVerb3StringObject("bought").SetVerbIngStringObject("buying").SetVerbSStringObject("buys");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Call",EnumTagType.VERB_TRANSITIVE).SetVerb1StringObject("call").SetVerb2StringObject("called").SetVerb3StringObject("called").SetVerbIngStringObject("calling").SetVerbSStringObject("calls");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Desire",EnumTagType.VERB_TRANSITIVE).SetVerb1StringObject("desire").SetVerb2StringObject("desired").SetVerb3StringObject("desired").SetVerbIngStringObject("desiring").SetVerbSStringObject("desires");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Drink",EnumTagType.VERB_TRANSITIVE).SetVerb1StringObject("drink").SetVerb2StringObject("drunk").SetVerb3StringObject("drank").SetVerbIngStringObject("drinking").SetVerbSStringObject("drinks");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Drive",EnumTagType.VERB_TRANSITIVE).SetVerb1StringObject("drive").SetVerb2StringObject("drove").SetVerb3StringObject("driven").SetVerbIngStringObject("driving").SetVerbSStringObject("drives");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Eat",EnumTagType.VERB_TRANSITIVE).SetVerb1StringObject("eat").SetVerb2StringObject("ate").SetVerb3StringObject("eaten").SetVerbIngStringObject("eating").SetVerbSStringObject("eats");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Fight",EnumTagType.VERB_TRANSITIVE).SetVerb1StringObject("fight").SetVerb2StringObject("fought").SetVerb3StringObject("fought").SetVerbIngStringObject("fighting").SetVerbSStringObject("fights");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Get",EnumTagType.VERB_TRANSITIVE).SetVerb1StringObject("get").SetVerb2StringObject("got").SetVerb3StringObject("gotten").SetVerbIngStringObject("getting").SetVerbSStringObject("gets");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,false,"Grab",EnumTagType.VERB_TRANSITIVE).SetVerb1StringObject("grab").SetVerb2StringObject("grabed").SetVerb3StringObject("grabed").SetVerbIngStringObject("grabbing").SetVerbSStringObject("grabs");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEGATIVE,false,"Kill",EnumTagType.VERB_TRANSITIVE).SetVerb1StringObject("kill").SetVerb2StringObject("killed").SetVerb3StringObject("killed").SetVerbIngStringObject("killing").SetVerbSStringObject("kills");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.POSITIVE,false,"Love",EnumTagType.VERB_TRANSITIVE).SetVerb1StringObject("love").SetVerb2StringObject("loved").SetVerb3StringObject("loved").SetVerbIngStringObject("loving").SetVerbSStringObject("loves");
};
CollectionPremadeTag.prototype = {
	__class__: CollectionPremadeTag
};
var CollectionTagGeneral = function() {
};
$hxClasses["CollectionTagGeneral"] = CollectionTagGeneral;
CollectionTagGeneral.__name__ = ["CollectionTagGeneral"];
CollectionTagGeneral.TagGeneralStructVoid = function(_collectionGlobalObject) {
	CollectionTagGeneral.TagGeneralStructAdjVoid(_collectionGlobalObject);
	CollectionTagGeneral.TagGeneralStructAdvVoid(_collectionGlobalObject);
	CollectionTagGeneral.TagGeneralStructNounAliveAbstractVoid(_collectionGlobalObject);
	CollectionTagGeneral.TagGeneralStructNounAliveConcreteVoid(_collectionGlobalObject);
	CollectionTagGeneral.TagGeneralStructNounInanimateHoldAbstractVoid(_collectionGlobalObject);
	CollectionTagGeneral.TagGeneralStructNounInanimateHoldConcreteVoid(_collectionGlobalObject);
	CollectionTagGeneral.TagGeneralStructNounInanimatePlaceAbstractVoid(_collectionGlobalObject);
	CollectionTagGeneral.TagGeneralStructNounInanimatePlaceConcreteNoOwnerVoid(_collectionGlobalObject);
	CollectionTagGeneral.TagGeneralStructNounInanimatePlaceConcreteOwnerVoid(_collectionGlobalObject);
	CollectionTagGeneral.TagGeneralStructNounInanimateSeeAbstractVoid(_collectionGlobalObject);
	CollectionTagGeneral.TagGeneralStructNounInanimateSeeConcreteVoid(_collectionGlobalObject);
	CollectionTagGeneral.TagGeneralStructNounInanimateTitleAbstractVoid(_collectionGlobalObject);
	CollectionTagGeneral.TagGeneralStructNounInanimateWearAbstractVoid(_collectionGlobalObject);
	CollectionTagGeneral.TagGeneralStructNounInanimateWearConcreteVoid(_collectionGlobalObject);
	CollectionTagGeneral.TagGeneralStructVerbVoidIntransitiveVoid(_collectionGlobalObject);
	CollectionTagGeneral.TagGeneralStructVerbVoidTransitiveVoid(_collectionGlobalObject);
};
CollectionTagGeneral.TagGeneralStructAdjVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEGATIVE,true,"Awful",EnumTagType.ADJ).SetAdjectiveStringObject("awful");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEGATIVE,true,"Bad",EnumTagType.ADJ).SetAdjectiveStringObject("bad");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.POSITIVE,true,"Excellent",EnumTagType.ADJ).SetAdjectiveStringObject("excellent");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.POSITIVE,true,"Good",EnumTagType.ADJ).SetAdjectiveStringObject("good");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Soft",EnumTagType.ADJ).SetAdjectiveStringObject("soft");
};
CollectionTagGeneral.TagGeneralStructAdvVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEGATIVE,true,"Desperate",EnumTagType.ADV).SetAdverbStringObject("desperately");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEGATIVE,true,"Slow",EnumTagType.ADV).SetAdverbStringObject("bad");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.POSITIVE,true,"Perfect",EnumTagType.ADV).SetAdverbStringObject("excellent");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.POSITIVE,true,"Quick",EnumTagType.ADV).SetAdverbStringObject("good");
};
CollectionTagGeneral.TagGeneralStructNounAliveAbstractVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEGATIVE,true,"Assasin",EnumTagType.NOUN_ALIVE_ABSTRACT).SetNounStringObject("assasin").SetNounPosStringObject("assasin's").SetNounSStringObject("assasins").SetNounSPosStringObject("assasins'");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEGATIVE,true,"Boy",EnumTagType.NOUN_ALIVE_ABSTRACT).SetNounStringObject("boy").SetNounPosStringObject("boy's").SetNounSStringObject("boys").SetNounSPosStringObject("boys'");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Dragon",EnumTagType.NOUN_ALIVE_ABSTRACT).SetNounStringObject("dragon").SetNounPosStringObject("dragon's").SetNounSStringObject("dragons").SetNounSPosStringObject("dragons'");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Iraqi",EnumTagType.NOUN_ALIVE_ABSTRACT).SetNounStringObject("iraqi").SetNounPosStringObject("iraqi's").SetNounSStringObject("iraqis").SetNounSPosStringObject("iraqis'");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Italian",EnumTagType.NOUN_ALIVE_ABSTRACT).SetNounStringObject("italian").SetNounPosStringObject("italian's").SetNounSStringObject("italians").SetNounSPosStringObject("italians'");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Painter",EnumTagType.NOUN_ALIVE_ABSTRACT).SetNounStringObject("painter").SetNounPosStringObject("painter's").SetNounSStringObject("painters").SetNounSPosStringObject("painters'");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Romanian",EnumTagType.NOUN_ALIVE_ABSTRACT).SetNounStringObject("romanian").SetNounPosStringObject("romanian's").SetNounSStringObject("romanians").SetNounSPosStringObject("romanians'");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Russian",EnumTagType.NOUN_ALIVE_ABSTRACT).SetNounStringObject("russian").SetNounPosStringObject("russian's").SetNounSStringObject("russians").SetNounSPosStringObject("russians'");
};
CollectionTagGeneral.TagGeneralStructNounAliveConcreteVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Andy",EnumTagType.NOUN_ALIVE_CONCRETE).SetNounStringObject("Andy").SetNounPosStringObject("Andy's");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Bodhisattva",EnumTagType.NOUN_ALIVE_CONCRETE).SetNounStringObject("Bodhisattva").SetNounPosStringObject("Bodhisattva's");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Buddha",EnumTagType.NOUN_ALIVE_CONCRETE).SetNounStringObject("Buddha").SetNounPosStringObject("Buddha's");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Dimitri",EnumTagType.NOUN_ALIVE_CONCRETE).SetNounStringObject("Dimitri").SetNounPosStringObject("Dimitri's");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Julius Caesar",EnumTagType.NOUN_ALIVE_CONCRETE).SetNounStringObject("Julius Caesar").SetNounPosStringObject("Julius Caesar's");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Maria",EnumTagType.NOUN_ALIVE_CONCRETE).SetNounStringObject("Maria").SetNounPosStringObject("Maria's");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Medusa",EnumTagType.NOUN_ALIVE_CONCRETE).SetNounStringObject("Medusa").SetNounPosStringObject("Medusa's");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Mikael",EnumTagType.NOUN_ALIVE_CONCRETE).SetNounStringObject("Mikael").SetNounPosStringObject("Mikael's");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Napoleon",EnumTagType.NOUN_ALIVE_CONCRETE).SetNounStringObject("Napoleon").SetNounPosStringObject("Napoleon's");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Ramses",EnumTagType.NOUN_ALIVE_CONCRETE).SetNounStringObject("Ramses").SetNounPosStringObject("Ramses'");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Sphinx",EnumTagType.NOUN_ALIVE_CONCRETE).SetNounStringObject("Sphinx").SetNounPosStringObject("Sphinx's");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Washington",EnumTagType.NOUN_ALIVE_CONCRETE).SetNounStringObject("Washington").SetNounPosStringObject("Washington's");
};
CollectionTagGeneral.TagGeneralStructNounInanimateHoldAbstractVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEGATIVE,true,"Grudge",EnumTagType.NOUN_INANIMATE_HOLD_ABSTRACT).SetNounStringObject("grudge").SetNounSStringObject("grudges");
};
CollectionTagGeneral.TagGeneralStructNounInanimateHoldConcreteVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Bat",EnumTagType.NOUN_INANIMATE_HOLD_CONCRETE).SetNounStringObject("bat").SetNounSStringObject("bats");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Gun",EnumTagType.NOUN_INANIMATE_HOLD_CONCRETE).SetNounStringObject("gun").SetNounSStringObject("guns");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Hand",EnumTagType.NOUN_INANIMATE_HOLD_CONCRETE).SetNounStringObject("hand").SetNounSStringObject("hands");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Pencil",EnumTagType.NOUN_INANIMATE_HOLD_CONCRETE).SetNounStringObject("pencil").SetNounSStringObject("pencils");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Sword",EnumTagType.NOUN_INANIMATE_HOLD_CONCRETE).SetNounStringObject("sword").SetNounSStringObject("swords");
};
CollectionTagGeneral.TagGeneralStructNounInanimatePlaceAbstractVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Mind",EnumTagType.NOUN_INANIMATE_PLACE_ABSTRACT).SetNounStringObject("mind").SetNounSStringObject("minds");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Intuition",EnumTagType.NOUN_INANIMATE_PLACE_ABSTRACT).SetNounStringObject("intuition").SetNounSStringObject("intuitions");
};
CollectionTagGeneral.TagGeneralStructNounInanimatePlaceConcreteNoOwnerVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"India",EnumTagType.NOUN_INANIMATE_PLACE_CONCRETE_NO_OWNER).SetNounStringObject("India");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Italia",EnumTagType.NOUN_INANIMATE_PLACE_CONCRETE_NO_OWNER).SetNounStringObject("Italia");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Netherlands",EnumTagType.NOUN_INANIMATE_PLACE_CONCRETE_NO_OWNER).SetNounStringObject("Netherlands");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"RussiaRussia",EnumTagType.NOUN_INANIMATE_PLACE_CONCRETE_NO_OWNER).SetNounStringObject("Russia");
};
CollectionTagGeneral.TagGeneralStructNounInanimatePlaceConcreteOwnerVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Country",EnumTagType.NOUN_INANIMATE_PLACE_CONCRETE_OWNER).SetNounStringObject("country").SetNounSStringObject("countries");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Harbor",EnumTagType.NOUN_INANIMATE_PLACE_CONCRETE_OWNER).SetNounStringObject("harbor").SetNounSStringObject("harbors");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"House",EnumTagType.NOUN_INANIMATE_PLACE_CONCRETE_OWNER).SetNounStringObject("house").SetNounSStringObject("houses");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"School",EnumTagType.NOUN_INANIMATE_PLACE_CONCRETE_OWNER).SetNounStringObject("school").SetNounSStringObject("schools");
};
CollectionTagGeneral.TagGeneralStructNounInanimateSeeAbstractVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Vision",EnumTagType.NOUN_INANIMATE_SEE_ABSTRACT).SetNounStringObject("vision");
};
CollectionTagGeneral.TagGeneralStructNounInanimateSeeConcreteVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Lightning",EnumTagType.NOUN_INANIMATE_SEE_CONCRETE).SetNounStringObject("lightning");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Moonlight",EnumTagType.NOUN_INANIMATE_SEE_CONCRETE).SetNounStringObject("moonlight");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Rainbow",EnumTagType.NOUN_INANIMATE_SEE_CONCRETE).SetNounStringObject("rainbow");
};
CollectionTagGeneral.TagGeneralStructNounInanimateTitleAbstractVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Commendation",EnumTagType.NOUN_INANIMATE_TITLE).SetNounStringObject("commendation").SetNounSStringObject("commendations");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Job",EnumTagType.NOUN_INANIMATE_TITLE).SetNounStringObject("job").SetNounSStringObject("jobs");
};
CollectionTagGeneral.TagGeneralStructNounInanimateWearAbstractVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.POSITIVE,true,"Pride",EnumTagType.NOUN_INANIMATE_WEAR_ABSTRACT).SetNounStringObject("pride");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEGATIVE,true,"Shame",EnumTagType.NOUN_INANIMATE_WEAR_ABSTRACT).SetNounStringObject("shame");
};
CollectionTagGeneral.TagGeneralStructNounInanimateWearConcreteVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Crown",EnumTagType.NOUN_INANIMATE_WEAR_CONCRETE).SetNounStringObject("crown").SetNounSStringObject("crowns");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Shirt",EnumTagType.NOUN_INANIMATE_WEAR_CONCRETE).SetNounStringObject("shirt").SetNounSStringObject("shirts");
};
CollectionTagGeneral.TagGeneralStructVerbVoidIntransitiveVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEGATIVE,true,"Die",EnumTagType.VERB_INTRANSITIVE).SetVerb1StringObject("die").SetVerb2StringObject("died").SetVerb3StringObject("died").SetVerbIngStringObject("dying").SetVerbSStringObject("dies");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Jump",EnumTagType.VERB_INTRANSITIVE).SetVerb1StringObject("jump").SetVerb2StringObject("jumped").SetVerb3StringObject("jumped").SetVerbIngStringObject("jumping").SetVerbSStringObject("jumps");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Run",EnumTagType.VERB_INTRANSITIVE).SetVerb1StringObject("run").SetVerb2StringObject("ran").SetVerb3StringObject("ran").SetVerbIngStringObject("running").SetVerbSStringObject("runs");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Sing",EnumTagType.VERB_INTRANSITIVE).SetVerb1StringObject("sing").SetVerb2StringObject("sang").SetVerb3StringObject("sung").SetVerbIngStringObject("singing").SetVerbSStringObject("sings");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Sleep",EnumTagType.VERB_INTRANSITIVE).SetVerb1StringObject("sleep").SetVerb2StringObject("slept").SetVerb3StringObject("slept").SetVerbIngStringObject("sleeping").SetVerbSStringObject("sleeps");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Work",EnumTagType.VERB_INTRANSITIVE).SetVerb1StringObject("work").SetVerb2StringObject("worked").SetVerb3StringObject("worked").SetVerbIngStringObject("working").SetVerbSStringObject("works");
};
CollectionTagGeneral.TagGeneralStructVerbVoidTransitiveVoid = function(_collectionGlobalObject) {
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Buy",EnumTagType.VERB_TRANSITIVE).SetVerb1StringObject("buy").SetVerb2StringObject("bought").SetVerb3StringObject("bought").SetVerbIngStringObject("buying").SetVerbSStringObject("buys");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Call",EnumTagType.VERB_TRANSITIVE).SetVerb1StringObject("call").SetVerb2StringObject("called").SetVerb3StringObject("called").SetVerbIngStringObject("calling").SetVerbSStringObject("calls");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Desire",EnumTagType.VERB_TRANSITIVE).SetVerb1StringObject("desire").SetVerb2StringObject("desired").SetVerb3StringObject("desired").SetVerbIngStringObject("desiring").SetVerbSStringObject("desires");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Drink",EnumTagType.VERB_TRANSITIVE).SetVerb1StringObject("drink").SetVerb2StringObject("drunk").SetVerb3StringObject("drank").SetVerbIngStringObject("drinking").SetVerbSStringObject("drinks");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Drive",EnumTagType.VERB_TRANSITIVE).SetVerb1StringObject("drive").SetVerb2StringObject("drove").SetVerb3StringObject("driven").SetVerbIngStringObject("driving").SetVerbSStringObject("drives");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Eat",EnumTagType.VERB_TRANSITIVE).SetVerb1StringObject("eat").SetVerb2StringObject("ate").SetVerb3StringObject("eaten").SetVerbIngStringObject("eating").SetVerbSStringObject("eats");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Fight",EnumTagType.VERB_TRANSITIVE).SetVerb1StringObject("fight").SetVerb2StringObject("fought").SetVerb3StringObject("fought").SetVerbIngStringObject("fighting").SetVerbSStringObject("fights");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Get",EnumTagType.VERB_TRANSITIVE).SetVerb1StringObject("get").SetVerb2StringObject("got").SetVerb3StringObject("gotten").SetVerbIngStringObject("getting").SetVerbSStringObject("gets");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEUTRAL,true,"Grab",EnumTagType.VERB_TRANSITIVE).SetVerb1StringObject("grab").SetVerb2StringObject("grabed").SetVerb3StringObject("grabed").SetVerbIngStringObject("grabbing").SetVerbSStringObject("grabs");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.NEGATIVE,true,"Kill",EnumTagType.VERB_TRANSITIVE).SetVerb1StringObject("kill").SetVerb2StringObject("killed").SetVerb3StringObject("killed").SetVerbIngStringObject("killing").SetVerbSStringObject("kills");
	new ObjectTag(_collectionGlobalObject,EnumTagFeelType.POSITIVE,true,"Love",EnumTagType.VERB_TRANSITIVE).SetVerb1StringObject("love").SetVerb2StringObject("loved").SetVerb3StringObject("loved").SetVerbIngStringObject("loving").SetVerbSStringObject("loves");
};
CollectionTagGeneral.prototype = {
	__class__: CollectionTagGeneral
};
var DateTools = function() { };
$hxClasses["DateTools"] = DateTools;
DateTools.__name__ = ["DateTools"];
DateTools.__format_get = function(d,e) {
	switch(e) {
	case "%":
		return "%";
	case "C":
		return StringTools.lpad(Std.string(Std["int"](d.getFullYear() / 100)),"0",2);
	case "d":
		return StringTools.lpad(Std.string(d.getDate()),"0",2);
	case "D":
		return DateTools.__format(d,"%m/%d/%y");
	case "e":
		return Std.string(d.getDate());
	case "F":
		return DateTools.__format(d,"%Y-%m-%d");
	case "H":case "k":
		return StringTools.lpad(Std.string(d.getHours()),e == "H"?"0":" ",2);
	case "I":case "l":
		var hour = d.getHours() % 12;
		return StringTools.lpad(Std.string(hour == 0?12:hour),e == "I"?"0":" ",2);
	case "m":
		return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
	case "M":
		return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
	case "n":
		return "\n";
	case "p":
		if(d.getHours() > 11) return "PM"; else return "AM";
		break;
	case "r":
		return DateTools.__format(d,"%I:%M:%S %p");
	case "R":
		return DateTools.__format(d,"%H:%M");
	case "s":
		return Std.string(Std["int"](d.getTime() / 1000));
	case "S":
		return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
	case "t":
		return "\t";
	case "T":
		return DateTools.__format(d,"%H:%M:%S");
	case "u":
		var t = d.getDay();
		if(t == 0) return "7"; else if(t == null) return "null"; else return "" + t;
		break;
	case "w":
		return Std.string(d.getDay());
	case "y":
		return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
	case "Y":
		return Std.string(d.getFullYear());
	default:
		throw new js__$Boot_HaxeError("Date.format %" + e + "- not implemented yet.");
	}
};
DateTools.__format = function(d,f) {
	var r = new StringBuf();
	var p = 0;
	while(true) {
		var np = f.indexOf("%",p);
		if(np < 0) break;
		r.addSub(f,p,np - p);
		r.add(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
		p = np + 2;
	}
	r.addSub(f,p,f.length - p);
	return r.b;
};
DateTools.format = function(d,f) {
	return DateTools.__format(d,f);
};
var lime_AssetLibrary = function() {
	this.onChange = new lime_app_Event_$Void_$Void();
};
$hxClasses["lime.AssetLibrary"] = lime_AssetLibrary;
lime_AssetLibrary.__name__ = ["lime","AssetLibrary"];
lime_AssetLibrary.prototype = {
	exists: function(id,type) {
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		return null;
	}
	,getFont: function(id) {
		return null;
	}
	,getImage: function(id) {
		return null;
	}
	,getPath: function(id) {
		return null;
	}
	,getText: function(id) {
		var bytes = this.getBytes(id);
		if(bytes == null) return null; else return bytes.getString(0,bytes.length);
	}
	,isLocal: function(id,type) {
		return true;
	}
	,list: function(type) {
		return null;
	}
	,load: function() {
		var _g = this;
		return new lime_app_Future(function() {
			return _g;
		});
	}
	,loadAudioBuffer: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getAudioBuffer(id);
		});
	}
	,loadBytes: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getBytes(id);
		});
	}
	,loadFont: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getFont(id);
		});
	}
	,loadImage: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getImage(id);
		});
	}
	,loadText: function(id) {
		return this.loadBytes(id).then(function(bytes) {
			return new lime_app_Future(function() {
				if(bytes == null) return null; else return bytes.getString(0,bytes.length);
			});
		});
	}
	,unload: function() {
	}
	,__class__: lime_AssetLibrary
};
var DefaultAssetLibrary = function() {
	this.type = new haxe_ds_StringMap();
	this.path = new haxe_ds_StringMap();
	this.className = new haxe_ds_StringMap();
	lime_AssetLibrary.call(this);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$fonts_$oxygen_$ttf);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$fonts_$oxygen_$bold_$ttf);
	var id;
	id = "styles/windows/popup.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/optionbox.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/accordion.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/menus.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/button.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/textinput.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/buttons.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/vprogress.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/hprogress.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/listview.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/accordion.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/buttons.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/sliders.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/windows.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/vscroll.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/calendar.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/listview.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/popups.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/container.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/hscroll.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/listview.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/glyphs/vscroll_thumb_gripper_up.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/vscroll_thumb_gripper_down.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/vscroll_thumb_gripper_over.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/right_arrow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/hscroll_thumb_gripper_down.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/left_arrow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/hscroll_thumb_gripper_up.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/up_arrow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/down_arrow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/hscroll_thumb_gripper_over.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/checkbox.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/tab.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/tabs.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/scrolls.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/scrolls.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/rtf.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/gradient/circle_dark.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_right2.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/gripper_vertical_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_down_dark.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_left.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_down_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_down.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/gradient_mobile.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/gradient/arrow_right_dark.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/cross_light_small.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/gripper_horizontal.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/gradient.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/gradient/cross_dark_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/gradient.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/gradient/gripper_vertical.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_left_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/gripper_horizontal_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_right.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_right_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/cross_dark.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/hsplitter_gripper.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/gradient_mobile.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/gradient/arrow_up_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/vsplitter_gripper.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_up.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/default/circle.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/default/up_down.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/default/collapse.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/default/cross.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/default/expand.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "fonts/Oxygen.eot";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "fonts/Oxygen-Bold.woff";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "fonts/Oxygen-Bold.eot";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "fonts/Oxygen.svg";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "fonts/Oxygen-Bold.woff2";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "fonts/Oxygen-Bold.svg";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "fonts/Oxygen.ttf";
	this.className.set(id,_$_$ASSET_$_$fonts_$oxygen_$ttf);
	this.type.set(id,"FONT");
	id = "fonts/Oxygen-Bold.ttf";
	this.className.set(id,_$_$ASSET_$_$fonts_$oxygen_$bold_$ttf);
	this.type.set(id,"FONT");
	id = "fonts/Oxygen.woff2";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "fonts/Oxygen.woff";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "assets/ui/demo.xml";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/ui/example.xml";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/ui/example.txt";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/ui/example.hx";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/img/rtfview/edit-italic.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/img/rtfview/edit-alignment-center.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/img/rtfview/edit-bold.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/img/rtfview/edit-alignment-right.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/img/rtfview/edit-underline.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/img/rtfview/edit-alignment-left.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/img/rtfview/edit-alignment-justify.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/img/rtfview/edit-list.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/css/code.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/css/rtf.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/css/code.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/css/rtf.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/openfl.svg";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "img/rtfview/edit-italic.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/rtfview/edit-alignment-center.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/rtfview/edit-bold.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/rtfview/edit-alignment-right.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/rtfview/edit-underline.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/rtfview/edit-alignment-left.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/rtfview/edit-alignment-justify.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/rtfview/edit-list.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "css/code.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "css/rtf.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "css/code.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "css/rtf.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/Layout/UIPopupAddObjectMuseum.xml";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/Layout/UIMain.xml";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "layout/UIPopupAddObjectMuseum.xml";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "layout/UIMain.xml";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	var assetsPrefix = null;
	if(ApplicationMain.config != null && Object.prototype.hasOwnProperty.call(ApplicationMain.config,"assetsPrefix")) assetsPrefix = ApplicationMain.config.assetsPrefix;
	if(assetsPrefix != null) {
		var $it0 = this.path.keys();
		while( $it0.hasNext() ) {
			var k = $it0.next();
			var value = assetsPrefix + this.path.get(k);
			this.path.set(k,value);
		}
	}
};
$hxClasses["DefaultAssetLibrary"] = DefaultAssetLibrary;
DefaultAssetLibrary.__name__ = ["DefaultAssetLibrary"];
DefaultAssetLibrary.__super__ = lime_AssetLibrary;
DefaultAssetLibrary.prototype = $extend(lime_AssetLibrary.prototype,{
	exists: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		var assetType = this.type.get(id);
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) return true;
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") return true;
		}
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		var loader;
		var key = this.path.get(id);
		loader = lime_app_Preloader.loaders.get(key);
		if(loader == null) return null;
		var bytes = loader.bytes;
		if(bytes != null) return bytes; else return null;
	}
	,getFont: function(id) {
		return js_Boot.__cast(Type.createInstance(this.className.get(id),[]) , lime_text_Font);
	}
	,getImage: function(id) {
		return lime_graphics_Image.fromImageElement((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime_app_Preloader.images.get(key);
			return $r;
		}(this)));
	}
	,getPath: function(id) {
		return this.path.get(id);
	}
	,getText: function(id) {
		var loader;
		var key = this.path.get(id);
		loader = lime_app_Preloader.loaders.get(key);
		if(loader == null) return null;
		var bytes = loader.bytes;
		if(bytes != null) return bytes.getString(0,bytes.length); else return null;
	}
	,isLocal: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		return true;
	}
	,list: function(type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		var items = [];
		var $it0 = this.type.keys();
		while( $it0.hasNext() ) {
			var id = $it0.next();
			if(requestedType == null || this.exists(id,type)) items.push(id);
		}
		return items;
	}
	,loadAudioBuffer: function(id) {
		var _g = this;
		var promise = new lime_app_Promise();
		promise.completeWith(new lime_app_Future(function() {
			return _g.getAudioBuffer(id);
		}));
		return promise.future;
	}
	,loadBytes: function(id) {
		var promise = new lime_app_Promise();
		if(this.path.exists(id)) {
			var request = new lime_net_HTTPRequest();
			promise.completeWith(request.load(this.path.get(id) + "?" + lime_Assets.cache.version));
		} else promise.complete(this.getBytes(id));
		return promise.future;
	}
	,loadImage: function(id) {
		var promise = new lime_app_Promise();
		if(this.path.exists(id)) {
			var image = new Image();
			image.onload = function(_) {
				promise.complete(lime_graphics_Image.fromImageElement(image));
			};
			image.onerror = $bind(promise,promise.error);
			image.src = this.path.get(id) + "?" + lime_Assets.cache.version;
		} else promise.complete(this.getImage(id));
		return promise.future;
	}
	,loadText: function(id) {
		var promise = new lime_app_Promise();
		if(this.path.exists(id)) {
			var request = new lime_net_HTTPRequest();
			var future = request.load(this.path.get(id) + "?" + lime_Assets.cache.version);
			future.onProgress(function(progress) {
				promise.progress(progress);
			});
			future.onError(function(msg) {
				promise.error(msg);
			});
			future.onComplete(function(bytes) {
				promise.complete(bytes.getString(0,bytes.length));
			});
		} else promise.complete(this.getText(id));
		return promise.future;
	}
	,__class__: DefaultAssetLibrary
});
var lime_text_Font = function(name) {
	if(name != null) this.name = name;
	if(this.__fontPath != null) this.__fromFile(this.__fontPath);
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = ["lime","text","Font"];
lime_text_Font.fromBytes = function(bytes) {
	var font = new lime_text_Font();
	font.__fromBytes(bytes);
	return font;
};
lime_text_Font.fromFile = function(path) {
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.prototype = {
	decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,get_ascender: function() {
		return 0;
	}
	,get_descender: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_numGlyphs: function() {
		return 0;
	}
	,get_underlinePosition: function() {
		return 0;
	}
	,get_underlineThickness: function() {
		return 0;
	}
	,get_unitsPerEM: function() {
		return 0;
	}
	,__class__: lime_text_Font
	,__properties__: {get_unitsPerEM:"get_unitsPerEM",get_underlineThickness:"get_underlineThickness",get_underlinePosition:"get_underlinePosition",get_numGlyphs:"get_numGlyphs",get_height:"get_height",get_descender:"get_descender",get_ascender:"get_ascender"}
};
var _$_$ASSET_$_$fonts_$oxygen_$ttf = function() {
	lime_text_Font.call(this);
	this.name = "Oxygen Regular";
};
$hxClasses["__ASSET__fonts_oxygen_ttf"] = _$_$ASSET_$_$fonts_$oxygen_$ttf;
_$_$ASSET_$_$fonts_$oxygen_$ttf.__name__ = ["__ASSET__fonts_oxygen_ttf"];
_$_$ASSET_$_$fonts_$oxygen_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$fonts_$oxygen_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$fonts_$oxygen_$ttf
});
var _$_$ASSET_$_$fonts_$oxygen_$bold_$ttf = function() {
	lime_text_Font.call(this);
	this.name = "Oxygen Bold";
};
$hxClasses["__ASSET__fonts_oxygen_bold_ttf"] = _$_$ASSET_$_$fonts_$oxygen_$bold_$ttf;
_$_$ASSET_$_$fonts_$oxygen_$bold_$ttf.__name__ = ["__ASSET__fonts_oxygen_bold_ttf"];
_$_$ASSET_$_$fonts_$oxygen_$bold_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$fonts_$oxygen_$bold_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$fonts_$oxygen_$bold_$ttf
});
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = ["openfl","text","Font"];
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) enumerateDeviceFonts = false;
	return openfl_text_Font.__registeredFonts;
};
openfl_text_Font.fromBytes = function(bytes) {
	var font = new openfl_text_Font();
	font.__fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
	return font;
};
openfl_text_Font.fromFile = function(path) {
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.registerFont = function(font) {
	var instance;
	instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	if(instance != null) openfl_text_Font.__registeredFonts.push(instance);
};
openfl_text_Font.__fromLimeFont = function(value) {
	var font = new openfl_text_Font();
	font.name = value.name;
	font.src = value.src;
	return font;
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: openfl_text_Font
	,__properties__: $extend(lime_text_Font.prototype.__properties__,{set_fontName:"set_fontName",get_fontName:"get_fontName"})
});
var _$_$ASSET_$_$OPENFL_$_$fonts_$oxygen_$ttf = function() {
	var font = new _$_$ASSET_$_$fonts_$oxygen_$ttf();
	this.src = font.src;
	this.name = font.name;
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__fonts_oxygen_ttf"] = _$_$ASSET_$_$OPENFL_$_$fonts_$oxygen_$ttf;
_$_$ASSET_$_$OPENFL_$_$fonts_$oxygen_$ttf.__name__ = ["__ASSET__OPENFL__fonts_oxygen_ttf"];
_$_$ASSET_$_$OPENFL_$_$fonts_$oxygen_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$fonts_$oxygen_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$fonts_$oxygen_$ttf
});
var _$_$ASSET_$_$OPENFL_$_$fonts_$oxygen_$bold_$ttf = function() {
	var font = new _$_$ASSET_$_$fonts_$oxygen_$bold_$ttf();
	this.src = font.src;
	this.name = font.name;
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__fonts_oxygen_bold_ttf"] = _$_$ASSET_$_$OPENFL_$_$fonts_$oxygen_$bold_$ttf;
_$_$ASSET_$_$OPENFL_$_$fonts_$oxygen_$bold_$ttf.__name__ = ["__ASSET__OPENFL__fonts_oxygen_bold_ttf"];
_$_$ASSET_$_$OPENFL_$_$fonts_$oxygen_$bold_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$fonts_$oxygen_$bold_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$fonts_$oxygen_$bold_$ttf
});
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n]; else throw new js__$Boot_HaxeError("EReg::matched");
	}
	,matchedPos: function() {
		if(this.r.m == null) throw new js__$Boot_HaxeError("No string matched");
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) len = -1;
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0?s:HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) this.r.s = s;
			return b;
		} else {
			var b1 = this.match(len < 0?HxOverrides.substr(s,pos,null):HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf = new StringBuf();
		do {
			if(offset >= s.length) break; else if(!this.matchSub(s,offset)) {
				buf.add(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf.add(HxOverrides.substr(s,offset,p.pos - offset));
			buf.add(f(this));
			if(p.len == 0) {
				buf.add(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else offset = p.pos + p.len;
		} while(this.r.global);
		if(!this.r.global && offset > 0 && offset < s.length) buf.add(HxOverrides.substr(s,offset,null));
		return buf.b;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) i = 0;
	}
	while(i < len) {
		if(a[i] === obj) return i;
		i++;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = HxOverrides.indexOf(a,obj,0);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = ["IntIterator"];
IntIterator.prototype = {
	__class__: IntIterator
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.indexOf = function(it,v) {
	var i = 0;
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var v2 = $it0.next();
		if(v == v2) return i;
		i++;
	}
	return -1;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	add: function(item) {
		var x = [item];
		if(this.h == null) this.h = x; else this.q[1] = x;
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = [item,this.h];
		this.h = x;
		if(this.q == null) this.q = x;
		this.length++;
	}
	,first: function() {
		if(this.h == null) return null; else return this.h[0];
	}
	,pop: function() {
		if(this.h == null) return null;
		var x = this.h[0];
		this.h = this.h[1];
		if(this.h == null) this.q = null;
		this.length--;
		return x;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l[0] == v) {
				if(prev == null) this.h = l[1]; else prev[1] = l[1];
				if(this.q == l) this.q = prev;
				this.length--;
				return true;
			}
			prev = l;
			l = l[1];
		}
		return false;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListIterator = function(head) {
	this.head = head;
	this.val = null;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		this.val = this.head[0];
		this.head = this.head[1];
		return this.val;
	}
	,__class__: _$List_ListIterator
};
Math.__name__ = ["Math"];
var NMEPreloader = function() {
	openfl_display_Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) color = 16777215;
	var x = 30;
	var height = 7;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 2;
	this.outline = new openfl_display_Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,height);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.addChild(this.outline);
	this.progress = new openfl_display_Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.addChild(this.progress);
};
$hxClasses["NMEPreloader"] = NMEPreloader;
NMEPreloader.__name__ = ["NMEPreloader"];
NMEPreloader.__super__ = openfl_display_Sprite;
NMEPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	getBackgroundColor: function() {
		return 16777215;
	}
	,getHeight: function() {
		var height = 576;
		if(height > 0) return height; else return openfl_Lib.current.stage.stageHeight;
	}
	,getWidth: function() {
		var width = 1024;
		if(width > 0) return width; else return openfl_Lib.current.stage.stageWidth;
	}
	,onInit: function() {
	}
	,onLoaded: function() {
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = bytesLoaded / bytesTotal;
		if(percentLoaded > 1) percentLoaded = 1;
		this.progress.set_scaleX(percentLoaded);
	}
	,__class__: NMEPreloader
});
var ObjectGeneratorSentence = function() {
};
$hxClasses["ObjectGeneratorSentence"] = ObjectGeneratorSentence;
ObjectGeneratorSentence.__name__ = ["ObjectGeneratorSentence"];
ObjectGeneratorSentence.AddWordString = function(_collectionGlobalObject,_tagTypeEnum,_tagTypeSubEnum,_visitorObject) {
	var getNegativeBool = false;
	var getNeutralBool = false;
	var getPositiveBool = false;
	if(_visitorObject.GetVisitCorrectExhibitionBool() == true && _visitorObject.GetScoreInt() >= 0) {
		getNegativeBool = false;
		getNeutralBool = true;
		getPositiveBool = true;
	} else if(_visitorObject.GetVisitCorrectExhibitionBool() == false || _visitorObject.GetScoreInt() < 0) {
		getNegativeBool = true;
		getNeutralBool = true;
		getPositiveBool = false;
	} else {
		getNegativeBool = true;
		getNeutralBool = true;
		getPositiveBool = true;
	}
	var tagStringArray = [];
	var randomIndexInt = -1;
	var loopCounterPrivate1Int = 0;
	while(loopCounterPrivate1Int < _visitorObject.GetTagObjectArray().length) {
		if(_visitorObject.GetTagObjectArray()[loopCounterPrivate1Int].GetTypeEnum() == _tagTypeEnum) {
			if(_visitorObject.GetTagObjectArray()[loopCounterPrivate1Int].GetFeelEnum() == EnumTagFeelType.NEGATIVE && getNegativeBool == true) tagStringArray.push(Reflect.callMethod(_visitorObject.GetTagObjectArray()[loopCounterPrivate1Int],ObjectGeneratorSentence.DetermineProperCallbackFunction(_tagTypeSubEnum,_visitorObject.GetTagObjectArray()[loopCounterPrivate1Int]),[]));
			if(_visitorObject.GetTagObjectArray()[loopCounterPrivate1Int].GetFeelEnum() == EnumTagFeelType.NEUTRAL && getNeutralBool == true) tagStringArray.push(Reflect.callMethod(_visitorObject.GetTagObjectArray()[loopCounterPrivate1Int],ObjectGeneratorSentence.DetermineProperCallbackFunction(_tagTypeSubEnum,_visitorObject.GetTagObjectArray()[loopCounterPrivate1Int]),[]));
			if(_visitorObject.GetTagObjectArray()[loopCounterPrivate1Int].GetFeelEnum() == EnumTagFeelType.POSITIVE && getPositiveBool == true) tagStringArray.push(Reflect.callMethod(_visitorObject.GetTagObjectArray()[loopCounterPrivate1Int],ObjectGeneratorSentence.DetermineProperCallbackFunction(_tagTypeSubEnum,_visitorObject.GetTagObjectArray()[loopCounterPrivate1Int]),[]));
		}
		loopCounterPrivate1Int++;
	}
	if(tagStringArray.length == 0) {
		loopCounterPrivate1Int = 0;
		while(loopCounterPrivate1Int < _collectionGlobalObject.GetTagGeneralObjectArray().length) {
			if(_collectionGlobalObject.GetTagGeneralObjectArray()[loopCounterPrivate1Int].GetTypeEnum() == _tagTypeEnum) {
				if(_collectionGlobalObject.GetTagGeneralObjectArray()[loopCounterPrivate1Int].GetFeelEnum() == EnumTagFeelType.NEGATIVE && getNegativeBool == true) tagStringArray.push(Reflect.callMethod(_collectionGlobalObject.GetTagGeneralObjectArray()[loopCounterPrivate1Int],ObjectGeneratorSentence.DetermineProperCallbackFunction(_tagTypeSubEnum,_collectionGlobalObject.GetTagGeneralObjectArray()[loopCounterPrivate1Int]),[]));
				if(_collectionGlobalObject.GetTagGeneralObjectArray()[loopCounterPrivate1Int].GetFeelEnum() == EnumTagFeelType.NEUTRAL && getNeutralBool == true) tagStringArray.push(Reflect.callMethod(_collectionGlobalObject.GetTagGeneralObjectArray()[loopCounterPrivate1Int],ObjectGeneratorSentence.DetermineProperCallbackFunction(_tagTypeSubEnum,_collectionGlobalObject.GetTagGeneralObjectArray()[loopCounterPrivate1Int]),[]));
				if(_collectionGlobalObject.GetTagGeneralObjectArray()[loopCounterPrivate1Int].GetFeelEnum() == EnumTagFeelType.POSITIVE && getPositiveBool == true) tagStringArray.push(Reflect.callMethod(_collectionGlobalObject.GetTagGeneralObjectArray()[loopCounterPrivate1Int],ObjectGeneratorSentence.DetermineProperCallbackFunction(_tagTypeSubEnum,_collectionGlobalObject.GetTagGeneralObjectArray()[loopCounterPrivate1Int]),[]));
			}
			loopCounterPrivate1Int++;
		}
	}
	randomIndexInt = ObjectGeneratorSentence.RandomNumberGeneratorInt(tagStringArray.length);
	var returnString = tagStringArray[randomIndexInt];
	return returnString;
};
ObjectGeneratorSentence.DetermineProperCallbackFunction = function(_tagTypeSubEnum,_tagObject) {
	if(_tagTypeSubEnum == EnumTagTypeSub.ADJ) return $bind(_tagObject,_tagObject.GetAdjectiveString); else if(_tagTypeSubEnum == EnumTagTypeSub.ADV) return $bind(_tagObject,_tagObject.GetAdverbString); else if(_tagTypeSubEnum == EnumTagTypeSub.NOUN) return $bind(_tagObject,_tagObject.GetNounString); else if(_tagTypeSubEnum == EnumTagTypeSub.NOUN_POS) return $bind(_tagObject,_tagObject.GetNounPosString); else if(_tagTypeSubEnum == EnumTagTypeSub.NOUN_S) return $bind(_tagObject,_tagObject.GetNounSString); else if(_tagTypeSubEnum == EnumTagTypeSub.NOUN_S_POS) return $bind(_tagObject,_tagObject.GetNounSPosString); else if(_tagTypeSubEnum == EnumTagTypeSub.VERB_1) return $bind(_tagObject,_tagObject.GetVerb1String); else if(_tagTypeSubEnum == EnumTagTypeSub.VERB_2) return $bind(_tagObject,_tagObject.GetVerb2String); else if(_tagTypeSubEnum == EnumTagTypeSub.VERB_3) return $bind(_tagObject,_tagObject.GetVerb3String); else if(_tagTypeSubEnum == EnumTagTypeSub.VERB_ING) return $bind(_tagObject,_tagObject.GetVerbIngString); else if(_tagTypeSubEnum == EnumTagTypeSub.VERB_S) return $bind(_tagObject,_tagObject.GetVerbSString);
	return null;
};
ObjectGeneratorSentence.GenerateSentenceString = function(_collectionGlobalObject,_patternString,_visitorObject) {
	var loopCounter1Int = 0;
	var patternString = _patternString;
	var sentenceString = "";
	while(loopCounter1Int < patternString.length) {
		var codeString = "";
		var codeStringArray = ["1","2","3","4","5","6","7","8","9","0","A","B","C","D","E","F"];
		var scan1String = patternString.substring(loopCounter1Int,loopCounter1Int + 1);
		if(HxOverrides.indexOf(codeStringArray,scan1String,0) > -1) {
			var scan2String = patternString.substring(loopCounter1Int + 1,loopCounter1Int + 2);
			if(HxOverrides.indexOf(codeStringArray,scan2String,0) > -1) {
				codeString = scan1String + scan2String;
				loopCounter1Int += 2;
			} else loopCounter1Int++;
		} else loopCounter1Int++;
		var wordString = "";
		if(codeString == "11") wordString = ObjectGeneratorSentence.AddWordString(_collectionGlobalObject,EnumTagType.ADJ,EnumTagTypeSub.ADJ,_visitorObject); else if(codeString == "22") wordString = ObjectGeneratorSentence.AddWordString(_collectionGlobalObject,EnumTagType.ADV,EnumTagTypeSub.ADV,_visitorObject); else if(codeString == "43") {
			var _43TagStringArray = [];
			var loopCounter2Int = 0;
			var randomIndexInt = 0;
			while(loopCounter2Int < _visitorObject.GetTagObjectArray().length) {
				if(_visitorObject.GetTagObjectArray()[loopCounter2Int].GetTypeEnum() == EnumTagType.NOUN_ALIVE_CONCRETE) _43TagStringArray.push(_visitorObject.GetTagObjectArray()[loopCounter2Int].GetNounString());
				loopCounter2Int++;
			}
			if(_43TagStringArray.length == 0) {
				loopCounter2Int = 0;
				while(loopCounter2Int < _collectionGlobalObject.GetTagGeneralObjectArray().length) {
					if(_collectionGlobalObject.GetTagGeneralObjectArray()[loopCounter2Int].GetTypeEnum() == EnumTagType.NOUN_ALIVE_CONCRETE) _43TagStringArray.push(_collectionGlobalObject.GetTagGeneralObjectArray()[loopCounter2Int].GetNounString());
					loopCounter2Int++;
				}
			}
			randomIndexInt = ObjectGeneratorSentence.RandomNumberGeneratorInt(_43TagStringArray.length);
			if(_visitorObject.GetNameString() == "") wordString = _43TagStringArray[randomIndexInt]; else if(_visitorObject.GetNameString() != "") {
				if(Math.random() > 0.5) wordString = _visitorObject.GetNameString(); else wordString = _43TagStringArray[randomIndexInt];
			}
		} else if(codeString == "65") wordString = ObjectGeneratorSentence.AddWordString(_collectionGlobalObject,EnumTagType.NOUN_INANIMATE_HOLD_CONCRETE,EnumTagTypeSub.NOUN_S,_visitorObject); else if(codeString == "93") wordString = ObjectGeneratorSentence.AddWordString(_collectionGlobalObject,EnumTagType.NOUN_INANIMATE_PLACE_CONCRETE_OWNER,EnumTagTypeSub.NOUN,_visitorObject); else if(codeString == "A3") wordString = ObjectGeneratorSentence.AddWordString(_collectionGlobalObject,EnumTagType.NOUN_INANIMATE_SEE_CONCRETE,EnumTagTypeSub.NOUN,_visitorObject); else if(codeString == "E7") wordString = ObjectGeneratorSentence.AddWordString(_collectionGlobalObject,EnumTagType.VERB_INTRANSITIVE,EnumTagTypeSub.VERB_1,_visitorObject); else if(codeString == "E8") wordString = ObjectGeneratorSentence.AddWordString(_collectionGlobalObject,EnumTagType.VERB_INTRANSITIVE,EnumTagTypeSub.VERB_2,_visitorObject); else if(codeString == "EA") wordString = ObjectGeneratorSentence.AddWordString(_collectionGlobalObject,EnumTagType.VERB_INTRANSITIVE,EnumTagTypeSub.VERB_S,_visitorObject); else wordString = scan1String;
		sentenceString = sentenceString + wordString;
	}
	return sentenceString;
};
ObjectGeneratorSentence.RandomNumberGeneratorInt = function(_randomNumberInt) {
	return Math.round(Math.random() * (_randomNumberInt - 1));
};
ObjectGeneratorSentence.WordFixString = function(_fixString) {
	return _fixString.substring(0,1).toUpperCase() + _fixString.substring(1,_fixString.length);
};
ObjectGeneratorSentence.GenerateSentence3String = function(_collectionGlobalObject,_visitorObject) {
	var patternStringArray2D = [];
	patternStringArray2D = [["11 93...","43 EA on the 93.","E7 again."],["11 A3.","43 EA 22.","Into the 93."],["A3 EA.","What I E8 were A3...","Are 65 of 93."]];
	var stringPatternIndexInt = ObjectGeneratorSentence.RandomNumberGeneratorInt(patternStringArray2D.length);
	var stringPatternIndexString = patternStringArray2D[stringPatternIndexInt];
	var threeSentenceString = "";
	var loopCounter1Int = 0;
	while(loopCounter1Int < 3) {
		if(loopCounter1Int == 0) threeSentenceString = ObjectGeneratorSentence.WordFixString(ObjectGeneratorSentence.GenerateSentenceString(_collectionGlobalObject,stringPatternIndexString[loopCounter1Int],_visitorObject)); else threeSentenceString = threeSentenceString + "\n" + ObjectGeneratorSentence.WordFixString(ObjectGeneratorSentence.GenerateSentenceString(_collectionGlobalObject,stringPatternIndexString[loopCounter1Int],_visitorObject));
		loopCounter1Int++;
	}
	return threeSentenceString;
};
ObjectGeneratorSentence.prototype = {
	__class__: ObjectGeneratorSentence
};
var ObjectMuseum = function(_collectionGlobalObject,_nameAltString,_nameFullString,_parentNameAltString,_tagObjectArray,_typeEnum) {
	this.visitorTotalInt = 0;
	this.visitorCurrentInt = 0;
	this.typeEnum = null;
	this.tagObjectArray = [];
	this.siblingObjectArray = [];
	this.parentObject = null;
	this.nameStruct = { nameAltString : "", nameFullString : ""};
	this.museumUIObject = null;
	this.museumModeEnum = null;
	this.indexLocalInt = -1;
	this.indexGlobalInt = -1;
	this.fullBool = false;
	this.explanationStringArray = [];
	this.collectionGlobalObject = null;
	this.childStruct = { childMuseumObjectArray : [], childVisitorObjectArray : []};
	this.collectionGlobalObject = _collectionGlobalObject;
	this.nameStruct.nameAltString = _nameAltString;
	this.nameStruct.nameFullString = _nameFullString;
	this.typeEnum = _typeEnum;
	this.tagObjectArray = _tagObjectArray;
	if(this.nameStruct.nameAltString != "EXH_ARC") this.AddThisToArray(_typeEnum);
	this.museumUIObject = new ObjectMuseumUI(this.collectionGlobalObject,this.typeEnum);
	this.ChangeParentObject(_parentNameAltString);
	this.collectionGlobalObject.DetermineExhibitionFullThresholdVoid();
};
$hxClasses["ObjectMuseum"] = ObjectMuseum;
ObjectMuseum.__name__ = ["ObjectMuseum"];
ObjectMuseum.prototype = {
	AddChildVisitorVoid: function(_visitorObject) {
		this.childStruct.childVisitorObjectArray.push(_visitorObject);
	}
	,AddTagVoid: function(_tagObject) {
		this.tagObjectArray.push(_tagObject);
	}
	,AddThisToArray: function(_typeEnum) {
		if(_typeEnum == EnumMuseumType.EXH) this.collectionGlobalObject.GetExhibitionObjectArray().push(this); else if(_typeEnum == EnumMuseumType.FLR) this.collectionGlobalObject.GetFloorObjectArray().push(this); else if(_typeEnum == EnumMuseumType.ROM) this.collectionGlobalObject.GetRoomObjectArray().push(this);
	}
	,ChangeParentObject: function(_parentNameAltString) {
		if(this.parentObject != null) {
			var _this = this.parentObject.GetChildStruct().childMuseumObjectArray;
			HxOverrides.remove(_this,this);
		}
		if(this.typeEnum == EnumMuseumType.EXH && this.nameStruct.nameAltString != "EXH_ARC") this.parentObject = CollectionFunction.FindMuseumObject(this.collectionGlobalObject,EnumMuseumType.ROM,_parentNameAltString); else if(this.typeEnum == EnumMuseumType.FLR) this.parentObject = null; else if(this.typeEnum == EnumMuseumType.ROM) this.parentObject = CollectionFunction.FindMuseumObject(this.collectionGlobalObject,EnumMuseumType.FLR,_parentNameAltString);
		var loopCounter1Int = 0;
		var necessaryWidthInt = 0;
		while(loopCounter1Int < this.collectionGlobalObject.GetFloorObjectArray().length) {
			this.collectionGlobalObject.GetFloorObjectArray()[loopCounter1Int].DetermineSiblingVoid();
			this.collectionGlobalObject.GetFloorObjectArray()[loopCounter1Int].DetermineIndexVoid();
			this.collectionGlobalObject.GetFloorObjectArray()[loopCounter1Int].GetMuseumUIObject().UpdateVoid(this.collectionGlobalObject.GetFloorObjectArray()[loopCounter1Int],openfl_Lib.current.stage.stageWidth);
			if(necessaryWidthInt < Math.round(this.collectionGlobalObject.GetFloorObjectArray()[loopCounter1Int].GetMuseumUIObject().GetButtonObject().get_x() + this.collectionGlobalObject.GetFloorObjectArray()[loopCounter1Int].GetMuseumUIObject().GetButtonObject().get_width())) necessaryWidthInt = Math.round(this.collectionGlobalObject.GetFloorObjectArray()[loopCounter1Int].GetMuseumUIObject().GetButtonObject().get_x() + this.collectionGlobalObject.GetFloorObjectArray()[loopCounter1Int].GetMuseumUIObject().GetButtonObject().get_width());
			loopCounter1Int++;
		}
		if(this.nameStruct.nameAltString != "EXH_ARC") this.collectionGlobalObject.GetUIMuseumAbsoluteObject().set_width(necessaryWidthInt);
		loopCounter1Int = 0;
		while(loopCounter1Int < this.collectionGlobalObject.GetRoomObjectArray().length) {
			this.collectionGlobalObject.GetRoomObjectArray()[loopCounter1Int].GetParentObject().DetermineChildVoid();
			this.collectionGlobalObject.GetRoomObjectArray()[loopCounter1Int].DetermineSiblingVoid();
			this.collectionGlobalObject.GetRoomObjectArray()[loopCounter1Int].DetermineIndexVoid();
			this.collectionGlobalObject.GetRoomObjectArray()[loopCounter1Int].GetMuseumUIObject().UpdateVoid(this.collectionGlobalObject.GetRoomObjectArray()[loopCounter1Int],openfl_Lib.current.stage.stageWidth);
			loopCounter1Int++;
		}
		loopCounter1Int = 0;
		if(this.nameStruct.nameAltString != "EXH_ARC") while(loopCounter1Int < this.collectionGlobalObject.GetExhibitionObjectArray().length) {
			this.collectionGlobalObject.GetExhibitionObjectArray()[loopCounter1Int].GetParentObject().DetermineChildVoid();
			this.collectionGlobalObject.GetExhibitionObjectArray()[loopCounter1Int].DetermineSiblingVoid();
			this.collectionGlobalObject.GetExhibitionObjectArray()[loopCounter1Int].DetermineIndexVoid();
			this.collectionGlobalObject.GetExhibitionObjectArray()[loopCounter1Int].GetMuseumUIObject().UpdateVoid(this.collectionGlobalObject.GetExhibitionObjectArray()[loopCounter1Int],openfl_Lib.current.stage.stageWidth);
			loopCounter1Int++;
		}
		loopCounter1Int = 0;
		while(loopCounter1Int < this.collectionGlobalObject.GetVisitorObjectArray().length) {
			this.collectionGlobalObject.GetVisitorObjectArray()[loopCounter1Int].DetermineIndexLocalVoid();
			this.collectionGlobalObject.GetVisitorObjectArray()[loopCounter1Int].GenerateExhibitionTargetVoid(loopCounter1Int);
			this.collectionGlobalObject.GetVisitorObjectArray()[loopCounter1Int].GetVisitorUIObject().UpdateVoid(this.collectionGlobalObject.GetVisitorObjectArray()[loopCounter1Int]);
			loopCounter1Int++;
		}
		return this.parentObject;
	}
	,DetermineIndexGlobalVoid: function() {
		var foundIndexGlobalBool = false;
		var tempObjectArray = [];
		if(this.typeEnum == EnumMuseumType.EXH) tempObjectArray = this.collectionGlobalObject.GetExhibitionObjectArray(); else if(this.typeEnum == EnumMuseumType.FLR) tempObjectArray = this.collectionGlobalObject.GetFloorObjectArray(); else if(this.typeEnum == EnumMuseumType.ROM) tempObjectArray = this.collectionGlobalObject.GetRoomObjectArray();
		var loopCounter1Int = 0;
		while(loopCounter1Int < tempObjectArray.length) {
			if(this.nameStruct.nameAltString == tempObjectArray[loopCounter1Int].GetNameStruct().nameAltString) {
				foundIndexGlobalBool = true;
				this.indexGlobalInt = loopCounter1Int;
				break;
			}
			loopCounter1Int++;
		}
		if(foundIndexGlobalBool == false) this.indexGlobalInt = -1;
	}
	,DetermineIndexLocalVoid: function() {
		var foundIndexLocalBool = false;
		if(this.typeEnum == EnumMuseumType.FLR) {
			foundIndexLocalBool = true;
			this.indexLocalInt = this.indexGlobalInt;
		} else if(this.typeEnum != EnumMuseumType.FLR) {
			var loopCounter1Int = 0;
			while(loopCounter1Int < this.siblingObjectArray.length) {
				if(this.nameStruct.nameAltString == this.siblingObjectArray[loopCounter1Int].GetNameStruct().nameAltString) {
					foundIndexLocalBool = true;
					this.indexLocalInt = loopCounter1Int;
					break;
				}
				loopCounter1Int++;
			}
		}
		if(foundIndexLocalBool == false) this.indexLocalInt = -1;
	}
	,RemoveTagByNameAltVoid: function(_nameString) {
		var x = CollectionFunction.FindTagObject(this.collectionGlobalObject,_nameString);
		HxOverrides.remove(this.tagObjectArray,x);
	}
	,RemoveTagByObjectVoid: function(_tagObject) {
		HxOverrides.remove(this.tagObjectArray,_tagObject);
	}
	,ResetVoid: function() {
		this.fullBool = false;
		this.visitorCurrentInt = 0;
		this.visitorTotalInt = 0;
	}
	,DetermineChildVoid: function() {
		CollectionFunction.ClearArray(this.childStruct.childMuseumObjectArray);
		CollectionFunction.ClearArray(this.childStruct.childVisitorObjectArray);
		if(this.typeEnum == EnumMuseumType.EXH) {
			var loopCounter1Int = 0;
			while(loopCounter1Int < this.collectionGlobalObject.GetVisitorObjectArray().length) {
				if(this.nameStruct.nameAltString == this.collectionGlobalObject.GetVisitorObjectArray()[loopCounter1Int].GetExhibitionCurrentObject().GetNameStruct().nameAltString) this.childStruct.childVisitorObjectArray.push(this.collectionGlobalObject.GetVisitorObjectArray()[loopCounter1Int]);
				loopCounter1Int++;
			}
		} else if(this.typeEnum == EnumMuseumType.FLR) {
			var loopCounter1Int1 = 0;
			while(loopCounter1Int1 < this.collectionGlobalObject.GetRoomObjectArray().length) {
				if(this.nameStruct.nameAltString == this.collectionGlobalObject.GetRoomObjectArray()[loopCounter1Int1].GetParentObject().GetNameStruct().nameAltString) this.childStruct.childMuseumObjectArray.push(this.collectionGlobalObject.GetRoomObjectArray()[loopCounter1Int1]);
				loopCounter1Int1++;
			}
		} else if(this.typeEnum == EnumMuseumType.ROM) {
			var loopCounter1Int2 = 0;
			while(loopCounter1Int2 < this.collectionGlobalObject.GetExhibitionObjectArray().length) {
				if(this.nameStruct.nameAltString == this.collectionGlobalObject.GetExhibitionObjectArray()[loopCounter1Int2].GetParentObject().GetNameStruct().nameAltString) this.childStruct.childMuseumObjectArray.push(this.collectionGlobalObject.GetExhibitionObjectArray()[loopCounter1Int2]);
				loopCounter1Int2++;
			}
		}
	}
	,DetermineFullVoid: function() {
		if(this.visitorCurrentInt >= this.collectionGlobalObject.GetExhibitionFullThresholdInt()) this.fullBool = true; else if(this.visitorCurrentInt < this.collectionGlobalObject.GetExhibitionFullThresholdInt()) this.fullBool = false;
	}
	,DetermineIndexVoid: function() {
		this.DetermineIndexGlobalVoid();
		this.DetermineIndexLocalVoid();
	}
	,DetermineSiblingVoid: function() {
		CollectionFunction.ClearArray(this.siblingObjectArray);
		var tempObjectArray = [];
		if(this.typeEnum == EnumMuseumType.EXH) tempObjectArray = this.collectionGlobalObject.GetExhibitionObjectArray(); else if(this.typeEnum == EnumMuseumType.ROM) tempObjectArray = this.collectionGlobalObject.GetRoomObjectArray();
		var loopCounter1Int = 0;
		if(this.typeEnum != EnumMuseumType.FLR) while(loopCounter1Int < tempObjectArray.length) {
			if(this.parentObject.GetNameStruct().nameAltString == tempObjectArray[loopCounter1Int].GetParentObject().GetNameStruct().nameAltString) this.siblingObjectArray.push(tempObjectArray[loopCounter1Int]);
			loopCounter1Int++;
		}
	}
	,GetChildStruct: function() {
		return this.childStruct;
	}
	,GetExplanationStringArray: function() {
		return this.explanationStringArray;
	}
	,GetFullBool: function() {
		return this.fullBool;
	}
	,GetIndexLocalInt: function() {
		return this.indexLocalInt;
	}
	,GetMuseumUIObject: function() {
		return this.museumUIObject;
	}
	,GetMuseumModeEnum: function() {
		return this.museumModeEnum;
	}
	,GetNameStruct: function() {
		return this.nameStruct;
	}
	,GetParentObject: function() {
		return this.parentObject;
	}
	,GetSiblingObjectArray: function() {
		return this.siblingObjectArray;
	}
	,GetTagObjectArray: function() {
		return this.tagObjectArray;
	}
	,GetTypeEnum: function() {
		return this.typeEnum;
	}
	,GetVisitorCurrentInt: function() {
		return this.visitorCurrentInt;
	}
	,GetVisitorTotalInt: function() {
		return this.visitorTotalInt;
	}
	,Reset: function() {
		this.fullBool = false;
		this.museumModeEnum = null;
		this.visitorCurrentInt = 0;
		this.visitorTotalInt = 0;
	}
	,SetNameAltStringVoid: function(_nameAltString) {
		this.nameStruct.nameAltString = _nameAltString;
	}
	,SetNameFullStringVoid: function(_nameFullString) {
		this.nameStruct.nameFullString = _nameFullString;
	}
	,SetMuseumModeEnumVoid: function(_museumModeEnum) {
		this.museumModeEnum = _museumModeEnum;
	}
	,SetParentObjectVoid: function(_parentObject) {
		this.parentObject = _parentObject;
	}
	,SetVisitorCurrentIntVoid: function(_visitorCurrentInt) {
		this.visitorCurrentInt = _visitorCurrentInt;
	}
	,SetVisitorTotalIntVoid: function(_visitorTotalInt) {
		this.visitorTotalInt = _visitorTotalInt;
	}
	,UpdateVoid: function() {
		if(this.museumModeEnum == EnumMuseumMode.MRK_DEL) {
			if(this.typeEnum == EnumMuseumType.EXH) {
				if(this.childStruct.childVisitorObjectArray.length != 0) {
					var loopCounter1Int = 0;
					while(loopCounter1Int < this.collectionGlobalObject.GetVisitorObjectArray().length) {
						if(this.collectionGlobalObject.GetVisitorObjectArray()[loopCounter1Int].GetFinishedBool() == true) this.collectionGlobalObject.GetVisitorObjectArray()[loopCounter1Int].ChangeExhibitionCurrentVoid(this.collectionGlobalObject.GetArchiveExhibitionObject());
						loopCounter1Int++;
					}
				} else if(this.childStruct.childMuseumObjectArray.length == 0) {
					var _this = this.collectionGlobalObject.GetExhibitionObjectArray();
					HxOverrides.remove(_this,this);
				}
			} else if(this.typeEnum == EnumMuseumType.FLR) {
				if(this.childStruct.childMuseumObjectArray.length != 0) {
					var loopCounter1Int1 = 0;
					while(loopCounter1Int1 < this.collectionGlobalObject.GetRoomObjectArray().length) {
						if(this.nameStruct.nameAltString == this.collectionGlobalObject.GetRoomObjectArray()[loopCounter1Int1].GetParentObject().GetNameStruct().nameAltString) this.collectionGlobalObject.GetRoomObjectArray()[loopCounter1Int1].SetMuseumModeEnumVoid(EnumMuseumMode.REQ_CH_PARENT);
						loopCounter1Int1++;
					}
				} else if(this.childStruct.childMuseumObjectArray.length == 0) {
					var _this1 = this.collectionGlobalObject.GetExhibitionObjectArray();
					HxOverrides.remove(_this1,this);
				}
			} else if(this.typeEnum == EnumMuseumType.ROM) {
				if(this.childStruct.childMuseumObjectArray.length != 0) {
					var loopCounter1Int2 = 0;
					while(loopCounter1Int2 < this.collectionGlobalObject.GetExhibitionObjectArray().length) {
						if(this.nameStruct.nameAltString == this.collectionGlobalObject.GetExhibitionObjectArray()[loopCounter1Int2].GetParentObject().GetNameStruct().nameAltString) this.collectionGlobalObject.GetExhibitionObjectArray()[loopCounter1Int2].SetMuseumModeEnumVoid(EnumMuseumMode.REQ_CH_PARENT);
						loopCounter1Int2++;
					}
				} else if(this.childStruct.childMuseumObjectArray.length == 0) {
					var _this2 = this.collectionGlobalObject.GetExhibitionObjectArray();
					HxOverrides.remove(_this2,this);
				}
			}
		}
	}
	,__class__: ObjectMuseum
};
var ObjectMuseumUI = function(_collectionGlobalObject,_typeEnum) {
	this.yInt = -1;
	this.xInt = -1;
	this.typeEnum = null;
	this.textString = "";
	this.heightInt = 43;
	this.widthInt = -1;
	this.collectionGlobalObject = null;
	this.buttonObject = new haxe_ui_toolkit_controls_Button();
	openfl_display_Sprite.call(this);
	this.collectionGlobalObject = _collectionGlobalObject;
	this.typeEnum = _typeEnum;
	this.buttonObject.set_autoSize(false);
};
$hxClasses["ObjectMuseumUI"] = ObjectMuseumUI;
ObjectMuseumUI.__name__ = ["ObjectMuseumUI"];
ObjectMuseumUI.__super__ = openfl_display_Sprite;
ObjectMuseumUI.prototype = $extend(openfl_display_Sprite.prototype,{
	GetButtonObject: function() {
		return this.buttonObject;
	}
	,UpdateVoid: function(_object,_widthMaxInt) {
		if(this.typeEnum == EnumMuseumType.FLR) {
			this.widthInt = Math.round((_widthMaxInt - openfl_Lib.current.stage.stageWidth / 4 - 5) / 2);
			this.buttonObject.set_width(this.widthInt);
			this.buttonObject.set_height(this.heightInt);
			this.buttonObject.set_id(_object.GetNameStruct().nameAltString);
			this.buttonObject.set_text(_object.GetNameStruct().nameAltString);
			this.buttonObject.set_x(this.buttonObject.get_width() * _object.GetIndexLocalInt() + _object.GetIndexLocalInt() * 5);
			this.buttonObject.set_y(0);
			this.collectionGlobalObject.GetUIMuseumAbsoluteObject().addChild(this.buttonObject);
		} else if(this.typeEnum == EnumMuseumType.EXH || this.typeEnum == EnumMuseumType.ROM) {
			this.widthInt = Math.round((_object.GetParentObject().GetMuseumUIObject().GetButtonObject().get_width() - (_object.GetSiblingObjectArray().length - 1) * 5) / _object.GetSiblingObjectArray().length);
			this.buttonObject.set_width(this.widthInt);
			this.buttonObject.set_height(this.heightInt);
			this.buttonObject.set_id(_object.GetNameStruct().nameAltString);
			this.buttonObject.set_text(_object.GetNameStruct().nameAltString);
			this.buttonObject.set_x(_object.GetParentObject().GetMuseumUIObject().GetButtonObject().get_x() + _object.GetIndexLocalInt() * this.buttonObject.get_width() + _object.GetIndexLocalInt() * 5);
			this.buttonObject.set_y(_object.GetParentObject().GetMuseumUIObject().GetButtonObject().get_y() + _object.GetParentObject().GetMuseumUIObject().GetButtonObject().get_height() + 5);
			this.collectionGlobalObject.GetUIMuseumAbsoluteObject().addChild(this.buttonObject);
		}
	}
	,__class__: ObjectMuseumUI
});
var ObjectTag = function(_collectionGlobalObject,_feelEnum,_generalTagBool,_nameString,_typeEnum) {
	this.verbSString = "";
	this.verbIngString = "";
	this.verb3String = "";
	this.verb2String = "";
	this.verb1String = "";
	this.typeEnum = null;
	this.nounString = "";
	this.nounSString = "";
	this.nounSPosString = "";
	this.nounPosString = "";
	this.nameString = "";
	this.generalTagBool = true;
	this.feelEnum = null;
	this.adverbString = "";
	this.adjectiveString = "";
	this.collectionGlobalObject = null;
	this.collectionGlobalObject = _collectionGlobalObject;
	this.feelEnum = _feelEnum;
	this.generalTagBool = _generalTagBool;
	this.typeEnum = _typeEnum;
	this.nameString = _nameString + "_" + Std.string(this.typeEnum);
	this.AddToArrayVoid();
};
$hxClasses["ObjectTag"] = ObjectTag;
ObjectTag.__name__ = ["ObjectTag"];
ObjectTag.prototype = {
	AddToArrayVoid: function() {
		if(this.generalTagBool == true) {
			this.collectionGlobalObject.GetTagGeneralObjectArray().push(this);
			var _this = this.collectionGlobalObject.GetTagObjectArray();
			HxOverrides.remove(_this,this);
		} else if(this.generalTagBool == false) {
			var _this1 = this.collectionGlobalObject.GetTagGeneralObjectArray();
			HxOverrides.remove(_this1,this);
			this.collectionGlobalObject.GetTagObjectArray().push(this);
		}
	}
	,GetAdjectiveString: function() {
		return this.adjectiveString;
	}
	,GetAdverbString: function() {
		return this.adverbString;
	}
	,GetFeelEnum: function() {
		return this.feelEnum;
	}
	,GetGeneralTagBool: function() {
		return this.generalTagBool;
	}
	,GetNameString: function() {
		return this.nameString;
	}
	,GetNounPosString: function() {
		return this.nounPosString;
	}
	,GetNounSPosString: function() {
		return this.nounSPosString;
	}
	,GetNounSString: function() {
		return this.nounSString;
	}
	,GetNounString: function() {
		return this.nounString;
	}
	,GetTypeEnum: function() {
		return this.typeEnum;
	}
	,GetVerb1String: function() {
		return this.verb1String;
	}
	,GetVerb2String: function() {
		return this.verb2String;
	}
	,GetVerb3String: function() {
		return this.verb3String;
	}
	,GetVerbIngString: function() {
		return this.verbIngString;
	}
	,GetVerbSString: function() {
		return this.verbSString;
	}
	,SetAdjectiveStringObject: function(_adjectiveString) {
		this.adjectiveString = _adjectiveString;
		return this;
	}
	,SetAdverbStringObject: function(_adverbString) {
		this.adverbString = _adverbString;
		return this;
	}
	,SetFeelEnumVoid: function(_feelEnum) {
		this.feelEnum = _feelEnum;
	}
	,SetGeneralTagBoolVoid: function(_generalTagBool) {
		this.generalTagBool = _generalTagBool;
		this.AddToArrayVoid();
	}
	,SetNameStringObject: function(_nameString) {
		this.nameString = _nameString;
		return this;
	}
	,SetNounPosStringObject: function(_nounPosString) {
		this.nounPosString = _nounPosString;
		return this;
	}
	,SetNounSPosStringObject: function(_nounSPosString) {
		this.nounSPosString = _nounSPosString;
		return this;
	}
	,SetNounSStringObject: function(_nounSString) {
		this.nounSString = _nounSString;
		return this;
	}
	,SetNounStringObject: function(_nounString) {
		this.nounString = _nounString;
		return this;
	}
	,SetTypeEnumVoid: function(_typeEnum) {
		this.typeEnum = _typeEnum;
	}
	,SetVerb1StringObject: function(_verb1String) {
		this.verb1String = _verb1String;
		return this;
	}
	,SetVerb2StringObject: function(_verb2String) {
		this.verb2String = _verb2String;
		return this;
	}
	,SetVerb3StringObject: function(_verb3String) {
		this.verb3String = _verb3String;
		return this;
	}
	,SetVerbIngStringObject: function(_verbIngString) {
		this.verbIngString = _verbIngString;
		return this;
	}
	,SetVerbSStringObject: function(_verbSString) {
		this.verbSString = _verbSString;
		return this;
	}
	,__class__: ObjectTag
};
var ObjectVisitor = function(_collectionGlobalObject,_exhibitionCurrentObject,_indexGlobalInt,_nameString) {
	this.visitorUIObject = null;
	this.visitMuseumStructArray = [];
	this.visitExhibitionStructArray = [];
	this.visitedCorrectExhibitionBool = true;
	this.timeMuseumInt = 0;
	this.timeExhibitionInt = 0;
	this.timeAIAutoExhibitionChangeFloat = 0;
	this.targetInt = 3;
	this.tagObjectArray = [];
	this.tagCounterStructArray = [];
	this.sentenceStringArray = [];
	this.scoreInt = 0;
	this.roomCurrentObject = null;
	this.nameString = "";
	this.indexLocalInt = -1;
	this.indexGlobalInt = -1;
	this.floorCurrentObject = null;
	this.finishedBool = false;
	this.explanationStringArray = [];
	this.exhibitionVisitedObjectArray = [];
	this.exhibitionTargetObjectArray = [];
	this.exhibitionCurrentObject = null;
	this.collectionGlobalObject = null;
	this.collectionGlobalObject = _collectionGlobalObject;
	this.indexGlobalInt = _indexGlobalInt;
	this.nameString = _nameString;
	this.collectionGlobalObject.GetVisitorObjectArray().push(this);
	this.visitorUIObject = new ObjectVisitorUI(this.collectionGlobalObject);
	this.ChangeExhibitionCurrentVoid(_exhibitionCurrentObject);
	this.collectionGlobalObject.DetermineExhibitionFullThresholdVoid();
};
$hxClasses["ObjectVisitor"] = ObjectVisitor;
ObjectVisitor.__name__ = ["ObjectVisitor"];
ObjectVisitor.prototype = {
	AddRemoveVisitorFromExhibitionVoid: function(_isAdd) {
		if(_isAdd == true) this.exhibitionCurrentObject.GetChildStruct().childVisitorObjectArray.push(this); else if(_isAdd == false) {
			var _this = this.exhibitionCurrentObject.GetChildStruct().childVisitorObjectArray;
			HxOverrides.remove(_this,this);
		}
	}
	,AddTagCounterVoid: function() {
		var loopCounter1Int = 0;
		this.tagObjectArray = [];
		if(this.exhibitionVisitedObjectArray.length >= 2) {
			loopCounter1Int = 0;
			while(loopCounter1Int < this.exhibitionVisitedObjectArray[this.exhibitionVisitedObjectArray.length - 2].GetTagObjectArray().length) {
				var tagObject = this.exhibitionVisitedObjectArray[this.exhibitionVisitedObjectArray.length - 2].GetTagObjectArray()[loopCounter1Int];
				if(HxOverrides.indexOf(this.tagObjectArray,tagObject,0) == -1) this.tagObjectArray.push(tagObject);
				loopCounter1Int++;
			}
		}
		loopCounter1Int = 0;
		while(loopCounter1Int < this.exhibitionCurrentObject.GetTagObjectArray().length) {
			var newTagBool = true;
			var tagNameString = "";
			var tagCounterStruct = { tagObject : null, tagCounterInt : 1};
			var tagIndexInt = 0;
			tagCounterStruct.tagObject = this.exhibitionCurrentObject.GetTagObjectArray()[loopCounter1Int];
			tagNameString = tagCounterStruct.tagObject.GetNameString();
			while(tagIndexInt < this.tagCounterStructArray.length) {
				if(tagNameString == this.tagCounterStructArray[tagIndexInt].tagObject.GetNameString()) {
					newTagBool = false;
					break;
				}
				tagIndexInt++;
			}
			if(newTagBool == true) this.tagCounterStructArray.push(tagCounterStruct); else if(newTagBool == false) this.tagCounterStructArray[tagIndexInt].tagCounterInt++;
			loopCounter1Int++;
			if(HxOverrides.indexOf(this.tagObjectArray,tagCounterStruct.tagObject,0) == -1) this.tagObjectArray.push(tagCounterStruct.tagObject);
		}
		this.SortTagCounterVoid();
	}
	,ChangeExhibitionCurrentVoid: function(_exhibitionTargetObject) {
		if(_exhibitionTargetObject.GetNameStruct().nameAltString == "EXH_ARC") {
			this.exhibitionCurrentObject = _exhibitionTargetObject;
			this.roomCurrentObject = this.exhibitionCurrentObject;
			this.floorCurrentObject = this.exhibitionCurrentObject;
			this.exhibitionVisitedObjectArray.push(this.exhibitionCurrentObject);
		} else {
			if(this.exhibitionCurrentObject != null) {
				this.roomCurrentObject = this.exhibitionCurrentObject.GetParentObject();
				this.floorCurrentObject = this.roomCurrentObject.GetParentObject();
				this.AddRemoveVisitorFromExhibitionVoid(false);
				this.exhibitionCurrentObject.SetVisitorCurrentIntVoid(this.exhibitionCurrentObject.GetVisitorCurrentInt() - 1);
				this.roomCurrentObject.SetVisitorCurrentIntVoid(this.roomCurrentObject.GetVisitorCurrentInt() - 1);
				this.floorCurrentObject.SetVisitorCurrentIntVoid(this.floorCurrentObject.GetVisitorCurrentInt() - 1);
			}
			this.exhibitionCurrentObject = _exhibitionTargetObject;
			this.roomCurrentObject = this.exhibitionCurrentObject.GetParentObject();
			this.floorCurrentObject = this.roomCurrentObject.GetParentObject();
			this.exhibitionVisitedObjectArray.push(this.exhibitionCurrentObject);
			this.AddTagCounterVoid();
			this.GenerateExhibitionTargetVoid(this.targetInt);
			var indexIntArray = [];
			var loopCounter1Int = 0;
			while(loopCounter1Int < this.exhibitionCurrentObject.GetExplanationStringArray().length) {
				indexIntArray.push(loopCounter1Int);
				loopCounter1Int++;
			}
			var indexRandomInt = indexIntArray[Math.round(Math.random() * (indexIntArray.length - 1))];
			HxOverrides.remove(indexIntArray,indexRandomInt);
			var explanationString = this.exhibitionCurrentObject.GetExplanationStringArray()[indexRandomInt];
			loopCounter1Int = 0;
			while(CollectionFunction.IsExistInArrayBool(this.explanationStringArray,explanationString) == true && loopCounter1Int < this.exhibitionCurrentObject.GetExplanationStringArray().length) {
				indexRandomInt = indexIntArray[Math.round(Math.random() * (indexIntArray.length - 1))];
				HxOverrides.remove(indexIntArray,indexRandomInt);
				explanationString = this.exhibitionCurrentObject.GetExplanationStringArray()[indexRandomInt];
				loopCounter1Int++;
			}
			this.explanationStringArray.push(explanationString);
			this.visitedCorrectExhibitionBool = false;
			loopCounter1Int = 0;
			while(loopCounter1Int < this.exhibitionTargetObjectArray.length) {
				if(this.exhibitionCurrentObject.GetNameStruct().nameAltString == this.exhibitionTargetObjectArray[loopCounter1Int].GetNameStruct().nameAltString) {
					this.visitedCorrectExhibitionBool = true;
					break;
				}
				loopCounter1Int++;
			}
			if(this.visitedCorrectExhibitionBool == true) this.scoreInt++; else if(this.visitedCorrectExhibitionBool == false) this.scoreInt--;
			this.roomCurrentObject = this.exhibitionCurrentObject.GetParentObject();
			this.floorCurrentObject = this.roomCurrentObject.GetParentObject();
			this.exhibitionCurrentObject.SetVisitorCurrentIntVoid(this.exhibitionCurrentObject.GetVisitorCurrentInt() + 1);
			this.exhibitionCurrentObject.SetVisitorTotalIntVoid(this.exhibitionCurrentObject.GetVisitorTotalInt() + 1);
			this.floorCurrentObject.SetVisitorCurrentIntVoid(this.roomCurrentObject.GetVisitorCurrentInt() + 1);
			this.floorCurrentObject.SetVisitorTotalIntVoid(this.roomCurrentObject.GetVisitorTotalInt() + 1);
			this.roomCurrentObject.SetVisitorCurrentIntVoid(this.floorCurrentObject.GetVisitorCurrentInt() + 1);
			this.roomCurrentObject.SetVisitorTotalIntVoid(this.floorCurrentObject.GetVisitorTotalInt() + 1);
			var threeSentenceString = ObjectGeneratorSentence.GenerateSentence3String(this.collectionGlobalObject,this);
			this.sentenceStringArray.push(threeSentenceString);
			loopCounter1Int = 0;
			while(loopCounter1Int < this.collectionGlobalObject.GetFloorObjectArray().length) {
				this.collectionGlobalObject.GetFloorObjectArray()[loopCounter1Int].DetermineFullVoid();
				loopCounter1Int++;
			}
			loopCounter1Int = 0;
			while(loopCounter1Int < this.collectionGlobalObject.GetRoomObjectArray().length) {
				this.collectionGlobalObject.GetRoomObjectArray()[loopCounter1Int].DetermineFullVoid();
				loopCounter1Int++;
			}
			loopCounter1Int = 0;
			while(loopCounter1Int < this.collectionGlobalObject.GetExhibitionObjectArray().length) {
				if(this.collectionGlobalObject.GetExhibitionObjectArray()[loopCounter1Int].GetNameStruct().nameAltString != "EXH_ARC") {
					this.collectionGlobalObject.GetExhibitionObjectArray()[loopCounter1Int].DetermineChildVoid();
					this.collectionGlobalObject.GetExhibitionObjectArray()[loopCounter1Int].DetermineFullVoid();
				}
				loopCounter1Int++;
			}
			loopCounter1Int = 0;
			var necessaryHeightInt = 0;
			while(loopCounter1Int < this.collectionGlobalObject.GetVisitorObjectArray().length) {
				this.collectionGlobalObject.GetVisitorObjectArray()[loopCounter1Int].DetermineIndexLocalVoid();
				this.collectionGlobalObject.GetVisitorObjectArray()[loopCounter1Int].GenerateExhibitionTargetVoid(this.targetInt);
				this.collectionGlobalObject.GetVisitorObjectArray()[loopCounter1Int].GetVisitorUIObject().UpdateVoid(this.collectionGlobalObject.GetVisitorObjectArray()[loopCounter1Int]);
				if(necessaryHeightInt < Math.round(this.collectionGlobalObject.GetVisitorObjectArray()[loopCounter1Int].GetVisitorUIObject().GetButtonObject().get_y() + this.collectionGlobalObject.GetVisitorObjectArray()[loopCounter1Int].GetVisitorUIObject().GetButtonObject().get_height())) necessaryHeightInt = Math.round(this.collectionGlobalObject.GetVisitorObjectArray()[loopCounter1Int].GetVisitorUIObject().GetButtonObject().get_y() + this.collectionGlobalObject.GetVisitorObjectArray()[loopCounter1Int].GetVisitorUIObject().GetButtonObject().get_height());
				loopCounter1Int++;
			}
			this.collectionGlobalObject.GetUIMuseumAbsoluteObject().set_height(necessaryHeightInt);
			var visitorVisitExhibitionStruct = { currentExhibitionTimeInt : 0, exhibitionNameAltString : ""};
			visitorVisitExhibitionStruct.currentExhibitionTimeInt = this.timeExhibitionInt;
			visitorVisitExhibitionStruct.exhibitionNameAltString = this.exhibitionCurrentObject.GetNameStruct().nameAltString;
			this.visitExhibitionStructArray.push(visitorVisitExhibitionStruct);
			if(this.exhibitionVisitedObjectArray.length > 1) {
				var threeSentenceString1 = this.GenerateSentenceVoid(3);
				this.sentenceStringArray.push(threeSentenceString1);
			}
			if(this.exhibitionVisitedObjectArray.length >= this.collectionGlobalObject.GetExhibitionObjectArray().length) this.finishedBool = true;
			this.timeExhibitionInt = 0;
		}
	}
	,GenerateSentenceVoid: function(_amount) {
		return "";
	}
	,SortTagCounterVoid: function() {
		this.tagCounterStructArray.sort(function(_a,_b) {
			return _a.tagCounterInt - _b.tagCounterInt;
		});
	}
	,AIAutoExhibitionChangeVoid: function() {
		if(this.finishedBool == false) {
			var randomFloat = Math.random();
			this.timeAIAutoExhibitionChangeFloat += 0.01;
			if(randomFloat > 1.0 - this.timeAIAutoExhibitionChangeFloat) {
				var randomInt = Math.round(Math.random() * (this.exhibitionTargetObjectArray.length - 1));
				this.ChangeExhibitionCurrentVoid(this.exhibitionTargetObjectArray[randomInt]);
				this.timeAIAutoExhibitionChangeFloat = 0;
			}
		}
	}
	,DetermineIndexLocalVoid: function() {
		var _this = this.exhibitionCurrentObject.GetChildStruct().childVisitorObjectArray;
		this.indexLocalInt = HxOverrides.indexOf(_this,this,0);
	}
	,GenerateExhibitionTargetVoid: function(_targetInt) {
		CollectionFunction.ClearArray(this.exhibitionTargetObjectArray);
		var loopCounter1Int = 0;
		while(loopCounter1Int < this.collectionGlobalObject.GetExhibitionObjectArray().length) {
			if(this.exhibitionCurrentObject.GetNameStruct().nameAltString != this.collectionGlobalObject.GetExhibitionObjectArray()[loopCounter1Int].GetNameStruct().nameAltString) this.exhibitionTargetObjectArray.push(this.collectionGlobalObject.GetExhibitionObjectArray()[loopCounter1Int]);
			loopCounter1Int++;
		}
		loopCounter1Int = 0;
		while(loopCounter1Int < this.exhibitionTargetObjectArray.length) {
			if(this.exhibitionTargetObjectArray[loopCounter1Int].GetMuseumModeEnum() == EnumMuseumMode.MRK_DEL) {
				HxOverrides.remove(this.exhibitionTargetObjectArray,this.exhibitionTargetObjectArray[loopCounter1Int]);
				loopCounter1Int--;
			}
			if(this.exhibitionTargetObjectArray.length <= _targetInt) return;
			loopCounter1Int++;
		}
		loopCounter1Int = 0;
		while(loopCounter1Int < this.exhibitionTargetObjectArray.length) {
			if(this.exhibitionTargetObjectArray[loopCounter1Int].GetFullBool() == true) {
				HxOverrides.remove(this.exhibitionTargetObjectArray,this.exhibitionTargetObjectArray[loopCounter1Int]);
				loopCounter1Int--;
			}
			if(this.exhibitionTargetObjectArray.length <= _targetInt) return;
			loopCounter1Int++;
		}
		loopCounter1Int = 0;
		while(loopCounter1Int < this.exhibitionTargetObjectArray.length) {
			var loopCounter2Int = 0;
			while(loopCounter2Int < this.exhibitionVisitedObjectArray.length) {
				if(this.exhibitionTargetObjectArray[loopCounter1Int].GetNameStruct().nameAltString == this.exhibitionVisitedObjectArray[loopCounter2Int].GetNameStruct().nameAltString) {
					if(Math.random() > 0.9) {
						HxOverrides.remove(this.exhibitionTargetObjectArray,this.exhibitionVisitedObjectArray[loopCounter2Int]);
						loopCounter1Int--;
						if(loopCounter1Int < 0) loopCounter1Int = 0;
					}
				}
				loopCounter2Int++;
			}
			if(this.exhibitionTargetObjectArray.length <= _targetInt) return;
			loopCounter1Int++;
		}
		loopCounter1Int = 0;
		while(loopCounter1Int < this.exhibitionTargetObjectArray.length) {
			var accumPercentageFloat = 0;
			var basePercentageFloat = 0.1;
			var loopCounter2Int1 = 0;
			var tagSameCounterInt = 0;
			while(loopCounter2Int1 < this.exhibitionTargetObjectArray[loopCounter1Int].GetTagObjectArray().length) {
				if((function($this) {
					var $r;
					var x = $this.exhibitionTargetObjectArray[loopCounter1Int].GetTagObjectArray()[loopCounter2Int1];
					$r = HxOverrides.indexOf($this.tagObjectArray,x,0);
					return $r;
				}(this)) > -1) tagSameCounterInt++;
				loopCounter2Int1++;
			}
			accumPercentageFloat = basePercentageFloat + tagSameCounterInt / 10;
			if(accumPercentageFloat >= 1.0) accumPercentageFloat = 1.0;
			if(Math.random() > accumPercentageFloat) {
				HxOverrides.remove(this.exhibitionTargetObjectArray,this.exhibitionTargetObjectArray[loopCounter1Int]);
				loopCounter1Int--;
			}
			if(this.exhibitionTargetObjectArray.length <= _targetInt) return;
			loopCounter1Int++;
		}
		loopCounter1Int = 0;
		while(loopCounter1Int < this.exhibitionTargetObjectArray.length) {
			var sameCounterInt = 0;
			var roomTargetObject = this.exhibitionTargetObjectArray[loopCounter1Int].GetParentObject();
			var floorTargetObject = roomTargetObject.GetParentObject();
			if(roomTargetObject == this.roomCurrentObject) sameCounterInt++;
			if(floorTargetObject == this.floorCurrentObject) sameCounterInt++;
			if(sameCounterInt == 1) {
				if(Math.random() > 0.50) {
					HxOverrides.remove(this.exhibitionTargetObjectArray,this.exhibitionTargetObjectArray[loopCounter1Int]);
					loopCounter1Int--;
				}
			} else if(sameCounterInt == 2) {
				if(Math.random() > 0.25) {
					HxOverrides.remove(this.exhibitionTargetObjectArray,this.exhibitionTargetObjectArray[loopCounter1Int]);
					loopCounter1Int--;
				}
			}
			if(this.exhibitionTargetObjectArray.length <= _targetInt) return;
			loopCounter1Int++;
		}
		while(this.exhibitionTargetObjectArray.length > _targetInt) this.exhibitionTargetObjectArray.pop();
	}
	,GetExhibitionCurrentObject: function() {
		return this.exhibitionCurrentObject;
	}
	,GetFinishedBool: function() {
		return this.finishedBool;
	}
	,GetIndexLocalInt: function() {
		return this.indexLocalInt;
	}
	,GetNameString: function() {
		return this.nameString;
	}
	,GetScoreInt: function() {
		return this.scoreInt;
	}
	,GetSentenceStringArray: function() {
		return this.sentenceStringArray;
	}
	,GetTagCounterStructArray: function() {
		return this.tagCounterStructArray;
	}
	,GetTagObjectArray: function() {
		return this.tagObjectArray;
	}
	,GetVisitorUIObject: function() {
		return this.visitorUIObject;
	}
	,GetVisitCorrectExhibitionBool: function() {
		return this.visitedCorrectExhibitionBool;
	}
	,SetIndexLocalIntVoid: function(_indexLocalInt) {
		this.indexLocalInt = _indexLocalInt;
	}
	,__class__: ObjectVisitor
};
var ObjectVisitorUI = function(_collectionGlobalObject) {
	this.yInt = 0;
	this.xInt = 0;
	this.textString = "";
	this.indexLocalInt = -1;
	this.heightInt = 43;
	this.widthInt = -1;
	this.collectionGlobalObject = null;
	this.buttonObject = new haxe_ui_toolkit_controls_Button();
	openfl_display_Sprite.call(this);
	this.collectionGlobalObject = _collectionGlobalObject;
	this.buttonObject.set_autoSize(false);
	this.collectionGlobalObject.GetUIMuseumAbsoluteObject().addChild(this.buttonObject);
};
$hxClasses["ObjectVisitorUI"] = ObjectVisitorUI;
ObjectVisitorUI.__name__ = ["ObjectVisitorUI"];
ObjectVisitorUI.__super__ = openfl_display_Sprite;
ObjectVisitorUI.prototype = $extend(openfl_display_Sprite.prototype,{
	GetButtonObject: function() {
		return this.buttonObject;
	}
	,UpdateVoid: function(_object) {
		this.widthInt = Math.round(_object.GetExhibitionCurrentObject().GetMuseumUIObject().GetButtonObject().get_width());
		this.buttonObject.set_width(this.widthInt);
		this.buttonObject.set_height(this.heightInt);
		this.buttonObject.set_id(_object.GetNameString());
		this.buttonObject.set_text(_object.GetNameString());
		this.buttonObject.set_x(_object.GetExhibitionCurrentObject().GetMuseumUIObject().GetButtonObject().get_x());
		this.buttonObject.set_y(_object.GetExhibitionCurrentObject().GetMuseumUIObject().GetButtonObject().get_y() + _object.GetExhibitionCurrentObject().GetMuseumUIObject().GetButtonObject().get_height() + _object.GetVisitorUIObject().GetButtonObject().get_height() * _object.GetIndexLocalInt() + 5 + _object.GetIndexLocalInt() * 5);
	}
	,__class__: ObjectVisitorUI
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) return null; else if(o.__properties__ && (tmp = o.__properties__["get_" + field])) return o[tmp](); else return o[field];
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	if(o.__properties__ && (tmp = o.__properties__["set_" + field])) o[tmp](value); else o[field] = value;
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) return true;
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
	return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) return false;
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		Reflect.setField(o2,f,Reflect.field(o,f));
	}
	return o2;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std["is"] = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
Std.random = function(x) {
	if(x <= 0) return 0; else return Math.floor(Math.random() * x);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	add: function(x) {
		this.b += Std.string(x);
	}
	,addSub: function(s,pos,len) {
		if(len == null) this.b += HxOverrides.substr(s,pos,null); else this.b += HxOverrides.substr(s,pos,len);
	}
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) return s.split("\"").join("&quot;").split("'").join("&#039;"); else return s;
};
StringTools.startsWith = function(s,start) {
	return s.length >= start.length && HxOverrides.substr(s,0,start.length) == start;
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	return slen >= elen && HxOverrides.substr(s,slen - elen,elen) == end;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	return c > 8 && c < 14 || c == 32;
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) r++;
	if(r > 0) return HxOverrides.substr(s,r,l - r); else return s;
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) r++;
	if(r > 0) return HxOverrides.substr(s,0,l - r); else return s;
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) return s;
	while(s.length < l) s = c + s;
	return s;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) return null; else return js_Boot.getClass(o);
};
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) return null;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) return null;
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
	return null;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.enumEq = function(a,b) {
	if(a == b) return true;
	try {
		if(a[0] != b[0]) return false;
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) return false;
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) return false;
	} catch( e1 ) {
		haxe_CallStack.lastException = e1;
		if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
		return false;
	}
	return true;
};
var UIPopupAddObjectMuseum = function(_collectionGlobalObject,_root) {
	this.textObject = null;
	this.popupObject = null;
	this.listSelectorTypePrevInt = -1;
	this.listSelectorTypeObject = null;
	this.listSelectorTypeInt = -1;
	this.listSelectorTagStructArray = [];
	this.listSelectorTagCurrentInt = 1;
	this.listSelectorParentObject = null;
	this.gridObject = null;
	this.collectionGlobalObject = null;
	this.buttonObject = null;
	var _g = this;
	this.collectionGlobalObject = _collectionGlobalObject;
	this.buttonObject = _root.findChild("UIPopupAddMuseumObjectButton",haxe_ui_toolkit_controls_Button,true);
	this.buttonObject.set_onClick(function(_e) {
		var buttonControlInt = 0;
		buttonControlInt |= 1;
		buttonControlInt |= 4096;
		var iDisplayObject = haxe_ui_toolkit_core_Toolkit.processXmlResource("layout/UIPopupAddObjectMuseum.xml");
		_g.popupObject = haxe_ui_toolkit_core_PopupManager.get_instance().showCustom(iDisplayObject,"Add Museum Object",buttonControlInt,function(_button) {
			if(_button == 1 || _button == 4096) _g.listSelectorTagCurrentInt = 1;
		});
		_g.gridObject = _g.popupObject.get_content().findChild("UIPopupAddObjectMuseum_Grid",haxe_ui_toolkit_containers_Grid,true);
		_g.listSelectorParentObject = _g.popupObject.get_content().findChild("UIPopupAddObjectMuseum_SelectParentObject",haxe_ui_toolkit_controls_selection_ListSelector,true);
		_g.listSelectorTypeObject = _g.popupObject.get_content().findChild("UIPopupAddObjectMuseum_SelectType",haxe_ui_toolkit_controls_selection_ListSelector,true);
		CollectionFunction.ClearArray(_g.listSelectorTagStructArray);
		var listSelectorTagObject = _g.popupObject.get_content().findChild("UIPopupAddObjectMuseum_SelectTag_1",haxe_ui_toolkit_controls_selection_ListSelector,true);
		var listSelectorTagTextObject = _g.popupObject.get_content().findChild("UIPopupAddObjectMuseum_SelectTagText_1",haxe_ui_toolkit_controls_Text,true);
		var listSelectorTagStruct = { listSelectorObject : listSelectorTagObject, textObject : listSelectorTagTextObject};
		_g.listSelectorTagStructArray.push(listSelectorTagStruct);
		listSelectorTagObject.get_dataSource().createFromString("Remove");
		var loopCounter1Int = 0;
		while(loopCounter1Int < _g.collectionGlobalObject.GetTagObjectArray().length) {
			listSelectorTagObject.get_dataSource().createFromString(_g.collectionGlobalObject.GetTagObjectArray()[loopCounter1Int].GetNameString());
			loopCounter1Int++;
		}
	});
};
$hxClasses["UIPopupAddObjectMuseum"] = UIPopupAddObjectMuseum;
UIPopupAddObjectMuseum.__name__ = ["UIPopupAddObjectMuseum"];
UIPopupAddObjectMuseum.prototype = {
	UpdateVoid: function() {
		if(this.popupObject != null && this.listSelectorParentObject != null && this.listSelectorTypeObject != null) {
			this.listSelectorTypeInt = this.listSelectorTypeObject.get_selectedIndex();
			if(this.listSelectorTypeInt == -1) this.listSelectorParentObject.set_disabled(true);
			if(this.listSelectorTypeInt != this.listSelectorTypePrevInt) {
				this.listSelectorParentObject.get_dataSource().removeAll();
				this.listSelectorParentObject.set_selectedIndex(-1);
				var tempObjectArray = null;
				if(this.listSelectorTypeInt == 0) {
					this.listSelectorParentObject.set_disabled(false);
					tempObjectArray = this.collectionGlobalObject.GetRoomObjectArray();
				} else if(this.listSelectorTypeInt == 1) this.listSelectorParentObject.set_disabled(true); else if(this.listSelectorTypeInt == 2) {
					this.listSelectorParentObject.set_disabled(false);
					tempObjectArray = this.collectionGlobalObject.GetFloorObjectArray();
				}
				if(this.listSelectorTypeInt != 1) {
					var loopCounter1Int = 0;
					while(loopCounter1Int < tempObjectArray.length) {
						this.listSelectorParentObject.get_dataSource().createFromString(tempObjectArray[loopCounter1Int].GetNameStruct().nameAltString);
						loopCounter1Int++;
					}
				}
				this.listSelectorTypePrevInt = this.listSelectorTypeInt;
			}
		}
		if(this.popupObject != null && this.listSelectorTagStructArray.length > 0) {
			var loopCounter1Int1 = 0;
			while(loopCounter1Int1 < this.listSelectorTagStructArray.length) {
				if(this.listSelectorTagStructArray[loopCounter1Int1].listSelectorObject.get_selectedIndex() == 0 && this.listSelectorTagStructArray.length > 1) {
					if(loopCounter1Int1 == this.listSelectorTagStructArray.length - 1) this.listSelectorTagStructArray[loopCounter1Int1].listSelectorObject.set_selectedIndex(-1); else {
						this.gridObject.removeChild(this.listSelectorTagStructArray[loopCounter1Int1].listSelectorObject);
						this.gridObject.removeChild(this.listSelectorTagStructArray[loopCounter1Int1].textObject);
						HxOverrides.remove(this.listSelectorTagStructArray,this.listSelectorTagStructArray[loopCounter1Int1]);
					}
				} else if(this.listSelectorTagStructArray[loopCounter1Int1].listSelectorObject.get_selectedIndex() == 0 && this.listSelectorTagStructArray.length == 1) this.listSelectorTagStructArray[loopCounter1Int1].listSelectorObject.set_selectedIndex(-1);
				loopCounter1Int1++;
			}
			if(this.listSelectorTagStructArray[this.listSelectorTagStructArray.length - 1].listSelectorObject.get_selectedIndex() != -1 && this.listSelectorTagStructArray[this.listSelectorTagStructArray.length - 1].listSelectorObject.get_selectedIndex() != 0) {
				var listSelectorTagTextObject = new haxe_ui_toolkit_controls_Text();
				listSelectorTagTextObject = new haxe_ui_toolkit_controls_Text();
				listSelectorTagTextObject.set_text("Tags");
				listSelectorTagTextObject.set_id("UIPopupAddObjectMuseum_SelectTagText_" + this.listSelectorTagStructArray.length);
				this.gridObject.addChild(listSelectorTagTextObject);
				var listSelectorTagObject = new haxe_ui_toolkit_controls_selection_ListSelector();
				listSelectorTagObject.get_dataSource().createFromString("Remove");
				var tempUsedTagStringArray = [];
				var loopCounter1Int2 = 0;
				while(loopCounter1Int2 < this.collectionGlobalObject.GetTagObjectArray().length) {
					tempUsedTagStringArray.push(this.collectionGlobalObject.GetTagObjectArray()[loopCounter1Int2].GetNameString());
					loopCounter1Int2++;
				}
				loopCounter1Int2 = this.listSelectorTagStructArray.length - 2;
				while(loopCounter1Int2 > 0) {
					var tempListSelectorTagObject = this.popupObject.get_content().findChild("UIPopupAddObjectMuseum_SelectTag_" + loopCounter1Int2,haxe_ui_toolkit_controls_selection_ListSelector,true);
					haxe_Log.trace(loopCounter1Int2,{ fileName : "UIPopupAddObjectMuseum.hx", lineNumber : 168, className : "UIPopupAddObjectMuseum", methodName : "UpdateVoid"});
					haxe_Log.trace(tempListSelectorTagObject,{ fileName : "UIPopupAddObjectMuseum.hx", lineNumber : 169, className : "UIPopupAddObjectMuseum", methodName : "UpdateVoid"});
					haxe_Log.trace(tempListSelectorTagObject.get_text(),{ fileName : "UIPopupAddObjectMuseum.hx", lineNumber : 170, className : "UIPopupAddObjectMuseum", methodName : "UpdateVoid"});
					var x = tempListSelectorTagObject.get_text();
					HxOverrides.remove(tempUsedTagStringArray,x);
					loopCounter1Int2--;
				}
				loopCounter1Int2 = 0;
				while(loopCounter1Int2 < tempUsedTagStringArray.length) {
					listSelectorTagObject.get_dataSource().createFromString(tempUsedTagStringArray[loopCounter1Int2]);
					loopCounter1Int2++;
				}
				listSelectorTagObject.set_id("UIPopupAddObjectMuseum_SelectTag_" + this.listSelectorTagStructArray.length);
				listSelectorTagObject.set_percentWidth(100);
				listSelectorTagObject.set_text(" ");
				this.gridObject.addChild(listSelectorTagObject);
				var listSelectorTagStruct = { listSelectorObject : listSelectorTagObject, textObject : listSelectorTagTextObject};
				this.listSelectorTagStructArray.push(listSelectorTagStruct);
			}
		}
	}
	,GetPopupObject: function() {
		return this.popupObject;
	}
	,__class__: UIPopupAddObjectMuseum
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) return aNeg; else return a > b;
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var $int = this1;
	if($int < 0) return 4294967296.0 + $int; else return $int + 0.0;
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get_nodeValue: function() {
		if(this.nodeType == Xml.Document || this.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + this.nodeType);
		return this.nodeValue;
	}
	,get: function(att) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.attributeMap.get(att);
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		this.attributeMap.set(att,value);
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.attributeMap.exists(att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.attributeMap.keys();
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		var ret;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) _g.push(child);
		}
		ret = _g;
		return HxOverrides.iter(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) return child;
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		if(x.parent != null) x.parent.removeChild(x);
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
	,__properties__: {get_nodeValue:"get_nodeValue"}
};
var haxe_StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.lastException = null;
haxe_CallStack.getStack = function(e) {
	if(e == null) return [];
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) site = haxe_CallStack.wrapCallSite(site);
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.wrapCallSite = null;
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		if(m == null) b.b += "null"; else b.b += "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		if(file == null) b.b += "null"; else b.b += "" + file;
		b.b += " line ";
		if(line == null) b.b += "null"; else b.b += "" + line;
		if(s1 != null) b.b += ")";
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		if(cname == null) b.b += "null"; else b.b += "" + cname;
		b.b += ".";
		if(meth == null) b.b += "null"; else b.b += "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		if(n == null) b.b += "null"; else b.b += "" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) return []; else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") stack.shift();
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function"?haxe_StackItem.LocalFunction():meth == "Global code"?null:haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else m.push(haxe_StackItem.Module(StringTools.trim(line)));
		}
		return m;
	} else return s;
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = ["haxe","Resource"];
haxe_Resource.content = null;
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) return x.str;
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) return haxe_io_Bytes.ofString(x.str);
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = haxe_Timer.stamp();
	var r = f();
	haxe_Log.trace(haxe_Timer.stamp() - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) return;
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) return hb;
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		if(srcpos == 0 && len == src.length) this.b.set(src.b,pos); else this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
	}
	,getDouble: function(pos) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		this.data.setFloat32(pos,v,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		this.data.setUint16(pos,v,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) complement = true;
	if(complement) while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) nbits++;
	if(nbits > 8 || len != 1 << nbits) throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = haxe_io_Bytes.alloc(size + (b.length * 8 % nbits == 0?0:1));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.get(pin++);
			}
			curbits -= nbits;
			out.set(pout++,base.b[buf >> curbits & mask]);
		}
		if(curbits > 0) out.set(pout++,base.b[buf << nbits - curbits & mask]);
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) this.initTable();
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = haxe_io_Bytes.alloc(size);
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.get(pin++)];
				if(i == -1) throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				buf |= i;
			}
			curbits -= 8;
			out.set(pout++,buf >> curbits & 255);
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Md5 = function() {
};
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = ["haxe","crypto","Md5"];
haxe_crypto_Md5.encode = function(s) {
	var m = new haxe_crypto_Md5();
	var h = m.doEncode(haxe_crypto_Md5.str2blks(s));
	return m.hex(h);
};
haxe_crypto_Md5.str2blks = function(str) {
	var nblk = (str.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	while(_g < blksSize) {
		var i1 = _g++;
		blks[i1] = 0;
	}
	var i = 0;
	while(i < str.length) {
		blks[i >> 2] |= HxOverrides.cca(str,i) << (str.length * 8 + i) % 4 * 8;
		i++;
	}
	blks[i >> 2] |= 128 << (str.length * 8 + i) % 4 * 8;
	var l = str.length * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			var _g1 = 0;
			while(_g1 < 4) {
				var j = _g1++;
				str += hex_chr.charAt(num >> j * 8 + 4 & 15) + hex_chr.charAt(num >> j * 8 & 15);
			}
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_GenericCell = function(elt,next) {
	this.elt = elt;
	this.next = next;
};
$hxClasses["haxe.ds.GenericCell"] = haxe_ds_GenericCell;
haxe_ds_GenericCell.__name__ = ["haxe","ds","GenericCell"];
haxe_ds_GenericCell.prototype = {
	__class__: haxe_ds_GenericCell
};
var haxe_ds_GenericStack = function() {
};
$hxClasses["haxe.ds.GenericStack"] = haxe_ds_GenericStack;
haxe_ds_GenericStack.__name__ = ["haxe","ds","GenericStack"];
haxe_ds_GenericStack.prototype = {
	add: function(item) {
		this.head = new haxe_ds_GenericCell(item,this.head);
	}
	,pop: function() {
		var k = this.head;
		if(k == null) return null; else {
			this.head = k.next;
			return k.elt;
		}
	}
	,__class__: haxe_ds_GenericStack
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { };
	this.h.__keys__ = { };
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) return false;
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		return this.map.get(this.keys[this.index++]);
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) this.setReserved(key,value); else this.h[key] = value;
	}
	,get: function(key) {
		if(__map_reserved[key] != null) return this.getReserved(key);
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) return this.existsReserved(key);
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) this.rh = { };
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) return null; else return this.rh["$" + key];
	}
	,existsReserved: function(key) {
		if(this.rh == null) return false;
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) return false;
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) return false;
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		var _this = this.arrayKeys();
		return HxOverrides.iter(_this);
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) out.push(key);
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) out.push(key.substr(1));
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$Vector_Vector_$Impl_$ = {};
$hxClasses["haxe.ds._Vector.Vector_Impl_"] = haxe_ds__$Vector_Vector_$Impl_$;
haxe_ds__$Vector_Vector_$Impl_$.__name__ = ["haxe","ds","_Vector","Vector_Impl_"];
haxe_ds__$Vector_Vector_$Impl_$.blit = function(src,srcPos,dest,destPos,len) {
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		dest[destPos + i] = src[srcPos + i];
	}
};
haxe_ds__$Vector_Vector_$Impl_$.toArray = function(this1) {
	var a = [];
	var len = this1.length;
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		a[i] = this1[i];
	}
	return a;
};
var haxe_io_BytesBuffer = function() {
	this.b = [];
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = ["haxe","io","BytesBuffer"];
haxe_io_BytesBuffer.prototype = {
	getBytes: function() {
		var bytes = new haxe_io_Bytes(new Uint8Array(this.b).buffer);
		this.b = null;
		return bytes;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = ["haxe","io","Input"];
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		while(k > 0) {
			b[pos] = this.readByte();
			pos++;
			k--;
		}
		return len;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,readString: function(len) {
		var b = haxe_io_Bytes.alloc(len);
		this.readFullBytes(b,0,len);
		return b.toString();
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) pos = 0;
	if(len == null) len = b.length - pos;
	if(pos < 0 || len < 0 || pos + len > b.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = ["haxe","io","BytesInput"];
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		if(this.len == 0) throw new js__$Boot_HaxeError(new haxe_io_Eof());
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		if(this.len == 0 && len > 0) throw new js__$Boot_HaxeError(new haxe_io_Eof());
		if(this.len < len) len = this.len;
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = ["haxe","io","Output"];
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = ["haxe","io","BytesOutput"];
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.b.b.push(c);
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) return 0.0;
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) return 0;
	var af;
	if(f < 0) af = -f; else af = f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) exp = -127; else if(exp > 128) exp = 128;
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608) & 8388607;
	return (f < 0?-2147483648:0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) return 0.0;
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else {
		var av;
		if(v < 0) av = -v; else av = v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig;
		var v1 = (av / Math.pow(2,exp) - 1) * 4503599627370496.;
		sig = Math.round(v1);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0?-2147483648:0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else this.dir = null;
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null?"":this.dir + (this.backslash?"\\":"/")) + this.file + (this.ext == null?"":"." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_io_StringInput = function(s) {
	haxe_io_BytesInput.call(this,haxe_io_Bytes.ofString(s));
};
$hxClasses["haxe.io.StringInput"] = haxe_io_StringInput;
haxe_io_StringInput.__name__ = ["haxe","io","StringInput"];
haxe_io_StringInput.__super__ = haxe_io_BytesInput;
haxe_io_StringInput.prototype = $extend(haxe_io_BytesInput.prototype,{
	__class__: haxe_io_StringInput
});
var haxe_macro_Constant = $hxClasses["haxe.macro.Constant"] = { __ename__ : true, __constructs__ : ["CInt","CFloat","CString","CIdent","CRegexp"] };
haxe_macro_Constant.CInt = function(v) { var $x = ["CInt",0,v]; $x.__enum__ = haxe_macro_Constant; $x.toString = $estr; return $x; };
haxe_macro_Constant.CFloat = function(f) { var $x = ["CFloat",1,f]; $x.__enum__ = haxe_macro_Constant; $x.toString = $estr; return $x; };
haxe_macro_Constant.CString = function(s) { var $x = ["CString",2,s]; $x.__enum__ = haxe_macro_Constant; $x.toString = $estr; return $x; };
haxe_macro_Constant.CIdent = function(s) { var $x = ["CIdent",3,s]; $x.__enum__ = haxe_macro_Constant; $x.toString = $estr; return $x; };
haxe_macro_Constant.CRegexp = function(r,opt) { var $x = ["CRegexp",4,r,opt]; $x.__enum__ = haxe_macro_Constant; $x.toString = $estr; return $x; };
var haxe_macro_Binop = $hxClasses["haxe.macro.Binop"] = { __ename__ : true, __constructs__ : ["OpAdd","OpMult","OpDiv","OpSub","OpAssign","OpEq","OpNotEq","OpGt","OpGte","OpLt","OpLte","OpAnd","OpOr","OpXor","OpBoolAnd","OpBoolOr","OpShl","OpShr","OpUShr","OpMod","OpAssignOp","OpInterval","OpArrow"] };
haxe_macro_Binop.OpAdd = ["OpAdd",0];
haxe_macro_Binop.OpAdd.toString = $estr;
haxe_macro_Binop.OpAdd.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpMult = ["OpMult",1];
haxe_macro_Binop.OpMult.toString = $estr;
haxe_macro_Binop.OpMult.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpDiv = ["OpDiv",2];
haxe_macro_Binop.OpDiv.toString = $estr;
haxe_macro_Binop.OpDiv.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpSub = ["OpSub",3];
haxe_macro_Binop.OpSub.toString = $estr;
haxe_macro_Binop.OpSub.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpAssign = ["OpAssign",4];
haxe_macro_Binop.OpAssign.toString = $estr;
haxe_macro_Binop.OpAssign.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpEq = ["OpEq",5];
haxe_macro_Binop.OpEq.toString = $estr;
haxe_macro_Binop.OpEq.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpNotEq = ["OpNotEq",6];
haxe_macro_Binop.OpNotEq.toString = $estr;
haxe_macro_Binop.OpNotEq.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpGt = ["OpGt",7];
haxe_macro_Binop.OpGt.toString = $estr;
haxe_macro_Binop.OpGt.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpGte = ["OpGte",8];
haxe_macro_Binop.OpGte.toString = $estr;
haxe_macro_Binop.OpGte.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpLt = ["OpLt",9];
haxe_macro_Binop.OpLt.toString = $estr;
haxe_macro_Binop.OpLt.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpLte = ["OpLte",10];
haxe_macro_Binop.OpLte.toString = $estr;
haxe_macro_Binop.OpLte.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpAnd = ["OpAnd",11];
haxe_macro_Binop.OpAnd.toString = $estr;
haxe_macro_Binop.OpAnd.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpOr = ["OpOr",12];
haxe_macro_Binop.OpOr.toString = $estr;
haxe_macro_Binop.OpOr.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpXor = ["OpXor",13];
haxe_macro_Binop.OpXor.toString = $estr;
haxe_macro_Binop.OpXor.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpBoolAnd = ["OpBoolAnd",14];
haxe_macro_Binop.OpBoolAnd.toString = $estr;
haxe_macro_Binop.OpBoolAnd.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpBoolOr = ["OpBoolOr",15];
haxe_macro_Binop.OpBoolOr.toString = $estr;
haxe_macro_Binop.OpBoolOr.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpShl = ["OpShl",16];
haxe_macro_Binop.OpShl.toString = $estr;
haxe_macro_Binop.OpShl.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpShr = ["OpShr",17];
haxe_macro_Binop.OpShr.toString = $estr;
haxe_macro_Binop.OpShr.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpUShr = ["OpUShr",18];
haxe_macro_Binop.OpUShr.toString = $estr;
haxe_macro_Binop.OpUShr.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpMod = ["OpMod",19];
haxe_macro_Binop.OpMod.toString = $estr;
haxe_macro_Binop.OpMod.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpAssignOp = function(op) { var $x = ["OpAssignOp",20,op]; $x.__enum__ = haxe_macro_Binop; $x.toString = $estr; return $x; };
haxe_macro_Binop.OpInterval = ["OpInterval",21];
haxe_macro_Binop.OpInterval.toString = $estr;
haxe_macro_Binop.OpInterval.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpArrow = ["OpArrow",22];
haxe_macro_Binop.OpArrow.toString = $estr;
haxe_macro_Binop.OpArrow.__enum__ = haxe_macro_Binop;
var haxe_macro_Unop = $hxClasses["haxe.macro.Unop"] = { __ename__ : true, __constructs__ : ["OpIncrement","OpDecrement","OpNot","OpNeg","OpNegBits"] };
haxe_macro_Unop.OpIncrement = ["OpIncrement",0];
haxe_macro_Unop.OpIncrement.toString = $estr;
haxe_macro_Unop.OpIncrement.__enum__ = haxe_macro_Unop;
haxe_macro_Unop.OpDecrement = ["OpDecrement",1];
haxe_macro_Unop.OpDecrement.toString = $estr;
haxe_macro_Unop.OpDecrement.__enum__ = haxe_macro_Unop;
haxe_macro_Unop.OpNot = ["OpNot",2];
haxe_macro_Unop.OpNot.toString = $estr;
haxe_macro_Unop.OpNot.__enum__ = haxe_macro_Unop;
haxe_macro_Unop.OpNeg = ["OpNeg",3];
haxe_macro_Unop.OpNeg.toString = $estr;
haxe_macro_Unop.OpNeg.__enum__ = haxe_macro_Unop;
haxe_macro_Unop.OpNegBits = ["OpNegBits",4];
haxe_macro_Unop.OpNegBits.toString = $estr;
haxe_macro_Unop.OpNegBits.__enum__ = haxe_macro_Unop;
var haxe_macro_ExprDef = $hxClasses["haxe.macro.ExprDef"] = { __ename__ : true, __constructs__ : ["EConst","EArray","EBinop","EField","EParenthesis","EObjectDecl","EArrayDecl","ECall","ENew","EUnop","EVars","EFunction","EBlock","EFor","EIn","EIf","EWhile","ESwitch","ETry","EReturn","EBreak","EContinue","EUntyped","EThrow","ECast","EDisplay","EDisplayNew","ETernary","ECheckType","EMeta"] };
haxe_macro_ExprDef.EConst = function(c) { var $x = ["EConst",0,c]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EArray = function(e1,e2) { var $x = ["EArray",1,e1,e2]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EBinop = function(op,e1,e2) { var $x = ["EBinop",2,op,e1,e2]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EField = function(e,field) { var $x = ["EField",3,e,field]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EParenthesis = function(e) { var $x = ["EParenthesis",4,e]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EObjectDecl = function(fields) { var $x = ["EObjectDecl",5,fields]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EArrayDecl = function(values) { var $x = ["EArrayDecl",6,values]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.ECall = function(e,params) { var $x = ["ECall",7,e,params]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.ENew = function(t,params) { var $x = ["ENew",8,t,params]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EUnop = function(op,postFix,e) { var $x = ["EUnop",9,op,postFix,e]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EVars = function(vars) { var $x = ["EVars",10,vars]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EFunction = function(name,f) { var $x = ["EFunction",11,name,f]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EBlock = function(exprs) { var $x = ["EBlock",12,exprs]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EFor = function(it,expr) { var $x = ["EFor",13,it,expr]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EIn = function(e1,e2) { var $x = ["EIn",14,e1,e2]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EIf = function(econd,eif,eelse) { var $x = ["EIf",15,econd,eif,eelse]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EWhile = function(econd,e,normalWhile) { var $x = ["EWhile",16,econd,e,normalWhile]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.ESwitch = function(e,cases,edef) { var $x = ["ESwitch",17,e,cases,edef]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.ETry = function(e,catches) { var $x = ["ETry",18,e,catches]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EReturn = function(e) { var $x = ["EReturn",19,e]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EBreak = ["EBreak",20];
haxe_macro_ExprDef.EBreak.toString = $estr;
haxe_macro_ExprDef.EBreak.__enum__ = haxe_macro_ExprDef;
haxe_macro_ExprDef.EContinue = ["EContinue",21];
haxe_macro_ExprDef.EContinue.toString = $estr;
haxe_macro_ExprDef.EContinue.__enum__ = haxe_macro_ExprDef;
haxe_macro_ExprDef.EUntyped = function(e) { var $x = ["EUntyped",22,e]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EThrow = function(e) { var $x = ["EThrow",23,e]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.ECast = function(e,t) { var $x = ["ECast",24,e,t]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EDisplay = function(e,isCall) { var $x = ["EDisplay",25,e,isCall]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EDisplayNew = function(t) { var $x = ["EDisplayNew",26,t]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.ETernary = function(econd,eif,eelse) { var $x = ["ETernary",27,econd,eif,eelse]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.ECheckType = function(e,t) { var $x = ["ECheckType",28,e,t]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
haxe_macro_ExprDef.EMeta = function(s,e) { var $x = ["EMeta",29,s,e]; $x.__enum__ = haxe_macro_ExprDef; $x.toString = $estr; return $x; };
var haxe_macro_ComplexType = $hxClasses["haxe.macro.ComplexType"] = { __ename__ : true, __constructs__ : ["TPath","TFunction","TAnonymous","TParent","TExtend","TOptional"] };
haxe_macro_ComplexType.TPath = function(p) { var $x = ["TPath",0,p]; $x.__enum__ = haxe_macro_ComplexType; $x.toString = $estr; return $x; };
haxe_macro_ComplexType.TFunction = function(args,ret) { var $x = ["TFunction",1,args,ret]; $x.__enum__ = haxe_macro_ComplexType; $x.toString = $estr; return $x; };
haxe_macro_ComplexType.TAnonymous = function(fields) { var $x = ["TAnonymous",2,fields]; $x.__enum__ = haxe_macro_ComplexType; $x.toString = $estr; return $x; };
haxe_macro_ComplexType.TParent = function(t) { var $x = ["TParent",3,t]; $x.__enum__ = haxe_macro_ComplexType; $x.toString = $estr; return $x; };
haxe_macro_ComplexType.TExtend = function(p,fields) { var $x = ["TExtend",4,p,fields]; $x.__enum__ = haxe_macro_ComplexType; $x.toString = $estr; return $x; };
haxe_macro_ComplexType.TOptional = function(t) { var $x = ["TOptional",5,t]; $x.__enum__ = haxe_macro_ComplexType; $x.toString = $estr; return $x; };
var haxe_macro_Access = $hxClasses["haxe.macro.Access"] = { __ename__ : true, __constructs__ : ["APublic","APrivate","AStatic","AOverride","ADynamic","AInline","AMacro"] };
haxe_macro_Access.APublic = ["APublic",0];
haxe_macro_Access.APublic.toString = $estr;
haxe_macro_Access.APublic.__enum__ = haxe_macro_Access;
haxe_macro_Access.APrivate = ["APrivate",1];
haxe_macro_Access.APrivate.toString = $estr;
haxe_macro_Access.APrivate.__enum__ = haxe_macro_Access;
haxe_macro_Access.AStatic = ["AStatic",2];
haxe_macro_Access.AStatic.toString = $estr;
haxe_macro_Access.AStatic.__enum__ = haxe_macro_Access;
haxe_macro_Access.AOverride = ["AOverride",3];
haxe_macro_Access.AOverride.toString = $estr;
haxe_macro_Access.AOverride.__enum__ = haxe_macro_Access;
haxe_macro_Access.ADynamic = ["ADynamic",4];
haxe_macro_Access.ADynamic.toString = $estr;
haxe_macro_Access.ADynamic.__enum__ = haxe_macro_Access;
haxe_macro_Access.AInline = ["AInline",5];
haxe_macro_Access.AInline.toString = $estr;
haxe_macro_Access.AInline.__enum__ = haxe_macro_Access;
haxe_macro_Access.AMacro = ["AMacro",6];
haxe_macro_Access.AMacro.toString = $estr;
haxe_macro_Access.AMacro.__enum__ = haxe_macro_Access;
var haxe_macro_FieldType = $hxClasses["haxe.macro.FieldType"] = { __ename__ : true, __constructs__ : ["FVar","FFun","FProp"] };
haxe_macro_FieldType.FVar = function(t,e) { var $x = ["FVar",0,t,e]; $x.__enum__ = haxe_macro_FieldType; $x.toString = $estr; return $x; };
haxe_macro_FieldType.FFun = function(f) { var $x = ["FFun",1,f]; $x.__enum__ = haxe_macro_FieldType; $x.toString = $estr; return $x; };
haxe_macro_FieldType.FProp = function(get,set,t,e) { var $x = ["FProp",2,get,set,t,e]; $x.__enum__ = haxe_macro_FieldType; $x.toString = $estr; return $x; };
var haxe_macro_Type = $hxClasses["haxe.macro.Type"] = { __ename__ : true, __constructs__ : ["TMono","TEnum","TInst","TType","TFun","TAnonymous","TDynamic","TLazy","TAbstract"] };
haxe_macro_Type.TMono = function(t) { var $x = ["TMono",0,t]; $x.__enum__ = haxe_macro_Type; $x.toString = $estr; return $x; };
haxe_macro_Type.TEnum = function(t,params) { var $x = ["TEnum",1,t,params]; $x.__enum__ = haxe_macro_Type; $x.toString = $estr; return $x; };
haxe_macro_Type.TInst = function(t,params) { var $x = ["TInst",2,t,params]; $x.__enum__ = haxe_macro_Type; $x.toString = $estr; return $x; };
haxe_macro_Type.TType = function(t,params) { var $x = ["TType",3,t,params]; $x.__enum__ = haxe_macro_Type; $x.toString = $estr; return $x; };
haxe_macro_Type.TFun = function(args,ret) { var $x = ["TFun",4,args,ret]; $x.__enum__ = haxe_macro_Type; $x.toString = $estr; return $x; };
haxe_macro_Type.TAnonymous = function(a) { var $x = ["TAnonymous",5,a]; $x.__enum__ = haxe_macro_Type; $x.toString = $estr; return $x; };
haxe_macro_Type.TDynamic = function(t) { var $x = ["TDynamic",6,t]; $x.__enum__ = haxe_macro_Type; $x.toString = $estr; return $x; };
haxe_macro_Type.TLazy = function(f) { var $x = ["TLazy",7,f]; $x.__enum__ = haxe_macro_Type; $x.toString = $estr; return $x; };
haxe_macro_Type.TAbstract = function(t,params) { var $x = ["TAbstract",8,t,params]; $x.__enum__ = haxe_macro_Type; $x.toString = $estr; return $x; };
var haxe_ui_toolkit_core_interfaces_IClonable = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IClonable"] = haxe_ui_toolkit_core_interfaces_IClonable;
haxe_ui_toolkit_core_interfaces_IClonable.__name__ = ["haxe","ui","toolkit","core","interfaces","IClonable"];
haxe_ui_toolkit_core_interfaces_IClonable.prototype = {
	__class__: haxe_ui_toolkit_core_interfaces_IClonable
};
var haxe_ui_toolkit_core_interfaces_IDrawable = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IDrawable"] = haxe_ui_toolkit_core_interfaces_IDrawable;
haxe_ui_toolkit_core_interfaces_IDrawable.__name__ = ["haxe","ui","toolkit","core","interfaces","IDrawable"];
haxe_ui_toolkit_core_interfaces_IDrawable.prototype = {
	__class__: haxe_ui_toolkit_core_interfaces_IDrawable
	,__properties__: {get_graphics:"get_graphics"}
};
var haxe_ui_toolkit_core_interfaces_IEventDispatcher = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IEventDispatcher"] = haxe_ui_toolkit_core_interfaces_IEventDispatcher;
haxe_ui_toolkit_core_interfaces_IEventDispatcher.__name__ = ["haxe","ui","toolkit","core","interfaces","IEventDispatcher"];
haxe_ui_toolkit_core_interfaces_IEventDispatcher.prototype = {
	__class__: haxe_ui_toolkit_core_interfaces_IEventDispatcher
};
var haxe_ui_toolkit_core_interfaces_IDisplayObject = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IDisplayObject"] = haxe_ui_toolkit_core_interfaces_IDisplayObject;
haxe_ui_toolkit_core_interfaces_IDisplayObject.__name__ = ["haxe","ui","toolkit","core","interfaces","IDisplayObject"];
haxe_ui_toolkit_core_interfaces_IDisplayObject.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable,haxe_ui_toolkit_core_interfaces_IEventDispatcher];
haxe_ui_toolkit_core_interfaces_IDisplayObject.prototype = {
	__class__: haxe_ui_toolkit_core_interfaces_IDisplayObject
	,__properties__: {set_useHandCursor:"set_useHandCursor",get_useHandCursor:"get_useHandCursor",set_verticalAlign:"set_verticalAlign",get_verticalAlign:"get_verticalAlign",set_horizontalAlign:"set_horizontalAlign",get_horizontalAlign:"get_horizontalAlign",set_includeInLayout:"set_includeInLayout",get_includeInLayout:"get_includeInLayout",set_alpha:"set_alpha",get_alpha:"get_alpha",set_visible:"set_visible",get_visible:"get_visible",get_stageY:"get_stageY",get_stageX:"get_stageX",get_sprite:"get_sprite",get_ready:"get_ready",set_minHeight:"set_minHeight",get_minHeight:"get_minHeight",set_minWidth:"set_minWidth",get_minWidth:"get_minWidth",set_percentHeight:"set_percentHeight",get_percentHeight:"get_percentHeight",set_percentWidth:"set_percentWidth",get_percentWidth:"get_percentWidth",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_id:"set_id",get_id:"get_id",set_root:"set_root",get_root:"get_root",set_parent:"set_parent",get_parent:"get_parent"}
};
var haxe_ui_toolkit_core_DisplayObject = function() {
	this._alpha = 1;
	this._includeInLayout = true;
	this._valign = "top";
	this._halign = "left";
	this._invalidating = false;
	this._ready = false;
	this._minHeight = 0;
	this._minWidth = 0;
	this._percentHeight = -1;
	this._percentWidth = -1;
	this._height = 0;
	this._width = 0;
	this._rotationZ = 0;
	this._rotationY = 0;
	this._rotationX = 0;
	this._z = 0;
	this._y = 0;
	this._x = 0;
	this._sprite = new openfl_display_Sprite();
	this._sprite.tabChildren = false;
	this.addEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this._onAddedToStage),false,100);
};
$hxClasses["haxe.ui.toolkit.core.DisplayObject"] = haxe_ui_toolkit_core_DisplayObject;
haxe_ui_toolkit_core_DisplayObject.__name__ = ["haxe","ui","toolkit","core","DisplayObject"];
haxe_ui_toolkit_core_DisplayObject.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable,haxe_ui_toolkit_core_interfaces_IDrawable,haxe_ui_toolkit_core_interfaces_IDisplayObject,haxe_ui_toolkit_core_interfaces_IEventDispatcher];
haxe_ui_toolkit_core_DisplayObject.prototype = {
	preInitialize: function() {
	}
	,initialize: function() {
	}
	,postInitialize: function() {
	}
	,_onAddedToStage: function(event) {
		this.removeEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this._onAddedToStage));
		this.preInitialize();
		this._ready = true;
		this.initialize();
		this.postInitialize();
		this.invalidate(273);
		var event1 = new haxe_ui_toolkit_events_UIEvent("haxeui_" + "init");
		this.dispatchEvent(event1);
		var event2 = new haxe_ui_toolkit_events_UIEvent("haxeui_" + "ready");
		this.dispatchEvent(event2);
	}
	,get_parent: function() {
		return this._parent;
	}
	,set_parent: function(value) {
		this._parent = value;
		return value;
	}
	,get_root: function() {
		return this._root;
	}
	,set_root: function(value) {
		this._root = value;
		return value;
	}
	,get_id: function() {
		return this._id;
	}
	,set_id: function(value) {
		this._id = value;
		return value;
	}
	,get_x: function() {
		return this._x;
	}
	,set_x: function(value) {
		this._x = value | 0;
		this._sprite.set_x(this._x);
		return value;
	}
	,get_y: function() {
		return this._y;
	}
	,set_y: function(value) {
		this._y = value | 0;
		this._sprite.set_y(this._y);
		return value;
	}
	,get_rotationX: function() {
		return 0;
	}
	,set_rotationX: function(value) {
		if(value == this._rotationX) return value;
		this._rotationX = value;
		return value;
	}
	,get_rotationY: function() {
		return 0;
	}
	,set_rotationY: function(value) {
		if(value == this._rotationY) return value;
		this._rotationY = value;
		return value;
	}
	,get_rotationZ: function() {
		return 0;
	}
	,set_rotationZ: function(value) {
		if(value == this._rotationZ) return value;
		this._rotationZ = value;
		return value;
	}
	,get_width: function() {
		return this._width / this.get_sprite().get_scaleX();
	}
	,set_width: function(value) {
		value = Math.round(value);
		if(this._width == value) return value;
		this._width = value;
		this._invalidating = false;
		this.invalidate(272);
		if(this._parent != null) this._parent.invalidate(1);
		var event = new haxe_ui_toolkit_events_UIEvent("haxeui_" + "resize");
		this.dispatchEvent(event);
		return value;
	}
	,get_height: function() {
		return this._height / this.get_sprite().get_scaleY();
	}
	,set_height: function(value) {
		value = Math.round(value);
		if(this._height == value) return value;
		this._height = value;
		this._invalidating = false;
		this.invalidate(272);
		if(this._parent != null) this._parent.invalidate(1);
		var event = new haxe_ui_toolkit_events_UIEvent("haxeui_" + "resize");
		this.dispatchEvent(event);
		return value;
	}
	,get_percentWidth: function() {
		return this._percentWidth;
	}
	,set_percentWidth: function(value) {
		if(this._percentWidth == value) return value;
		this._percentWidth = value;
		this.invalidate();
		if(this._parent != null) this._parent.invalidate(1);
		return value;
	}
	,get_percentHeight: function() {
		return this._percentHeight;
	}
	,set_percentHeight: function(value) {
		if(this._percentHeight == value) return value;
		this._percentHeight = value;
		this.invalidate();
		if(this._parent != null) this._parent.invalidate(1);
		return value;
	}
	,get_minWidth: function() {
		return this._minWidth;
	}
	,set_minWidth: function(value) {
		this._minWidth = value;
		return value;
	}
	,get_minHeight: function() {
		return this._minHeight;
	}
	,set_minHeight: function(value) {
		this._minHeight = value;
		return value;
	}
	,get_ready: function() {
		return this._ready;
	}
	,get_sprite: function() {
		return this._sprite;
	}
	,get_stageX: function() {
		var c;
		c = js_Boot.__cast(this , haxe_ui_toolkit_core_interfaces_IDisplayObject);
		var xpos = 0;
		while(c != null) {
			xpos += c.get_x();
			if(c.get_sprite().get_scrollRect() != null) xpos -= c.get_sprite().get_scrollRect().get_left();
			c = c.get_parent();
		}
		return xpos;
	}
	,get_stageY: function() {
		var c;
		c = js_Boot.__cast(this , haxe_ui_toolkit_core_interfaces_IDisplayObject);
		var ypos = 0;
		while(c != null) {
			ypos += c.get_y();
			if(c.get_sprite().get_scrollRect() != null) ypos -= c.get_sprite().get_scrollRect().get_top();
			c = c.get_parent();
		}
		return ypos;
	}
	,get_visible: function() {
		var v = this._sprite.get_visible();
		return v;
	}
	,set_visible: function(value) {
		this._sprite.set_visible(value);
		if(this._parent != null) this._parent.invalidate(1);
		return value;
	}
	,get_alpha: function() {
		return this._alpha;
	}
	,set_alpha: function(value) {
		if(value != this._alpha) {
			this._alpha = value;
			this.invalidate();
		}
		return value;
	}
	,get_includeInLayout: function() {
		return this._includeInLayout;
	}
	,set_includeInLayout: function(value) {
		this._includeInLayout = value;
		if(this._parent != null) this._parent.invalidate(1);
		return value;
	}
	,get_horizontalAlign: function() {
		return this._halign;
	}
	,set_horizontalAlign: function(value) {
		this._halign = value;
		if(this._ready) this.get_parent().invalidate(1);
		return value;
	}
	,get_verticalAlign: function() {
		return this._valign;
	}
	,set_verticalAlign: function(value) {
		this._valign = value;
		if(this._ready) this.get_parent().invalidate(1);
		return value;
	}
	,get_useHandCursor: function() {
		return this.get_sprite().useHandCursor;
	}
	,set_useHandCursor: function(value) {
		this.get_sprite().useHandCursor = value;
		this.get_sprite().buttonMode = value;
		return value;
	}
	,hitTest: function(xpos,ypos) {
		var b = false;
		var sx = this.get_stageX();
		var sy = this.get_stageY();
		xpos /= haxe_ui_toolkit_core_Toolkit.get_scaleFactor();
		ypos /= haxe_ui_toolkit_core_Toolkit.get_scaleFactor();
		if(xpos > sx && xpos < sx + this.get_width() && ypos > sy && ypos < sy + this.get_height()) b = true;
		return b;
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		if(!this._ready || this._invalidating) return;
		this._invalidating = true;
		if((type & 16) == 16 || (type & 4096) == 4096) this.paint();
		this._invalidating = false;
	}
	,dispose: function() {
		this.removeAllEventListeners();
	}
	,interceptEvent: function(event) {
		var uiEvent = new haxe_ui_toolkit_events_UIEvent("haxeui_" + event.type);
		if(js_Boot.__instanceof(event,openfl_events_MouseEvent)) {
			var mouseEvent = event;
			uiEvent.stageX = mouseEvent.stageX;
			uiEvent.stageY = mouseEvent.stageY;
		}
		this.dispatchEvent(uiEvent);
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		if(StringTools.startsWith(type,"haxeui_")) {
			var interceptEventType = HxOverrides.substr(type,"haxeui_".length,type.length);
			if(this._interceptMap == null) this._interceptMap = new haxe_ds_StringMap();
			if(this._interceptMap.exists(interceptEventType) == false) this._interceptMap.set(interceptEventType,0); else {
				var value = this._interceptMap.get(interceptEventType) + 1;
				this._interceptMap.set(interceptEventType,value);
			}
			if(this._interceptMap.get(interceptEventType) == 0) this.addEventListener(interceptEventType,$bind(this,this.interceptEvent),useCapture,priority,useWeakReference);
		}
		if(this._eventListeners == null) this._eventListeners = new haxe_ds_StringMap();
		var list = this._eventListeners.get(type);
		if(list == null) {
			list = [];
			this._eventListeners.set(type,list);
		}
		list.push(listener);
		this._sprite.addEventListener(type,listener,useCapture,priority,useWeakReference);
	}
	,dispatchEvent: function(event) {
		if(js_Boot.__instanceof(event,haxe_ui_toolkit_events_UIEvent)) (js_Boot.__cast(event , haxe_ui_toolkit_events_UIEvent)).displayObject = this;
		return this._sprite.dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		return this._sprite.hasEventListener(type);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		if(StringTools.startsWith(type,"haxeui_")) {
			var interceptEventType = HxOverrides.substr(type,"haxeui_".length,type.length);
			if(this._interceptMap != null && this._interceptMap.exists(interceptEventType)) {
				var value = this._interceptMap.get(interceptEventType) - 1;
				this._interceptMap.set(interceptEventType,value);
				if(this._interceptMap.get(interceptEventType) <= 0) {
					this._interceptMap.remove(interceptEventType);
					this.removeEventListener(interceptEventType,$bind(this,this.interceptEvent),useCapture);
				}
			}
		}
		if(this._eventListeners != null && this._eventListeners.exists(type)) {
			var list = this._eventListeners.get(type);
			if(list != null) HxOverrides.remove(list,listener);
		}
		this._sprite.removeEventListener(type,listener,useCapture);
	}
	,willTrigger: function(type) {
		return this._sprite.willTrigger(type);
	}
	,get_graphics: function() {
		return this._sprite.get_graphics();
	}
	,paint: function() {
		this._sprite.get_graphics().clear();
		this._sprite.get_graphics().beginFill(13421772);
		this._sprite.get_graphics().lineStyle(1,8947848);
		this._sprite.get_graphics().drawRect(0,0,this._width,this._height);
		this._sprite.get_graphics().endFill();
	}
	,removeEventListenerType: function(eventType) {
		if(this._eventListeners != null) {
			var list = this._eventListeners.get(eventType);
			if(list != null) while(list.length != 0) this.removeEventListener(eventType,list.pop());
		}
	}
	,removeAllEventListeners: function() {
		if(this._eventListeners != null) {
			var $it0 = this._eventListeners.keys();
			while( $it0.hasNext() ) {
				var eventType = $it0.next();
				var list = this._eventListeners.get(eventType);
				while(list.length != 0) {
					this.removeEventListener(eventType,list.pop());
					list = this._eventListeners.get(eventType);
				}
			}
		}
	}
	,getListenerCount: function(type,listener) {
		var count = 0;
		if(this._eventListeners.exists(type)) {
			var list = this._eventListeners.get(type);
			var _g = 0;
			while(_g < list.length) {
				var l = list[_g];
				++_g;
				if(l == listener) count++;
			}
		}
		return count;
	}
	,removeEventFunction: function(arr,fn) {
		return HxOverrides.remove(arr,fn);
	}
	,_handleEvent: function(event) {
		var fnName = "on" + haxe_ui_toolkit_util_StringUtil.capitalizeFirstLetter(StringTools.replace(event.type,"haxeui_",""));
		var fn = Reflect.field(this,fnName);
		if(fn != null) {
			var fnEvent = new haxe_ui_toolkit_events_UIEvent("haxeui_" + event.type,event.get_component());
			fnEvent.data = event.data;
			fnEvent.displayObject = this;
			fn(fnEvent);
		}
	}
	,set_onInit: function(value) {
		this.onInit = value;
		this.addEventListener("haxeui_" + "init",$bind(this,this._handleEvent));
		return value;
	}
	,set_onResize: function(value) {
		this.onResize = value;
		this.addEventListener("haxeui_" + "resize",$bind(this,this._handleEvent));
		return value;
	}
	,set_onReady: function(value) {
		this.onReady = value;
		this.addEventListener("haxeui_" + "ready",$bind(this,this._handleEvent));
		return value;
	}
	,set_onClick: function(value) {
		this.onClick = value;
		this.addEventListener("haxeui_" + "click",$bind(this,this._handleEvent));
		return value;
	}
	,set_onMouseDown: function(value) {
		this.onMouseDown = value;
		this.addEventListener("haxeui_" + "mouseDown",$bind(this,this._handleEvent));
		return value;
	}
	,set_onMouseUp: function(value) {
		this.onMouseUp = value;
		this.addEventListener("haxeui_" + "mouseUp",$bind(this,this._handleEvent));
		return value;
	}
	,set_onMouseOver: function(value) {
		this.onMouseOver = value;
		this.addEventListener("haxeui_" + "mouseOver",$bind(this,this._handleEvent));
		return value;
	}
	,set_onMouseOut: function(value) {
		this.onMouseOut = value;
		this.addEventListener("haxeui_" + "mouseOut",$bind(this,this._handleEvent));
		return value;
	}
	,set_onMouseMove: function(value) {
		this.onMouseMove = value;
		this.addEventListener("haxeui_" + "mouseMove",$bind(this,this._handleEvent));
		return value;
	}
	,set_onDoubleClick: function(value) {
		this.onDoubleClick = value;
		this.addEventListener("haxeui_" + "doubleClick",$bind(this,this._handleEvent));
		return value;
	}
	,set_onRollOver: function(value) {
		this.onRollOver = value;
		this.addEventListener("haxeui_" + "rollOver",$bind(this,this._handleEvent));
		return value;
	}
	,set_onRollOut: function(value) {
		this.onRollOut = value;
		this.addEventListener("haxeui_" + "rollOut",$bind(this,this._handleEvent));
		return value;
	}
	,set_onChange: function(value) {
		this.onChange = value;
		this.addEventListener("haxeui_" + "change",$bind(this,this._handleEvent));
		return value;
	}
	,set_onAdded: function(value) {
		this.onAdded = value;
		this.addEventListener("haxeui_" + "added",$bind(this,this._handleEvent));
		return value;
	}
	,set_onAddedToStage: function(value) {
		this.onAddedToStage = value;
		this.addEventListener("haxeui_" + "addedToStage",$bind(this,this._handleEvent));
		return value;
	}
	,set_onRemoved: function(value) {
		this.onRemoved = value;
		this.addEventListener("haxeui_" + "removed",$bind(this,this._handleEvent));
		return value;
	}
	,set_onRemovedFromStage: function(value) {
		this.onRemovedFromStage = value;
		this.addEventListener("haxeui_" + "removedFromStage",$bind(this,this._handleEvent));
		return value;
	}
	,set_onActivate: function(value) {
		this.onActivate = value;
		this.addEventListener("haxeui_" + "activate",$bind(this,this._handleEvent));
		return value;
	}
	,set_onDeactivate: function(value) {
		this.onDeactivate = value;
		this.addEventListener("haxeui_" + "deactivate",$bind(this,this._handleEvent));
		return value;
	}
	,set_onScroll: function(value) {
		this.onScroll = value;
		this.addEventListener("haxeui_" + "scroll",$bind(this,this._handleEvent));
		return value;
	}
	,set_onScrollStart: function(value) {
		this.onScrollStart = value;
		this.addEventListener("haxeui_" + "scrollStart",$bind(this,this._handleEvent));
		return value;
	}
	,set_onScrollStop: function(value) {
		this.onScrollStop = value;
		this.addEventListener("haxeui_" + "scrollStop",$bind(this,this._handleEvent));
		return value;
	}
	,set_onGlyphClick: function(value) {
		this.onGlyphClick = value;
		this.addEventListener("haxeui_" + "glyphClick",$bind(this,this._handleEvent));
		return value;
	}
	,set_onMenuSelect: function(value) {
		this.onMenuSelect = value;
		this.addEventListener("haxeui_" + "menuSelect",$bind(this,this._handleEvent));
		return value;
	}
	,set_onMenuOpen: function(value) {
		this.onMenuOpen = value;
		this.addEventListener("haxeui_" + "menuOpen",$bind(this,this._handleEvent));
		return value;
	}
	,set_onRefresh: function(value) {
		this.onRefresh = value;
		this.addEventListener("haxeui_" + "refresh",$bind(this,this._handleEvent));
		return value;
	}
	,clone: function() {
		var c = this.self();
		c.set_id(this.get_id());
		c.set_x(this.get_x());
		c.set_y(this.get_y());
		c.set_rotationX(this.get_rotationX());
		c.set_rotationY(this.get_rotationY());
		c.set_rotationZ(this.get_rotationZ());
		c.set_width(this.get_width());
		c.set_height(this.get_height());
		c.set_percentWidth(this.get_percentWidth());
		c.set_percentHeight(this.get_percentHeight());
		c.set_minWidth(this.get_minWidth());
		c.set_minHeight(this.get_minHeight());
		c.set_alpha(this.get_alpha());
		c.set_includeInLayout(this.get_includeInLayout());
		c.set_horizontalAlign(this.get_horizontalAlign());
		c.set_verticalAlign(this.get_verticalAlign());
		c.set_useHandCursor(this.get_useHandCursor());
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_core_DisplayObject();
	}
	,__class__: haxe_ui_toolkit_core_DisplayObject
	,__properties__: {set_onRefresh:"set_onRefresh",set_onMenuOpen:"set_onMenuOpen",set_onMenuSelect:"set_onMenuSelect",set_onGlyphClick:"set_onGlyphClick",set_onScrollStop:"set_onScrollStop",set_onScrollStart:"set_onScrollStart",set_onScroll:"set_onScroll",set_onDeactivate:"set_onDeactivate",set_onActivate:"set_onActivate",set_onRemovedFromStage:"set_onRemovedFromStage",set_onRemoved:"set_onRemoved",set_onAddedToStage:"set_onAddedToStage",set_onAdded:"set_onAdded",set_onChange:"set_onChange",set_onRollOut:"set_onRollOut",set_onRollOver:"set_onRollOver",set_onDoubleClick:"set_onDoubleClick",set_onMouseMove:"set_onMouseMove",set_onMouseOut:"set_onMouseOut",set_onMouseOver:"set_onMouseOver",set_onMouseUp:"set_onMouseUp",set_onMouseDown:"set_onMouseDown",set_onClick:"set_onClick",set_onReady:"set_onReady",set_onResize:"set_onResize",set_onInit:"set_onInit",get_graphics:"get_graphics",set_useHandCursor:"set_useHandCursor",get_useHandCursor:"get_useHandCursor",set_verticalAlign:"set_verticalAlign",get_verticalAlign:"get_verticalAlign",set_horizontalAlign:"set_horizontalAlign",get_horizontalAlign:"get_horizontalAlign",set_includeInLayout:"set_includeInLayout",get_includeInLayout:"get_includeInLayout",set_alpha:"set_alpha",get_alpha:"get_alpha",set_visible:"set_visible",get_visible:"get_visible",get_stageY:"get_stageY",get_stageX:"get_stageX",get_sprite:"get_sprite",get_ready:"get_ready",set_minHeight:"set_minHeight",get_minHeight:"get_minHeight",set_minWidth:"set_minWidth",get_minWidth:"get_minWidth",set_percentHeight:"set_percentHeight",get_percentHeight:"get_percentHeight",set_percentWidth:"set_percentWidth",get_percentWidth:"get_percentWidth",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_rotationZ:"set_rotationZ",get_rotationZ:"get_rotationZ",set_rotationY:"set_rotationY",get_rotationY:"get_rotationY",set_rotationX:"set_rotationX",get_rotationX:"get_rotationX",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_id:"set_id",get_id:"get_id",set_root:"set_root",get_root:"get_root",set_parent:"set_parent",get_parent:"get_parent"}
};
var haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"] = haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer;
haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer.__name__ = ["haxe","ui","toolkit","core","interfaces","IDisplayObjectContainer"];
haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IDisplayObject];
haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer.prototype = {
	__class__: haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer
	,__properties__: {set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_layout:"set_layout",get_layout:"get_layout",get_children:"get_children",get_numChildren:"get_numChildren"}
};
var haxe_ui_toolkit_core_DisplayObjectContainer = function() {
	this._autoSize = false;
	haxe_ui_toolkit_core_DisplayObject.call(this);
	this._layout = new haxe_ui_toolkit_layout_DefaultLayout();
	this._children = [];
};
$hxClasses["haxe.ui.toolkit.core.DisplayObjectContainer"] = haxe_ui_toolkit_core_DisplayObjectContainer;
haxe_ui_toolkit_core_DisplayObjectContainer.__name__ = ["haxe","ui","toolkit","core","DisplayObjectContainer"];
haxe_ui_toolkit_core_DisplayObjectContainer.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable,haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer];
haxe_ui_toolkit_core_DisplayObjectContainer.__super__ = haxe_ui_toolkit_core_DisplayObject;
haxe_ui_toolkit_core_DisplayObjectContainer.prototype = $extend(haxe_ui_toolkit_core_DisplayObject.prototype,{
	initialize: function() {
		haxe_ui_toolkit_core_DisplayObject.prototype.initialize.call(this);
		this._layout.set_container(this);
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		if(!this._ready || this._invalidating) return;
		haxe_ui_toolkit_core_DisplayObject.prototype.invalidate.call(this,type,recursive);
		this._invalidating = true;
		if((type & 256) == 256 || (type & 1) == 1) this._layout.refresh();
		this._invalidating = false;
		if(recursive == true) {
			var _g = 0;
			var _g1 = this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.invalidate(type,recursive);
			}
		}
	}
	,get_numChildren: function() {
		var arr = this._children;
		return arr.length;
	}
	,get_children: function() {
		var arr = this._children;
		return arr;
	}
	,indexOfChild: function(child) {
		var index = Lambda.indexOf(this.get_children(),child);
		return index;
	}
	,getChildAt: function(index) {
		return this.get_children()[index];
	}
	,addChildAt: function(child,index) {
		if(child == null) return null;
		var childSprite = child.get_sprite();
		if(js_Boot.__instanceof(child,haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer)) (js_Boot.__cast(child , haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer)).set_parent(this);
		child.set_root(this.get_root());
		this._children.splice(index,0,child);
		this._sprite.addChildAt(childSprite,index);
		this.invalidate(1);
		return child;
	}
	,addChild: function(child) {
		if(child == null) return null;
		var childSprite = child.get_sprite();
		if(js_Boot.__instanceof(child,haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer)) (js_Boot.__cast(child , haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer)).set_parent(this);
		child.set_root(this.get_root());
		this._children.push(child);
		this._sprite.addChild(childSprite);
		this.invalidate(1);
		return child;
	}
	,removeChild: function(child,dispose) {
		if(dispose == null) dispose = true;
		if(child == null) return null;
		var childSprite = child.get_sprite();
		this._sprite.removeChild(childSprite);
		HxOverrides.remove(this._children,child);
		if(dispose == true) child.dispose();
		this.invalidate(1);
		return child;
	}
	,removeChildAt: function(index,dispose) {
		if(dispose == null) dispose = true;
		return this.removeChild(this.getChildAt(index),dispose);
	}
	,removeAllChildren: function(dispose) {
		if(dispose == null) dispose = true;
		var arr = this.get_children();
		while(arr.length > 0) {
			var child = arr[0];
			this.removeChild(child,dispose);
		}
		while(this.get_sprite().get_numChildren() > 0) this.get_sprite().removeChildAt(0);
	}
	,contains: function(child) {
		if(child == null) return false;
		return this.get_sprite().contains(child.get_sprite());
	}
	,setChildIndex: function(child,index) {
		if(child != null) this.get_sprite().setChildIndex(child.get_sprite(),index);
	}
	,findChildAs: function(type) {
		var match = null;
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(child,type)) {
				match = child;
				break;
			}
		}
		return match;
	}
	,findChild: function(id,type,recursive) {
		if(recursive == null) recursive = false;
		var match = null;
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_id() == id) {
				match = child;
				break;
			}
		}
		if(match == null && recursive == true) {
			var _g2 = 0;
			var _g11 = this.get_children();
			while(_g2 < _g11.length) {
				var child1 = _g11[_g2];
				++_g2;
				if(js_Boot.__instanceof(child1,haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer)) {
					var c;
					c = js_Boot.__cast(child1 , haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer);
					var temp = c.findChild(id,type,recursive);
					if(temp != null) {
						match = temp;
						break;
					}
				}
			}
		}
		return match;
	}
	,findComponentUnderPoint: function(stageX,stageY) {
		var c = null;
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.hitTest(stageX,stageY) == true) {
				c = child;
				break;
			}
		}
		return c;
	}
	,get_layout: function() {
		return this._layout;
	}
	,set_layout: function(value) {
		this._layout = value;
		this._layout.set_container(this);
		if(this._ready) this.invalidate(1);
		return value;
	}
	,get_autoSize: function() {
		return this._autoSize;
	}
	,set_autoSize: function(value) {
		this._autoSize = value;
		if(this._ready) this.invalidate(1);
		return this._autoSize;
	}
	,dispose: function() {
		while(this.get_children().length > 0) {
			var _g = 0;
			var _g1 = this.get_children();
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				try {
					this.removeChild(child);
				} catch( e ) {
					haxe_CallStack.lastException = e;
					if (e instanceof js__$Boot_HaxeError) e = e.val;
					var stack = haxe_CallStack.exceptionStack();
					haxe_Log.trace("Problem removing component: " + Std.string(this) + ", " + Std.string(child) + "(" + Std.string(e) + "), callstack:",{ fileName : "DisplayObjectContainer.hx", lineNumber : 246, className : "haxe.ui.toolkit.core.DisplayObjectContainer", methodName : "dispose"});
					haxe_Log.trace(haxe_CallStack.toString(stack),{ fileName : "DisplayObjectContainer.hx", lineNumber : 247, className : "haxe.ui.toolkit.core.DisplayObjectContainer", methodName : "dispose"});
				}
			}
		}
		haxe_ui_toolkit_core_DisplayObject.prototype.dispose.call(this);
	}
	,set_root: function(value) {
		haxe_ui_toolkit_core_DisplayObject.prototype.set_root.call(this,value);
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.set_root(value);
		}
		return value;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_core_DisplayObject.prototype.clone.call(this);
		c.set_autoSize(this.get_autoSize());
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_core_DisplayObjectContainer();
	}
	,__class__: haxe_ui_toolkit_core_DisplayObjectContainer
	,__properties__: $extend(haxe_ui_toolkit_core_DisplayObject.prototype.__properties__,{set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",get_children:"get_children",set_layout:"set_layout",get_layout:"get_layout",get_numChildren:"get_numChildren"})
});
var haxe_ui_toolkit_core_interfaces_IStyleableDisplayObject = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject"] = haxe_ui_toolkit_core_interfaces_IStyleableDisplayObject;
haxe_ui_toolkit_core_interfaces_IStyleableDisplayObject.__name__ = ["haxe","ui","toolkit","core","interfaces","IStyleableDisplayObject"];
haxe_ui_toolkit_core_interfaces_IStyleableDisplayObject.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer];
haxe_ui_toolkit_core_interfaces_IStyleableDisplayObject.prototype = {
	__class__: haxe_ui_toolkit_core_interfaces_IStyleableDisplayObject
	,__properties__: {set_styleString:"set_styleString",get_styleString:"get_styleString",set_styleName:"set_styleName",get_styleName:"get_styleName",set_style:"set_style",get_style:"get_style",set_baseStyle:"set_baseStyle",get_baseStyle:"get_baseStyle",set_id:"set_id",get_id:"get_id"}
};
var haxe_ui_toolkit_core_StyleableDisplayObject = function() {
	this._lazyLoadStyles = true;
	haxe_ui_toolkit_core_DisplayObjectContainer.call(this);
};
$hxClasses["haxe.ui.toolkit.core.StyleableDisplayObject"] = haxe_ui_toolkit_core_StyleableDisplayObject;
haxe_ui_toolkit_core_StyleableDisplayObject.__name__ = ["haxe","ui","toolkit","core","StyleableDisplayObject"];
haxe_ui_toolkit_core_StyleableDisplayObject.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable,haxe_ui_toolkit_core_interfaces_IStyleableDisplayObject];
haxe_ui_toolkit_core_StyleableDisplayObject.__super__ = haxe_ui_toolkit_core_DisplayObjectContainer;
haxe_ui_toolkit_core_StyleableDisplayObject.prototype = $extend(haxe_ui_toolkit_core_DisplayObjectContainer.prototype,{
	preInitialize: function() {
		haxe_ui_toolkit_core_DisplayObjectContainer.prototype.preInitialize.call(this);
		this.refreshStyle();
	}
	,paint: function() {
		if(this._width == 0 || this._height == 0 || this._ready == false) return;
		var rc = new openfl_geom_Rectangle(0,0,this._width,this._height);
		haxe_ui_toolkit_style_StyleHelper.paintStyle(this.get_graphics(),this._baseStyle,rc);
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		if(!this._ready || this._invalidating) return;
		haxe_ui_toolkit_core_DisplayObjectContainer.prototype.invalidate.call(this,type,recursive);
		if((type & 1048576) == 1048576) this.refreshStyle();
	}
	,set_id: function(value) {
		if(value == this.get_id()) return value;
		var v = haxe_ui_toolkit_core_DisplayObjectContainer.prototype.set_id.call(this,value);
		if(this._ready) {
			if(this._lazyLoadStyles == false) this.buildStyles(); else this.clearStyles();
			this._baseStyle = haxe_ui_toolkit_style_StyleManager.get_instance().buildStyleFor(this);
			this.invalidate(16);
		}
		return v;
	}
	,set_layout: function(value) {
		value = haxe_ui_toolkit_core_DisplayObjectContainer.prototype.set_layout.call(this,value);
		if(this._baseStyle != null) {
			if(this.get_layout() != null) {
				if(this._baseStyle.get_paddingLeft() != -1) this.get_layout().get_padding().set_left(this._baseStyle.get_paddingLeft());
				if(this._baseStyle.get_paddingTop() != -1) this.get_layout().get_padding().set_top(this._baseStyle.get_paddingTop());
				if(this._baseStyle.get_paddingRight() != -1) this.get_layout().get_padding().set_right(this._baseStyle.get_paddingRight());
				if(this._baseStyle.get_paddingBottom() != -1) this.get_layout().get_padding().set_bottom(this._baseStyle.get_paddingBottom());
				if(this._baseStyle.get_spacingX() != -1) this._layout.set_spacingX(this._baseStyle.get_spacingX());
				if(this._baseStyle.get_spacingY() != -1) this._layout.set_spacingY(this._baseStyle.get_spacingY());
			}
		}
		return value;
	}
	,get_baseStyle: function() {
		if(this._baseStyle == null) {
			this._baseStyle = new haxe_ui_toolkit_style_Style();
			this._baseStyle.set_target(this);
		}
		return this._baseStyle;
	}
	,set_baseStyle: function(value) {
		this._baseStyle = value;
		this._baseStyle.set_target(this);
		return value;
	}
	,get_styleName: function() {
		return this._styleName;
	}
	,set_styleName: function(value) {
		this._styleName = value;
		if(this._ready) {
			if(this._lazyLoadStyles == false) this.buildStyles(); else this.clearStyles();
			this._baseStyle = haxe_ui_toolkit_style_StyleManager.get_instance().buildStyleFor(this);
			this.invalidate(1048592);
		}
		return value;
	}
	,get_styleString: function() {
		return this._styleString;
	}
	,set_styleString: function(value) {
		this._styleString = value;
		return value;
	}
	,get_style: function() {
		if(this._inlineStyle == null) {
			this._inlineStyle = new haxe_ui_toolkit_style_Style();
			this._inlineStyle.set_target(this);
		}
		return this._inlineStyle;
	}
	,set_style: function(value) {
		this._inlineStyle = value;
		if(this._inlineStyle != null) this._inlineStyle.set_target(this);
		if(this._ready) {
			if(this._lazyLoadStyles == false) this.buildStyles(); else this.clearStyles();
			this._baseStyle = haxe_ui_toolkit_style_StyleManager.get_instance().buildStyleFor(this);
			this.invalidate(16);
		}
		return value;
	}
	,storeStyle: function(id,value) {
		if(this._storedStyles == null) this._storedStyles = new haxe_ds_StringMap();
		this._storedStyles.set(id,value);
	}
	,retrieveStyle: function(id) {
		var storedStyle = null;
		if(this._lazyLoadStyles == false) {
			if(this._storedStyles == null) return null;
			storedStyle = this._storedStyles.get(id);
		} else if(this._ready) {
			if(this._storedStyles != null) storedStyle = this._storedStyles.get(id);
			if(storedStyle == null) {
				storedStyle = haxe_ui_toolkit_style_StyleManager.get_instance().buildStyleFor(this,id);
				this.storeStyle(id,storedStyle);
			}
		}
		return storedStyle;
	}
	,applyStyle: function() {
		if(this._baseStyle == null) return;
		if(this._inlineStyle != null) this._baseStyle.merge(this._inlineStyle);
		if(this._baseStyle != null) {
			if(this._baseStyle.get_alpha() != -1) this._sprite.set_alpha(this._baseStyle.get_alpha()); else this._sprite.set_alpha(this.get_alpha());
			if(this._baseStyle.get_horizontalAlignment() != null) this.set_horizontalAlign(this._baseStyle.get_horizontalAlignment());
			if(this._baseStyle.get_verticalAlignment() != null) this.set_verticalAlign(this._baseStyle.get_verticalAlignment());
			if(this._baseStyle.get_filter() != null) this._sprite.set_filters([this._baseStyle.get_filter()]); else this._sprite.set_filters([]);
			if(this._baseStyle.get_visibleSet() == true) this.set_visible(this._baseStyle.get_visible());
		}
		this.invalidate(16);
	}
	,buildStyles: function() {
	}
	,clearStyles: function(recursive) {
		if(recursive == null) recursive = false;
		this._storedStyles = new haxe_ds_StringMap();
		if(recursive == true && this.get_children() != null) {
			var _g = 0;
			var _g1 = this.get_children();
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				if(js_Boot.__instanceof(c,haxe_ui_toolkit_core_StyleableDisplayObject)) (js_Boot.__cast(c , haxe_ui_toolkit_core_StyleableDisplayObject)).clearStyles(recursive);
			}
		}
	}
	,refreshStyle: function() {
		if(this._lazyLoadStyles == false) this.buildStyles();
		if(js_Boot.__instanceof(this,haxe_ui_toolkit_core_StateComponent)) {
			var state = (js_Boot.__cast(this , haxe_ui_toolkit_core_StateComponent)).get_state();
			if(state == null) state = "normal";
			this._baseStyle = this.retrieveStyle(state);
			if(this._baseStyle == null) this._baseStyle = haxe_ui_toolkit_style_StyleManager.get_instance().buildStyleFor(this,(js_Boot.__cast(this , haxe_ui_toolkit_core_StateComponent)).get_state());
		} else this._baseStyle = haxe_ui_toolkit_style_StyleManager.get_instance().buildStyleFor(this);
		this._baseStyle.merge(this._inlineStyle);
		if(this._baseStyle != null) {
			if(this._baseStyle.get_width() != -1 && this.get_width() == 0) this.set_width(this._baseStyle.get_width());
			if(this._baseStyle.get_height() != -1 && this.get_height() == 0) this.set_height(this._baseStyle.get_height());
			if(this._baseStyle.get_percentWidth() != -1 && this.get_percentWidth() == -1) this.set_percentWidth(this._baseStyle.get_percentWidth());
			if(this._baseStyle.get_percentHeight() != -1 && this.get_percentHeight() == -1) this.set_percentHeight(this._baseStyle.get_percentHeight());
			if(this._baseStyle.get_autoSizeSet()) this.set_autoSize(this._baseStyle.get_autoSize());
			if(this.get_layout() != null) {
				if(this._baseStyle.get_paddingLeft() != -1) this.get_layout().get_padding().set_left(this._baseStyle.get_paddingLeft());
				if(this._baseStyle.get_paddingTop() != -1) this.get_layout().get_padding().set_top(this._baseStyle.get_paddingTop());
				if(this._baseStyle.get_paddingRight() != -1) this.get_layout().get_padding().set_right(this._baseStyle.get_paddingRight());
				if(this._baseStyle.get_paddingBottom() != -1) this.get_layout().get_padding().set_bottom(this._baseStyle.get_paddingBottom());
				if(this._baseStyle.get_spacingX() != -1) this._layout.set_spacingX(this._baseStyle.get_spacingX());
				if(this._baseStyle.get_spacingY() != -1) this._layout.set_spacingY(this._baseStyle.get_spacingY());
			}
		}
		this.applyStyle();
	}
	,clone: function() {
		var c = haxe_ui_toolkit_core_DisplayObjectContainer.prototype.clone.call(this);
		c.set_baseStyle(this.get_baseStyle());
		c.set_styleName(this.get_styleName());
		c.set_style(this.get_style());
		c.set_styleString(this.get_styleString());
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_core_StyleableDisplayObject();
	}
	,__class__: haxe_ui_toolkit_core_StyleableDisplayObject
	,__properties__: $extend(haxe_ui_toolkit_core_DisplayObjectContainer.prototype.__properties__,{set_styleString:"set_styleString",get_styleString:"get_styleString",set_style:"set_style",get_style:"get_style",set_styleName:"set_styleName",get_styleName:"get_styleName",set_baseStyle:"set_baseStyle",get_baseStyle:"get_baseStyle"})
});
var haxe_ui_toolkit_core_interfaces_IComponent = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IComponent"] = haxe_ui_toolkit_core_interfaces_IComponent;
haxe_ui_toolkit_core_interfaces_IComponent.__name__ = ["haxe","ui","toolkit","core","interfaces","IComponent"];
haxe_ui_toolkit_core_interfaces_IComponent.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IStyleableDisplayObject];
haxe_ui_toolkit_core_interfaces_IComponent.prototype = {
	__class__: haxe_ui_toolkit_core_interfaces_IComponent
	,__properties__: {set_disabled:"set_disabled",get_disabled:"get_disabled",set_clipContent:"set_clipContent",get_clipContent:"get_clipContent",set_clipHeight:"set_clipHeight",get_clipHeight:"get_clipHeight",set_clipWidth:"set_clipWidth",get_clipWidth:"get_clipWidth",set_text:"set_text",get_text:"get_text"}
};
var haxe_ui_toolkit_core_Component = function() {
	this._toolTipTimer = null;
	this._disabled = false;
	this._clipContent = false;
	haxe_ui_toolkit_core_StyleableDisplayObject.call(this);
};
$hxClasses["haxe.ui.toolkit.core.Component"] = haxe_ui_toolkit_core_Component;
haxe_ui_toolkit_core_Component.__name__ = ["haxe","ui","toolkit","core","Component"];
haxe_ui_toolkit_core_Component.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable,haxe_ui_toolkit_core_interfaces_IComponent];
haxe_ui_toolkit_core_Component.addNamedComponentsFrom = function(parent,list) {
	if(parent == null) return;
	if(parent.get_id() != null) list.push(parent);
	var _g = 0;
	var _g1 = parent.get_children();
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		haxe_ui_toolkit_core_Component.addNamedComponentsFrom(js_Boot.__cast(child , haxe_ui_toolkit_core_interfaces_IComponent),list);
	}
};
haxe_ui_toolkit_core_Component.__super__ = haxe_ui_toolkit_core_StyleableDisplayObject;
haxe_ui_toolkit_core_Component.prototype = $extend(haxe_ui_toolkit_core_StyleableDisplayObject.prototype,{
	initialize: function() {
		haxe_ui_toolkit_core_StyleableDisplayObject.prototype.initialize.call(this);
		if(js_Boot.__instanceof(this,haxe_ui_toolkit_core_interfaces_IDraggable)) this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._onComponentMouseDown));
		this.initScriplet();
	}
	,postInitialize: function() {
		if(this._disabled == true) this.set_disabled(true);
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		if(!this._ready || this._invalidating) return;
		haxe_ui_toolkit_core_StyleableDisplayObject.prototype.invalidate.call(this,type,recursive);
		this._invalidating = true;
		if((type & 256) == 256 && this._clipContent == true) this.get_sprite().set_scrollRect(new openfl_geom_Rectangle(0,0,this.get_width(),this.get_height()));
		this._invalidating = false;
	}
	,get_text: function() {
		return this._text;
	}
	,set_text: function(value) {
		if(value != null) {
			if(StringTools.startsWith(value,"@#")) value = HxOverrides.substr(value,2,value.length) + "_" + haxe_ui_toolkit_core_Client.get_instance().get_language(); else if(StringTools.startsWith(value,"asset://")) {
				var assetId = HxOverrides.substr(value,8,value.length);
				value = haxe_ui_toolkit_resources_ResourceManager.get_instance().getText(assetId);
				value = StringTools.replace(value,"\r","");
			}
			this._text = value;
		}
		return value;
	}
	,get_clipWidth: function() {
		if(this.get_sprite().get_scrollRect() == null) return this.get_width();
		return this.get_sprite().get_scrollRect().width;
	}
	,set_clipWidth: function(value) {
		this.get_sprite().set_scrollRect(new openfl_geom_Rectangle(0,0,value,this.get_clipHeight()));
		return value;
	}
	,get_clipHeight: function() {
		if(this.get_sprite().get_scrollRect() == null) return this.get_height();
		return this.get_sprite().get_scrollRect().height;
	}
	,set_clipHeight: function(value) {
		this.get_sprite().set_scrollRect(new openfl_geom_Rectangle(0,0,this.get_clipWidth(),value));
		return value;
	}
	,get_clipContent: function() {
		return this._clipContent;
	}
	,set_clipContent: function(value) {
		this._clipContent = value;
		if(this._clipContent == false) this.clearClip();
		this.invalidate(256);
		return value;
	}
	,clearClip: function() {
		this.get_sprite().set_scrollRect(null);
	}
	,get_disabled: function() {
		return this._disabled;
	}
	,set_disabled: function(value) {
		if(value == true) {
			if(this._cachedListeners == null) this._cachedListeners = new haxe_ds_StringMap();
			var $it0 = this._eventListeners.keys();
			while( $it0.hasNext() ) {
				var type = $it0.next();
				if(this.disablableEventType(type) == true) {
					var list = this._eventListeners.get(type);
					var cachedList = this._cachedListeners.get(type);
					if(cachedList == null) {
						cachedList = [];
						this._cachedListeners.set(type,cachedList);
					}
					var _g = 0;
					while(_g < list.length) {
						var listener = list[_g];
						++_g;
						cachedList.push(listener);
						this.removeEventListener(type,listener);
					}
				}
			}
		}
		this._disabled = value;
		var _g1 = 0;
		var _g11 = this.get_children();
		while(_g1 < _g11.length) {
			var child = _g11[_g1];
			++_g1;
			if(js_Boot.__instanceof(child,haxe_ui_toolkit_core_Component)) (js_Boot.__cast(child , haxe_ui_toolkit_core_Component)).set_disabled(value);
		}
		if(value == false) {
			if(this._cachedListeners != null) {
				var $it1 = this._cachedListeners.keys();
				while( $it1.hasNext() ) {
					var type1 = $it1.next();
					var list1 = this._cachedListeners.get(type1);
					var _g2 = 0;
					while(_g2 < list1.length) {
						var listener1 = list1[_g2];
						++_g2;
						this.addEventListener(type1,listener1);
					}
					list1 = [];
				}
				this._cachedListeners = null;
			}
		}
		if(js_Boot.__instanceof(this,haxe_ui_toolkit_core_StateComponent)) {
			var stateComponent;
			stateComponent = js_Boot.__cast(this , haxe_ui_toolkit_core_StateComponent);
			if(value == true) {
				if(stateComponent.hasState("disabled")) stateComponent.set_state("disabled");
			} else if(stateComponent.hasState("normal")) stateComponent.set_state("normal");
		}
		return value;
	}
	,get_value: function() {
		return this.get_text();
	}
	,set_value: function(newValue) {
		if(this.get_value() != null) this.set_text("" + Std.string(newValue)); else this.set_text(newValue);
		return newValue;
	}
	,get_toolTip: function() {
		return this._toolTip;
	}
	,set_toolTip: function(value) {
		this._toolTip = value;
		this.removeEventListener("haxeui_" + "mouseOver",$bind(this,this._onComponentMouseOver));
		this.removeEventListener("haxeui_" + "mouseOut",$bind(this,this._onComponentMouseOut));
		this.removeEventListener("haxeui_" + "click",$bind(this,this._onComponentClick));
		this.removeEventListener("haxeui_" + "change",$bind(this,this._onComponentClick));
		if(this._toolTip != null) {
			this.addEventListener("haxeui_" + "mouseOver",$bind(this,this._onComponentMouseOver));
			this.addEventListener("haxeui_" + "mouseOut",$bind(this,this._onComponentMouseOut));
			this.addEventListener("haxeui_" + "click",$bind(this,this._onComponentClick));
			this.addEventListener("haxeui_" + "change",$bind(this,this._onComponentClick));
		}
		return value;
	}
	,_onComponentMouseOver: function(event) {
		var _g = this;
		if(this._toolTipTimer != null) {
			this._toolTipTimer.stop();
			this._toolTipTimer = null;
		}
		if(this._toolTipTimer == null) this._toolTipTimer = haxe_Timer.delay(function() {
			haxe_ui_toolkit_core_ToolTipManager.get_instance().showToolTip(_g,null,event);
		},haxe_ui_toolkit_core_ToolTipManager.get_instance().defaults.delay);
	}
	,_onComponentMouseOut: function(event) {
		if(this._toolTipTimer != null) {
			this._toolTipTimer.stop();
			this._toolTipTimer = null;
		}
		if(haxe_ui_toolkit_core_ToolTipManager.get_instance().toolTipVisible(this) == true && this.hitTest(event.stageX,event.stageY) == false) haxe_ui_toolkit_core_ToolTipManager.get_instance().hideCurrentToolTip();
	}
	,_onComponentClick: function(event) {
		if(this._toolTipTimer != null) {
			this._toolTipTimer.stop();
			this._toolTipTimer = null;
		}
		if(haxe_ui_toolkit_core_ToolTipManager.get_instance().toolTipVisible(this) == true) haxe_ui_toolkit_core_ToolTipManager.get_instance().hideCurrentToolTip();
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		if(this._disabled == true && this.disablableEventType(type) == true) {
			if(this._cachedListeners == null) this._cachedListeners = new haxe_ds_StringMap();
			var list = this._cachedListeners.get(type);
			if(list == null) {
				list = [];
				this._cachedListeners.set(type,list);
			}
			list.push(listener);
			return;
		}
		haxe_ui_toolkit_core_StyleableDisplayObject.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		if(this._disabled == true && this.disablableEventType(type) == true) {
			if(this._cachedListeners != null && this._cachedListeners.exists(type)) {
				var list = this._cachedListeners.get(type);
				if(list != null) {
					HxOverrides.remove(list,listener);
					if(list.length == 0) this._cachedListeners.remove(type);
				}
			}
		}
		haxe_ui_toolkit_core_StyleableDisplayObject.prototype.removeEventListener.call(this,type,listener,useCapture);
	}
	,disablableEventType: function(type) {
		return type == openfl_events_MouseEvent.MOUSE_DOWN || type == openfl_events_MouseEvent.MOUSE_MOVE || type == openfl_events_MouseEvent.MOUSE_OVER || type == openfl_events_MouseEvent.MOUSE_OUT || type == openfl_events_MouseEvent.MOUSE_UP || type == openfl_events_MouseEvent.MOUSE_WHEEL || type == openfl_events_MouseEvent.CLICK || type == "haxeui_" + "mouseDown" || type == "haxeui_" + "mouseMove" || type == "haxeui_" + "mouseOver" || type == "haxeui_" + "mouseOut" || type == "haxeui_" + "mouseUp" || type == "haxeui_" + "click";
	}
	,_onComponentMouseDown: function(event) {
		if(js_Boot.__instanceof(this,haxe_ui_toolkit_core_interfaces_IDraggable)) {
			if((js_Boot.__cast(this , haxe_ui_toolkit_core_interfaces_IDraggable)).allowDrag(event) == false) return;
		}
		this.mouseDownPos = new openfl_geom_Point(event.stageX - this.get_stageX(),event.stageY - this.get_stageY());
		this.get_root().addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this._onComponentMouseMove));
		this.get_root().addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onComponentMouseUp));
	}
	,_onComponentMouseUp: function(event) {
		this.get_root().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this._onComponentMouseMove));
		this.get_root().removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onComponentMouseUp));
	}
	,_onComponentMouseMove: function(event) {
		this.set_x(event.stageX - this.mouseDownPos.x);
		this.set_y(event.stageY - this.mouseDownPos.y);
	}
	,addScriptlet: function(scriptlet) {
		var found = false;
		var item = this;
		while(item != null) {
			if(item.get_scriptletSource() != null) {
				found = true;
				break;
			}
			item = item.get_parent();
		}
		if(found == false) item = this;
		if(item != null) {
			if(item.get_scriptletSource() == null) item.set_scriptletSource("");
			var _g = item;
			_g.set_scriptletSource(_g.get_scriptletSource() + scriptlet);
		}
	}
	,findInterp: function() {
		var found = false;
		var item = this;
		while(item != null) {
			if(item._interp != null) {
				found = true;
				break;
			}
			item = item.get_parent();
		}
		if(found == false) return null;
		return item._interp;
	}
	,executeScriptletExpr: function(expr) {
		try {
			var parser = new hscript_Parser();
			var line = parser.parseString(expr);
			var interp = this.findInterp();
			interp.variables.set("this",this);
			interp.expr(line);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			haxe_Log.trace("Problem executing scriptlet: " + Std.string(e),{ fileName : "Component.hx", lineNumber : 404, className : "haxe.ui.toolkit.core.Component", methodName : "executeScriptletExpr"});
		}
	}
	,addScriptletEventHandler: function(event,scriptlet) {
		var _g = this;
		event = "haxeui_" + event;
		this.addEventListener(event,function(e) {
			_g.executeScriptletExpr(scriptlet);
		});
	}
	,get_scriptletSource: function() {
		return this._scriptletSource;
	}
	,set_scriptletSource: function(value) {
		this._scriptletSource = value;
		return value;
	}
	,initScriplet: function() {
		if(this._scriptletSource != null) try {
			var parser = new hscript_Parser();
			var program = parser.parseString(this._scriptletSource);
			this._interp = new haxe_ui_toolkit_hscript_ScriptInterp();
			var comps = this.get_namedComponents();
			var _g = 0;
			while(_g < comps.length) {
				var comp = comps[_g];
				++_g;
				var safeId = haxe_ui_toolkit_util_StringUtil.capitalizeHyphens(comp.get_id());
				this._interp.variables.set(safeId,comp);
			}
			this._interp.variables.set("this",this);
			this._interp.execute(program);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			haxe_Log.trace("Problem running script: " + Std.string(e),{ fileName : "Component.hx", lineNumber : 442, className : "haxe.ui.toolkit.core.Component", methodName : "initScriplet"});
		}
	}
	,get_namedComponents: function() {
		var list = [];
		haxe_ui_toolkit_core_Component.addNamedComponentsFrom(this,list);
		return list;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_core_StyleableDisplayObject.prototype.clone.call(this);
		c.set_text(this.get_text());
		c.set_disabled(this.get_disabled());
		c.userData = this.userData;
		c.set_value(this.get_value());
		c.set_toolTip(this.get_toolTip());
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_core_Component();
	}
	,__class__: haxe_ui_toolkit_core_Component
	,__properties__: $extend(haxe_ui_toolkit_core_StyleableDisplayObject.prototype.__properties__,{get_namedComponents:"get_namedComponents",set_scriptletSource:"set_scriptletSource",get_scriptletSource:"get_scriptletSource",set_toolTip:"set_toolTip",get_toolTip:"get_toolTip",set_value:"set_value",get_value:"get_value",set_disabled:"set_disabled",get_disabled:"get_disabled",set_clipContent:"set_clipContent",get_clipContent:"get_clipContent",set_clipHeight:"set_clipHeight",get_clipHeight:"get_clipHeight",set_clipWidth:"set_clipWidth",get_clipWidth:"get_clipWidth",set_text:"set_text",get_text:"get_text"})
});
var haxe_ui_toolkit_core_interfaces_IStateComponent = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IStateComponent"] = haxe_ui_toolkit_core_interfaces_IStateComponent;
haxe_ui_toolkit_core_interfaces_IStateComponent.__name__ = ["haxe","ui","toolkit","core","interfaces","IStateComponent"];
haxe_ui_toolkit_core_interfaces_IStateComponent.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IComponent];
haxe_ui_toolkit_core_interfaces_IStateComponent.prototype = {
	__class__: haxe_ui_toolkit_core_interfaces_IStateComponent
	,__properties__: {get_states:"get_states",set_state:"set_state",get_state:"get_state"}
};
var haxe_ui_toolkit_core_StateComponent = function() {
	haxe_ui_toolkit_core_Component.call(this);
	this._states = [];
};
$hxClasses["haxe.ui.toolkit.core.StateComponent"] = haxe_ui_toolkit_core_StateComponent;
haxe_ui_toolkit_core_StateComponent.__name__ = ["haxe","ui","toolkit","core","StateComponent"];
haxe_ui_toolkit_core_StateComponent.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable,haxe_ui_toolkit_core_interfaces_IStateComponent];
haxe_ui_toolkit_core_StateComponent.__super__ = haxe_ui_toolkit_core_Component;
haxe_ui_toolkit_core_StateComponent.prototype = $extend(haxe_ui_toolkit_core_Component.prototype,{
	buildStyles: function() {
		var _g = 0;
		var _g1 = this.get_states();
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var stateStyle = haxe_ui_toolkit_style_StyleManager.get_instance().buildStyleFor(this,s);
			if(stateStyle != null) this.storeStyle(s,stateStyle);
		}
	}
	,addStates: function(stateNames,rebuildStyles) {
		if(rebuildStyles == null) rebuildStyles = true;
		var _g = 0;
		while(_g < stateNames.length) {
			var stateName = stateNames[_g];
			++_g;
			this.addState(stateName,false);
		}
		if(rebuildStyles == true && this._ready) {
			if(this._lazyLoadStyles == false) this.buildStyles(); else this.clearStyles();
		}
	}
	,addState: function(stateName,rebuildStyles) {
		if(rebuildStyles == null) rebuildStyles = true;
		if(this.hasState(stateName) == false) {
			this._states.push(stateName);
			if(rebuildStyles == true && this._ready) {
				if(this._lazyLoadStyles == false) this.buildStyles(); else this.clearStyles();
			}
		}
	}
	,get_state: function() {
		return this._state;
	}
	,set_state: function(value) {
		if(this._state != value) {
			this._state = value;
			if(this.retrieveStyle(this._state) != null) this.set_baseStyle(this.retrieveStyle(this._state)); else this.invalidate(4096);
		}
		return value;
	}
	,get_states: function() {
		return this._states;
	}
	,hasState: function(state) {
		if(this.get_states() == null) return false;
		return Lambda.indexOf(this.get_states(),state) != -1;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_core_Component.prototype.clone.call(this);
		c.set_state(this.get_state());
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_core_StateComponent();
	}
	,__class__: haxe_ui_toolkit_core_StateComponent
	,__properties__: $extend(haxe_ui_toolkit_core_Component.prototype.__properties__,{get_states:"get_states",set_state:"set_state",get_state:"get_state"})
});
var haxe_ui_toolkit_controls_TextInput = function() {
	haxe_ui_toolkit_core_StateComponent.call(this);
	this.addStates(["normal","disabled"]);
	this._layout = new haxe_ui_toolkit_controls_TextInputLayout();
	this._textDisplay = new haxe_ui_toolkit_text_TextDisplay();
	this._textDisplay.set_interactive(true);
	this._textDisplay.set_autoSize(false);
	this._textDisplay.set_text("");
};
$hxClasses["haxe.ui.toolkit.controls.TextInput"] = haxe_ui_toolkit_controls_TextInput;
haxe_ui_toolkit_controls_TextInput.__name__ = ["haxe","ui","toolkit","controls","TextInput"];
haxe_ui_toolkit_controls_TextInput.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_controls_TextInput.__super__ = haxe_ui_toolkit_core_StateComponent;
haxe_ui_toolkit_controls_TextInput.prototype = $extend(haxe_ui_toolkit_core_StateComponent.prototype,{
	preInitialize: function() {
		haxe_ui_toolkit_core_StateComponent.prototype.preInitialize.call(this);
	}
	,initialize: function() {
		haxe_ui_toolkit_core_StateComponent.prototype.initialize.call(this);
		this.get_sprite().addChild(this._textDisplay.get_display());
		if(this.get_multiline() == true) {
			this._textDisplay.get_display().set_width(this._layout.get_innerWidth());
			this._textDisplay.get_display().set_height(this._layout.get_innerHeight());
		}
		this._textDisplay.get_display().addEventListener(openfl_events_Event.CHANGE,$bind(this,this._onTextChange));
		this._textDisplay.get_display().addEventListener(openfl_events_Event.SCROLL,$bind(this,this._onTextScroll));
		this.checkScrolls();
		if(this._textPlaceHolder != null && this.contains(this._textPlaceHolder) == false) this.addChild(this._textPlaceHolder);
		if(this._textPlaceHolder != null) {
			if(this.get_text().length > 0) this._textPlaceHolder.set_visible(false);
			this._textPlaceHolder.set_textAlign(this._textDisplay.get_textAlign());
			this.setChildIndex(this._textPlaceHolder,0);
		}
	}
	,dispose: function() {
		this._textDisplay.get_display().removeEventListener(openfl_events_Event.CHANGE,$bind(this,this._onTextChange));
		this._textDisplay.get_display().removeEventListener(openfl_events_Event.SCROLL,$bind(this,this._onTextScroll));
		this.get_sprite().removeChild(this._textDisplay.get_display());
		if(this._textPlaceHolder != null && this.contains(this._textPlaceHolder)) this.removeChild(this._textPlaceHolder);
		haxe_ui_toolkit_core_StateComponent.prototype.dispose.call(this);
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		if(!this._ready || this._invalidating) return;
		haxe_ui_toolkit_core_StateComponent.prototype.invalidate.call(this,type,recursive);
		this._invalidating = true;
		if((type & 256) == 256) {
			this.checkScrolls();
			this._textDisplay.get_display().set_width(this.get_layout().get_innerWidth());
			this._textDisplay.get_display().set_height(this.get_layout().get_innerHeight());
		}
		this._invalidating = false;
	}
	,set_disabled: function(value) {
		haxe_ui_toolkit_core_StateComponent.prototype.set_disabled.call(this,value);
		if(value == true) this._textDisplay.set_interactive(false); else this._textDisplay.set_interactive(true);
		return value;
	}
	,_onTextChange: function(event) {
		this.checkScrolls();
		if(this._textPlaceHolder != null) this._textPlaceHolder.set_visible(this.get_text().length == 0);
	}
	,_onTextScroll: function(event) {
		this.checkScrolls();
	}
	,_onVScrollChange: function(event) {
		var tf;
		tf = js_Boot.__cast(this._textDisplay.get_display() , openfl_text_TextField);
	}
	,_onHScrollChange: function(event) {
		var tf;
		tf = js_Boot.__cast(this._textDisplay.get_display() , openfl_text_TextField);
	}
	,get_text: function() {
		return this._textDisplay.get_text();
	}
	,set_text: function(value) {
		value = haxe_ui_toolkit_core_StateComponent.prototype.set_text.call(this,value);
		this._textDisplay.set_text(value);
		if(this._textPlaceHolder != null) this._textPlaceHolder.set_visible(value.length == 0);
		return value;
	}
	,applyStyle: function() {
		haxe_ui_toolkit_core_StateComponent.prototype.applyStyle.call(this);
		if(this._textDisplay != null) this._textDisplay.set_style(this._baseStyle);
	}
	,get_multiline: function() {
		return this._textDisplay.get_multiline();
	}
	,set_multiline: function(value) {
		this._textDisplay.set_wrapLines(value);
		this._textDisplay.set_multiline(value);
		return value;
	}
	,get_selectionBeginIndex: function() {
		var tf;
		tf = js_Boot.__cast(this._textDisplay.get_display() , openfl_text_TextField);
		var n = 0;
		return n;
	}
	,get_selectionEndIndex: function() {
		var tf;
		tf = js_Boot.__cast(this._textDisplay.get_display() , openfl_text_TextField);
		var n = 0;
		return n;
	}
	,get_selectedTextFormat: function() {
		var tf;
		tf = js_Boot.__cast(this._textDisplay.get_display() , openfl_text_TextField);
		return tf.getTextFormat(this.get_selectionBeginIndex() - 1,this.get_selectionEndIndex());
	}
	,get_wrapLines: function() {
		return this._textDisplay.get_wrapLines();
	}
	,set_wrapLines: function(value) {
		this._textDisplay.set_wrapLines(value);
		return value;
	}
	,get_displayAsPassword: function() {
		return this._textDisplay.get_displayAsPassword();
	}
	,set_displayAsPassword: function(value) {
		this._textDisplay.set_displayAsPassword(value);
		return value;
	}
	,get_placeholderText: function() {
		if(this._textPlaceHolder == null) return null;
		return this._textPlaceHolder.get_text();
	}
	,set_placeholderText: function(value) {
		if(this._textPlaceHolder == null) {
			this._textPlaceHolder = new haxe_ui_toolkit_controls_Text();
			this._textPlaceHolder.set_autoSize(false);
			this._textPlaceHolder.set_id("placeholder");
		}
		this._textPlaceHolder.set_text(value);
		if(this._ready && this.contains(this._textPlaceHolder) == false && value != null) this.addChild(this._textPlaceHolder);
		if(value == null) {
			if(this.contains(this._textPlaceHolder)) this.removeChild(this._textPlaceHolder);
			this._textPlaceHolder = null;
		}
		if(this._textPlaceHolder != null) this._textPlaceHolder.set_visible(this.get_text().length == 0);
		return value;
	}
	,get_textAlign: function() {
		if(this._textDisplay == null) return null;
		return this._textDisplay.get_textAlign();
	}
	,set_textAlign: function(value) {
		if(this._textDisplay != null) this._textDisplay.set_textAlign(value);
		if(this._textPlaceHolder != null) this._textPlaceHolder.set_textAlign(value);
		return value;
	}
	,get_maxChars: function() {
		return this._textDisplay.get_maxChars();
	}
	,set_maxChars: function(value) {
		return this._textDisplay.set_maxChars(value);
	}
	,get_restrictChars: function() {
		return this._textDisplay.get_restrictChars();
	}
	,set_restrictChars: function(value) {
		return this._textDisplay.set_restrictChars(value);
	}
	,get_vscrollPos: function() {
		if(this._vscroll != null) return this._vscroll.get_pos();
		return 0;
	}
	,set_vscrollPos: function(value) {
		if(this._vscroll != null) this._vscroll.set_pos(value);
		return value;
	}
	,get_vscrollMin: function() {
		if(this._vscroll != null) return this._vscroll.get_min();
		return 0;
	}
	,get_vscrollMax: function() {
		if(this._vscroll != null) return this._vscroll.get_max();
		return 0;
	}
	,replaceSelectedText: function(s) {
		var tf;
		tf = js_Boot.__cast(this._textDisplay.get_display() , openfl_text_TextField);
	}
	,focus: function() {
		var tf;
		tf = js_Boot.__cast(this._textDisplay.get_display() , openfl_text_TextField);
		tf.stage.set_focus(tf);
	}
	,checkScrolls: function() {
		if(this.get_multiline() == false || this.get_ready() == false) return;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_core_StateComponent.prototype.clone.call(this);
		c.set_multiline(this.get_multiline());
		c.set_wrapLines(this.get_wrapLines());
		c.set_displayAsPassword(this.get_displayAsPassword());
		c.set_placeholderText(this.get_placeholderText());
		c.set_textAlign(this.get_textAlign());
		c.set_maxChars(this.get_maxChars());
		c.set_restrictChars(this.get_restrictChars());
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_TextInput();
	}
	,__class__: haxe_ui_toolkit_controls_TextInput
	,__properties__: $extend(haxe_ui_toolkit_core_StateComponent.prototype.__properties__,{get_vscrollMax:"get_vscrollMax",get_vscrollMin:"get_vscrollMin",set_vscrollPos:"set_vscrollPos",get_vscrollPos:"get_vscrollPos",set_restrictChars:"set_restrictChars",get_restrictChars:"get_restrictChars",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",set_textAlign:"set_textAlign",get_textAlign:"get_textAlign",set_placeholderText:"set_placeholderText",get_placeholderText:"get_placeholderText",set_displayAsPassword:"set_displayAsPassword",get_displayAsPassword:"get_displayAsPassword",set_wrapLines:"set_wrapLines",get_wrapLines:"get_wrapLines",get_selectedTextFormat:"get_selectedTextFormat",get_selectionEndIndex:"get_selectionEndIndex",get_selectionBeginIndex:"get_selectionBeginIndex",set_multiline:"set_multiline",get_multiline:"get_multiline"})
});
var haxe_ui_richtext_Code = function() {
	this._async = false;
	haxe_ui_toolkit_controls_TextInput.call(this);
	this.set_multiline(true);
	this.set_wrapLines(false);
	var tf;
	tf = js_Boot.__cast(this._textDisplay.get_display() , openfl_text_TextField);
	this._syntax = haxe_ui_richtext_syntax_CodeSyntax.getSyntax("");
};
$hxClasses["haxe.ui.richtext.Code"] = haxe_ui_richtext_Code;
haxe_ui_richtext_Code.__name__ = ["haxe","ui","richtext","Code"];
haxe_ui_richtext_Code.__super__ = haxe_ui_toolkit_controls_TextInput;
haxe_ui_richtext_Code.prototype = $extend(haxe_ui_toolkit_controls_TextInput.prototype,{
	initialize: function() {
		haxe_ui_toolkit_controls_TextInput.prototype.initialize.call(this);
		this._textDisplay.get_display().addEventListener(openfl_events_Event.CHANGE,$bind(this,this._onCodeChange));
		this._textDisplay.get_display().addEventListener(openfl_events_KeyboardEvent.KEY_DOWN,$bind(this,this._onCodeKeyDown));
		this.applyRules();
	}
	,dispose: function() {
		this._textDisplay.get_display().removeEventListener(openfl_events_Event.CHANGE,$bind(this,this._onCodeChange));
		this._textDisplay.get_display().removeEventListener(openfl_events_KeyboardEvent.KEY_DOWN,$bind(this,this._onCodeKeyDown));
		haxe_ui_toolkit_controls_TextInput.prototype.dispose.call(this);
	}
	,set_text: function(value) {
		if(value != null) {
			value = haxe_ui_toolkit_controls_TextInput.prototype.set_text.call(this,value);
			value = StringTools.replace(value,"\t","    ");
			haxe_ui_toolkit_controls_TextInput.prototype.set_text.call(this,value);
			this.applyRules();
		}
		return value;
	}
	,get_syntax: function() {
		return this._syntax.get_identifier();
	}
	,set_syntax: function(value) {
		this._syntax = haxe_ui_richtext_syntax_CodeSyntax.getSyntax(value);
		this.applyRules();
		return value;
	}
	,get_async: function() {
		return this._async;
	}
	,set_async: function(value) {
		this._async = value;
		return value;
	}
	,_onCodeChange: function(event) {
		this.applyRules();
	}
	,_onCodeKeyDown: function(event) {
		if(event.keyCode == 9 && event.ctrlKey == false && event.altKey == false && event.shiftKey == false) {
			this.replaceSelectedText("    ");
			this.applyRules();
		}
	}
	,applyRules: function() {
		var tf;
		tf = js_Boot.__cast(this._textDisplay.get_display() , openfl_text_TextField);
		if(this._async == false) {
			var runner = new haxe_ui_richtext__$Code_SyntaxHighlightRunner(tf,this._syntax);
			runner.set_needToExit(function() {
				return false;
			});
			runner.run();
		} else {
			if(this._caller != null) this._caller.cancel();
			this._caller = new haxe_ui_toolkit_util_pseudothreads_AsyncThreadCaller(new haxe_ui_richtext__$Code_SyntaxHighlightRunner(tf,this._syntax));
			this._caller.start();
		}
	}
	,clone: function() {
		var c = haxe_ui_toolkit_controls_TextInput.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_richtext_Code();
	}
	,__class__: haxe_ui_richtext_Code
	,__properties__: $extend(haxe_ui_toolkit_controls_TextInput.prototype.__properties__,{set_async:"set_async",get_async:"get_async",set_syntax:"set_syntax",get_syntax:"get_syntax"})
});
var haxe_ui_toolkit_util_pseudothreads_IRunnable = function() { };
$hxClasses["haxe.ui.toolkit.util.pseudothreads.IRunnable"] = haxe_ui_toolkit_util_pseudothreads_IRunnable;
haxe_ui_toolkit_util_pseudothreads_IRunnable.__name__ = ["haxe","ui","toolkit","util","pseudothreads","IRunnable"];
haxe_ui_toolkit_util_pseudothreads_IRunnable.prototype = {
	__class__: haxe_ui_toolkit_util_pseudothreads_IRunnable
	,__properties__: {get_data:"get_data",set_needToExit:"set_needToExit",get_runningTimeShare:"get_runningTimeShare",get_total:"get_total",get_progress:"get_progress",get_isComplete:"get_isComplete"}
};
var haxe_ui_toolkit_util_pseudothreads_Runner = function() {
	this._runningTimeShare = .6;
};
$hxClasses["haxe.ui.toolkit.util.pseudothreads.Runner"] = haxe_ui_toolkit_util_pseudothreads_Runner;
haxe_ui_toolkit_util_pseudothreads_Runner.__name__ = ["haxe","ui","toolkit","util","pseudothreads","Runner"];
haxe_ui_toolkit_util_pseudothreads_Runner.__interfaces__ = [haxe_ui_toolkit_util_pseudothreads_IRunnable];
haxe_ui_toolkit_util_pseudothreads_Runner.prototype = {
	run: function() {
	}
	,get_isComplete: function() {
		return this._isComplete;
	}
	,get_progress: function() {
		return this._progress;
	}
	,get_total: function() {
		return this._total;
	}
	,get_runningTimeShare: function() {
		return this._runningTimeShare;
	}
	,set_needToExit: function(value) {
		this._needToExit = value;
		return value;
	}
	,get_data: function() {
		return this._data;
	}
	,__class__: haxe_ui_toolkit_util_pseudothreads_Runner
	,__properties__: {get_data:"get_data",set_needToExit:"set_needToExit",get_runningTimeShare:"get_runningTimeShare",get_total:"get_total",get_progress:"get_progress",get_isComplete:"get_isComplete"}
};
var haxe_ui_richtext__$Code_SyntaxHighlightRunner = function(tf,syntax,timeShare) {
	if(timeShare == null) timeShare = .9;
	this._ruleIndex = 0;
	this._matchIndex = 0;
	this._matchedSyntax = false;
	haxe_ui_toolkit_util_pseudothreads_Runner.call(this);
	this._tf = tf;
	this._syntax = syntax;
	this._runningTimeShare = timeShare;
	this._syntaxRules = this._syntax.get_rulesArray();
	this._matches = new haxe_ds_StringMap();
	this._txt = tf.get_text();
	if(this._txt != "") tf.setTextFormat(this._syntax.get_defaultFormat(),0,this._txt.length);
};
$hxClasses["haxe.ui.richtext._Code.SyntaxHighlightRunner"] = haxe_ui_richtext__$Code_SyntaxHighlightRunner;
haxe_ui_richtext__$Code_SyntaxHighlightRunner.__name__ = ["haxe","ui","richtext","_Code","SyntaxHighlightRunner"];
haxe_ui_richtext__$Code_SyntaxHighlightRunner.__super__ = haxe_ui_toolkit_util_pseudothreads_Runner;
haxe_ui_richtext__$Code_SyntaxHighlightRunner.prototype = $extend(haxe_ui_toolkit_util_pseudothreads_Runner.prototype,{
	run: function() {
		if(this._matchedSyntax == false) {
			var _g1 = this._ruleIndex;
			var _g = this._syntaxRules.length;
			while(_g1 < _g) {
				var n = _g1++;
				if(this._needToExit() == true) {
					this._ruleIndex = n;
					return;
				}
				var rule = this._syntaxRules[n];
				var matches = [[]];
				this._matches.set(rule,matches[0]);
				var r = this._syntax.getCompiledRule(rule);
				r.map(this._txt,(function(matches) {
					return function(e) {
						var pos = e.matchedPos();
						matches[0].push(pos);
						return "";
					};
				})(matches));
			}
			this._ruleIndex = 0;
			this._matchedSyntax = true;
		}
		if(this._matchedSyntax == true) {
			var _g11 = this._ruleIndex;
			var _g2 = this._syntaxRules.length;
			while(_g11 < _g2) {
				var n1 = _g11++;
				if(this._needToExit() == true) {
					this._ruleIndex = n1;
					return;
				}
				var rule1 = this._syntaxRules[n1];
				var matches1 = this._matches.get(rule1);
				var _g3 = this._matchIndex;
				var _g21 = matches1.length;
				while(_g3 < _g21) {
					var m = _g3++;
					if(this._needToExit() == true) {
						this._ruleIndex = n1;
						this._matchIndex = m;
						return;
					}
					var match = matches1[m];
					this._tf.setTextFormat((function($this) {
						var $r;
						var this1 = $this._syntax.get_rules();
						$r = this1.get(rule1);
						return $r;
					}(this)),match.pos,match.pos + match.len);
				}
				this._matchIndex = 0;
			}
		}
		this._needToExit = null;
		this._isComplete = true;
	}
	,__class__: haxe_ui_richtext__$Code_SyntaxHighlightRunner
});
var haxe_ui_richtext_RTF = function() {
	haxe_ui_toolkit_controls_TextInput.call(this);
	this.set_multiline(true);
	var tf;
	tf = js_Boot.__cast(this._textDisplay.get_display() , openfl_text_TextField);
};
$hxClasses["haxe.ui.richtext.RTF"] = haxe_ui_richtext_RTF;
haxe_ui_richtext_RTF.__name__ = ["haxe","ui","richtext","RTF"];
haxe_ui_richtext_RTF.__super__ = haxe_ui_toolkit_controls_TextInput;
haxe_ui_richtext_RTF.prototype = $extend(haxe_ui_toolkit_controls_TextInput.prototype,{
	get_htmlText: function() {
		var tf;
		tf = js_Boot.__cast(this._textDisplay.get_display() , openfl_text_TextField);
		return tf.get_htmlText();
	}
	,set_htmlText: function(value) {
		if(StringTools.startsWith(value,"asset://")) {
			var assetId = HxOverrides.substr(value,8,value.length);
			value = haxe_ui_toolkit_resources_ResourceManager.get_instance().getText(assetId);
			value = StringTools.replace(value,"\r","");
		}
		var tf;
		tf = js_Boot.__cast(this._textDisplay.get_display() , openfl_text_TextField);
		tf.set_htmlText(value);
		return value;
	}
	,bold: function() {
		this.applyRTFStyle("bold");
	}
	,italic: function() {
		this.applyRTFStyle("italic");
	}
	,underline: function() {
		this.applyRTFStyle("underline");
	}
	,fontSize: function(size) {
		this.applyRTFStyle("fontSize",size);
	}
	,fontName: function(name) {
		this.applyRTFStyle("fontName",name);
	}
	,bullet: function() {
		this.applyRTFStyle("bullet");
	}
	,alignLeft: function() {
		this.applyRTFStyle("align","left");
	}
	,alignCenter: function() {
		this.applyRTFStyle("align","center");
	}
	,alignRight: function() {
		this.applyRTFStyle("align","right");
	}
	,alignJustify: function() {
		this.applyRTFStyle("align","justify");
	}
	,applyRTFStyle: function(what,value) {
		if(this.get_selectionBeginIndex() == 0 && this.get_selectionEndIndex() == 0) return;
		if(this.get_selectionBeginIndex() == this.get_selectionEndIndex()) return;
		var tf;
		tf = js_Boot.__cast(this._textDisplay.get_display() , openfl_text_TextField);
		var format = tf.getTextFormat(this.get_selectionBeginIndex(),this.get_selectionEndIndex());
		switch(what) {
		case "bold":
			format.bold = !format.bold;
			break;
		case "italic":
			format.italic = !format.italic;
			break;
		case "underline":
			format.underline = !format.underline;
			break;
		case "fontSize":
			format.size = js_Boot.__cast(value , Int);
			break;
		case "fontName":
			format.font = js_Boot.__cast(value , String);
			break;
		case "bullet":
			format.bullet = !format.bullet;
			break;
		case "align":
			var align = openfl_text_TextFormatAlign.LEFT;
			var textAlign;
			textAlign = js_Boot.__cast(value , String);
			if(textAlign == "center") align = openfl_text_TextFormatAlign.CENTER; else if(textAlign == "right") align = openfl_text_TextFormatAlign.RIGHT; else if(textAlign == "justify") align = openfl_text_TextFormatAlign.JUSTIFY;
			format.align = align;
			break;
		default:
		}
		tf.setTextFormat(format,this.get_selectionBeginIndex(),this.get_selectionEndIndex());
	}
	,clone: function() {
		var c = haxe_ui_toolkit_controls_TextInput.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_richtext_RTF();
	}
	,__class__: haxe_ui_richtext_RTF
	,__properties__: $extend(haxe_ui_toolkit_controls_TextInput.prototype.__properties__,{set_htmlText:"set_htmlText",get_htmlText:"get_htmlText"})
});
var haxe_ui_toolkit_containers_Container = function() {
	haxe_ui_toolkit_core_Component.call(this);
};
$hxClasses["haxe.ui.toolkit.containers.Container"] = haxe_ui_toolkit_containers_Container;
haxe_ui_toolkit_containers_Container.__name__ = ["haxe","ui","toolkit","containers","Container"];
haxe_ui_toolkit_containers_Container.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_containers_Container.__super__ = haxe_ui_toolkit_core_Component;
haxe_ui_toolkit_containers_Container.prototype = $extend(haxe_ui_toolkit_core_Component.prototype,{
	clone: function() {
		var c = haxe_ui_toolkit_core_Component.prototype.clone.call(this);
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			c.addChild(child.clone());
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_Container();
	}
	,__class__: haxe_ui_toolkit_containers_Container
});
var haxe_ui_toolkit_containers_VBox = function() {
	haxe_ui_toolkit_containers_Container.call(this);
	this.set_autoSize(true);
	this.set_layout(new haxe_ui_toolkit_layout_VerticalLayout());
};
$hxClasses["haxe.ui.toolkit.containers.VBox"] = haxe_ui_toolkit_containers_VBox;
haxe_ui_toolkit_containers_VBox.__name__ = ["haxe","ui","toolkit","containers","VBox"];
haxe_ui_toolkit_containers_VBox.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_containers_VBox.__super__ = haxe_ui_toolkit_containers_Container;
haxe_ui_toolkit_containers_VBox.prototype = $extend(haxe_ui_toolkit_containers_Container.prototype,{
	clone: function() {
		var c = haxe_ui_toolkit_containers_Container.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_VBox();
	}
	,__class__: haxe_ui_toolkit_containers_VBox
});
var haxe_ui_richtext_RTFView = function() {
	this._systemFonts = false;
	haxe_ui_toolkit_containers_VBox.call(this);
	this._rtf = new haxe_ui_richtext_RTF();
	this._rtf.set_multiline(true);
	this._rtf.set_wrapLines(true);
	this._rtf.set_percentWidth(100);
	this._rtf.set_percentHeight(100);
};
$hxClasses["haxe.ui.richtext.RTFView"] = haxe_ui_richtext_RTFView;
haxe_ui_richtext_RTFView.__name__ = ["haxe","ui","richtext","RTFView"];
haxe_ui_richtext_RTFView.__super__ = haxe_ui_toolkit_containers_VBox;
haxe_ui_richtext_RTFView.prototype = $extend(haxe_ui_toolkit_containers_VBox.prototype,{
	initialize: function() {
		haxe_ui_toolkit_containers_VBox.prototype.initialize.call(this);
		var hbox = new haxe_ui_toolkit_containers_HBox();
		this._fontNameList = new haxe_ui_toolkit_controls_selection_ListSelector();
		this._fontNameList.set_styleName("alternate");
		this._fontNameList.set_width(200);
		this._fontNameList.set_autoSize(false);
		this._fontNameList.set_text("_sans");
		if(this._systemFonts == true) {
		} else {
			this._fontNameList.get_dataSource().add({ text : "_sans"});
			this._fontNameList.get_dataSource().add({ text : "_serif"});
			this._fontNameList.get_dataSource().add({ text : "_typewriter"});
			this._fontNameList.get_dataSource().add({ text : "Arial"});
			this._fontNameList.get_dataSource().add({ text : "Courier"});
			this._fontNameList.get_dataSource().add({ text : "Courier New"});
			this._fontNameList.get_dataSource().add({ text : "Geneva"});
			this._fontNameList.get_dataSource().add({ text : "Georgia"});
			this._fontNameList.get_dataSource().add({ text : "Helvetica"});
			this._fontNameList.get_dataSource().add({ text : "Times New Roman"});
			this._fontNameList.get_dataSource().add({ text : "Times"});
			this._fontNameList.get_dataSource().add({ text : "Verdana"});
		}
		this._fontNameList.addEventListener("haxeui_" + "change",$bind(this,this._onFontNameChange));
		hbox.addChild(this._fontNameList);
		this._fontSizeList = new haxe_ui_toolkit_controls_selection_ListSelector();
		this._fontSizeList.set_styleName("alternate");
		this._fontSizeList.set_text("13");
		this._fontSizeList.get_dataSource().add({ text : 10});
		this._fontSizeList.get_dataSource().add({ text : 12});
		this._fontSizeList.get_dataSource().add({ text : 13});
		this._fontSizeList.get_dataSource().add({ text : 14});
		this._fontSizeList.get_dataSource().add({ text : 16});
		this._fontSizeList.get_dataSource().add({ text : 18});
		this._fontSizeList.get_dataSource().add({ text : 20});
		this._fontSizeList.get_dataSource().add({ text : 24});
		this._fontSizeList.get_dataSource().add({ text : 26});
		this._fontSizeList.get_dataSource().add({ text : 28});
		this._fontSizeList.get_dataSource().add({ text : 36});
		this._fontSizeList.get_dataSource().add({ text : 48});
		this._fontSizeList.get_dataSource().add({ text : 72});
		this._fontSizeList.addEventListener("haxeui_" + "change",$bind(this,this._onFontSizeChange));
		hbox.addChild(this._fontSizeList);
		var spacer = new haxe_ui_toolkit_controls_Spacer();
		spacer.set_width(10);
		hbox.addChild(spacer);
		this._boldButton = new haxe_ui_richtext_RTFToolButton();
		this._boldButton.set_styleName("alternate");
		this._boldButton.set_id("bold");
		this._boldButton.addEventListener(openfl_events_MouseEvent.CLICK,$bind(this,this._onBoldClick));
		hbox.addChild(this._boldButton);
		this._italicButton = new haxe_ui_richtext_RTFToolButton();
		this._italicButton.set_styleName("alternate");
		this._italicButton.set_id("italic");
		this._italicButton.addEventListener(openfl_events_MouseEvent.CLICK,$bind(this,this._onItalicClick));
		hbox.addChild(this._italicButton);
		this._underlineButton = new haxe_ui_richtext_RTFToolButton();
		this._underlineButton.set_styleName("alternate");
		this._underlineButton.set_id("underline");
		this._underlineButton.addEventListener(openfl_events_MouseEvent.CLICK,$bind(this,this._onUnderlineClick));
		hbox.addChild(this._underlineButton);
		var spacer1 = new haxe_ui_toolkit_controls_Spacer();
		spacer1.set_width(10);
		hbox.addChild(spacer1);
		this._bulletButton = new haxe_ui_richtext_RTFToolButton();
		this._bulletButton.set_styleName("alternate");
		this._bulletButton.set_id("bullet");
		this._bulletButton.addEventListener(openfl_events_MouseEvent.CLICK,$bind(this,this._onBulletClick));
		hbox.addChild(this._bulletButton);
		var spacer2 = new haxe_ui_toolkit_controls_Spacer();
		spacer2.set_width(10);
		hbox.addChild(spacer2);
		this._leftAlignButton = new haxe_ui_richtext_RTFToolButton();
		this._leftAlignButton.set_styleName("alternate");
		this._leftAlignButton.set_id("alignLeft");
		this._leftAlignButton.addEventListener(openfl_events_MouseEvent.CLICK,$bind(this,this._onLeftAlignClick));
		hbox.addChild(this._leftAlignButton);
		this._centerAlignButton = new haxe_ui_richtext_RTFToolButton();
		this._centerAlignButton.set_styleName("alternate");
		this._centerAlignButton.set_id("alignCenter");
		this._centerAlignButton.addEventListener(openfl_events_MouseEvent.CLICK,$bind(this,this._onCenterAlignClick));
		hbox.addChild(this._centerAlignButton);
		this._rightAlignButton = new haxe_ui_richtext_RTFToolButton();
		this._rightAlignButton.set_styleName("alternate");
		this._rightAlignButton.set_id("alignRight");
		this._rightAlignButton.addEventListener(openfl_events_MouseEvent.CLICK,$bind(this,this._onRightAlignClick));
		hbox.addChild(this._rightAlignButton);
		this._justifyAlignButton = new haxe_ui_richtext_RTFToolButton();
		this._justifyAlignButton.set_styleName("alternate");
		this._justifyAlignButton.set_id("alignJustify");
		this._justifyAlignButton.addEventListener(openfl_events_MouseEvent.CLICK,$bind(this,this._onJustifyAlignClick));
		hbox.addChild(this._justifyAlignButton);
		this.addChild(hbox);
		this.addChild(this._rtf);
	}
	,get_htmlText: function() {
		return this._rtf.get_htmlText();
	}
	,set_htmlText: function(value) {
		this._rtf.set_htmlText(value);
		return value;
	}
	,set_text: function(value) {
		this._rtf.set_text(value);
		return value;
	}
	,_onBoldClick: function(event) {
		this._rtf.bold();
	}
	,_onItalicClick: function(event) {
		this._rtf.italic();
	}
	,_onUnderlineClick: function(event) {
		this._rtf.underline();
	}
	,_onBulletClick: function(event) {
		this._rtf.bullet();
	}
	,_onFontNameChange: function(event) {
		this._rtf.fontName(this._fontNameList.get_text());
	}
	,_onFontSizeChange: function(event) {
		var size = Std.parseInt(this._fontSizeList.get_text());
		this._rtf.fontSize(size);
	}
	,_onLeftAlignClick: function(event) {
		this._rtf.alignLeft();
	}
	,_onCenterAlignClick: function(event) {
		this._rtf.alignCenter();
	}
	,_onRightAlignClick: function(event) {
		this._rtf.alignRight();
	}
	,_onJustifyAlignClick: function(event) {
		this._rtf.alignJustify();
	}
	,clone: function() {
		var c = haxe_ui_toolkit_containers_VBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_richtext_RTFView();
	}
	,__class__: haxe_ui_richtext_RTFView
	,__properties__: $extend(haxe_ui_toolkit_containers_VBox.prototype.__properties__,{set_htmlText:"set_htmlText",get_htmlText:"get_htmlText"})
});
var haxe_ui_toolkit_core_interfaces_IFocusable = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IFocusable"] = haxe_ui_toolkit_core_interfaces_IFocusable;
haxe_ui_toolkit_core_interfaces_IFocusable.__name__ = ["haxe","ui","toolkit","core","interfaces","IFocusable"];
haxe_ui_toolkit_core_interfaces_IFocusable.prototype = {
	__class__: haxe_ui_toolkit_core_interfaces_IFocusable
	,__properties__: {set_allowFocus:"set_allowFocus",get_allowFocus:"get_allowFocus"}
};
var haxe_ui_toolkit_controls_Button = function() {
	this.dispatchChangeEvents = true;
	this._mouseIn = false;
	this._iconHeight = -1;
	this._iconWidth = -1;
	this._iconPosition = "left";
	this._allowSelection = true;
	this._selected = false;
	this._toggle = false;
	this._down = false;
	this._remainPressed = false;
	this._allowFocus = true;
	haxe_ui_toolkit_core_StateComponent.call(this);
	this.get_sprite().buttonMode = true;
	this.get_sprite().useHandCursor = true;
	this.set_state("normal");
	this._layout = new haxe_ui_toolkit_layout_HorizontalLayout();
	this.set_autoSize(true);
	if(haxe_ui_toolkit_controls_Button._groups == null) haxe_ui_toolkit_controls_Button._groups = new haxe_ds_StringMap();
};
$hxClasses["haxe.ui.toolkit.controls.Button"] = haxe_ui_toolkit_controls_Button;
haxe_ui_toolkit_controls_Button.__name__ = ["haxe","ui","toolkit","controls","Button"];
haxe_ui_toolkit_controls_Button.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable,haxe_ui_toolkit_core_interfaces_IFocusable];
haxe_ui_toolkit_controls_Button._groups = null;
haxe_ui_toolkit_controls_Button.optionInGroup = function(value,option) {
	var exists = false;
	var arr = haxe_ui_toolkit_controls_Button._groups.get(value);
	if(arr != null) {
		var _g = 0;
		while(_g < arr.length) {
			var test = arr[_g];
			++_g;
			if(test == option) {
				exists = true;
				break;
			}
		}
	}
	return exists;
};
haxe_ui_toolkit_controls_Button.__super__ = haxe_ui_toolkit_core_StateComponent;
haxe_ui_toolkit_controls_Button.prototype = $extend(haxe_ui_toolkit_core_StateComponent.prototype,{
	dispose: function() {
		if(this.get_group() != null) {
			var arr = haxe_ui_toolkit_controls_Button._groups.get(this._group);
			HxOverrides.remove(arr,this);
		}
		haxe_ui_toolkit_core_StateComponent.prototype.dispose.call(this);
	}
	,get_remainPressed: function() {
		return this._remainPressed;
	}
	,set_remainPressed: function(value) {
		this._remainPressed = value;
		return value;
	}
	,get_icon: function() {
		if(this._icon == null) return null;
		return this._icon.get_resource();
	}
	,set_icon: function(value) {
		if(value == "none") {
			if(this._icon != null) this._icon.set_visible(false);
			return value;
		}
		if(value != null) {
			if(this._icon == null) {
				this._icon = new haxe_ui_toolkit_controls_Image();
				this._icon.set_id("icon");
				if(this._iconWidth != -1) this._icon.set_width(this._iconWidth);
				if(this._iconHeight != -1) this._icon.set_height(this._iconHeight);
			}
			if(this._icon.get_resource() != value) {
				this._icon.set_resource(value);
				this.organiseChildren();
			}
		} else if(this._icon != null) this._icon.set_visible(false);
		return value;
	}
	,get_iconWidth: function() {
		return this._iconWidth;
	}
	,set_iconWidth: function(value) {
		if(value == this._iconWidth) return value;
		this._iconWidth = value;
		if(this._icon != null) this._icon.set_width(this._iconWidth);
		return value;
	}
	,get_iconHeight: function() {
		return this._iconHeight;
	}
	,set_iconHeight: function(value) {
		if(value == this._iconHeight) return value;
		this._iconHeight = value;
		if(this._icon != null) this._icon.set_height(this._iconHeight);
		return value;
	}
	,organiseChildren: function() {
		if(this._ready == false) return;
		this.removeAllChildren(false);
		if(this._icon != null) {
			this._icon.set_horizontalAlign("center");
			this._icon.set_verticalAlign("center");
		}
		if(this._label != null) {
			this._label.set_horizontalAlign("center");
			this._label.set_verticalAlign("center");
		}
		if(this.get_autoSize() == false || this.get_percentWidth() > 0) {
			if(this._label != null) {
				this._label.set_percentWidth(100);
				this._label.set_autoSize(this._multiline);
			}
		}
		if(this._iconPosition == "left") {
			this.set_layout(new haxe_ui_toolkit_layout_HorizontalLayout());
			this.addChild(this._icon);
			this.addChild(this._label);
		} else if(this._iconPosition == "right") {
			this.set_layout(new haxe_ui_toolkit_layout_HorizontalLayout());
			this.addChild(this._label);
			this.addChild(this._icon);
		} else if(this._iconPosition == "top") {
			this.set_layout(new haxe_ui_toolkit_layout_VerticalLayout());
			this.addChild(this._icon);
			this.addChild(this._label);
		} else if(this._iconPosition == "bottom") {
			this.set_layout(new haxe_ui_toolkit_layout_VerticalLayout());
			this.addChild(this._label);
			this.addChild(this._icon);
		} else if(this._iconPosition == "center") {
			this.set_layout(new haxe_ui_toolkit_layout_BoxLayout());
			this.addChild(this._label);
			this.addChild(this._icon);
		}
		if(this._iconPosition == "fill" && this._icon != null) {
			this._icon.set_width(this.get_width());
			this._icon.set_height(this.get_height());
		}
		if(this.get_layout().get_usableHeight() <= 0) {
			var cy = 0;
			if(this._label != null) cy = this._label.get_height() + this.get_layout().get_padding().get_top() + this.get_layout().get_padding().get_bottom();
			if(this._icon != null) {
				var temp = this._icon.get_height() + this.get_layout().get_padding().get_top() + this.get_layout().get_padding().get_bottom();
				if(temp > cy) cy = temp;
			}
			this.set_height(cy);
		}
		this.invalidate(1048576);
	}
	,preInitialize: function() {
		haxe_ui_toolkit_core_StateComponent.prototype.preInitialize.call(this);
	}
	,initialize: function() {
		var _g = this;
		haxe_ui_toolkit_core_StateComponent.prototype.initialize.call(this);
		this.addEventListener(openfl_events_MouseEvent.MOUSE_OVER,$bind(this,this._onMouseOver));
		this.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this._onMouseOut));
		this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._onMouseDown));
		this.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
		this.addEventListener(openfl_events_MouseEvent.CLICK,$bind(this,this._onMouseClick));
		this.addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,function(e) {
			if(_g._mouseIn == false) {
				_g._mouseIn = true;
				var mouseEvent = new openfl_events_MouseEvent(openfl_events_MouseEvent.MOUSE_OVER,false,e.cancelable,e.localX,e.localY,e.relatedObject,e.ctrlKey,e.altKey,e.shiftKey,e.buttonDown,e.delta,e.commandKey,e.clickCount);
				_g.dispatchEvent(mouseEvent);
				haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(_g,_g.__onScreenMouseMove));
			}
		});
		this.organiseChildren();
	}
	,__onScreenMouseMove: function(e) {
		if(this._mouseIn == true) {
			if(this.hitTest(e.stageX,e.stageY) == false) {
				haxe_ui_toolkit_core_Screen.get_instance().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.__onScreenMouseMove));
				this._mouseIn = false;
				var mouseEvent = new openfl_events_MouseEvent(openfl_events_MouseEvent.MOUSE_OUT,false,e.cancelable,e.localX,e.localY,e.relatedObject,e.ctrlKey,e.altKey,e.shiftKey,e.buttonDown,e.delta,e.commandKey,e.clickCount);
				this.dispatchEvent(mouseEvent);
			}
		}
	}
	,set_disabled: function(value) {
		haxe_ui_toolkit_core_StateComponent.prototype.set_disabled.call(this,value);
		if(value == true) {
			this.get_sprite().buttonMode = false;
			this.get_sprite().useHandCursor = false;
		} else {
			this.get_sprite().buttonMode = true;
			this.get_sprite().useHandCursor = true;
		}
		return value;
	}
	,get_text: function() {
		if(this._label == null) return null;
		return this._label.get_text();
	}
	,set_text: function(value) {
		value = haxe_ui_toolkit_core_StateComponent.prototype.set_text.call(this,value);
		if(value != null) {
			if(this._label == null) {
				this._label = new haxe_ui_toolkit_controls_Text();
				this._label.set_id("label");
				this._label.set_multiline(this._multiline);
				this._label.set_wrapLines(this._multiline);
			}
			this._label.set_value(value);
			this._label.set_visible(true);
			this.organiseChildren();
		} else if(this._label != null) this._label.set_visible(false);
		return value;
	}
	,_onMouseOver: function(event) {
		if(this._selected == false) {
			if(event.buttonDown == false || this._down == false) this.set_state("over"); else this.set_state("down");
		}
	}
	,_onMouseOut: function(event) {
		if(this._selected == false) {
			if(this._remainPressed == false || event.buttonDown == false) this.set_state("normal"); else {
			}
		}
	}
	,_onMouseDown: function(event) {
		if(this._allowSelection == true) {
			this._down = true;
			this.set_state("down");
			haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
		}
	}
	,_onMouseUp: function(event) {
		if(this._allowSelection == true && this.get_toggle() == false) {
			this._down = false;
			if(this.hitTest(event.stageX,event.stageY)) this.set_state("over"); else this.set_state("normal");
			haxe_ui_toolkit_core_Screen.get_instance().removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
		}
	}
	,_onMouseClick: function(event) {
		if(this._icon != null && this._icon.hitTest(event.stageX,event.stageY)) this.dispatchEvent(new haxe_ui_toolkit_events_UIEvent("haxeui_" + "glyphClick"));
		if(this._toggle == true && this._allowSelection == true) {
			this.set_selected(!this.get_selected());
			if(this.get_selected() == false && this.hitTest(event.stageX,event.stageY)) this.set_state("over");
		}
	}
	,get_states: function() {
		return ["normal","over","down","disabled"];
	}
	,set_state: function(value) {
		haxe_ui_toolkit_core_StateComponent.prototype.set_state.call(this,value);
		if(value == "down") this._down = true; else this._down = false;
		return value;
	}
	,get_allowFocus: function() {
		return this._allowFocus;
	}
	,set_allowFocus: function(value) {
		return value;
	}
	,get_iconPosition: function() {
		return this._iconPosition;
	}
	,set_iconPosition: function(value) {
		if(this._iconPosition != value) {
			this._iconPosition = value;
			this.organiseChildren();
		}
		return value;
	}
	,get_toggle: function() {
		return this._toggle;
	}
	,set_toggle: function(value) {
		this._toggle = value;
		return value;
	}
	,get_selected: function() {
		return this._selected;
	}
	,set_selected: function(value) {
		if(this._toggle == true && this._selected != value) {
			if(this._group != null && value == false) {
				var arr = haxe_ui_toolkit_controls_Button._groups.get(this._group);
				var hasSelection = false;
				if(arr != null) {
					var _g = 0;
					while(_g < arr.length) {
						var button = arr[_g];
						++_g;
						if(button != this && button.get_selected() == true) {
							hasSelection = true;
							break;
						}
					}
				}
				if(hasSelection == false) return value;
			}
			this._selected = value;
			if(this._group != null && value == true) {
				var arr1 = haxe_ui_toolkit_controls_Button._groups.get(this._group);
				if(arr1 != null) {
					var _g1 = 0;
					while(_g1 < arr1.length) {
						var button1 = arr1[_g1];
						++_g1;
						if(button1 != this) button1.set_selected(false);
					}
				}
			}
			if(this.dispatchChangeEvents == true) {
				var event = new haxe_ui_toolkit_events_UIEvent("haxeui_" + "change");
				this.dispatchEvent(event);
			}
		}
		this._selected = value;
		if(this._selected == true) this.set_state("down"); else if(this.get_root() != null && this.hitTest(this.get_root().get_mousePosition().x,this.get_root().get_mousePosition().y) == true) this.set_state("over"); else this.set_state("normal");
		return value;
	}
	,get_group: function() {
		return this._group;
	}
	,set_group: function(value) {
		if(value != null) {
			var arr1 = haxe_ui_toolkit_controls_Button._groups.get(value);
			if(arr1 != null) HxOverrides.remove(arr1,this);
		}
		this._group = value;
		if(value == null) return value;
		var arr = haxe_ui_toolkit_controls_Button._groups.get(value);
		if(arr == null) arr = [];
		if(haxe_ui_toolkit_controls_Button.optionInGroup(value,this) == false) arr.push(this);
		haxe_ui_toolkit_controls_Button._groups.set(value,arr);
		return value;
	}
	,get_allowSelection: function() {
		return this._allowSelection;
	}
	,set_allowSelection: function(value) {
		this._allowSelection = value;
		return value;
	}
	,get_multiline: function() {
		return this._multiline;
	}
	,set_multiline: function(value) {
		this._multiline = value;
		if(this._label != null) {
			this._label.set_multiline(this._multiline);
			this._label.set_wrapLines(this._multiline);
		}
		return value;
	}
	,applyStyle: function() {
		haxe_ui_toolkit_core_StateComponent.prototype.applyStyle.call(this);
		if(this._label != null) {
			var labelStyle = new haxe_ui_toolkit_style_Style();
			if(this._baseStyle != null) {
				labelStyle.set_fontName(this._baseStyle.get_fontName());
				labelStyle.set_fontSize(this._baseStyle.get_fontSize());
				labelStyle.set_fontEmbedded(this._baseStyle.get_fontEmbedded());
				labelStyle.set_fontBold(this._baseStyle.get_fontBold());
				labelStyle.set_fontItalic(this._baseStyle.get_fontItalic());
				labelStyle.set_fontUnderline(this._baseStyle.get_fontUnderline());
				labelStyle.set_color(this._baseStyle.get_color());
				labelStyle.set_textAlign(this._baseStyle.get_textAlign());
				labelStyle.set_backgroundColor(this._baseStyle.get_backgroundColor());
			}
			this._label.set_baseStyle(labelStyle);
		}
		if(this._baseStyle != null) {
			if(this._baseStyle.get_icon() != null) this.set_icon(this._baseStyle.get_icon());
			if(this._baseStyle.get_iconPosition() != null) this.set_iconPosition(this._baseStyle.get_iconPosition());
			if(this._baseStyle.get_iconWidth() != -1) this.set_iconWidth(this._baseStyle.get_iconWidth());
			if(this._baseStyle.get_iconHeight() != -1) this.set_iconHeight(this._baseStyle.get_iconHeight());
		}
	}
	,clone: function() {
		var c = haxe_ui_toolkit_core_StateComponent.prototype.clone.call(this);
		c.set_remainPressed(this.get_remainPressed());
		c.set_icon(this.get_icon());
		c.set_allowFocus(this.get_allowFocus());
		c.set_iconPosition(this.get_iconPosition());
		c.set_toggle(this.get_toggle());
		c.set_selected(this.get_selected());
		c.set_group(this.get_group());
		c.set_allowSelection(this.get_allowSelection());
		c.set_multiline(this.get_multiline());
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_Button();
	}
	,__class__: haxe_ui_toolkit_controls_Button
	,__properties__: $extend(haxe_ui_toolkit_core_StateComponent.prototype.__properties__,{set_multiline:"set_multiline",get_multiline:"get_multiline",set_allowSelection:"set_allowSelection",get_allowSelection:"get_allowSelection",set_group:"set_group",get_group:"get_group",set_selected:"set_selected",get_selected:"get_selected",set_toggle:"set_toggle",get_toggle:"get_toggle",set_iconPosition:"set_iconPosition",get_iconPosition:"get_iconPosition",set_allowFocus:"set_allowFocus",get_allowFocus:"get_allowFocus",set_iconHeight:"set_iconHeight",get_iconHeight:"get_iconHeight",set_iconWidth:"set_iconWidth",get_iconWidth:"get_iconWidth",set_icon:"set_icon",get_icon:"get_icon",set_remainPressed:"set_remainPressed",get_remainPressed:"get_remainPressed"})
});
var haxe_ui_richtext_RTFToolButton = function() {
	haxe_ui_toolkit_controls_Button.call(this);
};
$hxClasses["haxe.ui.richtext.RTFToolButton"] = haxe_ui_richtext_RTFToolButton;
haxe_ui_richtext_RTFToolButton.__name__ = ["haxe","ui","richtext","RTFToolButton"];
haxe_ui_richtext_RTFToolButton.__super__ = haxe_ui_toolkit_controls_Button;
haxe_ui_richtext_RTFToolButton.prototype = $extend(haxe_ui_toolkit_controls_Button.prototype,{
	clone: function() {
		var c = haxe_ui_toolkit_controls_Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_richtext_RTFToolButton();
	}
	,__class__: haxe_ui_richtext_RTFToolButton
});
var haxe_ui_richtext_syntax_CodeSyntax = function() {
	this._identifier = "";
	this._rules = new haxe_ds_StringMap();
	this._rulesArray = [];
	this._compiledRules = new haxe_ds_StringMap();
	this._defaultFormat = new openfl_text_TextFormat("_typewriter",13,0);
};
$hxClasses["haxe.ui.richtext.syntax.CodeSyntax"] = haxe_ui_richtext_syntax_CodeSyntax;
haxe_ui_richtext_syntax_CodeSyntax.__name__ = ["haxe","ui","richtext","syntax","CodeSyntax"];
haxe_ui_richtext_syntax_CodeSyntax.getSyntax = function(id) {
	var syntax = new haxe_ui_richtext_syntax_CodeSyntax();
	id = id.toLowerCase();
	if(id == "haxe") syntax = new haxe_ui_richtext_syntax_HaxeSyntax(); else if(id == "xml") syntax = new haxe_ui_richtext_syntax_XMLSyntax(); else if(id == "css") syntax = new haxe_ui_richtext_syntax_CSSSyntax(); else if(id == "haxeui-xml") syntax = new haxe_ui_richtext_syntax_HaxeUIXMLSyntax();
	return syntax;
};
haxe_ui_richtext_syntax_CodeSyntax.prototype = {
	addRule: function(regex,color,bold) {
		if(bold == null) bold = false;
		var f = new openfl_text_TextFormat(this._defaultFormat.font,this._defaultFormat.size,color);
		f.bold = bold;
		this._rules.set(regex,f);
		this._rulesArray.push(regex);
	}
	,get_identifier: function() {
		return this._identifier;
	}
	,get_defaultFormat: function() {
		return this._defaultFormat;
	}
	,set_defaultFormat: function(value) {
		this._defaultFormat = value;
		return value;
	}
	,get_rules: function() {
		return this._rules;
	}
	,get_rulesArray: function() {
		return this._rulesArray;
	}
	,getCompiledRule: function(rule) {
		var r = this._compiledRules.get(rule);
		if(r == null) {
			r = new EReg(rule,"g");
			this._compiledRules.set(rule,r);
		}
		return r;
	}
	,__class__: haxe_ui_richtext_syntax_CodeSyntax
	,__properties__: {get_rulesArray:"get_rulesArray",get_rules:"get_rules",set_defaultFormat:"set_defaultFormat",get_defaultFormat:"get_defaultFormat",get_identifier:"get_identifier"}
};
var haxe_ui_richtext_syntax_CSSSyntax = function() {
	haxe_ui_richtext_syntax_CodeSyntax.call(this);
	this._identifier = "css";
	this.addRule("(#|\\w|.)(.*?){|}",255,true);
	this.addRule("(\\w*)\\:",3840511,true);
	this.addRule(":(.*?)\\;",8912896);
};
$hxClasses["haxe.ui.richtext.syntax.CSSSyntax"] = haxe_ui_richtext_syntax_CSSSyntax;
haxe_ui_richtext_syntax_CSSSyntax.__name__ = ["haxe","ui","richtext","syntax","CSSSyntax"];
haxe_ui_richtext_syntax_CSSSyntax.__super__ = haxe_ui_richtext_syntax_CodeSyntax;
haxe_ui_richtext_syntax_CSSSyntax.prototype = $extend(haxe_ui_richtext_syntax_CodeSyntax.prototype,{
	__class__: haxe_ui_richtext_syntax_CSSSyntax
});
var haxe_ui_richtext_syntax_HaxeSyntax = function() {
	haxe_ui_richtext_syntax_CodeSyntax.call(this);
	this._identifier = "haxe";
	this.addRule("(class )|(extends )|(implements )|(function)|(package )|(import )|(var )|(null)|(if)|(while)|(trace)|(return)",255);
	this.addRule("(public )|(private )|(static )|(Void)|(Bool)|(Int)|(Dynamic)|(String)|(Float)",3840511);
	this.addRule("(?:#.*)",8947848);
	this.addRule("(?:/\\*(?:[^*]|(?:\\*+[^*/]))*\\*+/)|(?://.*)",34816);
};
$hxClasses["haxe.ui.richtext.syntax.HaxeSyntax"] = haxe_ui_richtext_syntax_HaxeSyntax;
haxe_ui_richtext_syntax_HaxeSyntax.__name__ = ["haxe","ui","richtext","syntax","HaxeSyntax"];
haxe_ui_richtext_syntax_HaxeSyntax.__super__ = haxe_ui_richtext_syntax_CodeSyntax;
haxe_ui_richtext_syntax_HaxeSyntax.prototype = $extend(haxe_ui_richtext_syntax_CodeSyntax.prototype,{
	__class__: haxe_ui_richtext_syntax_HaxeSyntax
});
var haxe_ui_richtext_syntax_XMLSyntax = function() {
	haxe_ui_richtext_syntax_CodeSyntax.call(this);
	this._identifier = "xml";
	this.addRule("<[\\s\\S]*?>",255,true);
	this.addRule("(\\w*)\\=",3840511,true);
	this.addRule("\"(.*?)\"",8912896);
};
$hxClasses["haxe.ui.richtext.syntax.XMLSyntax"] = haxe_ui_richtext_syntax_XMLSyntax;
haxe_ui_richtext_syntax_XMLSyntax.__name__ = ["haxe","ui","richtext","syntax","XMLSyntax"];
haxe_ui_richtext_syntax_XMLSyntax.__super__ = haxe_ui_richtext_syntax_CodeSyntax;
haxe_ui_richtext_syntax_XMLSyntax.prototype = $extend(haxe_ui_richtext_syntax_CodeSyntax.prototype,{
	__class__: haxe_ui_richtext_syntax_XMLSyntax
});
var haxe_ui_richtext_syntax_HaxeUIXMLSyntax = function() {
	haxe_ui_richtext_syntax_XMLSyntax.call(this);
	this.addRule("(#|\\w|.)(.*?){|}",3120138,false);
	this.addRule("(\\w*)\\:",13184044,false);
	this.addRule(":(.*?)\\;",10911577);
	this.addRule("\"(.*?)\"",8912896);
	this.addRule("(?<=<script>)[\\s\\S]*?(?=</script>)",0);
};
$hxClasses["haxe.ui.richtext.syntax.HaxeUIXMLSyntax"] = haxe_ui_richtext_syntax_HaxeUIXMLSyntax;
haxe_ui_richtext_syntax_HaxeUIXMLSyntax.__name__ = ["haxe","ui","richtext","syntax","HaxeUIXMLSyntax"];
haxe_ui_richtext_syntax_HaxeUIXMLSyntax.__super__ = haxe_ui_richtext_syntax_XMLSyntax;
haxe_ui_richtext_syntax_HaxeUIXMLSyntax.prototype = $extend(haxe_ui_richtext_syntax_XMLSyntax.prototype,{
	__class__: haxe_ui_richtext_syntax_HaxeUIXMLSyntax
});
var haxe_ui_toolkit_containers_Absolute = function() {
	haxe_ui_toolkit_containers_Container.call(this);
	this.set_autoSize(false);
	this.set_layout(new haxe_ui_toolkit_layout_AbsoluteLayout());
};
$hxClasses["haxe.ui.toolkit.containers.Absolute"] = haxe_ui_toolkit_containers_Absolute;
haxe_ui_toolkit_containers_Absolute.__name__ = ["haxe","ui","toolkit","containers","Absolute"];
haxe_ui_toolkit_containers_Absolute.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_containers_Absolute.__super__ = haxe_ui_toolkit_containers_Container;
haxe_ui_toolkit_containers_Absolute.prototype = $extend(haxe_ui_toolkit_containers_Container.prototype,{
	clone: function() {
		var c = haxe_ui_toolkit_containers_Container.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_Absolute();
	}
	,__class__: haxe_ui_toolkit_containers_Absolute
});
var haxe_ui_toolkit_containers_Accordion = function() {
	this._selectedIndex = -1;
	haxe_ui_toolkit_containers_VBox.call(this);
	this._autoSize = false;
	this._panels = [];
	this._buttons = [];
};
$hxClasses["haxe.ui.toolkit.containers.Accordion"] = haxe_ui_toolkit_containers_Accordion;
haxe_ui_toolkit_containers_Accordion.__name__ = ["haxe","ui","toolkit","containers","Accordion"];
haxe_ui_toolkit_containers_Accordion.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_containers_Accordion.__super__ = haxe_ui_toolkit_containers_VBox;
haxe_ui_toolkit_containers_Accordion.prototype = $extend(haxe_ui_toolkit_containers_VBox.prototype,{
	initialize: function() {
		haxe_ui_toolkit_containers_VBox.prototype.initialize.call(this);
		if(this._selectedIndex != -1) {
			var cachedIndex = this._selectedIndex;
			this._selectedIndex = -1;
			this.showPage(cachedIndex);
		}
	}
	,addChild: function(child) {
		var r = null;
		if(js_Boot.__instanceof(child,haxe_ui_toolkit_containers_AccordionButton)) r = haxe_ui_toolkit_containers_VBox.prototype.addChild.call(this,child); else {
			if(js_Boot.__instanceof(child,haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer)) (js_Boot.__cast(child , haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer)).set_autoSize(false);
			if(js_Boot.__instanceof(child,haxe_ui_toolkit_core_StyleableDisplayObject)) (js_Boot.__cast(child , haxe_ui_toolkit_core_StyleableDisplayObject)).set_styleName("page");
			child.set_percentHeight(100);
			child.set_percentWidth(100);
			this._panels.push(child);
			var button = new haxe_ui_toolkit_containers_AccordionButton();
			button.set_styleName("expandable");
			if(js_Boot.__instanceof(child,haxe_ui_toolkit_core_Component)) button.set_text((js_Boot.__cast(child , haxe_ui_toolkit_core_Component)).get_text());
			button.userData = this._panels.length - 1;
			button.set_id("accordionButton_" + (this._panels.length - 1));
			button.set_percentWidth(100);
			button.set_toggle(true);
			button.set_selected(false);
			button.set_allowSelection(false);
			button.addEventListener("haxeui_" + "click",$bind(this,this._onButtonClick));
			this._buttons.push(button);
			this.addChild(button);
			child.set_visible(false);
			r = haxe_ui_toolkit_containers_VBox.prototype.addChild.call(this,child);
		}
		return r;
	}
	,removeChild: function(child,dispose) {
		if(dispose == null) dispose = true;
		if(js_Boot.__instanceof(child,haxe_ui_toolkit_containers_AccordionButton)) HxOverrides.remove(this._buttons,child); else HxOverrides.remove(this._panels,child);
		return haxe_ui_toolkit_containers_VBox.prototype.removeChild.call(this,child,dispose);
	}
	,get_selectedIndex: function() {
		return this._selectedIndex;
	}
	,set_selectedIndex: function(value) {
		if(this._ready == true) this._buttons[value].set_selected(true); else this._selectedIndex = value;
		return value;
	}
	,get_selectedButton: function() {
		if(this._selectedIndex == -1) return null;
		return this.getButton(this._selectedIndex);
	}
	,getButton: function(index) {
		return this._buttons[index];
	}
	,showPage: function(index) {
		var button = this._buttons[index];
		button.set_selected(true);
	}
	,_onButtonClick: function(event) {
		var index = event.get_component().userData;
		this.showPanel(index);
		this.dispatchEvent(new haxe_ui_toolkit_events_UIEvent("haxeui_" + "change"));
	}
	,showPanel: function(index) {
		var button = this._buttons[index];
		button.set_selected(true);
		var panel = this._panels[index];
		var buttonOld = null;
		var panelOld = null;
		var ucy = this.get_layout().get_usableHeight();
		if(this._selectedIndex > -1) {
			buttonOld = this._buttons[this._selectedIndex];
			panelOld = this._panels[this._selectedIndex];
			if(button != buttonOld) this.unselectButton(buttonOld);
		}
		var transition = haxe_ui_toolkit_core_Toolkit.getTransitionForClass(haxe_ui_toolkit_containers_Accordion);
		var transitionTime = haxe_ui_toolkit_core_Toolkit.getTransitionTimeForClass(haxe_ui_toolkit_containers_Accordion);
		if(transition == "slide") {
			panel.set_percentHeight(-1);
			panel.set_height(0);
			panel.set_visible(true);
			motion_Actuate.tween(panel,transitionTime,{ height : ucy, clipHeight : ucy},true).ease(motion_easing_Quart.get_easeOut()).onUpdate($bind(this,this._onTweenUpdate),[ucy,panel,panelOld]).onComplete($bind(this,this._onTweenComplete),[panel,panelOld,buttonOld]);
		} else if(transition == "fade") {
			panel.get_sprite().set_alpha(0);
			panel.set_visible(true);
			if(panelOld != null) {
				this.unselectButton(buttonOld);
				panelOld.set_visible(false);
			}
			motion_Actuate.tween(panel.get_sprite(),transitionTime,{ alpha : 1},true).ease(motion_easing_Linear.get_easeNone());
		} else {
			panel.set_visible(true);
			if(panelOld != null) {
				this.unselectButton(buttonOld);
				panelOld.set_visible(false);
			}
		}
		if(panelOld == panel) this._selectedIndex = -1; else this._selectedIndex = index;
	}
	,unselectButton: function(button) {
		button.set_selected(false);
	}
	,_onTweenUpdate: function(ucy,panel,panelOld) {
		if(panelOld != null) {
			panelOld.set_height(ucy - panel.get_height());
			panelOld.set_clipHeight(panelOld.get_height());
		}
	}
	,_onTweenComplete: function(panel,panelOld,buttonOld) {
		panel.clearClip();
		panel.set_percentHeight(100);
		if(panelOld != null) {
			panelOld.set_visible(false);
			this.unselectButton(buttonOld);
		}
	}
	,clone: function() {
		var c = haxe_ui_toolkit_containers_VBox.prototype.clone.call(this);
		c.removeAllChildren();
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(child,haxe_ui_toolkit_containers_AccordionButton) == false) c.addChild(child.clone());
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_Accordion();
	}
	,__class__: haxe_ui_toolkit_containers_Accordion
	,__properties__: $extend(haxe_ui_toolkit_containers_VBox.prototype.__properties__,{get_selectedButton:"get_selectedButton",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex"})
});
var haxe_ui_toolkit_containers_AccordionButton = function() {
	haxe_ui_toolkit_controls_Button.call(this);
};
$hxClasses["haxe.ui.toolkit.containers.AccordionButton"] = haxe_ui_toolkit_containers_AccordionButton;
haxe_ui_toolkit_containers_AccordionButton.__name__ = ["haxe","ui","toolkit","containers","AccordionButton"];
haxe_ui_toolkit_containers_AccordionButton.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_containers_AccordionButton.__super__ = haxe_ui_toolkit_controls_Button;
haxe_ui_toolkit_containers_AccordionButton.prototype = $extend(haxe_ui_toolkit_controls_Button.prototype,{
	clone: function() {
		var c = haxe_ui_toolkit_controls_Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_AccordionButton();
	}
	,__class__: haxe_ui_toolkit_containers_AccordionButton
});
var haxe_ui_toolkit_containers_Box = function() {
	haxe_ui_toolkit_containers_Container.call(this);
	this.set_autoSize(true);
	this.set_layout(new haxe_ui_toolkit_layout_BoxLayout());
};
$hxClasses["haxe.ui.toolkit.containers.Box"] = haxe_ui_toolkit_containers_Box;
haxe_ui_toolkit_containers_Box.__name__ = ["haxe","ui","toolkit","containers","Box"];
haxe_ui_toolkit_containers_Box.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_containers_Box.__super__ = haxe_ui_toolkit_containers_Container;
haxe_ui_toolkit_containers_Box.prototype = $extend(haxe_ui_toolkit_containers_Container.prototype,{
	clone: function() {
		var c = haxe_ui_toolkit_containers_Container.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_Box();
	}
	,__class__: haxe_ui_toolkit_containers_Box
});
var haxe_ui_toolkit_containers_CalendarView = function() {
	haxe_ui_toolkit_containers_VBox.call(this);
	this._calendar = new haxe_ui_toolkit_controls_Calendar();
	this._autoSize = false;
	this._calendar.set_percentWidth(100);
	this._calendar.set_percentHeight(100);
};
$hxClasses["haxe.ui.toolkit.containers.CalendarView"] = haxe_ui_toolkit_containers_CalendarView;
haxe_ui_toolkit_containers_CalendarView.__name__ = ["haxe","ui","toolkit","containers","CalendarView"];
haxe_ui_toolkit_containers_CalendarView.__super__ = haxe_ui_toolkit_containers_VBox;
haxe_ui_toolkit_containers_CalendarView.prototype = $extend(haxe_ui_toolkit_containers_VBox.prototype,{
	initialize: function() {
		haxe_ui_toolkit_containers_VBox.prototype.initialize.call(this);
		var hbox = new haxe_ui_toolkit_containers_HBox();
		hbox.set_percentWidth(100);
		this._prevMonthButton = new haxe_ui_toolkit_controls_Button();
		this._prevMonthButton.set_text("<");
		this._prevMonthButton.addEventListener(openfl_events_MouseEvent.CLICK,$bind(this,this._onPrevClicked));
		hbox.addChild(this._prevMonthButton);
		var spacer = new haxe_ui_toolkit_controls_Spacer();
		spacer.set_percentWidth(50);
		this._currentMonthYear = new haxe_ui_toolkit_controls_Text();
		this._currentMonthYear.set_text("December 2013");
		this._currentMonthYear.set_id("currentMonthYear");
		this._currentMonthYear.set_percentWidth(100);
		this._currentMonthYear.set_autoSize(false);
		hbox.addChild(this._currentMonthYear);
		var spacer1 = new haxe_ui_toolkit_controls_Spacer();
		spacer1.set_percentWidth(50);
		this._nextMonthButton = new haxe_ui_toolkit_controls_Button();
		this._nextMonthButton.set_text(">");
		this._nextMonthButton.addEventListener(openfl_events_MouseEvent.CLICK,$bind(this,this._onNextClicked));
		hbox.addChild(this._nextMonthButton);
		this.addChild(hbox);
		this._calendar.addEventListener(openfl_events_Event.CHANGE,$bind(this,this._onDateChanged));
		this.addChild(this._calendar);
		this.displayMonthYear();
	}
	,get_date: function() {
		return this._calendar.get_date();
	}
	,set_date: function(value) {
		this._calendar.set_date(value);
		return value;
	}
	,get_selectedDate: function() {
		return this._calendar.get_selectedDate();
	}
	,set_selectedDate: function(value) {
		this._calendar.set_selectedDate(value);
		return value;
	}
	,_onPrevClicked: function(event) {
		this._calendar.previousMonth();
		this.displayMonthYear();
	}
	,_onNextClicked: function(event) {
		this._calendar.nextMonth();
		this.displayMonthYear();
	}
	,_onDateChanged: function(event) {
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
	,displayMonthYear: function() {
		var monthName = haxe_ui_toolkit_containers_CalendarView.MONTH_NAMES[this._calendar.get_date().getMonth()];
		this._currentMonthYear.set_text(monthName + " " + this._calendar.get_date().getFullYear());
	}
	,clone: function() {
		var c = haxe_ui_toolkit_containers_VBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_CalendarView();
	}
	,__class__: haxe_ui_toolkit_containers_CalendarView
	,__properties__: $extend(haxe_ui_toolkit_containers_VBox.prototype.__properties__,{set_selectedDate:"set_selectedDate",get_selectedDate:"get_selectedDate",set_date:"set_date",get_date:"get_date"})
});
var haxe_ui_toolkit_containers_ContinuousHBox = function() {
	haxe_ui_toolkit_containers_Container.call(this);
	this.set_autoSize(true);
	this._layout = new haxe_ui_toolkit_layout_HorizontalContinuousLayout();
};
$hxClasses["haxe.ui.toolkit.containers.ContinuousHBox"] = haxe_ui_toolkit_containers_ContinuousHBox;
haxe_ui_toolkit_containers_ContinuousHBox.__name__ = ["haxe","ui","toolkit","containers","ContinuousHBox"];
haxe_ui_toolkit_containers_ContinuousHBox.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_containers_ContinuousHBox.__super__ = haxe_ui_toolkit_containers_Container;
haxe_ui_toolkit_containers_ContinuousHBox.prototype = $extend(haxe_ui_toolkit_containers_Container.prototype,{
	clone: function() {
		var c = haxe_ui_toolkit_containers_Container.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_ContinuousHBox();
	}
	,__class__: haxe_ui_toolkit_containers_ContinuousHBox
});
var haxe_ui_toolkit_containers_ContinuousVBox = function() {
	haxe_ui_toolkit_containers_Container.call(this);
	this.set_autoSize(true);
	this._layout = new haxe_ui_toolkit_layout_VerticalContinuousLayout();
};
$hxClasses["haxe.ui.toolkit.containers.ContinuousVBox"] = haxe_ui_toolkit_containers_ContinuousVBox;
haxe_ui_toolkit_containers_ContinuousVBox.__name__ = ["haxe","ui","toolkit","containers","ContinuousVBox"];
haxe_ui_toolkit_containers_ContinuousVBox.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_containers_ContinuousVBox.__super__ = haxe_ui_toolkit_containers_Container;
haxe_ui_toolkit_containers_ContinuousVBox.prototype = $extend(haxe_ui_toolkit_containers_Container.prototype,{
	clone: function() {
		var c = haxe_ui_toolkit_containers_Container.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_ContinuousVBox();
	}
	,__class__: haxe_ui_toolkit_containers_ContinuousVBox
});
var haxe_ui_toolkit_containers_ExpandablePanel = function() {
	this.startExpanded = true;
	haxe_ui_toolkit_containers_VBox.call(this);
};
$hxClasses["haxe.ui.toolkit.containers.ExpandablePanel"] = haxe_ui_toolkit_containers_ExpandablePanel;
haxe_ui_toolkit_containers_ExpandablePanel.__name__ = ["haxe","ui","toolkit","containers","ExpandablePanel"];
haxe_ui_toolkit_containers_ExpandablePanel.__super__ = haxe_ui_toolkit_containers_VBox;
haxe_ui_toolkit_containers_ExpandablePanel.prototype = $extend(haxe_ui_toolkit_containers_VBox.prototype,{
	initialize: function() {
		haxe_ui_toolkit_containers_VBox.prototype.initialize.call(this);
	}
	,addChild: function(child) {
		if(this._button == null) {
			this._button = new haxe_ui_toolkit_containers_ExpandableButton();
			this._button.set_percentWidth(100);
			this._button.set_text(this.get_text());
			this._button.set_toggle(true);
			this._button.set_selected(this.startExpanded?true:false);
			this._button.addEventListener("haxeui_" + "change",$bind(this,this.onClickButton));
			this._button.set_styleName("expandable");
			haxe_ui_toolkit_containers_VBox.prototype.addChild.call(this,this._button);
		}
		if(this._panel == null) {
			this._panel = new haxe_ui_toolkit_containers_VBox();
			this._panel.set_id("content");
			this._panel.set_percentWidth(100);
			haxe_ui_toolkit_containers_VBox.prototype.addChild.call(this,this._panel);
			this._panel.addEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.panelAdded));
		}
		return this._panel.addChild(child);
	}
	,onClickButton: function(e) {
		if(this._button.get_selected()) this.showPanel(); else this.hidePanel();
	}
	,panelAdded: function(e) {
		this.removeEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.panelAdded));
		if(!this.startExpanded) this._panel.set_visible(false);
	}
	,showPanel: function() {
		var _g = this;
		var transition = haxe_ui_toolkit_core_Toolkit.getTransitionForClass(haxe_ui_toolkit_containers_ExpandablePanel);
		var transitionTime = haxe_ui_toolkit_core_Toolkit.getTransitionTimeForClass(haxe_ui_toolkit_containers_Stack);
		if(transition == "slide") {
			var startH = this._panel.get_height();
			this._panel.invalidate(256);
			var finalH = this._panel.get_height();
			this._panel.set_visible(true);
			this._panel._height = startH;
			this._panel.set_clipHeight(startH);
			motion_Actuate.tween(this._panel,transitionTime,{ _height : finalH, clipHeight : finalH},true).ease(motion_easing_Quart.get_easeOut()).onUpdate(function() {
				_g.invalidate(256);
			});
		} else this._panel.set_visible(true);
	}
	,hidePanel: function() {
		var _g = this;
		var transition = haxe_ui_toolkit_core_Toolkit.getTransitionForClass(haxe_ui_toolkit_containers_ExpandablePanel);
		var transitionTime = haxe_ui_toolkit_core_Toolkit.getTransitionTimeForClass(haxe_ui_toolkit_containers_Stack);
		if(transition == "slide") motion_Actuate.tween(this._panel,transitionTime,{ _height : 0, clipHeight : 0},true).ease(motion_easing_Quart.get_easeOut()).onUpdate(function() {
			_g.invalidate(256);
		}).onComplete(function() {
			_g._panel.set_visible(false);
		}); else this._panel.set_visible(false);
	}
	,clone: function() {
		var c = haxe_ui_toolkit_containers_VBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_ExpandablePanel();
	}
	,__class__: haxe_ui_toolkit_containers_ExpandablePanel
});
var haxe_ui_toolkit_containers_ExpandableButton = function() {
	haxe_ui_toolkit_controls_Button.call(this);
};
$hxClasses["haxe.ui.toolkit.containers.ExpandableButton"] = haxe_ui_toolkit_containers_ExpandableButton;
haxe_ui_toolkit_containers_ExpandableButton.__name__ = ["haxe","ui","toolkit","containers","ExpandableButton"];
haxe_ui_toolkit_containers_ExpandableButton.__super__ = haxe_ui_toolkit_controls_Button;
haxe_ui_toolkit_containers_ExpandableButton.prototype = $extend(haxe_ui_toolkit_controls_Button.prototype,{
	clone: function() {
		var c = haxe_ui_toolkit_controls_Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_ExpandableButton();
	}
	,__class__: haxe_ui_toolkit_containers_ExpandableButton
});
var haxe_ui_toolkit_containers_Grid = function() {
	haxe_ui_toolkit_containers_Container.call(this);
	this.set_autoSize(true);
	this.set_layout(new haxe_ui_toolkit_layout_GridLayout());
};
$hxClasses["haxe.ui.toolkit.containers.Grid"] = haxe_ui_toolkit_containers_Grid;
haxe_ui_toolkit_containers_Grid.__name__ = ["haxe","ui","toolkit","containers","Grid"];
haxe_ui_toolkit_containers_Grid.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_containers_Grid.__super__ = haxe_ui_toolkit_containers_Container;
haxe_ui_toolkit_containers_Grid.prototype = $extend(haxe_ui_toolkit_containers_Container.prototype,{
	get_columns: function() {
		return (js_Boot.__cast(this._layout , haxe_ui_toolkit_layout_GridLayout)).get_columns();
	}
	,set_columns: function(value) {
		(js_Boot.__cast(this._layout , haxe_ui_toolkit_layout_GridLayout)).set_columns(value);
		return value;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_containers_Container.prototype.clone.call(this);
		c.set_columns(this.get_columns());
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_Grid();
	}
	,__class__: haxe_ui_toolkit_containers_Grid
	,__properties__: $extend(haxe_ui_toolkit_containers_Container.prototype.__properties__,{set_columns:"set_columns",get_columns:"get_columns"})
});
var haxe_ui_toolkit_containers_HBox = function() {
	haxe_ui_toolkit_containers_Container.call(this);
	this.set_autoSize(true);
	this.set_layout(new haxe_ui_toolkit_layout_HorizontalLayout());
};
$hxClasses["haxe.ui.toolkit.containers.HBox"] = haxe_ui_toolkit_containers_HBox;
haxe_ui_toolkit_containers_HBox.__name__ = ["haxe","ui","toolkit","containers","HBox"];
haxe_ui_toolkit_containers_HBox.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_containers_HBox.__super__ = haxe_ui_toolkit_containers_Container;
haxe_ui_toolkit_containers_HBox.prototype = $extend(haxe_ui_toolkit_containers_Container.prototype,{
	clone: function() {
		var c = haxe_ui_toolkit_containers_Container.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_HBox();
	}
	,__class__: haxe_ui_toolkit_containers_HBox
});
var haxe_ui_toolkit_containers_HSplitter = function() {
	haxe_ui_toolkit_containers_HBox.call(this);
};
$hxClasses["haxe.ui.toolkit.containers.HSplitter"] = haxe_ui_toolkit_containers_HSplitter;
haxe_ui_toolkit_containers_HSplitter.__name__ = ["haxe","ui","toolkit","containers","HSplitter"];
haxe_ui_toolkit_containers_HSplitter.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_containers_HSplitter.__super__ = haxe_ui_toolkit_containers_HBox;
haxe_ui_toolkit_containers_HSplitter.prototype = $extend(haxe_ui_toolkit_containers_HBox.prototype,{
	addChild: function(child) {
		var r = null;
		if(js_Boot.__instanceof(child,haxe_ui_toolkit_containers_HSplitterGripper)) r = haxe_ui_toolkit_containers_HBox.prototype.addChild.call(this,child); else {
			if(this.get_numChildren() > 0) {
				var gripper = new haxe_ui_toolkit_containers_HSplitterGripper();
				gripper.addEventListener("haxeui_" + "mouseDown",$bind(this,this._onMouseDown));
				this.addChild(gripper);
			}
			r = haxe_ui_toolkit_containers_HBox.prototype.addChild.call(this,child);
		}
		return r;
	}
	,addChildAt: function(child,index) {
		var r = null;
		if(js_Boot.__instanceof(child,haxe_ui_toolkit_containers_HSplitterGripper)) r = haxe_ui_toolkit_containers_HBox.prototype.addChildAt.call(this,child,index); else {
			if(this.get_numChildren() > 0) {
				var gripper = new haxe_ui_toolkit_containers_HSplitterGripper();
				gripper.addEventListener("haxeui_" + "mouseDown",$bind(this,this._onMouseDown));
				this.addChildAt(gripper,index);
			}
			r = haxe_ui_toolkit_containers_HBox.prototype.addChildAt.call(this,child,index + 1);
		}
		return r;
	}
	,removeChild: function(child,dispose) {
		if(dispose == null) dispose = true;
		var r = null;
		if(js_Boot.__instanceof(child,haxe_ui_toolkit_containers_HSplitterGripper)) r = haxe_ui_toolkit_containers_HBox.prototype.removeChild.call(this,child,dispose); else {
			if(this.get_numChildren() > 1) this.removeChild(this.getChildAt(this.indexOfChild(child) - 1),dispose);
			r = haxe_ui_toolkit_containers_HBox.prototype.removeChild.call(this,child,dispose);
		}
		return r;
	}
	,_onMouseDown: function(event) {
		this._percents = new haxe_ds_ObjectMap();
		this._gripper = event.get_component();
		this._mouseDownOffset = event.stageX - this._gripper.get_x();
		this._invalidating = true;
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(c,haxe_ui_toolkit_containers_HSplitterGripper) == false) {
				if(c.get_percentWidth() != -1) {
					var value = c.get_percentWidth();
					this._percents.set(c,value);
					c.set_percentWidth(-1);
				}
			}
		}
		this._invalidating = false;
		this.invalidate(1);
		haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this._onMouseMove));
		haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
	}
	,_onMouseMove: function(event) {
		if(this._gripper != null) {
			var delta = event.stageX - this._gripper.get_x() - this._mouseDownOffset;
			var index = this.indexOfChild(this._gripper);
			var before = this.getChildAt(index - 1);
			var after = this.getChildAt(index + 1);
			var newBefore = before.get_width() + delta;
			var newAfter = after.get_width() - delta;
			if(newBefore > before.get_minWidth() && newAfter > after.get_minWidth() && newBefore - (before.get_layout().get_padding().get_left() + before.get_layout().get_padding().get_right()) > 0 && newAfter - (after.get_layout().get_padding().get_left() + after.get_layout().get_padding().get_right()) > 0) {
				before.set_width(newBefore);
				after.set_width(newAfter);
			}
		}
	}
	,_onMouseUp: function(event) {
		haxe_ui_toolkit_core_Screen.get_instance().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this._onMouseMove));
		haxe_ui_toolkit_core_Screen.get_instance().removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
		this._gripper = null;
		var ucx = this.get_width();
		ucx -= (this.get_numChildren() - 1) / 2 * (2 * this.get_layout().get_spacingX());
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(this._percents.h.__keys__[c.__id__] != null == false) ucx -= c.get_width();
		}
		this._invalidating = true;
		var $it0 = this._percents.keys();
		while( $it0.hasNext() ) {
			var c1 = $it0.next();
			var newPercent = c1.get_width() / ucx * 100;
			c1.set_percentWidth(newPercent);
		}
		this._invalidating = false;
		this.invalidate(1);
		this._percents = null;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_containers_HBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_HSplitter();
	}
	,__class__: haxe_ui_toolkit_containers_HSplitter
});
var haxe_ui_toolkit_containers_HSplitterGripper = function() {
	haxe_ui_toolkit_controls_Button.call(this);
	this.set_remainPressed(true);
	this.set_useHandCursor(true);
};
$hxClasses["haxe.ui.toolkit.containers.HSplitterGripper"] = haxe_ui_toolkit_containers_HSplitterGripper;
haxe_ui_toolkit_containers_HSplitterGripper.__name__ = ["haxe","ui","toolkit","containers","HSplitterGripper"];
haxe_ui_toolkit_containers_HSplitterGripper.__super__ = haxe_ui_toolkit_controls_Button;
haxe_ui_toolkit_containers_HSplitterGripper.prototype = $extend(haxe_ui_toolkit_controls_Button.prototype,{
	clone: function() {
		var c = haxe_ui_toolkit_controls_Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_HSplitterGripper();
	}
	,__class__: haxe_ui_toolkit_containers_HSplitterGripper
});
var haxe_ui_toolkit_containers_ScrollView = function() {
	this._pulling = false;
	this._virtualScrolling = false;
	this._autoHideScrolls = false;
	this._scrollSensitivity = 1;
	this._inertialScrolling = false;
	this._inertiaSensitivity = 50;
	this._inertiaSpeed = new openfl_geom_Point(0,0);
	this._showVScroll = true;
	this._showHScroll = true;
	haxe_ui_toolkit_core_StateComponent.call(this);
	this.addStates(["normal","disabled"]);
	this._layout = new haxe_ui_toolkit_containers_ScrollViewLayout();
	this._eventTarget = new openfl_display_Sprite();
	this._eventTarget.set_visible(false);
	this._container = new haxe_ui_toolkit_containers_Box();
	this._container.set_layout(new haxe_ui_toolkit_layout_VerticalLayout());
	this._container.set_id("container");
	this._container.set_percentWidth(this._container.set_percentHeight(100));
	this.addChild(this._container);
};
$hxClasses["haxe.ui.toolkit.containers.ScrollView"] = haxe_ui_toolkit_containers_ScrollView;
haxe_ui_toolkit_containers_ScrollView.__name__ = ["haxe","ui","toolkit","containers","ScrollView"];
haxe_ui_toolkit_containers_ScrollView.__super__ = haxe_ui_toolkit_core_StateComponent;
haxe_ui_toolkit_containers_ScrollView.prototype = $extend(haxe_ui_toolkit_core_StateComponent.prototype,{
	preInitialize: function() {
		haxe_ui_toolkit_core_StateComponent.prototype.preInitialize.call(this);
		if(this._baseStyle != null) {
			this._autoHideScrolls = this._baseStyle.get_autoHideScrolls();
			if(Reflect.getProperty(this._layout,"inlineScrolls") != null) Reflect.setProperty(this._layout,"inlineScrolls",this._baseStyle.get_inlineScrolls());
		}
	}
	,initialize: function() {
		haxe_ui_toolkit_core_StateComponent.prototype.initialize.call(this);
		this.addEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this._onMouseWheel));
		this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._onMouseDown));
		this.get_sprite().addChild(this._eventTarget);
	}
	,postInitialize: function() {
		var _g = this;
		haxe_ui_toolkit_core_StateComponent.prototype.postInitialize.call(this);
		var content = this._container.getChildAt(0);
		if(content != null) (js_Boot.__cast(content , haxe_ui_toolkit_core_interfaces_IEventDispatcher)).addEventListener("haxeui_" + "resize",function(e) {
			_g.invalidate(256);
		});
	}
	,addChild: function(child) {
		var r = null;
		if(child == this._container || child == this._hscroll || child == this._vscroll) r = haxe_ui_toolkit_core_StateComponent.prototype.addChild.call(this,child); else if(js_Boot.__instanceof(child,haxe_ui_toolkit_containers_ScrollViewRefreshPrompt)) {
			this._refreshPromptView = child;
			this._refreshPromptView.set_alpha(0);
			r = haxe_ui_toolkit_core_StateComponent.prototype.addChildAt.call(this,child,0);
		} else if(js_Boot.__instanceof(child,haxe_ui_toolkit_containers_ScrollViewRefreshing)) {
			this._refreshingView = child;
			this._refreshingView.set_visible(false);
			r = haxe_ui_toolkit_core_StateComponent.prototype.addChildAt.call(this,child,0);
		} else {
			if(this._container.get_numChildren() >= 1) haxe_Log.trace("WARNING: ScrollView will only use the first child as the scroll content",{ fileName : "ScrollView.hx", lineNumber : 118, className : "haxe.ui.toolkit.containers.ScrollView", methodName : "addChild"});
			r = this._container.addChild(child);
		}
		return r;
	}
	,addChildAt: function(child,index) {
		var r = null;
		if(child == this._container || child == this._hscroll || child == this._vscroll) r = haxe_ui_toolkit_core_StateComponent.prototype.addChildAt.call(this,child,index); else {
			if(this._container.get_numChildren() >= 1) haxe_Log.trace("WARNING: ScrollView will only use the first child as the scroll content",{ fileName : "ScrollView.hx", lineNumber : 131, className : "haxe.ui.toolkit.containers.ScrollView", methodName : "addChildAt"});
			r = this._container.addChildAt(child,index);
		}
		return r;
	}
	,removeChild: function(child,dispose) {
		if(dispose == null) dispose = true;
		var r = null;
		if(child == this._container || child == this._hscroll || child == this._vscroll || child == this._refreshPromptView || child == this._refreshingView) r = haxe_ui_toolkit_core_StateComponent.prototype.removeChild.call(this,child,dispose); else r = this._container.removeChild(child,dispose);
		return r;
	}
	,dispose: function() {
		this.get_sprite().removeChild(this._eventTarget);
		haxe_ui_toolkit_core_StateComponent.prototype.dispose.call(this);
	}
	,get_inertialScrolling: function() {
		return this._inertialScrolling;
	}
	,set_inertialScrolling: function(value) {
		this._inertialScrolling = value;
		return value;
	}
	,get_virtualScrolling: function() {
		return this._virtualScrolling;
	}
	,set_virtualScrolling: function(value) {
		this._virtualScrolling = value;
		return value;
	}
	,get_showHScroll: function() {
		return this._showHScroll;
	}
	,set_showHScroll: function(value) {
		this._showHScroll = value;
		return value;
	}
	,get_showVScroll: function() {
		return this._showVScroll;
	}
	,set_showVScroll: function(value) {
		this._showVScroll = value;
		return value;
	}
	,get_hscrollPos: function() {
		if(this._hscroll != null) return this._hscroll.get_pos();
		return 0;
	}
	,set_hscrollPos: function(value) {
		if(this._hscroll != null) this._hscroll.set_pos(value);
		return value;
	}
	,get_hscrollMin: function() {
		if(this._hscroll != null) return this._hscroll.get_min();
		return 0;
	}
	,set_hscrollMin: function(value) {
		if(this._virtualScrolling == true) {
		}
		return value;
	}
	,get_hscrollMax: function() {
		if(this._hscroll != null) return this._hscroll.get_max();
		return 0;
	}
	,set_hscrollMax: function(value) {
		if(this._virtualScrolling == true) {
			this.createHScroll(true);
			this._hscroll.set_max(value);
		}
		return value;
	}
	,get_hscrollPageSize: function() {
		if(this._hscroll != null) return this._hscroll.get_pageSize();
		return 0;
	}
	,set_hscrollPageSize: function(value) {
		if(this._virtualScrolling == true) {
		}
		return value;
	}
	,get_vscrollPos: function() {
		if(this._vscroll != null) return this._vscroll.get_pos();
		return 0;
	}
	,set_vscrollPos: function(value) {
		if(this._vscroll != null) this._vscroll.set_pos(value);
		return value;
	}
	,get_vscrollMin: function() {
		if(this._vscroll != null) return this._vscroll.get_min();
		return 0;
	}
	,set_vscrollMin: function(value) {
		if(this._virtualScrolling == true) {
		}
		return value;
	}
	,get_vscrollMax: function() {
		if(this._vscroll != null) return this._vscroll.get_max();
		return 0;
	}
	,set_vscrollMax: function(value) {
		if(this._virtualScrolling == true) {
			this.createVScroll(true);
			this._vscroll.set_max(value);
		}
		return value;
	}
	,get_vscrollPageSize: function() {
		if(this._vscroll != null) return this._vscroll.get_pageSize();
		return 0;
	}
	,set_vscrollPageSize: function(value) {
		if(this._virtualScrolling == true) {
			this.createVScroll(true);
			this._vscroll.set_pageSize(value);
		}
		return value;
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		if(!this._ready || this._invalidating) return;
		haxe_ui_toolkit_core_StateComponent.prototype.invalidate.call(this,type,recursive);
		this._invalidating = true;
		if((type & 256) == 256) {
			this.checkScrolls();
			this.updateScrollRect();
			this.resizeEventTarget();
		}
		this._invalidating = false;
	}
	,_onInertiaEnterFrame: function(event) {
		this._eventTarget.set_visible(true);
		var content = this._container.getChildAt(0);
		if(content != null) {
			var frameRate = openfl_Lib.current.stage.get_frameRate();
			this._inertiaSpeed.x -= this._inertiaSpeed.x * (5.0 / frameRate);
			this._inertiaSpeed.y -= this._inertiaSpeed.y * (5.0 / frameRate);
			if(content.get_width() > this.get_layout().get_usableWidth() || this._virtualScrolling == true) {
				if(this._showHScroll == true && this._autoHideScrolls == true) this._hscroll.set_visible(true);
				if(this._hscroll != null) {
					var _g = this._hscroll;
					_g.set_pos(_g.get_pos() - this._inertiaSpeed.x / frameRate);
					if(this._inertiaSpeed.x < 0 && this._hscroll.get_pos() <= this._hscroll.get_min() || this._inertiaSpeed.x > 0 && this._hscroll.get_pos() >= this._hscroll.get_max()) this._inertiaSpeed.x = 0;
				}
			} else this._inertiaSpeed.x = 0;
			if(content.get_height() > this.get_layout().get_usableHeight() || this._virtualScrolling == true) {
				if(this._showVScroll == true && this._autoHideScrolls == true) this._vscroll.set_visible(true);
				if(this._vscroll != null) {
					var _g1 = this._vscroll;
					_g1.set_pos(_g1.get_pos() - this._inertiaSpeed.y / frameRate);
					if(this._inertiaSpeed.y > 0 && this._vscroll.get_pos() <= this._vscroll.get_min() || this._inertiaSpeed.y < 0 && this._vscroll.get_pos() >= this._vscroll.get_max()) this._inertiaSpeed.y = 0;
				}
			} else this._inertiaSpeed.y = 0;
			if(Math.abs(this._inertiaSpeed.x) < 15 && Math.abs(this._inertiaSpeed.y) < 15) {
				this._eventTarget.set_visible(false);
				if(this._hscroll != null && this._showHScroll == true && this._autoHideScrolls == true) this._hscroll.set_visible(false);
				if(this._vscroll != null && this._showVScroll == true && this._autoHideScrolls == true) this._vscroll.set_visible(false);
				haxe_ui_toolkit_core_Screen.get_instance().removeEventListener(openfl_events_Event.ENTER_FRAME,$bind(this,this._onInertiaEnterFrame));
			}
		}
	}
	,_onHScrollChange: function(event) {
		this.updateScrollRect();
		var event1 = new haxe_ui_toolkit_events_UIEvent("haxeui_" + "scroll");
		this.dispatchEvent(event1);
	}
	,_onVScrollChange: function(event) {
		this.updateScrollRect();
		var event1 = new haxe_ui_toolkit_events_UIEvent("haxeui_" + "scroll");
		this.dispatchEvent(event1);
	}
	,_onMouseWheel: function(event) {
		var content = this._container.getChildAt(0);
		if(event.shiftKey || content.get_height() < this.get_layout().get_usableHeight()) {
			if(this._hscroll != null && content.get_width() > this.get_layout().get_usableWidth()) {
				if(event.delta != 0) {
					if(event.delta < 0) this._hscroll.incrementValue(); else if(event.delta > 0) this._hscroll.deincrementValue();
				}
			}
		} else if(this._vscroll != null && content.get_height() > this.get_layout().get_usableHeight()) {
			if(event.delta != 0) {
				if(event.delta < 0) this._vscroll.incrementValue(); else if(event.delta > 0) this._vscroll.deincrementValue();
			}
		}
	}
	,_onMouseDown: function(event) {
		var inScroll = false;
		if(this._vscroll != null && this._vscroll.get_visible() == true) inScroll = this._vscroll.hitTest(event.stageX,event.stageY);
		if(this._hscroll != null && this._hscroll.get_visible() == true && inScroll == false) inScroll = this._hscroll.hitTest(event.stageX,event.stageY);
		if(this._inertialScrolling == true) {
			haxe_ui_toolkit_core_Screen.get_instance().removeEventListener(openfl_events_Event.ENTER_FRAME,$bind(this,this._onInertiaEnterFrame));
			this._inertiaSpeed.x = 0;
			this._inertiaSpeed.y = 0;
			this._inertiaTime = openfl_Lib.getTimer();
		}
		var content = this._container.getChildAt(0);
		if(content != null && inScroll == false && this._virtualScrolling == false) {
			if(content.get_width() > this.get_layout().get_usableWidth() || content.get_height() > this.get_layout().get_usableHeight() || this.allowPull()) {
				this._downPos = new openfl_geom_Point(event.stageX,event.stageY);
				haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
				haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
				this.dispatchEvent(new haxe_ui_toolkit_events_UIEvent("haxeui_" + "scrollStart"));
			}
		}
		if(this._virtualScrolling == true && (this._vscroll != null || this._hscroll != null)) {
			this._downPos = new openfl_geom_Point(event.stageX,event.stageY);
			haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
			haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
			this.dispatchEvent(new haxe_ui_toolkit_events_UIEvent("haxeui_" + "scrollStart"));
		}
	}
	,get_refreshString: function() {
		return this._refreshString;
	}
	,set_refreshString: function(value) {
		if(this._refreshPromptView == null) {
			this._refreshPromptView = new haxe_ui_toolkit_containers_DefaultScrollViewRefreshPrompt();
			this.addChild(this._refreshPromptView);
		}
		this._refreshPromptView.set_text(value);
		return value;
	}
	,get_refreshingString: function() {
		return this._refreshingString;
	}
	,set_refreshingString: function(value) {
		if(this._refreshingView == null) {
			this._refreshingView = new haxe_ui_toolkit_containers_DefaultScrollViewRefreshing();
			this.addChild(this._refreshingView);
		}
		this._refreshingView.set_text(value);
		return value;
	}
	,_onScreenMouseMove: function(event) {
		if(this._downPos != null) {
			var ypos = event.stageY - this._downPos.y;
			var xpos = event.stageX - this._downPos.x;
			var target = event.target;
			while(target != null && js_Boot.__instanceof(target,openfl_display_DisplayObject)) {
				xpos /= target.get_scaleX();
				ypos /= target.get_scaleY();
				target = target.parent;
			}
			if(this._inertialScrolling == true) {
				var now = openfl_Lib.getTimer();
				var delta = (now - this._inertiaTime) / 1000;
				this._inertiaSpeed.x = this._inertiaSpeed.x * 0.3 + xpos * 0.7 / delta;
				this._inertiaSpeed.y = this._inertiaSpeed.y * 0.3 + ypos * 0.7 / delta;
				this._inertiaTime = now;
			}
			if(Math.abs(xpos) >= this._scrollSensitivity || Math.abs(ypos) >= this._scrollSensitivity) {
				this._eventTarget.set_visible(true);
				var content = this._container.getChildAt(0);
				if(content != null) {
					if(xpos != 0 && (content.get_width() > this.get_layout().get_usableWidth() || this._virtualScrolling == true) && this._pulling == false) {
						if(this._showHScroll == true && this._autoHideScrolls == true) this._hscroll.set_visible(true);
						if(this._hscroll != null) {
							var _g = this._hscroll;
							_g.set_pos(_g.get_pos() - xpos);
						}
					}
					if(ypos != 0 && (content.get_height() > this.get_layout().get_usableHeight() || this._virtualScrolling == true) && this._pulling == false) {
						if(this._showVScroll == true && this._autoHideScrolls == true) this._vscroll.set_visible(true);
						if(this._vscroll != null) {
							var _g1 = this._vscroll;
							_g1.set_pos(_g1.get_pos() - ypos);
						}
					}
					if(this.allowPull()) {
						this._refreshingView.set_visible(false);
						this._pulling = true;
						var _g2 = content;
						_g2.set_y(_g2.get_y() + ypos);
						if(content.get_y() > this._refreshPromptView.get_height()) content.set_y(this._refreshPromptView.get_height()); else if(content.get_y() < 0) content.set_y(0);
						this._refreshPromptView.set_alpha(content.get_y() / this._refreshPromptView.get_height());
					}
					this._downPos = new openfl_geom_Point(event.stageX,event.stageY);
				}
			}
		}
	}
	,allowPull: function() {
		if((this._vscroll == null || this._vscroll.get_pos() == 0) && this._refreshPromptView != null) return true;
		return false;
	}
	,_onScreenMouseUp: function(event) {
		if(this._inertialScrolling == true && openfl_Lib.getTimer() - this._inertiaTime < 100) {
			if(Math.abs(this._inertiaSpeed.x) > this._inertiaSensitivity || Math.abs(this._inertiaSpeed.y) > this._inertiaSensitivity) haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_Event.ENTER_FRAME,$bind(this,this._onInertiaEnterFrame));
		}
		this._eventTarget.set_visible(false);
		this._downPos = null;
		haxe_ui_toolkit_core_Screen.get_instance().removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		haxe_ui_toolkit_core_Screen.get_instance().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
		if(this._hscroll != null && this._showHScroll == true && this._autoHideScrolls == true) this._hscroll.set_visible(false);
		if(this._vscroll != null && this._showVScroll == true && this._autoHideScrolls == true) this._vscroll.set_visible(false);
		this.dispatchEvent(new haxe_ui_toolkit_events_UIEvent("haxeui_" + "scrollStop"));
		if(this._pulling == true && this._refreshPromptView != null) {
			if(this._refreshPromptView.get_alpha() < 1) {
				this._pulling = false;
				this._refreshPromptView.set_alpha(0);
				this._refreshingView.set_visible(false);
				this.invalidate();
			} else {
				this._refreshPromptView.set_alpha(0);
				this._refreshingView.set_visible(true);
				this.dispatchEvent(new haxe_ui_toolkit_events_UIEvent("haxeui_" + "refresh"));
			}
		}
	}
	,refreshComplete: function() {
		this._pulling = false;
		this._refreshPromptView.set_alpha(0);
		this._refreshingView.set_visible(false);
		this.invalidate();
	}
	,checkScrolls: function() {
		if(this._virtualScrolling == true) return;
		var content = this._container.getChildAt(0);
		if(content != null) {
			var invalidateLayout = false;
			var hpos = 0;
			if(this._hscroll != null) hpos = this._hscroll.get_pos();
			if(content.get_width() - hpos > this.get_layout().get_usableWidth()) {
				if(this.createHScroll() == true) {
					this._hscroll.set_visible(false);
					invalidateLayout = true;
				}
				this._hscroll.set_max(content.get_width() - this.get_layout().get_usableWidth());
				this._hscroll.set_pageSize(this.get_layout().get_usableWidth() / content.get_width() * this._hscroll.get_max());
				if(this._hscroll.get_visible() == false && this._showHScroll == true && this._autoHideScrolls == false) {
					this._hscroll.set_visible(true);
					invalidateLayout = true;
				}
			} else if(this._hscroll != null) {
				if(this._hscroll.get_pos() != 0) this._hscroll.set_pos(content.get_width() - this.get_layout().get_usableWidth());
				if(this._hscroll.get_pos() == 0) {
					if(this._hscroll.get_visible() == true) {
						this._hscroll.set_visible(false);
						invalidateLayout = true;
					}
				} else {
					this._hscroll.set_max(content.get_width() - this.get_layout().get_usableWidth());
					this._hscroll.set_pageSize(this.get_layout().get_usableWidth() / content.get_width() * this._hscroll.get_max());
				}
			}
			var vpos = 0;
			if(this._vscroll != null) vpos = this._vscroll.get_pos();
			if(content.get_height() - vpos > this.get_layout().get_usableHeight()) {
				if(this.createVScroll() == true) {
					this._vscroll.set_visible(false);
					invalidateLayout = true;
				}
				this._vscroll.set_max(content.get_height() - this.get_layout().get_usableHeight());
				this._vscroll.set_pageSize(this.get_layout().get_usableHeight() / content.get_height() * this._vscroll.get_max());
				if(this._vscroll.get_visible() == false && this._showVScroll == true && this._autoHideScrolls == false) {
					this._vscroll.set_visible(true);
					invalidateLayout = true;
				}
			} else if(this._vscroll != null) {
				if(this._vscroll.get_pos() != 0) this._vscroll.set_pos(content.get_height() - this.get_layout().get_usableHeight());
				if(this._vscroll.get_pos() == 0) {
					if(this._vscroll.get_visible() == true) {
						this._vscroll.set_visible(false);
						invalidateLayout = true;
					}
				} else {
					this._vscroll.set_max(content.get_height() - this.get_layout().get_usableHeight());
					this._vscroll.set_pageSize(this.get_layout().get_usableHeight() / content.get_height() * this._vscroll.get_max());
				}
			}
			if(invalidateLayout) {
				this._invalidating = false;
				this.invalidate(1);
			}
		}
	}
	,createHScroll: function(invalidateLayout) {
		if(invalidateLayout == null) invalidateLayout = false;
		var _g = this;
		var created = false;
		if(this._hscroll == null) {
			this._hscroll = new haxe_ui_toolkit_controls_HScroll();
			this._hscroll.set_id("hscroll");
			this._hscroll.set_percentWidth(100);
			this._hscroll.addEventListener(openfl_events_Event.CHANGE,$bind(this,this._onHScrollChange));
			this._hscroll.addEventListener("haxeui_" + "scrollStart",function(event) {
				_g.dispatchEvent(new haxe_ui_toolkit_events_UIEvent("haxeui_" + "scrollStart"));
			});
			this._hscroll.addEventListener("haxeui_" + "scrollStop",function(event1) {
				_g.dispatchEvent(new haxe_ui_toolkit_events_UIEvent("haxeui_" + "scrollStop"));
			});
			if(this._showHScroll == false) this._hscroll.set_visible(false); else if(this._autoHideScrolls == true) this._hscroll.set_visible(false); else this._hscroll.set_visible(true);
			invalidateLayout = true;
			this.addChild(this._hscroll);
			created = true;
		}
		if(invalidateLayout) {
			if(this.get_percentWidth() == -1) this._invalidating = false;
			this.invalidate(1);
		}
		return created;
	}
	,createVScroll: function(invalidateLayout) {
		if(invalidateLayout == null) invalidateLayout = false;
		var _g = this;
		var created = false;
		if(this._vscroll == null) {
			this._vscroll = new haxe_ui_toolkit_controls_VScroll();
			this._vscroll.set_id("vscroll");
			this._vscroll.set_percentHeight(100);
			this._vscroll.addEventListener(openfl_events_Event.CHANGE,$bind(this,this._onVScrollChange));
			this._vscroll.addEventListener("haxeui_" + "scrollStart",function(event) {
				_g.dispatchEvent(new haxe_ui_toolkit_events_UIEvent("haxeui_" + "scrollStart"));
			});
			this._vscroll.addEventListener("haxeui_" + "scrollStop",function(event1) {
				_g.dispatchEvent(new haxe_ui_toolkit_events_UIEvent("haxeui_" + "scrollStop"));
			});
			if(this._showVScroll == false) this._vscroll.set_visible(false); else if(this._autoHideScrolls == true) this._vscroll.set_visible(false); else this._vscroll.set_visible(true);
			invalidateLayout = true;
			this.addChild(this._vscroll);
			created = true;
		}
		if(invalidateLayout) {
			if(this.get_percentHeight() == -1) this._invalidating = false;
			this.invalidate(1);
		}
		return created;
	}
	,updateScrollRect: function() {
		if(!this._ready) return;
		if(this.get_numChildren() > 0 && this._virtualScrolling == false) {
			var content = this._container.getChildAt(0);
			if(content != null) {
				var xpos = 0;
				if(this._hscroll != null) xpos = this._hscroll.get_pos();
				var ypos = 0;
				if(this._vscroll != null) ypos = this._vscroll.get_pos();
				content.set_x(-xpos);
				content.set_y(-ypos);
				this._container.get_sprite().set_scrollRect(new openfl_geom_Rectangle(0,0,this.get_layout().get_usableWidth(),this.get_layout().get_usableHeight()));
			}
		} else this._container.get_sprite().set_scrollRect(new openfl_geom_Rectangle(0,0,this.get_layout().get_usableWidth(),this.get_layout().get_usableHeight()));
	}
	,resizeEventTarget: function() {
		var targetX = this.get_layout().get_padding().get_left();
		var targetY = this.get_layout().get_padding().get_top();
		var targetCX = this.get_width() - (this.get_layout().get_padding().get_left() + this.get_layout().get_padding().get_right());
		var targetCY = this.get_height() - (this.get_layout().get_padding().get_top() + this.get_layout().get_padding().get_bottom());
		if(this._vscroll != null && this._vscroll.get_visible() == true) targetCX -= this._vscroll.get_width();
		if(this._hscroll != null && this._hscroll.get_visible() == true) targetCY -= this._hscroll.get_height();
		this._eventTarget.set_alpha(0);
		this._eventTarget.get_graphics().clear();
		this._eventTarget.get_graphics().beginFill(16711935);
		this._eventTarget.get_graphics().lineStyle(0);
		this._eventTarget.get_graphics().drawRect(targetX,targetY,targetCX,targetCY);
		this._eventTarget.get_graphics().endFill();
	}
	,clone: function() {
		var c = haxe_ui_toolkit_core_StateComponent.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_ScrollView();
	}
	,__class__: haxe_ui_toolkit_containers_ScrollView
	,__properties__: $extend(haxe_ui_toolkit_core_StateComponent.prototype.__properties__,{set_refreshingString:"set_refreshingString",get_refreshingString:"get_refreshingString",set_refreshString:"set_refreshString",get_refreshString:"get_refreshString",set_vscrollPageSize:"set_vscrollPageSize",get_vscrollPageSize:"get_vscrollPageSize",set_vscrollMax:"set_vscrollMax",get_vscrollMax:"get_vscrollMax",set_vscrollMin:"set_vscrollMin",get_vscrollMin:"get_vscrollMin",set_vscrollPos:"set_vscrollPos",get_vscrollPos:"get_vscrollPos",set_hscrollPageSize:"set_hscrollPageSize",get_hscrollPageSize:"get_hscrollPageSize",set_hscrollMax:"set_hscrollMax",get_hscrollMax:"get_hscrollMax",set_hscrollMin:"set_hscrollMin",get_hscrollMin:"get_hscrollMin",set_hscrollPos:"set_hscrollPos",get_hscrollPos:"get_hscrollPos",set_showVScroll:"set_showVScroll",get_showVScroll:"get_showVScroll",set_showHScroll:"set_showHScroll",get_showHScroll:"get_showHScroll",set_virtualScrolling:"set_virtualScrolling",get_virtualScrolling:"get_virtualScrolling",set_inertialScrolling:"set_inertialScrolling",get_inertialScrolling:"get_inertialScrolling"})
});
var haxe_ui_toolkit_core_interfaces_IDataComponent = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IDataComponent"] = haxe_ui_toolkit_core_interfaces_IDataComponent;
haxe_ui_toolkit_core_interfaces_IDataComponent.__name__ = ["haxe","ui","toolkit","core","interfaces","IDataComponent"];
haxe_ui_toolkit_core_interfaces_IDataComponent.prototype = {
	__class__: haxe_ui_toolkit_core_interfaces_IDataComponent
	,__properties__: {set_dataSource:"set_dataSource",get_dataSource:"get_dataSource"}
};
var haxe_ui_toolkit_containers_ListView = function() {
	this._allowSelection = true;
	this._lastSelection = -1;
	haxe_ui_toolkit_containers_ScrollView.call(this);
	this.set_autoSize(false);
	this.set_dataSource(new haxe_ui_toolkit_data_ArrayDataSource());
	this._selectedItems = [];
	this._content = new haxe_ui_toolkit_containers_VBox();
	this._content.set_id("content");
	this._content.set_percentWidth(100);
	this.addChild(this._content);
	this._itemRenderer = haxe_ui_toolkit_core_renderers_BasicItemRenderer;
};
$hxClasses["haxe.ui.toolkit.containers.ListView"] = haxe_ui_toolkit_containers_ListView;
haxe_ui_toolkit_containers_ListView.__name__ = ["haxe","ui","toolkit","containers","ListView"];
haxe_ui_toolkit_containers_ListView.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IDataComponent];
haxe_ui_toolkit_containers_ListView.__super__ = haxe_ui_toolkit_containers_ScrollView;
haxe_ui_toolkit_containers_ListView.prototype = $extend(haxe_ui_toolkit_containers_ScrollView.prototype,{
	initialize: function() {
		haxe_ui_toolkit_containers_ScrollView.prototype.initialize.call(this);
		if(this._dataSource == null) this.set_dataSource(new haxe_ui_toolkit_data_ArrayDataSource());
		this._dataSource.open();
		this.syncUI();
		this.checkScrolls();
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		if(!this._ready || this._invalidating) return;
		haxe_ui_toolkit_containers_ScrollView.prototype.invalidate.call(this,type,recursive);
		if((type & 65536) == 65536) this.syncUI();
	}
	,dispose: function() {
		if(this._dataSource != null) this._dataSource.close();
		haxe_ui_toolkit_containers_ScrollView.prototype.dispose.call(this);
	}
	,addChild: function(child) {
		if(js_Boot.__instanceof(child,haxe_ui_toolkit_core_interfaces_IItemRenderer)) {
			this._itemRenderer = child;
			return child;
		}
		return haxe_ui_toolkit_containers_ScrollView.prototype.addChild.call(this,child);
	}
	,addChildAt: function(child,index) {
		return haxe_ui_toolkit_containers_ScrollView.prototype.addChildAt.call(this,child,index);
	}
	,get_listSize: function() {
		return this._content.get_children().length;
	}
	,get_itemHeight: function() {
		if(this._content.get_children().length == 0) return 0;
		var n = 0;
		var cy = this._content.get_layout().get_padding().get_top() + this._content.get_layout().get_padding().get_bottom();
		var scy = this._content.get_layout().get_spacingY();
		var _g = 0;
		var _g1 = this._content.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			cy += child.get_height() + scy;
			n++;
			if(n > 100) break;
		}
		if(n > 0) cy -= scy;
		return cy / n;
	}
	,getItem: function(index) {
		return js_Boot.__cast(this._content.get_children()[index] , haxe_ui_toolkit_core_interfaces_IItemRenderer);
	}
	,get_selectedItems: function() {
		return this._selectedItems;
	}
	,get_selectedIndex: function() {
		var index = -1;
		if(this._selectedItems != null && this._selectedItems.length > 0) index = Lambda.indexOf(this._content.get_children(),this._selectedItems[0]);
		return index;
	}
	,set_selectedIndex: function(value) {
		if(this._ready == false) return value;
		if(value < 0) {
			var _g = 0;
			var _g1 = this._selectedItems;
			while(_g < _g1.length) {
				var selectedItem = _g1[_g];
				++_g;
				selectedItem.set_state("normal");
			}
			this._selectedItems = [];
		} else if(this._content.getChildAt(value) != null) {
			var item;
			item = js_Boot.__cast(this._content.getChildAt(value) , haxe_ui_toolkit_core_interfaces_IItemRenderer);
			if(item != null) this.handleListSelection(item,null);
		}
		return value;
	}
	,get_content: function() {
		var c = null;
		if(this.get_numChildren() > 0) c = js_Boot.__cast(this.getChildAt(0) , haxe_ui_toolkit_core_Component);
		return c;
	}
	,get_itemRenderer: function() {
		return this._itemRenderer;
	}
	,set_itemRenderer: function(value) {
		this._itemRenderer = value;
		return value;
	}
	,get_allowSelection: function() {
		return this._allowSelection;
	}
	,set_allowSelection: function(value) {
		this._allowSelection = value;
		return value;
	}
	,get_dataSource: function() {
		return this._dataSource;
	}
	,set_dataSource: function(value) {
		if(this._dataSource != null) {
			if(js_Boot.__instanceof(this._dataSource,haxe_ui_toolkit_core_interfaces_IEventDispatcher)) (js_Boot.__cast(this._dataSource , haxe_ui_toolkit_core_interfaces_IEventDispatcher)).removeEventListener(openfl_events_Event.CHANGE,$bind(this,this._onDataSourceChanged));
		}
		this._dataSource = value;
		if(js_Boot.__instanceof(this._dataSource,haxe_ui_toolkit_core_interfaces_IEventDispatcher)) (js_Boot.__cast(this._dataSource , haxe_ui_toolkit_core_interfaces_IEventDispatcher)).addEventListener(openfl_events_Event.CHANGE,$bind(this,this._onDataSourceChanged));
		if(this._ready == true) {
			this._content.removeAllChildren();
			this.syncUI();
		}
		this._lastSelection = -1;
		return value;
	}
	,_onDataSourceChanged: function(event) {
		this.syncUI();
	}
	,syncUI: function() {
		var pos = 0;
		if(this._dataSource != null) {
			if(this.get_dataSource().moveFirst()) do {
				var dataHash = this.get_dataSource().hash();
				var data = this.get_dataSource().get();
				var item = null;
				if(this._content.getChildAt(pos) != null) item = js_Boot.__cast(this._content.getChildAt(pos) , haxe_ui_toolkit_core_interfaces_IItemRenderer);
				if(item == null) {
					this.addListViewItem(dataHash,data,pos);
					pos++;
				} else if(item.hash == dataHash) {
					item.set_data(data);
					pos++;
				} else {
					while(item != null && item.hash != dataHash) {
						this.removeListViewItem(pos);
						item = js_Boot.__cast(this._content.getChildAt(pos) , haxe_ui_toolkit_core_interfaces_IItemRenderer);
					}
					pos++;
				}
			} while(this.get_dataSource().moveNext());
		}
		var _g1 = pos;
		var _g = this._content.get_children().length;
		while(_g1 < _g) {
			var n1 = _g1++;
			this.removeListViewItem(n1);
		}
		var n = 0;
		var _g2 = 0;
		var _g11 = this._content.get_children();
		while(_g2 < _g11.length) {
			var child = _g11[_g2];
			++_g2;
			var item1;
			item1 = js_Boot.__cast(child , haxe_ui_toolkit_core_interfaces_IItemRenderer);
			if(js_Boot.__instanceof(item1,haxe_ui_toolkit_core_StyleableDisplayObject) == true && js_Boot.__instanceof(item1,haxe_ui_toolkit_controls_Divider) == false) {
				var styleName;
				if(n % 2 == 0) styleName = "even"; else styleName = "odd";
				if(!this.isSelected(item1) && (js_Boot.__cast(item1 , haxe_ui_toolkit_core_StyleableDisplayObject)).get_styleName() != styleName) (js_Boot.__cast(item1 , haxe_ui_toolkit_core_StyleableDisplayObject)).set_styleName(styleName);
			}
			n++;
		}
	}
	,addListViewItem: function(dataHash,data,index) {
		if(index == null) index = -1;
		if(data == null) return;
		var item = null;
		if(data.divider == true) {
			item = new haxe_ui_toolkit_controls_Divider();
			item.hash = dataHash;
			item.set_data(data);
		} else {
			item = this.createRendererInstance();
			item.set_autoSize(true);
			item.hash = dataHash;
			item.set_percentWidth(100);
			item.set_data(data);
			if(js_Boot.__instanceof(item,haxe_ui_toolkit_core_StyleableDisplayObject)) {
				var styleName;
				if(this._content.get_numChildren() % 2 == 0) styleName = "even"; else styleName = "odd";
				(js_Boot.__cast(item , haxe_ui_toolkit_core_StyleableDisplayObject)).set_styleName(styleName);
			}
		}
		if(item != null) {
			if(index == -1) this._content.addChild(item); else this._content.addChildAt(item,index);
		}
		this.invalidate(256);
		if(data.divider == null || data.divider == false) {
			(js_Boot.__cast(item , haxe_ui_toolkit_core_interfaces_IDisplayObject)).addEventListener("haxeui_" + "mouseOver",$bind(this,this._onListItemMouseOver));
			(js_Boot.__cast(item , haxe_ui_toolkit_core_interfaces_IDisplayObject)).addEventListener("haxeui_" + "mouseOut",$bind(this,this._onListItemMouseOut));
			(js_Boot.__cast(item , haxe_ui_toolkit_core_interfaces_IDisplayObject)).addEventListener("haxeui_" + "click",$bind(this,this._onListItemClick));
		}
	}
	,removeListViewItem: function(index) {
		var item;
		item = js_Boot.__cast(this._content.getChildAt(index) , haxe_ui_toolkit_core_interfaces_IItemRenderer);
		var sIndex = Lambda.indexOf(this._selectedItems,item);
		if(sIndex != -1) HxOverrides.remove(this._selectedItems,item);
		if(item != null) {
			this._content.removeChild(item);
			this.invalidate(256);
		}
	}
	,_onListItemMouseOver: function(event) {
		if(this._allowSelection == false) return;
		if(Std["is"](event.get_component(),haxe_ui_toolkit_core_interfaces_IStateComponent)) (js_Boot.__cast(event.get_component() , haxe_ui_toolkit_core_interfaces_IStateComponent)).set_state("over");
	}
	,_onListItemMouseOut: function(event) {
		if(this._allowSelection == false) return;
		if(Std["is"](event.get_component(),haxe_ui_toolkit_core_interfaces_IStateComponent)) {
			var item = event.get_component();
			if(this.isSelected(item)) (js_Boot.__cast(item , haxe_ui_toolkit_core_interfaces_IStateComponent)).set_state("selected"); else (js_Boot.__cast(item , haxe_ui_toolkit_core_interfaces_IStateComponent)).set_state("normal");
		}
	}
	,_onListItemClick: function(event) {
		if(this._allowSelection == false) return;
		if(Std["is"](event.get_component(),haxe_ui_toolkit_core_interfaces_IItemRenderer)) {
			var item = event.get_component();
			if(item.allowSelection(event.stageX,event.stageY)) {
				this.handleListSelection(item,event);
				this.handleClick(item);
			}
		}
	}
	,handleListSelection: function(item,event,raiseEvent) {
		if(raiseEvent == null) raiseEvent = true;
		var shiftPressed = false;
		var ctrlPressed = false;
		if(event != null && js_Boot.__instanceof(event,openfl_events_MouseEvent)) {
			var mouseEvent;
			mouseEvent = js_Boot.__cast(event , openfl_events_MouseEvent);
			shiftPressed = mouseEvent.shiftKey;
			ctrlPressed = mouseEvent.ctrlKey;
		}
		if(ctrlPressed == true) {
		} else if(shiftPressed == true) {
		} else {
			var _g = 0;
			var _g1 = this._selectedItems;
			while(_g < _g1.length) {
				var selectedItem = _g1[_g];
				++_g;
				if(selectedItem != item) selectedItem.set_state("normal");
			}
			this._selectedItems = [];
		}
		if(this.isSelected(item)) {
			HxOverrides.remove(this._selectedItems,item);
			item.set_state("over");
		} else {
			this._selectedItems.push(item);
			item.set_state("selected");
		}
		this.ensureVisible(item);
		if(raiseEvent == true) {
			if(this.get_selectedIndex() != -1) {
				var item1 = this._content.getChildAt(this.get_selectedIndex());
				if(item1 != null) item1.dispatchProxyEvent("haxeui_" + "change",event);
			}
		}
	}
	,handleClick: function(item) {
		var index = Lambda.indexOf(this._content.get_children(),item);
		if(this._lastSelection == index) {
			var event = new haxe_ui_toolkit_events_UIEvent("haxeui_" + "doubleClick");
			this.dispatchEvent(event);
			this._lastSelection = -1;
		} else this._lastSelection = index;
	}
	,isSelected: function(item) {
		return Lambda.indexOf(this._selectedItems,item) != -1;
	}
	,getItemIndex: function(item) {
		var index = -1;
		if(item != null) index = Lambda.indexOf(this._content.get_children(),item);
		return index;
	}
	,setSelectedIndexNoEvent: function(value) {
		if(this._ready == false) return value;
		if(this._content.getChildAt(value) != null) {
			var item;
			item = js_Boot.__cast(this._content.getChildAt(value) , haxe_ui_toolkit_core_interfaces_IItemRenderer);
			if(item != null) this.handleListSelection(item,null,false);
		}
		return value;
	}
	,ensureVisible: function(item) {
		if(item == null) return;
		var vpos = 0;
		if(this._vscroll != null) vpos = this._vscroll.get_pos();
		if(item.get_y() + item.get_height() > vpos + this._container.get_clipHeight()) this._vscroll.set_pos(item.get_y() + item.get_height() - this._container.get_clipHeight()); else if(item.get_y() < vpos) this._vscroll.set_pos(item.get_y());
	}
	,createRendererInstance: function() {
		var r = null;
		if(this._itemRenderer == null) return null;
		if(js_Boot.__instanceof(this._itemRenderer,haxe_ui_toolkit_core_interfaces_IItemRenderer)) r = (js_Boot.__cast(this._itemRenderer , haxe_ui_toolkit_core_interfaces_IItemRenderer)).clone(); else if(js_Boot.__instanceof(this._itemRenderer,Class)) {
			var cls;
			cls = js_Boot.__cast(this._itemRenderer , Class);
			r = Type.createInstance(cls,[]);
		} else if(typeof(this._itemRenderer) == "string") {
			var classString;
			classString = js_Boot.__cast(this._itemRenderer , String);
			var cls1 = haxe_ui_toolkit_util_Types.resolveClass(classString);
			r = Type.createInstance(cls1,[]);
		}
		if(r != null) r.eventDispatcher = this;
		r.set_useHandCursor(this._allowSelection);
		return r;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_containers_ScrollView.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_ListView();
	}
	,set_onComponentEvent: function(value) {
		this.onComponentEvent = value;
		this.addEventListener("haxeui_" + "componentEvent",$bind(this,this._handleEvent));
		return value;
	}
	,__class__: haxe_ui_toolkit_containers_ListView
	,__properties__: $extend(haxe_ui_toolkit_containers_ScrollView.prototype.__properties__,{set_onComponentEvent:"set_onComponentEvent",set_dataSource:"set_dataSource",get_dataSource:"get_dataSource",set_allowSelection:"set_allowSelection",get_allowSelection:"get_allowSelection",set_itemRenderer:"set_itemRenderer",get_itemRenderer:"get_itemRenderer",get_content:"get_content",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex",get_selectedItems:"get_selectedItems",get_itemHeight:"get_itemHeight",get_listSize:"get_listSize"})
});
var haxe_ui_toolkit_containers_MenuBar = function() {
	haxe_ui_toolkit_containers_HBox.call(this);
	this._autoSize = false;
};
$hxClasses["haxe.ui.toolkit.containers.MenuBar"] = haxe_ui_toolkit_containers_MenuBar;
haxe_ui_toolkit_containers_MenuBar.__name__ = ["haxe","ui","toolkit","containers","MenuBar"];
haxe_ui_toolkit_containers_MenuBar.__super__ = haxe_ui_toolkit_containers_HBox;
haxe_ui_toolkit_containers_MenuBar.prototype = $extend(haxe_ui_toolkit_containers_HBox.prototype,{
	clone: function() {
		var c = haxe_ui_toolkit_containers_HBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_MenuBar();
	}
	,__class__: haxe_ui_toolkit_containers_MenuBar
});
var haxe_ui_toolkit_containers_ScrollViewRefreshPrompt = function() {
	haxe_ui_toolkit_containers_VBox.call(this);
};
$hxClasses["haxe.ui.toolkit.containers.ScrollViewRefreshPrompt"] = haxe_ui_toolkit_containers_ScrollViewRefreshPrompt;
haxe_ui_toolkit_containers_ScrollViewRefreshPrompt.__name__ = ["haxe","ui","toolkit","containers","ScrollViewRefreshPrompt"];
haxe_ui_toolkit_containers_ScrollViewRefreshPrompt.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable,haxe_ui_toolkit_core_interfaces_IComponent];
haxe_ui_toolkit_containers_ScrollViewRefreshPrompt.__super__ = haxe_ui_toolkit_containers_VBox;
haxe_ui_toolkit_containers_ScrollViewRefreshPrompt.prototype = $extend(haxe_ui_toolkit_containers_VBox.prototype,{
	clone: function() {
		var c = haxe_ui_toolkit_containers_VBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_ScrollViewRefreshPrompt();
	}
	,__class__: haxe_ui_toolkit_containers_ScrollViewRefreshPrompt
});
var haxe_ui_toolkit_containers_DefaultScrollViewRefreshPrompt = function() {
	haxe_ui_toolkit_containers_ScrollViewRefreshPrompt.call(this);
	this.set_text("Release to refresh");
};
$hxClasses["haxe.ui.toolkit.containers.DefaultScrollViewRefreshPrompt"] = haxe_ui_toolkit_containers_DefaultScrollViewRefreshPrompt;
haxe_ui_toolkit_containers_DefaultScrollViewRefreshPrompt.__name__ = ["haxe","ui","toolkit","containers","DefaultScrollViewRefreshPrompt"];
haxe_ui_toolkit_containers_DefaultScrollViewRefreshPrompt.__super__ = haxe_ui_toolkit_containers_ScrollViewRefreshPrompt;
haxe_ui_toolkit_containers_DefaultScrollViewRefreshPrompt.prototype = $extend(haxe_ui_toolkit_containers_ScrollViewRefreshPrompt.prototype,{
	set_text: function(value) {
		value = haxe_ui_toolkit_containers_ScrollViewRefreshPrompt.prototype.set_text.call(this,value);
		if(this._textComponent == null) {
			this._textComponent = new haxe_ui_toolkit_controls_Text();
			this.addChild(this._textComponent);
		}
		this._textComponent.set_text(value);
		return value;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_containers_ScrollViewRefreshPrompt.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_DefaultScrollViewRefreshPrompt();
	}
	,__class__: haxe_ui_toolkit_containers_DefaultScrollViewRefreshPrompt
});
var haxe_ui_toolkit_containers_ScrollViewRefreshing = function() {
	haxe_ui_toolkit_containers_VBox.call(this);
};
$hxClasses["haxe.ui.toolkit.containers.ScrollViewRefreshing"] = haxe_ui_toolkit_containers_ScrollViewRefreshing;
haxe_ui_toolkit_containers_ScrollViewRefreshing.__name__ = ["haxe","ui","toolkit","containers","ScrollViewRefreshing"];
haxe_ui_toolkit_containers_ScrollViewRefreshing.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable,haxe_ui_toolkit_core_interfaces_IComponent];
haxe_ui_toolkit_containers_ScrollViewRefreshing.__super__ = haxe_ui_toolkit_containers_VBox;
haxe_ui_toolkit_containers_ScrollViewRefreshing.prototype = $extend(haxe_ui_toolkit_containers_VBox.prototype,{
	clone: function() {
		var c = haxe_ui_toolkit_containers_VBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_ScrollViewRefreshing();
	}
	,__class__: haxe_ui_toolkit_containers_ScrollViewRefreshing
});
var haxe_ui_toolkit_containers_DefaultScrollViewRefreshing = function() {
	haxe_ui_toolkit_containers_ScrollViewRefreshing.call(this);
	this.set_text("Refreshing");
};
$hxClasses["haxe.ui.toolkit.containers.DefaultScrollViewRefreshing"] = haxe_ui_toolkit_containers_DefaultScrollViewRefreshing;
haxe_ui_toolkit_containers_DefaultScrollViewRefreshing.__name__ = ["haxe","ui","toolkit","containers","DefaultScrollViewRefreshing"];
haxe_ui_toolkit_containers_DefaultScrollViewRefreshing.__super__ = haxe_ui_toolkit_containers_ScrollViewRefreshing;
haxe_ui_toolkit_containers_DefaultScrollViewRefreshing.prototype = $extend(haxe_ui_toolkit_containers_ScrollViewRefreshing.prototype,{
	set_text: function(value) {
		value = haxe_ui_toolkit_containers_ScrollViewRefreshing.prototype.set_text.call(this,value);
		if(this._textComponent == null) {
			this._textComponent = new haxe_ui_toolkit_controls_Text();
			this.addChild(this._textComponent);
		}
		this._textComponent.set_text(value);
		return value;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_containers_ScrollViewRefreshing.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_DefaultScrollViewRefreshing();
	}
	,__class__: haxe_ui_toolkit_containers_DefaultScrollViewRefreshing
});
var haxe_ui_toolkit_core_interfaces_ILayout = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.ILayout"] = haxe_ui_toolkit_core_interfaces_ILayout;
haxe_ui_toolkit_core_interfaces_ILayout.__name__ = ["haxe","ui","toolkit","core","interfaces","ILayout"];
haxe_ui_toolkit_core_interfaces_ILayout.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_core_interfaces_ILayout.prototype = {
	__class__: haxe_ui_toolkit_core_interfaces_ILayout
	,__properties__: {get_usableHeight:"get_usableHeight",get_usableWidth:"get_usableWidth",get_innerHeight:"get_innerHeight",get_innerWidth:"get_innerWidth",set_spacingY:"set_spacingY",get_spacingY:"get_spacingY",set_spacingX:"set_spacingX",get_spacingX:"get_spacingX",set_padding:"set_padding",get_padding:"get_padding",set_container:"set_container",get_container:"get_container"}
};
var haxe_ui_toolkit_layout_Layout = function() {
	this._spacingY = 0;
	this._spacingX = 0;
	this._padding = new openfl_geom_Rectangle();
};
$hxClasses["haxe.ui.toolkit.layout.Layout"] = haxe_ui_toolkit_layout_Layout;
haxe_ui_toolkit_layout_Layout.__name__ = ["haxe","ui","toolkit","layout","Layout"];
haxe_ui_toolkit_layout_Layout.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable,haxe_ui_toolkit_core_interfaces_ILayout];
haxe_ui_toolkit_layout_Layout.prototype = {
	get_container: function() {
		return this._container;
	}
	,set_container: function(value) {
		this._container = value;
		this.refresh();
		return value;
	}
	,get_padding: function() {
		return this._padding;
	}
	,set_padding: function(value) {
		this._padding = value;
		this.refresh();
		return value;
	}
	,get_spacingX: function() {
		return this._spacingX;
	}
	,set_spacingX: function(value) {
		this._spacingX = value;
		this.refresh();
		return value;
	}
	,get_spacingY: function() {
		return this._spacingY;
	}
	,set_spacingY: function(value) {
		this._spacingY = value;
		this.refresh();
		return value;
	}
	,refresh: function() {
		if(this.get_container() != null && this.get_container().get_ready()) {
			this.resizeChildren();
			this.repositionChildren();
		}
	}
	,resizeChildren: function() {
	}
	,repositionChildren: function() {
	}
	,autoSize: function(totalWidth,totalHeight) {
		if(this.get_container().get_autoSize()) {
			if(totalWidth > 0 && totalWidth != this.get_innerWidth() && this.get_container().get_percentWidth() == -1) this.get_container().set_width(totalWidth + (this.get_padding().get_left() + this.get_padding().get_right()));
			if(totalHeight > 0 && totalHeight != this.get_innerHeight() && this.get_container().get_percentHeight() == -1) this.get_container().set_height(totalHeight + (this.get_padding().get_top() + this.get_padding().get_bottom()));
		} else if(totalWidth > 0 && this.get_container().get_height() == 0 && this.get_container().get_percentWidth() > -1) {
			this.get_container().set_width(totalWidth + (this.get_padding().get_left() + this.get_padding().get_right()));
			this.get_container().set_height(totalHeight + (this.get_padding().get_top() + this.get_padding().get_bottom()));
		} else if(totalHeight > 0 && this.get_container().get_width() == 0 && this.get_container().get_percentHeight() > -1) {
			this.get_container().set_width(totalWidth + (this.get_padding().get_left() + this.get_padding().get_right()));
			this.get_container().set_height(totalHeight + (this.get_padding().get_top() + this.get_padding().get_bottom()));
		} else if(totalWidth > 0 && this.get_container().get_height() == 0) this.get_container().set_height(totalHeight + (this.get_padding().get_top() + this.get_padding().get_bottom())); else if(totalHeight > 0 && this.get_container().get_width() == 0) this.get_container().set_width(totalWidth + (this.get_padding().get_left() + this.get_padding().get_right()));
	}
	,get_innerWidth: function() {
		if(this.get_container() == null) return 0;
		var icx = this.get_container().get_width() - (this.get_padding().get_left() + this.get_padding().get_right());
		return icx;
	}
	,get_innerHeight: function() {
		if(this.get_container() == null) return 0;
		var icy = this.get_container().get_height() - (this.get_padding().get_top() + this.get_padding().get_bottom());
		return icy;
	}
	,get_usableWidth: function() {
		var ucx = this.get_innerWidth();
		return ucx;
	}
	,get_usableHeight: function() {
		var ucy = this.get_innerHeight();
		return ucy;
	}
	,clone: function() {
		var c = this.self();
		c.set_padding(this.get_padding());
		c.set_spacingX(this.get_spacingX());
		c.set_spacingY(this.get_spacingY());
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_layout_Layout();
	}
	,__class__: haxe_ui_toolkit_layout_Layout
	,__properties__: {get_usableHeight:"get_usableHeight",get_usableWidth:"get_usableWidth",get_innerHeight:"get_innerHeight",get_innerWidth:"get_innerWidth",set_spacingY:"set_spacingY",get_spacingY:"get_spacingY",set_spacingX:"set_spacingX",get_spacingX:"get_spacingX",set_padding:"set_padding",get_padding:"get_padding",set_container:"set_container",get_container:"get_container"}
};
var haxe_ui_toolkit_layout_DefaultLayout = function() {
	haxe_ui_toolkit_layout_Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.layout.DefaultLayout"] = haxe_ui_toolkit_layout_DefaultLayout;
haxe_ui_toolkit_layout_DefaultLayout.__name__ = ["haxe","ui","toolkit","layout","DefaultLayout"];
haxe_ui_toolkit_layout_DefaultLayout.__super__ = haxe_ui_toolkit_layout_Layout;
haxe_ui_toolkit_layout_DefaultLayout.prototype = $extend(haxe_ui_toolkit_layout_Layout.prototype,{
	resizeChildren: function() {
		haxe_ui_toolkit_layout_Layout.prototype.resizeChildren.call(this);
		var ucx = this.get_usableWidth();
		var ucy = this.get_usableHeight();
		var totalWidth = 0;
		var totalHeight = 0;
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_percentWidth() > -1) child.set_width(ucx * child.get_percentWidth() / 100);
			if(child.get_percentHeight() > -1) child.set_height(ucy * child.get_percentHeight() / 100);
			if(child.get_width() > totalWidth) totalWidth = child.get_width();
			if(child.get_height() > totalHeight) totalHeight = child.get_height();
		}
		this.autoSize(totalWidth,totalHeight);
	}
	,repositionChildren: function() {
		haxe_ui_toolkit_layout_Layout.prototype.repositionChildren.call(this);
		var xpos = this.get_padding().get_left();
		var ypos = this.get_padding().get_top();
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			child.set_x(xpos);
			child.set_y(ypos);
		}
	}
	,clone: function() {
		var c = haxe_ui_toolkit_layout_Layout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_layout_DefaultLayout();
	}
	,__class__: haxe_ui_toolkit_layout_DefaultLayout
});
var haxe_ui_toolkit_containers_ScrollViewLayout = function() {
	this._inlineScrolls = false;
	haxe_ui_toolkit_layout_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.toolkit.containers.ScrollViewLayout"] = haxe_ui_toolkit_containers_ScrollViewLayout;
haxe_ui_toolkit_containers_ScrollViewLayout.__name__ = ["haxe","ui","toolkit","containers","ScrollViewLayout"];
haxe_ui_toolkit_containers_ScrollViewLayout.__super__ = haxe_ui_toolkit_layout_DefaultLayout;
haxe_ui_toolkit_containers_ScrollViewLayout.prototype = $extend(haxe_ui_toolkit_layout_DefaultLayout.prototype,{
	resizeChildren: function() {
		haxe_ui_toolkit_layout_DefaultLayout.prototype.resizeChildren.call(this);
	}
	,repositionChildren: function() {
		haxe_ui_toolkit_layout_DefaultLayout.prototype.repositionChildren.call(this);
		var hscroll = this.get_container().findChildAs(haxe_ui_toolkit_controls_HScroll);
		var vscroll = this.get_container().findChildAs(haxe_ui_toolkit_controls_VScroll);
		if(hscroll != null) hscroll.set_y(this.get_container().get_height() - hscroll.get_height() - this.get_padding().get_bottom());
		if(vscroll != null) vscroll.set_x(this.get_container().get_width() - vscroll.get_width() - this.get_padding().get_right());
	}
	,get_usableWidth: function() {
		var ucx = this.get_innerWidth();
		var vscroll = this.get_container().findChildAs(haxe_ui_toolkit_controls_VScroll);
		if(vscroll != null && vscroll.get_visible() == true && this._inlineScrolls == false) ucx -= vscroll.get_width() + this.get_spacingX();
		return ucx;
	}
	,get_usableHeight: function() {
		var ucy = this.get_innerHeight();
		var hscroll = this.get_container().findChildAs(haxe_ui_toolkit_controls_HScroll);
		if(hscroll != null && hscroll.get_visible() && this._inlineScrolls == false) ucy -= hscroll.get_height() + this.get_spacingY();
		return ucy;
	}
	,get_inlineScrolls: function() {
		return this._inlineScrolls;
	}
	,set_inlineScrolls: function(value) {
		this._inlineScrolls = value;
		return value;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_layout_DefaultLayout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_ScrollViewLayout();
	}
	,__class__: haxe_ui_toolkit_containers_ScrollViewLayout
	,__properties__: $extend(haxe_ui_toolkit_layout_DefaultLayout.prototype.__properties__,{set_inlineScrolls:"set_inlineScrolls",get_inlineScrolls:"get_inlineScrolls"})
});
var haxe_ui_toolkit_containers_SpriteContainer = function(childSprite) {
	haxe_ui_toolkit_core_Component.call(this);
	this.set_childSprite(childSprite);
	this.set_autoSize(true);
};
$hxClasses["haxe.ui.toolkit.containers.SpriteContainer"] = haxe_ui_toolkit_containers_SpriteContainer;
haxe_ui_toolkit_containers_SpriteContainer.__name__ = ["haxe","ui","toolkit","containers","SpriteContainer"];
haxe_ui_toolkit_containers_SpriteContainer.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_containers_SpriteContainer.__super__ = haxe_ui_toolkit_core_Component;
haxe_ui_toolkit_containers_SpriteContainer.prototype = $extend(haxe_ui_toolkit_core_Component.prototype,{
	initialize: function() {
		haxe_ui_toolkit_core_Component.prototype.initialize.call(this);
		if(this._childSprite != null) {
			if(this.get_autoSize() == true) {
				this._childSprite.set_x(this.get_layout().get_padding().get_left());
				this._childSprite.set_y(this.get_layout().get_padding().get_top());
				this.set_width(this._childSprite.get_width() + (this.get_layout().get_padding().get_left() + this.get_layout().get_padding().get_right()));
				this.set_height(this._childSprite.get_height() + (this.get_layout().get_padding().get_top() + this.get_layout().get_padding().get_bottom()));
			}
		}
	}
	,dispose: function() {
		if(this._childSprite != null) this.get_sprite().removeChild(this._childSprite);
		haxe_ui_toolkit_core_Component.prototype.dispose.call(this);
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		haxe_ui_toolkit_core_Component.prototype.invalidate.call(this,type,recursive);
		if((type & 256) == 256) {
			if(this._stretch == true && this._childSprite != null) {
				this._childSprite.set_x(this.get_layout().get_padding().get_left());
				this._childSprite.set_y(this.get_layout().get_padding().get_top());
				this._childSprite.set_width(this.get_width() - (this.get_layout().get_padding().get_left() + this.get_layout().get_padding().get_right()));
				this._childSprite.set_height(this.get_height() - (this.get_layout().get_padding().get_top() + this.get_layout().get_padding().get_bottom()));
			}
		}
	}
	,get_childSprite: function() {
		return this._childSprite;
	}
	,set_childSprite: function(value) {
		if(value == null && this._childSprite != null) {
			this.get_sprite().removeChild(this._childSprite);
			this._childSprite = null;
		}
		if(value != this._childSprite) {
			if(this._childSprite != null) this.get_sprite().removeChild(this._childSprite);
			this._childSprite = value;
			this.get_sprite().addChild(this._childSprite);
			if(this.get_autoSize() == true && this.get_ready()) {
				this._childSprite.set_x(this.get_layout().get_padding().get_left());
				this._childSprite.set_y(this.get_layout().get_padding().get_top());
				this.set_width(this._childSprite.get_width() + (this.get_layout().get_padding().get_left() + this.get_layout().get_padding().get_right()));
				this.set_height(this._childSprite.get_height() + (this.get_layout().get_padding().get_top() + this.get_layout().get_padding().get_bottom()));
			}
		}
		return value;
	}
	,get_spriteClass: function() {
		return this._spriteClass;
	}
	,set_spriteClass: function(value) {
		if(value == null) {
			this.set_childSprite(null);
			this._spriteClass = null;
			return value;
		}
		if(value != this._spriteClass) {
			var cls = haxe_ui_toolkit_util_Types.resolveClass(value);
			if(cls != null) {
				var inst = Type.createInstance(cls,[]);
				if(inst != null && js_Boot.__instanceof(inst,openfl_display_Sprite)) {
					this.set_childSprite(inst);
					this._spriteClass = value;
				}
			}
		}
		return value;
	}
	,get_stretch: function() {
		return this._stretch;
	}
	,set_stretch: function(value) {
		if(this._stretch == value) return value;
		this._autoSize = !value;
		this._stretch = value;
		this.invalidate(256);
		return value;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_core_Component.prototype.clone.call(this);
		c.set_childSprite(this.get_childSprite());
		c.set_spriteClass(this.get_spriteClass());
		c.set_stretch(this.get_stretch());
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_SpriteContainer();
	}
	,__class__: haxe_ui_toolkit_containers_SpriteContainer
	,__properties__: $extend(haxe_ui_toolkit_core_Component.prototype.__properties__,{set_stretch:"set_stretch",get_stretch:"get_stretch",set_spriteClass:"set_spriteClass",get_spriteClass:"get_spriteClass",set_childSprite:"set_childSprite",get_childSprite:"get_childSprite"})
});
var haxe_ui_toolkit_containers_Stack = function() {
	this._history = new List();
	this._selectedIndex = -1;
	haxe_ui_toolkit_core_Component.call(this);
	this._clipContent = true;
};
$hxClasses["haxe.ui.toolkit.containers.Stack"] = haxe_ui_toolkit_containers_Stack;
haxe_ui_toolkit_containers_Stack.__name__ = ["haxe","ui","toolkit","containers","Stack"];
haxe_ui_toolkit_containers_Stack.__super__ = haxe_ui_toolkit_core_Component;
haxe_ui_toolkit_containers_Stack.prototype = $extend(haxe_ui_toolkit_core_Component.prototype,{
	addChild: function(child) {
		var r = haxe_ui_toolkit_core_Component.prototype.addChild.call(this,child);
		r.set_visible(this.get_children().length - 1 == this._selectedIndex);
		r.get_sprite().set_alpha(1);
		return r;
	}
	,get_selectedIndex: function() {
		return this._selectedIndex;
	}
	,set_selectedIndex: function(value) {
		if(value != this._selectedIndex) {
			var transition = haxe_ui_toolkit_core_Toolkit.getTransitionForClass(haxe_ui_toolkit_containers_Stack);
			var transitionTime = haxe_ui_toolkit_core_Toolkit.getTransitionTimeForClass(haxe_ui_toolkit_containers_Stack);
			var _g1 = 0;
			var _g = this.get_children().length;
			while(_g1 < _g) {
				var n = _g1++;
				var item = [this.get_children()[n]];
				if(n == value) {
					if(transition == "slide") {
						if(value < this._selectedIndex) {
							item[0].get_sprite().set_alpha(1);
							item[0].set_visible(true);
							item[0].set_x(-item[0].get_width());
							motion_Actuate.tween(item[0],transitionTime,{ x : this.get_layout().get_padding().get_left()},true).ease(motion_easing_Quart.get_easeOut()).onComplete((function() {
								return function() {
								};
							})());
						} else {
							item[0].get_sprite().set_alpha(1);
							item[0].set_visible(true);
							item[0].set_x(this.get_width());
							motion_Actuate.tween(item[0],transitionTime,{ x : this.get_layout().get_padding().get_left()},true).ease(motion_easing_Quart.get_easeOut()).onComplete((function() {
								return function() {
								};
							})());
						}
					} else if(transition == "fade") {
						item[0].set_x(this.get_layout().get_padding().get_left());
						item[0].get_sprite().set_alpha(0);
						item[0].set_visible(true);
						motion_Actuate.tween(item[0].get_sprite(),transitionTime,{ alpha : 1},true).ease(motion_easing_Linear.get_easeNone()).onComplete((function() {
							return function() {
							};
						})());
					} else {
						item[0].set_x(this.get_layout().get_padding().get_left());
						item[0].get_sprite().set_alpha(1);
						item[0].set_visible(true);
					}
				} else if(n == this._selectedIndex) {
					if(transition == "slide") {
						item[0].get_sprite().set_alpha(1);
						if(value < this._selectedIndex) motion_Actuate.tween(item[0],transitionTime,{ x : this.get_width()},true).ease(motion_easing_Quart.get_easeOut()).onComplete((function(item) {
							return function() {
								item[0].set_visible(false);
							};
						})(item)); else motion_Actuate.tween(item[0],transitionTime,{ x : -item[0].get_width()},true).ease(motion_easing_Quart.get_easeOut()).onComplete((function(item) {
							return function() {
								item[0].set_visible(false);
							};
						})(item));
					} else if(transition == "fade") {
						item[0].set_x(this.get_layout().get_padding().get_left());
						motion_Actuate.tween(item[0].get_sprite(),transitionTime,{ alpha : 0},true).ease(motion_easing_Linear.get_easeNone()).onComplete((function(item) {
							return function() {
								item[0].set_visible(false);
							};
						})(item));
					} else {
						item[0].set_x(this.get_layout().get_padding().get_left());
						item[0].get_sprite().set_alpha(1);
						item[0].set_visible(false);
					}
				}
			}
			this._history.push(this._selectedIndex);
			this._selectedIndex = value;
			var event = new openfl_events_Event(openfl_events_Event.CHANGE);
			this.dispatchEvent(event);
		}
		return value;
	}
	,back: function() {
		var last = this._history.pop();
		if(last == null) return;
		this.set_selectedIndex(last);
		this._history.pop();
	}
	,clone: function() {
		var c = haxe_ui_toolkit_core_Component.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_Stack();
	}
	,__class__: haxe_ui_toolkit_containers_Stack
	,__properties__: $extend(haxe_ui_toolkit_core_Component.prototype.__properties__,{set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex"})
});
var haxe_ui_toolkit_containers_TabView = function() {
	haxe_ui_toolkit_core_Component.call(this);
	this._layout = new haxe_ui_toolkit_layout_VerticalLayout();
	this._tabs = new haxe_ui_toolkit_controls_TabBar();
	this._tabs.set_percentWidth(100);
	this._tabs.addEventListener(openfl_events_Event.CHANGE,$bind(this,this._onTabsChange));
	this._tabs.addEventListener("haxeui_" + "glyphClick",$bind(this,this._onGlyphClick));
	this.addChild(this._tabs);
	this._stack = new haxe_ui_toolkit_containers_Stack();
	this._stack.set_percentWidth(this._stack.set_percentHeight(100));
	this._stack.set_styleName("page");
	this.addChild(this._stack);
};
$hxClasses["haxe.ui.toolkit.containers.TabView"] = haxe_ui_toolkit_containers_TabView;
haxe_ui_toolkit_containers_TabView.__name__ = ["haxe","ui","toolkit","containers","TabView"];
haxe_ui_toolkit_containers_TabView.__super__ = haxe_ui_toolkit_core_Component;
haxe_ui_toolkit_containers_TabView.prototype = $extend(haxe_ui_toolkit_core_Component.prototype,{
	_onTabsChange: function(event) {
		this._stack.set_selectedIndex(this._tabs.get_selectedIndex());
		var event1 = new haxe_ui_toolkit_events_UIEvent("haxeui_" + "change");
		this.dispatchEvent(event1);
	}
	,_onGlyphClick: function(event) {
		var newEvent = new haxe_ui_toolkit_events_UIEvent("haxeui_" + "glyphClick");
		newEvent.data = event.data;
		this.dispatchEvent(newEvent);
	}
	,initialize: function() {
		haxe_ui_toolkit_core_Component.prototype.initialize.call(this);
		this.set_selectedIndex(0);
	}
	,addChild: function(child) {
		var r = null;
		if(child == this._tabs || child == this._stack) r = haxe_ui_toolkit_core_Component.prototype.addChild.call(this,child); else {
			r = this._stack.addChild(child);
			var label = "";
			if(js_Boot.__instanceof(child,haxe_ui_toolkit_core_Component)) label = (js_Boot.__cast(child , haxe_ui_toolkit_core_Component)).get_text();
			this._tabs.addTab(label).set_styleName(child.get_id());
		}
		return r;
	}
	,addChildAt: function(child,index) {
		var r = null;
		if(child == this._tabs || child == this._stack) r = haxe_ui_toolkit_core_Component.prototype.addChildAt.call(this,child,index); else {
			r = this._stack.addChildAt(child,index);
			var label = "";
			if(js_Boot.__instanceof(child,haxe_ui_toolkit_core_Component)) label = (js_Boot.__cast(child , haxe_ui_toolkit_core_Component)).get_text();
			this._tabs.addTab(label).set_styleName(child.get_id());
		}
		return r;
	}
	,removeChild: function(child,dispose) {
		if(dispose == null) dispose = true;
		var r = null;
		if(child == this._tabs || child == this._stack) r = haxe_ui_toolkit_core_Component.prototype.removeChild.call(this,child,dispose); else r = this._stack.removeChild(child,dispose);
		return r;
	}
	,get_selectedIndex: function() {
		return this._tabs.get_selectedIndex();
	}
	,set_selectedIndex: function(value) {
		this._tabs.set_selectedIndex(value);
		return value;
	}
	,get_pageCount: function() {
		return this._stack.get_numChildren();
	}
	,get_selectedPage: function() {
		return this.getTabPage(this.get_selectedIndex());
	}
	,setTabText: function(index,text) {
		this._tabs.setTabText(index,text);
	}
	,removeTab: function(index) {
		this._stack.removeChildAt(index);
		this._tabs.removeTab(index);
	}
	,getTabButton: function(index) {
		return this._tabs.getTabButton(index);
	}
	,getTabPage: function(index) {
		return this._stack.getChildAt(index);
	}
	,removeAllTabs: function() {
		this._stack.removeAllChildren();
		this._tabs.removeAllTabs();
	}
	,clone: function() {
		var c = haxe_ui_toolkit_core_Component.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_TabView();
	}
	,__class__: haxe_ui_toolkit_containers_TabView
	,__properties__: $extend(haxe_ui_toolkit_core_Component.prototype.__properties__,{get_selectedPage:"get_selectedPage",get_pageCount:"get_pageCount",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex"})
});
var haxe_ui_toolkit_containers_TableView = function() {
	this._lastSelection = -1;
	haxe_ui_toolkit_core_Component.call(this);
	this._columnDefs = new haxe_ui_toolkit_containers_TableViewColumnDefs();
	this.set_dataSource(new haxe_ui_toolkit_data_ArrayDataSource());
	this._scrollView = new haxe_ui_toolkit_containers_ScrollView();
	this._scrollView.get_style().set_borderSize(0);
	this._selectedItems = [];
	this._scrollView.set_percentWidth(100);
	this._scrollView.set_percentHeight(100);
	this._scrollContent = new haxe_ui_toolkit_containers_VBox();
	this._scrollContent.set_id("tableContent");
	this._scrollContent.set_autoSize(true);
	this._scrollView.addChild(this._scrollContent);
};
$hxClasses["haxe.ui.toolkit.containers.TableView"] = haxe_ui_toolkit_containers_TableView;
haxe_ui_toolkit_containers_TableView.__name__ = ["haxe","ui","toolkit","containers","TableView"];
haxe_ui_toolkit_containers_TableView.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IDataComponent];
haxe_ui_toolkit_containers_TableView.__super__ = haxe_ui_toolkit_core_Component;
haxe_ui_toolkit_containers_TableView.prototype = $extend(haxe_ui_toolkit_core_Component.prototype,{
	initialize: function() {
		haxe_ui_toolkit_core_Component.prototype.initialize.call(this);
		this.addChild(this._scrollView);
		if(this._dataSource == null) this.set_dataSource(new haxe_ui_toolkit_data_ArrayDataSource());
		this._dataSource.open();
		this.syncUI();
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		haxe_ui_toolkit_core_Component.prototype.invalidate.call(this,type,recursive);
		if(this._ready && (type & 256) == 256) {
			if(this._scrollView.get_layout().get_usableWidth() > 0) this.resizeColumns();
		}
	}
	,get_dataSource: function() {
		return this._dataSource;
	}
	,set_dataSource: function(value) {
		if(this._dataSource != null) {
			if(js_Boot.__instanceof(this._dataSource,openfl_events_IEventDispatcher)) (js_Boot.__cast(this._dataSource , openfl_events_IEventDispatcher)).removeEventListener(openfl_events_Event.CHANGE,$bind(this,this._onDataSourceChanged));
		}
		this._dataSource = value;
		if(js_Boot.__instanceof(this._dataSource,openfl_events_IEventDispatcher)) (js_Boot.__cast(this._dataSource , openfl_events_IEventDispatcher)).addEventListener(openfl_events_Event.CHANGE,$bind(this,this._onDataSourceChanged));
		if(this._ready == true) this.syncUI();
		return value;
	}
	,_onDataSourceChanged: function(event) {
		this.syncUI();
	}
	,get_columns: function() {
		return this._columnDefs;
	}
	,set_columns: function(value) {
		this._columnDefs = value;
		return value;
	}
	,syncUI: function() {
		var pos = 0;
		if(this._dataSource != null) {
			if(this.get_dataSource().moveFirst()) do {
				var dataHash = this.get_dataSource().hash();
				var data = this.get_dataSource().get();
				var item = null;
				if(this._scrollContent.getChildAt(pos) != null) item = js_Boot.__cast(this._scrollContent.getChildAt(pos) , haxe_ui_toolkit_containers_TableViewRow);
				if(item == null) {
					this.addTableRow(dataHash,data,pos);
					pos++;
				} else if(item.hash == dataHash) pos++; else {
					while(item != null && item.hash != dataHash) item = js_Boot.__cast(this._scrollContent.getChildAt(pos) , haxe_ui_toolkit_containers_TableViewRow);
					pos++;
				}
			} while(this.get_dataSource().moveNext());
		}
	}
	,addTableRow: function(dataHash,data,index) {
		if(index == null) index = -1;
		if(data == null) return;
		var _g = 0;
		var _g1 = Reflect.fields(data);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(f != "__get_id__") {
				if(this._columnDefs.has(f) == false) {
					this._columnDefs.add(f);
					haxe_Log.trace(f,{ fileName : "TableView.hx", lineNumber : 162, className : "haxe.ui.toolkit.containers.TableView", methodName : "addTableRow"});
				}
			}
		}
		var item = new haxe_ui_toolkit_containers_TableViewRow(this);
		item.set_autoSize(true);
		item.set_data(data);
		item.hash = dataHash;
		var id;
		if(this._scrollContent.get_numChildren() % 2 == 0) id = "even"; else id = "odd";
		item.set_id(id);
		if(index == -1) this._scrollContent.addChild(item); else this._scrollContent.addChildAt(item,index);
		this._scrollView.invalidate(256);
	}
	,resizeColumns: function() {
		if(this._scrollContent.get_numChildren() == 0) return;
		var sx = (js_Boot.__cast(this._scrollContent.getChildAt(0) , haxe_ui_toolkit_containers_TableViewRow)).get_layout().get_spacingX();
		var cols = this._columnDefs.iterator();
		var totalWidth = 0;
		var _g = 0;
		while(_g < cols.length) {
			var c = cols[_g];
			++_g;
			totalWidth += c.calculatedWidth + sx;
		}
		if(totalWidth < this._scrollView.get_layout().get_usableWidth()) {
			var diff = this._scrollView.get_layout().get_usableWidth() - totalWidth;
			var newWidth = cols[cols.length - 1].calculatedWidth + diff;
			var _g1 = 0;
			var _g11 = this._scrollContent.get_children();
			while(_g1 < _g11.length) {
				var child = _g11[_g1];
				++_g1;
				var temp;
				temp = js_Boot.__cast(child , haxe_ui_toolkit_containers_TableViewRow);
				temp.getChildAt(temp.get_numChildren() - 1).set_width(newWidth);
			}
		}
	}
	,handleListSelection: function(item,event,raiseEvent) {
		if(raiseEvent == null) raiseEvent = true;
		var shiftPressed = false;
		var ctrlPressed = false;
		if(event != null && js_Boot.__instanceof(event,openfl_events_MouseEvent)) {
			var mouseEvent;
			mouseEvent = js_Boot.__cast(event , openfl_events_MouseEvent);
			shiftPressed = mouseEvent.shiftKey;
			ctrlPressed = mouseEvent.ctrlKey;
		}
		if(ctrlPressed == true) {
		} else if(shiftPressed == true) {
		} else {
			var _g = 0;
			var _g1 = this._selectedItems;
			while(_g < _g1.length) {
				var selectedItem = _g1[_g];
				++_g;
				if(selectedItem != item) selectedItem.set_state("normal");
			}
			this._selectedItems = [];
		}
		if(this.isSelected(item)) {
			HxOverrides.remove(this._selectedItems,item);
			item.set_state("over");
		} else {
			this._selectedItems.push(item);
			item.set_state("selected");
		}
		if(raiseEvent == true) {
			var event1 = new openfl_events_Event(openfl_events_Event.CHANGE);
			this.dispatchEvent(event1);
		}
	}
	,handleClick: function(item,event) {
		var index = Lambda.indexOf(this._scrollContent.get_children(),item);
		if(this._lastSelection == index) {
			var event1 = new openfl_events_MouseEvent(openfl_events_MouseEvent.DOUBLE_CLICK);
			this.dispatchEvent(event1);
			this._lastSelection = -1;
		} else this._lastSelection = index;
	}
	,isSelected: function(item) {
		return Lambda.indexOf(this._selectedItems,item) != -1;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_core_Component.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_TableView();
	}
	,__class__: haxe_ui_toolkit_containers_TableView
	,__properties__: $extend(haxe_ui_toolkit_core_Component.prototype.__properties__,{set_columns:"set_columns",get_columns:"get_columns",set_dataSource:"set_dataSource",get_dataSource:"get_dataSource"})
});
var haxe_ui_toolkit_containers_TableViewColumnDefs = function() {
	this._columns = [];
};
$hxClasses["haxe.ui.toolkit.containers.TableViewColumnDefs"] = haxe_ui_toolkit_containers_TableViewColumnDefs;
haxe_ui_toolkit_containers_TableViewColumnDefs.__name__ = ["haxe","ui","toolkit","containers","TableViewColumnDefs"];
haxe_ui_toolkit_containers_TableViewColumnDefs.prototype = {
	add: function(id,width,title) {
		if(title == null) title = "";
		if(width == null) width = 0;
		if(this.has(id) == false) {
			var c = new haxe_ui_toolkit_containers_TableViewColumnDef();
			c.id = id;
			c.width = width;
			this._columns.push(c);
		}
	}
	,has: function(id) {
		var b = false;
		var _g = 0;
		var _g1 = this._columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.id == id) b = true;
		}
		return b;
	}
	,iterator: function() {
		return this._columns;
	}
	,findColumn: function(id) {
		var c = null;
		var _g = 0;
		var _g1 = this._columns;
		while(_g < _g1.length) {
			var test = _g1[_g];
			++_g;
			if(test.id == id) {
				c = test;
				break;
			}
		}
		return c;
	}
	,__class__: haxe_ui_toolkit_containers_TableViewColumnDefs
};
var haxe_ui_toolkit_containers_TableViewColumnDef = function() {
	this.calculatedWidth = 0;
	this.width = 0;
	this.type = "text";
};
$hxClasses["haxe.ui.toolkit.containers.TableViewColumnDef"] = haxe_ui_toolkit_containers_TableViewColumnDef;
haxe_ui_toolkit_containers_TableViewColumnDef.__name__ = ["haxe","ui","toolkit","containers","TableViewColumnDef"];
haxe_ui_toolkit_containers_TableViewColumnDef.prototype = {
	__class__: haxe_ui_toolkit_containers_TableViewColumnDef
};
var haxe_ui_toolkit_containers_TableViewRow = function(parentTable) {
	haxe_ui_toolkit_containers_HBox.call(this);
	this._states = [];
	this.get_sprite().buttonMode = true;
	this.get_sprite().useHandCursor = true;
	this.set_state("normal");
	this._parentTable = parentTable;
};
$hxClasses["haxe.ui.toolkit.containers.TableViewRow"] = haxe_ui_toolkit_containers_TableViewRow;
haxe_ui_toolkit_containers_TableViewRow.__name__ = ["haxe","ui","toolkit","containers","TableViewRow"];
haxe_ui_toolkit_containers_TableViewRow.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IStateComponent];
haxe_ui_toolkit_containers_TableViewRow.__super__ = haxe_ui_toolkit_containers_HBox;
haxe_ui_toolkit_containers_TableViewRow.prototype = $extend(haxe_ui_toolkit_containers_HBox.prototype,{
	initialize: function() {
		haxe_ui_toolkit_containers_HBox.prototype.initialize.call(this);
		this.addEventListener(openfl_events_MouseEvent.MOUSE_OVER,$bind(this,this._onMouseOver));
		this.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this._onMouseOut));
		this.addEventListener(openfl_events_MouseEvent.CLICK,$bind(this,this._onMouseClick));
	}
	,_onMouseOver: function(event) {
		this.set_state("over");
	}
	,_onMouseOut: function(event) {
		if(this._parentTable.isSelected(this)) this.set_state("selected"); else this.set_state("normal");
	}
	,_onMouseClick: function(event) {
		this._parentTable.handleListSelection(this,event);
		this._parentTable.handleClick(this,event);
	}
	,get_data: function() {
		return this._data;
	}
	,set_data: function(value) {
		this._data = value;
		var _g = 0;
		var _g1 = this._parentTable.get_columns().iterator();
		while(_g < _g1.length) {
			var colDef = [_g1[_g]];
			++_g;
			if(Object.prototype.hasOwnProperty.call(value,colDef[0].id)) {
				var c = [null];
				var colValue = Reflect.field(value,colDef[0].id);
				var type = "text";
				if(typeof(colValue) == "string") c[0] = this.createColumnComponent(colValue,"text"); else {
					if(Object.prototype.hasOwnProperty.call(colValue,"type")) type = js_Boot.__cast(Reflect.field(colValue,"type") , String);
					var componentValue = null;
					if(Object.prototype.hasOwnProperty.call(colValue,"value")) componentValue = Reflect.field(colValue,"value");
					c[0] = this.createColumnComponent(componentValue,type);
				}
				if(c[0] != null) {
					if(type == "list") {
						if(Object.prototype.hasOwnProperty.call(colValue,"dataSource")) {
							var controlDataSource = Reflect.field(colValue,"dataSource");
							var ds = null;
							if((controlDataSource instanceof Array) && controlDataSource.__enum__ == null) {
								ds = new haxe_ui_toolkit_data_ArrayDataSource();
								var _g2 = 0;
								var _g3;
								_g3 = js_Boot.__cast(controlDataSource , Array);
								while(_g2 < _g3.length) {
									var o = _g3[_g2];
									++_g2;
									ds.add(o);
								}
							}
							(js_Boot.__cast(c[0] , haxe_ui_toolkit_controls_selection_ListSelector)).set_dataSource(ds);
						}
					}
					c[0].set_autoSize(true);
					this.addChild(c[0]);
					c[0].addEventListener(openfl_events_Event.ADDED_TO_STAGE,(function(c,colDef) {
						return function(e) {
							if(colDef[0].width <= 0) {
								if(c[0].get_width() > colDef[0].calculatedWidth) colDef[0].calculatedWidth = c[0].get_width(); else c[0].set_width(colDef[0].calculatedWidth);
							} else {
								c[0].set_width(colDef[0].width);
								colDef[0].calculatedWidth = colDef[0].width;
							}
						};
					})(c,colDef));
				}
			}
		}
		return value;
	}
	,createColumnComponent: function(value,type) {
		var c = null;
		if(value == null) {
			c = new haxe_ui_toolkit_controls_Spacer();
			return c;
		}
		switch(type) {
		case "text":
			c = new haxe_ui_toolkit_controls_Text();
			c.set_autoSize(false);
			(js_Boot.__cast(c , haxe_ui_toolkit_controls_Text)).set_text(js_Boot.__cast(value , String));
			(js_Boot.__cast(c , haxe_ui_toolkit_controls_Text)).addStates(this.get_states());
			break;
		case "button":
			c = new haxe_ui_toolkit_controls_Button();
			(js_Boot.__cast(c , haxe_ui_toolkit_controls_Button)).set_text(js_Boot.__cast(value , String));
			break;
		case "slider":
			c = new haxe_ui_toolkit_controls_HSlider();
			(js_Boot.__cast(c , haxe_ui_toolkit_controls_HSlider)).set_pos(Std.parseInt(value));
			break;
		case "progress":
			c = new haxe_ui_toolkit_controls_HProgress();
			(js_Boot.__cast(c , haxe_ui_toolkit_controls_HProgress)).set_pos(Std.parseInt(value));
			break;
		case "list":
			c = new haxe_ui_toolkit_controls_selection_ListSelector();
			(js_Boot.__cast(c , haxe_ui_toolkit_controls_selection_ListSelector)).set_text(js_Boot.__cast(value , String));
			break;
		default:
			c = new haxe_ui_toolkit_controls_Spacer();
		}
		return c;
	}
	,buildStyles: function() {
		var _g = 0;
		var _g1 = this.get_states();
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var stateStyle = haxe_ui_toolkit_style_StyleManager.get_instance().buildStyleFor(this,s);
			if(stateStyle != null) this.storeStyle(s,stateStyle);
		}
	}
	,addStates: function(stateNames) {
		var _g = 0;
		while(_g < stateNames.length) {
			var stateName = stateNames[_g];
			++_g;
			this._states.push(stateName);
		}
		if(this._ready) {
			if(this._lazyLoadStyles == false) this.buildStyles(); else this.clearStyles();
		}
	}
	,get_state: function() {
		return this._state;
	}
	,set_state: function(value) {
		if(this._state != value) {
			this._state = value;
			if(this.retrieveStyle(this._state) != null) this.set_baseStyle(this.retrieveStyle(this._state)); else this.invalidate(4096);
			var _g = 0;
			var _g1 = this.get_children();
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				if(js_Boot.__instanceof(c,haxe_ui_toolkit_controls_Text)) {
					var cx = (js_Boot.__cast(c , haxe_ui_toolkit_controls_Text)).get_width();
					(js_Boot.__cast(c , haxe_ui_toolkit_controls_Text)).set_state(value);
					(js_Boot.__cast(c , haxe_ui_toolkit_controls_Text)).set_width(cx);
				}
			}
		}
		return value;
	}
	,get_states: function() {
		return ["normal","over","selected"];
	}
	,hasState: function(state) {
		if(this.get_states() == null) return false;
		return Lambda.indexOf(this.get_states(),state) != -1;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_containers_HBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_TableViewRow();
	}
	,__class__: haxe_ui_toolkit_containers_TableViewRow
	,__properties__: $extend(haxe_ui_toolkit_containers_HBox.prototype.__properties__,{get_states:"get_states",set_state:"set_state",get_state:"get_state",set_data:"set_data",get_data:"get_data"})
});
var haxe_ui_toolkit_containers_VSplitter = function() {
	haxe_ui_toolkit_containers_VBox.call(this);
};
$hxClasses["haxe.ui.toolkit.containers.VSplitter"] = haxe_ui_toolkit_containers_VSplitter;
haxe_ui_toolkit_containers_VSplitter.__name__ = ["haxe","ui","toolkit","containers","VSplitter"];
haxe_ui_toolkit_containers_VSplitter.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_containers_VSplitter.__super__ = haxe_ui_toolkit_containers_VBox;
haxe_ui_toolkit_containers_VSplitter.prototype = $extend(haxe_ui_toolkit_containers_VBox.prototype,{
	addChild: function(child) {
		var r = null;
		if(js_Boot.__instanceof(child,haxe_ui_toolkit_containers_VSplitterGripper)) r = haxe_ui_toolkit_containers_VBox.prototype.addChild.call(this,child); else {
			if(this.get_numChildren() > 0) {
				var gripper = new haxe_ui_toolkit_containers_VSplitterGripper();
				gripper.addEventListener("haxeui_" + "mouseDown",$bind(this,this._onMouseDown));
				this.addChild(gripper);
			}
			r = haxe_ui_toolkit_containers_VBox.prototype.addChild.call(this,child);
		}
		return r;
	}
	,addChildAt: function(child,index) {
		var r = null;
		if(js_Boot.__instanceof(child,haxe_ui_toolkit_containers_VSplitterGripper)) r = haxe_ui_toolkit_containers_VBox.prototype.addChildAt.call(this,child,index); else {
			if(this.get_numChildren() > 0) {
				var gripper = new haxe_ui_toolkit_containers_VSplitterGripper();
				gripper.addEventListener("haxeui_" + "mouseDown",$bind(this,this._onMouseDown));
				this.addChildAt(gripper,index);
			}
			r = haxe_ui_toolkit_containers_VBox.prototype.addChildAt.call(this,child,index + 1);
		}
		return r;
	}
	,removeChild: function(child,dispose) {
		if(dispose == null) dispose = true;
		var r = null;
		if(js_Boot.__instanceof(child,haxe_ui_toolkit_containers_VSplitterGripper)) r = haxe_ui_toolkit_containers_VBox.prototype.removeChild.call(this,child,dispose); else {
			if(this.get_numChildren() > 1) this.removeChild(this.getChildAt(this.indexOfChild(child) - 1),dispose);
			r = haxe_ui_toolkit_containers_VBox.prototype.removeChild.call(this,child,dispose);
		}
		return r;
	}
	,_onMouseDown: function(event) {
		this._percents = new haxe_ds_ObjectMap();
		this._gripper = event.get_component();
		this._mouseDownOffset = event.stageY - this._gripper.get_y();
		this._invalidating = true;
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(c,haxe_ui_toolkit_containers_VSplitterGripper) == false) {
				if(c.get_percentHeight() != -1) {
					var value = c.get_percentHeight();
					this._percents.set(c,value);
					c.set_percentHeight(-1);
				}
			}
		}
		this._invalidating = false;
		this.invalidate(1);
		haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this._onMouseMove));
		haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
	}
	,_onMouseMove: function(event) {
		if(this._gripper != null) {
			var delta = event.stageY - this._gripper.get_y() - this._mouseDownOffset;
			var index = this.indexOfChild(this._gripper);
			var before = this.getChildAt(index - 1);
			var after = this.getChildAt(index + 1);
			var newBefore = before.get_height() + delta;
			var newAfter = after.get_height() - delta;
			if(newBefore > before.get_minHeight() && newAfter > after.get_minHeight() && newBefore - (before.get_layout().get_padding().get_top() + before.get_layout().get_padding().get_bottom()) > 0 && newAfter - (after.get_layout().get_padding().get_top() + after.get_layout().get_padding().get_bottom()) > 0) {
				before.set_height(newBefore);
				after.set_height(newAfter);
			}
		}
	}
	,_onMouseUp: function(event) {
		haxe_ui_toolkit_core_Screen.get_instance().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this._onMouseMove));
		haxe_ui_toolkit_core_Screen.get_instance().removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
		this._gripper = null;
		var ucy = this.get_height();
		ucy -= (this.get_numChildren() - 1) / 2 * (2 * this.get_layout().get_spacingY());
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(this._percents.h.__keys__[c.__id__] != null == false) ucy -= c.get_height();
		}
		this._invalidating = true;
		var $it0 = this._percents.keys();
		while( $it0.hasNext() ) {
			var c1 = $it0.next();
			var newPercent = c1.get_height() / ucy * 100;
			c1.set_percentHeight(newPercent);
		}
		this._invalidating = false;
		this.invalidate(1);
		this._percents = null;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_containers_VBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_VSplitter();
	}
	,__class__: haxe_ui_toolkit_containers_VSplitter
});
var haxe_ui_toolkit_containers_VSplitterGripper = function() {
	haxe_ui_toolkit_controls_Button.call(this);
	this.set_remainPressed(true);
	this.set_useHandCursor(true);
};
$hxClasses["haxe.ui.toolkit.containers.VSplitterGripper"] = haxe_ui_toolkit_containers_VSplitterGripper;
haxe_ui_toolkit_containers_VSplitterGripper.__name__ = ["haxe","ui","toolkit","containers","VSplitterGripper"];
haxe_ui_toolkit_containers_VSplitterGripper.__super__ = haxe_ui_toolkit_controls_Button;
haxe_ui_toolkit_containers_VSplitterGripper.prototype = $extend(haxe_ui_toolkit_controls_Button.prototype,{
	clone: function() {
		var c = haxe_ui_toolkit_controls_Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_containers_VSplitterGripper();
	}
	,__class__: haxe_ui_toolkit_containers_VSplitterGripper
});
var haxe_ui_toolkit_controls_Calendar = function() {
	haxe_ui_toolkit_core_Component.call(this);
	this._layout = new haxe_ui_toolkit_controls_CalendarLayout();
	this._autoSize = false;
	this._dayItems = [];
	this._selectedDate = new Date();
};
$hxClasses["haxe.ui.toolkit.controls.Calendar"] = haxe_ui_toolkit_controls_Calendar;
haxe_ui_toolkit_controls_Calendar.__name__ = ["haxe","ui","toolkit","controls","Calendar"];
haxe_ui_toolkit_controls_Calendar.__super__ = haxe_ui_toolkit_core_Component;
haxe_ui_toolkit_controls_Calendar.prototype = $extend(haxe_ui_toolkit_core_Component.prototype,{
	preInitialize: function() {
		haxe_ui_toolkit_core_Component.prototype.preInitialize.call(this);
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var _g1 = 0;
			while(_g1 < 7) {
				var j = _g1++;
				var dayItem = new haxe_ui_toolkit_controls_CalendarDay();
				dayItem.addEventListener(openfl_events_MouseEvent.CLICK,this.buildMouseClickFunction(this._dayItems.length));
				this._dayItems.push(dayItem);
				this.addChild(dayItem);
			}
		}
		this.set_date(new Date());
	}
	,previousMonth: function() {
		this._month--;
		if(this._month < 0) {
			this._month = 11;
			this._year--;
		}
		this._day = js_Boot.__cast(Math.min(this._day,this.getEndDay(this._month,this._year)) , Int);
		this.set_date(new Date(this._year,this._month,this._day,0,0,0));
	}
	,nextMonth: function() {
		this._month++;
		if(this._month > 11) {
			this._month = 0;
			this._year++;
		}
		this._day = js_Boot.__cast(Math.min(this._day,this.getEndDay(this._month,this._year)) , Int);
		this.set_date(new Date(this._year,this._month,this._day,0,0,0));
	}
	,get_date: function() {
		return this._date;
	}
	,set_date: function(value) {
		this._date = value;
		this._year = this._date.getFullYear();
		this._month = this._date.getMonth();
		this._day = this._date.getDate();
		var startDay = new Date(this._year,this._month,1,0,0,0).getDay();
		var endDay = this.getEndDay(this._month,this._year);
		var _g = 0;
		var _g1 = this._dayItems;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.set_visible(false);
			item.set_id(null);
		}
		var _g2 = 0;
		while(_g2 < endDay) {
			var i = _g2++;
			var item1 = this._dayItems[i + startDay];
			item1.set_visible(true);
			item1.set_text("" + (i + 1));
			if(i + 1 == this._selectedDate.getDate() && this._month == this._selectedDate.getMonth() && this._year == this._selectedDate.getFullYear()) item1.set_id("selectedDay");
		}
		return value;
	}
	,get_selectedDate: function() {
		return this._selectedDate;
	}
	,set_selectedDate: function(value) {
		this._selectedDate = value;
		this.set_date(this._date);
		return value;
	}
	,getEndDay: function(month,year) {
		var endDay = -1;
		switch(month) {
		case 1:
			if(year % 400 == 0 || year % 100 != 0 && year % 4 == 0) endDay = 29; else endDay = 28;
			break;
		case 3:case 5:case 8:case 10:
			endDay = 30;
			break;
		default:
			endDay = 31;
		}
		return endDay;
	}
	,buildMouseClickFunction: function(index) {
		var _g = this;
		return function(event) {
			_g.mouseClickButton(index);
		};
	}
	,mouseClickButton: function(index) {
		var item = this._dayItems[index];
		var day = Std.parseInt(item.get_text());
		this.set_selectedDate(new Date(this._year,this._month,day,0,0,0));
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
	,clone: function() {
		var c = haxe_ui_toolkit_core_Component.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_Calendar();
	}
	,__class__: haxe_ui_toolkit_controls_Calendar
	,__properties__: $extend(haxe_ui_toolkit_core_Component.prototype.__properties__,{set_selectedDate:"set_selectedDate",get_selectedDate:"get_selectedDate",set_date:"set_date",get_date:"get_date"})
});
var haxe_ui_toolkit_controls_CalendarDay = function() {
	haxe_ui_toolkit_controls_Button.call(this);
	this.set_autoSize(false);
};
$hxClasses["haxe.ui.toolkit.controls.CalendarDay"] = haxe_ui_toolkit_controls_CalendarDay;
haxe_ui_toolkit_controls_CalendarDay.__name__ = ["haxe","ui","toolkit","controls","CalendarDay"];
haxe_ui_toolkit_controls_CalendarDay.__super__ = haxe_ui_toolkit_controls_Button;
haxe_ui_toolkit_controls_CalendarDay.prototype = $extend(haxe_ui_toolkit_controls_Button.prototype,{
	clone: function() {
		var c = haxe_ui_toolkit_controls_Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_CalendarDay();
	}
	,__class__: haxe_ui_toolkit_controls_CalendarDay
});
var haxe_ui_toolkit_controls_CalendarLayout = function() {
	haxe_ui_toolkit_layout_Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.CalendarLayout"] = haxe_ui_toolkit_controls_CalendarLayout;
haxe_ui_toolkit_controls_CalendarLayout.__name__ = ["haxe","ui","toolkit","controls","CalendarLayout"];
haxe_ui_toolkit_controls_CalendarLayout.__super__ = haxe_ui_toolkit_layout_Layout;
haxe_ui_toolkit_controls_CalendarLayout.prototype = $extend(haxe_ui_toolkit_layout_Layout.prototype,{
	resizeChildren: function() {
		haxe_ui_toolkit_layout_Layout.prototype.resizeChildren.call(this);
		var children = this.get_container().get_children();
		var ucx = this.get_usableWidth() - 6 * this.get_spacingX() + (this.get_padding().get_left() + this.get_padding().get_right());
		var ucy = this.get_usableHeight() - 5 * this.get_spacingY() + (this.get_padding().get_top() + this.get_padding().get_bottom());
		var bcx = ucx / 7;
		var bcy = ucy / 6;
		var xpos = 0;
		var ypos = 0;
		var n = 0;
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var _g1 = 0;
			while(_g1 < 7) {
				var j = _g1++;
				var child = children[n];
				if(child != null) {
					child.set_x(xpos);
					child.set_y(ypos);
					child.set_width(bcx);
					child.set_height(bcy);
					n++;
					xpos += bcx + this.get_spacingX();
				}
			}
			xpos = 0;
			ypos += bcy + this.get_spacingY();
		}
	}
	,clone: function() {
		var c = haxe_ui_toolkit_layout_Layout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_CalendarLayout();
	}
	,__class__: haxe_ui_toolkit_controls_CalendarLayout
});
var haxe_ui_toolkit_controls_CheckBox = function() {
	this._down = false;
	haxe_ui_toolkit_core_StateComponent.call(this);
	this.get_sprite().buttonMode = true;
	this.get_sprite().useHandCursor = true;
	this._value = new haxe_ui_toolkit_controls_CheckBoxValue();
	this._label = new haxe_ui_toolkit_controls_Text();
	this.set_layout(new haxe_ui_toolkit_layout_HorizontalLayout());
	this.set_autoSize(true);
};
$hxClasses["haxe.ui.toolkit.controls.CheckBox"] = haxe_ui_toolkit_controls_CheckBox;
haxe_ui_toolkit_controls_CheckBox.__name__ = ["haxe","ui","toolkit","controls","CheckBox"];
haxe_ui_toolkit_controls_CheckBox.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_controls_CheckBox.__super__ = haxe_ui_toolkit_core_StateComponent;
haxe_ui_toolkit_controls_CheckBox.prototype = $extend(haxe_ui_toolkit_core_StateComponent.prototype,{
	initialize: function() {
		var _g = this;
		haxe_ui_toolkit_core_StateComponent.prototype.initialize.call(this);
		this._value.set_verticalAlign("center");
		this.addChild(this._value);
		this.addChild(this._label);
		this.addEventListener("haxeui_" + "click",function(e) {
			_g._value.cycleValues();
		});
		this._value.addEventListener("haxeui_" + "change",function(e1) {
			_g.set_selected(_g._value.get_value() == "selected");
		});
		this.addEventListener(openfl_events_MouseEvent.MOUSE_OVER,$bind(this,this._onMouseOver));
		this.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this._onMouseOut));
		this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._onMouseDown));
		this.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
	}
	,_onMouseOver: function(event) {
		if(event.buttonDown == false) this.set_state("over"); else if(this._down == true) this.set_state("down");
	}
	,_onMouseOut: function(event) {
		if(event.buttonDown == false) this.set_state("normal"); else {
		}
	}
	,_onMouseDown: function(event) {
		this._down = true;
		this.set_state("down");
		haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
	}
	,_onMouseUp: function(event) {
		this._down = false;
		if(this.hitTest(event.stageX,event.stageY)) this.set_state("over"); else this.set_state("normal");
		haxe_ui_toolkit_core_Screen.get_instance().removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
	}
	,set_autoSize: function(value) {
		value = haxe_ui_toolkit_core_StateComponent.prototype.set_autoSize.call(this,value);
		this._label.set_percentWidth(value?-1:100);
		return value;
	}
	,get_text: function() {
		return this._label.get_text();
	}
	,set_text: function(value) {
		value = haxe_ui_toolkit_core_StateComponent.prototype.set_text.call(this,value);
		this._label.set_text(value);
		return value;
	}
	,get_value: function() {
		return this.get_selected();
	}
	,set_value: function(newValue) {
		if(typeof(newValue) == "string") this.set_selected(newValue == "true"); else this.set_selected(newValue);
		return newValue;
	}
	,get_height: function() {
		var height = haxe_ui_toolkit_core_StateComponent.prototype.get_height.call(this);
		if(this.get_autoSize()) return height; else return Math.max(height,this._label.get_height());
	}
	,get_multiline: function() {
		return this._label.get_multiline();
	}
	,set_multiline: function(value) {
		return this._label.set_multiline(value);
	}
	,get_wrapLines: function() {
		return this._label.get_wrapLines();
	}
	,set_wrapLines: function(value) {
		return this._label.set_wrapLines(value);
	}
	,get_selected: function() {
		return this._selected;
	}
	,set_selected: function(value) {
		if(this._selected == value) return value;
		this._value.set_value(value == true?"selected":"unselected");
		this._selected = value;
		var event = new openfl_events_Event(openfl_events_Event.CHANGE);
		this.dispatchEvent(event);
		return value;
	}
	,applyStyle: function() {
		haxe_ui_toolkit_core_StateComponent.prototype.applyStyle.call(this);
		if(this._label != null) {
			var labelStyle = new haxe_ui_toolkit_style_Style();
			if(this._baseStyle != null) {
				labelStyle.set_fontName(this._baseStyle.get_fontName());
				labelStyle.set_fontSize(this._baseStyle.get_fontSize());
				labelStyle.set_fontEmbedded(this._baseStyle.get_fontEmbedded());
				labelStyle.set_color(this._baseStyle.get_color());
			}
			this._label.set_baseStyle(labelStyle);
		}
	}
	,get_states: function() {
		return ["normal","over","down"];
	}
	,clone: function() {
		var c = haxe_ui_toolkit_core_StateComponent.prototype.clone.call(this);
		c.set_multiline(this.get_multiline());
		c.set_wrapLines(this.get_wrapLines());
		c.set_selected(this.get_selected());
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_CheckBox();
	}
	,__class__: haxe_ui_toolkit_controls_CheckBox
	,__properties__: $extend(haxe_ui_toolkit_core_StateComponent.prototype.__properties__,{set_selected:"set_selected",get_selected:"get_selected",set_wrapLines:"set_wrapLines",get_wrapLines:"get_wrapLines",set_multiline:"set_multiline",get_multiline:"get_multiline"})
});
var haxe_ui_toolkit_controls_Value = function() {
	this._interactive = true;
	this._value = "";
	haxe_ui_toolkit_core_StateComponent.call(this);
	this.addStates(["normal","disabled"]);
	this._autoSize = false;
	this._layout = new haxe_ui_toolkit_layout_AbsoluteLayout();
	this._values = new haxe_ds_StringMap();
	this._valuesList = [];
	this.addEventListener(openfl_events_MouseEvent.CLICK,$bind(this,this._onMouseClick));
};
$hxClasses["haxe.ui.toolkit.controls.Value"] = haxe_ui_toolkit_controls_Value;
haxe_ui_toolkit_controls_Value.__name__ = ["haxe","ui","toolkit","controls","Value"];
haxe_ui_toolkit_controls_Value.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_controls_Value.__super__ = haxe_ui_toolkit_core_StateComponent;
haxe_ui_toolkit_controls_Value.prototype = $extend(haxe_ui_toolkit_core_StateComponent.prototype,{
	addValue: function(value) {
		if(this._values.get(value) == null) {
			var valueControl = new haxe_ui_toolkit_controls_Button();
			valueControl.set_id(value);
			valueControl.set_percentWidth(100);
			valueControl.set_percentHeight(100);
			this._values.set(value,valueControl);
			this._valuesList.push(value);
			valueControl.set_visible(this._value == value);
			this.addChild(valueControl);
		}
	}
	,cycleValues: function() {
		var currentIndex = Lambda.indexOf(this._valuesList,this._value);
		currentIndex++;
		if(currentIndex > this._valuesList.length - 1) currentIndex = 0;
		this.set_value(this._valuesList[currentIndex]);
	}
	,_onMouseClick: function(event) {
		if(this._interactive == true) this.cycleValues();
	}
	,get_value: function() {
		return this._value;
	}
	,set_value: function(newValue) {
		if(newValue != this._value) {
			var valueControl;
			var key = newValue;
			valueControl = this._values.get(key);
			if(valueControl != null) {
				var currentControl = this._values.get(this._value);
				if(currentControl != null) currentControl.set_visible(false);
				this._value = newValue;
				valueControl.set_visible(true);
			}
			this.dispatchEvent(new haxe_ui_toolkit_events_UIEvent("haxeui_" + "change"));
		}
		return newValue;
	}
	,get_interactive: function() {
		return this._interactive;
	}
	,set_interactive: function(value) {
		this._interactive = value;
		return value;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_core_StateComponent.prototype.clone.call(this);
		var _g = 0;
		var _g1 = this._valuesList;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			c.addValue(v);
		}
		return c;
		c.set_interactive(this.get_interactive());
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_Value();
	}
	,__class__: haxe_ui_toolkit_controls_Value
	,__properties__: $extend(haxe_ui_toolkit_core_StateComponent.prototype.__properties__,{set_interactive:"set_interactive",get_interactive:"get_interactive"})
});
var haxe_ui_toolkit_controls_CheckBoxValue = function() {
	haxe_ui_toolkit_controls_Value.call(this);
	this._value = "unselected";
	this.addValue("selected");
	this.addValue("unselected");
};
$hxClasses["haxe.ui.toolkit.controls.CheckBoxValue"] = haxe_ui_toolkit_controls_CheckBoxValue;
haxe_ui_toolkit_controls_CheckBoxValue.__name__ = ["haxe","ui","toolkit","controls","CheckBoxValue"];
haxe_ui_toolkit_controls_CheckBoxValue.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_controls_CheckBoxValue.__super__ = haxe_ui_toolkit_controls_Value;
haxe_ui_toolkit_controls_CheckBoxValue.prototype = $extend(haxe_ui_toolkit_controls_Value.prototype,{
	clone: function() {
		var c = haxe_ui_toolkit_controls_Value.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_CheckBoxValue();
	}
	,__class__: haxe_ui_toolkit_controls_CheckBoxValue
});
var haxe_ui_toolkit_core_interfaces_IItemRenderer = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IItemRenderer"] = haxe_ui_toolkit_core_interfaces_IItemRenderer;
haxe_ui_toolkit_core_interfaces_IItemRenderer.__name__ = ["haxe","ui","toolkit","core","interfaces","IItemRenderer"];
haxe_ui_toolkit_core_interfaces_IItemRenderer.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable,haxe_ui_toolkit_core_interfaces_IStateComponent];
haxe_ui_toolkit_core_interfaces_IItemRenderer.prototype = {
	__class__: haxe_ui_toolkit_core_interfaces_IItemRenderer
	,__properties__: {set_data:"set_data",get_data:"get_data"}
};
var haxe_ui_toolkit_controls_Divider = function() {
	haxe_ui_toolkit_core_StateComponent.call(this);
	this.set_autoSize(true);
	this.set_layout(new haxe_ui_toolkit_layout_VerticalLayout());
};
$hxClasses["haxe.ui.toolkit.controls.Divider"] = haxe_ui_toolkit_controls_Divider;
haxe_ui_toolkit_controls_Divider.__name__ = ["haxe","ui","toolkit","controls","Divider"];
haxe_ui_toolkit_controls_Divider.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable,haxe_ui_toolkit_core_interfaces_IItemRenderer];
haxe_ui_toolkit_controls_Divider.__super__ = haxe_ui_toolkit_core_StateComponent;
haxe_ui_toolkit_controls_Divider.prototype = $extend(haxe_ui_toolkit_core_StateComponent.prototype,{
	initialize: function() {
		haxe_ui_toolkit_core_StateComponent.prototype.initialize.call(this);
		this._line = new haxe_ui_toolkit_core_Component();
		this._line.set_id("line");
		this._line.set_percentWidth(100);
		this.addChild(this._line);
	}
	,get_text: function() {
		if(this._label == null) return null;
		return this._label.get_text();
	}
	,set_text: function(value) {
		if(this._label == null) {
			this._label = new haxe_ui_toolkit_controls_Text();
			this._label.set_id("text");
			this.addChildAt(this._label,0);
		}
		return this._label.set_text(value);
	}
	,get_data: function() {
		return this._data;
	}
	,set_data: function(value) {
		this._data = value;
		if(this.get_data().text != null) this.set_text(this.get_data().text);
		return value;
	}
	,allowSelection: function(stageX,stageY) {
		return false;
	}
	,update: function() {
	}
	,clone: function() {
		var c = haxe_ui_toolkit_core_StateComponent.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_Divider();
	}
	,__class__: haxe_ui_toolkit_controls_Divider
	,__properties__: $extend(haxe_ui_toolkit_core_StateComponent.prototype.__properties__,{set_data:"set_data",get_data:"get_data"})
});
var haxe_ui_toolkit_core_interfaces_IDirectional = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IDirectional"] = haxe_ui_toolkit_core_interfaces_IDirectional;
haxe_ui_toolkit_core_interfaces_IDirectional.__name__ = ["haxe","ui","toolkit","core","interfaces","IDirectional"];
haxe_ui_toolkit_core_interfaces_IDirectional.prototype = {
	__class__: haxe_ui_toolkit_core_interfaces_IDirectional
	,__properties__: {set_direction:"set_direction",get_direction:"get_direction"}
};
var haxe_ui_toolkit_core_interfaces_IScrollable = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IScrollable"] = haxe_ui_toolkit_core_interfaces_IScrollable;
haxe_ui_toolkit_core_interfaces_IScrollable.__name__ = ["haxe","ui","toolkit","core","interfaces","IScrollable"];
haxe_ui_toolkit_core_interfaces_IScrollable.prototype = {
	__class__: haxe_ui_toolkit_core_interfaces_IScrollable
	,__properties__: {set_incrementSize:"set_incrementSize",get_incrementSize:"get_incrementSize",set_pageSize:"set_pageSize",get_pageSize:"get_pageSize",set_max:"set_max",get_max:"get_max",set_min:"set_min",get_min:"get_min",set_pos:"set_pos",get_pos:"get_pos"}
};
var haxe_ui_toolkit_controls_Progress = function() {
	this._incrementSize = 1;
	this._pos = 0;
	this._max = 100;
	this._min = 0;
	haxe_ui_toolkit_core_StateComponent.call(this);
	this.addStates(["normal","disabled"]);
	this.set_direction("horizontal");
	this._valueBgComp = new haxe_ui_toolkit_core_StateComponent();
	this._valueBgComp.addStates(["normal","disabled"]);
	this._valueBgComp.set_id("background");
	this._valueComp = new haxe_ui_toolkit_core_StateComponent();
	this._valueComp.addStates(["normal","disabled"]);
	this._valueComp.set_id("value");
};
$hxClasses["haxe.ui.toolkit.controls.Progress"] = haxe_ui_toolkit_controls_Progress;
haxe_ui_toolkit_controls_Progress.__name__ = ["haxe","ui","toolkit","controls","Progress"];
haxe_ui_toolkit_controls_Progress.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable,haxe_ui_toolkit_core_interfaces_IDirectional,haxe_ui_toolkit_core_interfaces_IScrollable];
haxe_ui_toolkit_controls_Progress.__super__ = haxe_ui_toolkit_core_StateComponent;
haxe_ui_toolkit_controls_Progress.prototype = $extend(haxe_ui_toolkit_core_StateComponent.prototype,{
	initialize: function() {
		haxe_ui_toolkit_core_StateComponent.prototype.initialize.call(this);
		this.addChild(this._valueBgComp);
		this._valueBgComp.addChild(this._valueComp);
	}
	,get_direction: function() {
		return this._direction;
	}
	,set_direction: function(value) {
		this._direction = value;
		if(value == "horizontal") this._layout = new haxe_ui_toolkit_controls_HProgressLayout(); else if(value == "vertical") this._layout = new haxe_ui_toolkit_controls_VProgressLayout();
		return value;
	}
	,get_min: function() {
		return this._min;
	}
	,set_min: function(value) {
		if(value != this._min) {
			this._min = value;
			var changeEvent = new openfl_events_Event(openfl_events_Event.CHANGE);
			this.dispatchEvent(changeEvent);
			this.invalidate(1);
		}
		return value;
	}
	,get_max: function() {
		return this._max;
	}
	,set_max: function(value) {
		if(value != this._max) {
			this._max = value;
			var changeEvent = new openfl_events_Event(openfl_events_Event.CHANGE);
			this.dispatchEvent(changeEvent);
			this.invalidate(1);
		}
		return this._max;
	}
	,get_pos: function() {
		return this._pos;
	}
	,set_pos: function(value) {
		if(this._ready) {
			if(value < this._min) value = this._min;
			if(value > this._max) value = this._max;
		}
		if(value != this._pos) {
			this._pos = value;
			var changeEvent = new openfl_events_Event(openfl_events_Event.CHANGE);
			this.dispatchEvent(changeEvent);
			this.invalidate(1);
		}
		return value;
	}
	,get_pageSize: function() {
		return 0;
	}
	,set_pageSize: function(value) {
		return value;
	}
	,get_incrementSize: function() {
		return this._incrementSize;
	}
	,set_incrementSize: function(value) {
		this._incrementSize = value;
		return value;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_core_StateComponent.prototype.clone.call(this);
		c.set_direction(this.get_direction());
		c.set_min(this.get_min());
		c.set_max(this.get_max());
		c.set_pos(this.get_pos());
		c.set_pageSize(this.get_pageSize());
		c.set_incrementSize(this.get_incrementSize());
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_Progress();
	}
	,__class__: haxe_ui_toolkit_controls_Progress
	,__properties__: $extend(haxe_ui_toolkit_core_StateComponent.prototype.__properties__,{set_incrementSize:"set_incrementSize",get_incrementSize:"get_incrementSize",set_pageSize:"set_pageSize",get_pageSize:"get_pageSize",set_pos:"set_pos",get_pos:"get_pos",set_max:"set_max",get_max:"get_max",set_min:"set_min",get_min:"get_min",set_direction:"set_direction",get_direction:"get_direction"})
});
var haxe_ui_toolkit_controls_HProgress = function() {
	haxe_ui_toolkit_controls_Progress.call(this);
	this.set_direction("horizontal");
};
$hxClasses["haxe.ui.toolkit.controls.HProgress"] = haxe_ui_toolkit_controls_HProgress;
haxe_ui_toolkit_controls_HProgress.__name__ = ["haxe","ui","toolkit","controls","HProgress"];
haxe_ui_toolkit_controls_HProgress.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_controls_HProgress.__super__ = haxe_ui_toolkit_controls_Progress;
haxe_ui_toolkit_controls_HProgress.prototype = $extend(haxe_ui_toolkit_controls_Progress.prototype,{
	clone: function() {
		var c = haxe_ui_toolkit_controls_Progress.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_HProgress();
	}
	,__class__: haxe_ui_toolkit_controls_HProgress
});
var haxe_ui_toolkit_controls_Scroll = function() {
	this._direction = "vertical";
	haxe_ui_toolkit_core_StateComponent.call(this);
	this.addStates(["normal","disabled"]);
};
$hxClasses["haxe.ui.toolkit.controls.Scroll"] = haxe_ui_toolkit_controls_Scroll;
haxe_ui_toolkit_controls_Scroll.__name__ = ["haxe","ui","toolkit","controls","Scroll"];
haxe_ui_toolkit_controls_Scroll.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IDirectional];
haxe_ui_toolkit_controls_Scroll.__super__ = haxe_ui_toolkit_core_StateComponent;
haxe_ui_toolkit_controls_Scroll.prototype = $extend(haxe_ui_toolkit_core_StateComponent.prototype,{
	get_direction: function() {
		return this._direction;
	}
	,set_direction: function(value) {
		this._direction = value;
		return value;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_core_StateComponent.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_Scroll();
	}
	,__class__: haxe_ui_toolkit_controls_Scroll
	,__properties__: $extend(haxe_ui_toolkit_core_StateComponent.prototype.__properties__,{set_direction:"set_direction",get_direction:"get_direction"})
});
var haxe_ui_toolkit_controls_HScroll = function() {
	this._hasButtons = true;
	this._scrollDirection = 0;
	this._mouseDownOffset = -1;
	this._incrementSize = 20;
	this._pageSize = 0;
	this._max = 100;
	this._min = 0;
	this._pos = 0;
	haxe_ui_toolkit_controls_Scroll.call(this);
	this._layout = new haxe_ui_toolkit_controls_HScrollLayout();
};
$hxClasses["haxe.ui.toolkit.controls.HScroll"] = haxe_ui_toolkit_controls_HScroll;
haxe_ui_toolkit_controls_HScroll.__name__ = ["haxe","ui","toolkit","controls","HScroll"];
haxe_ui_toolkit_controls_HScroll.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable,haxe_ui_toolkit_core_interfaces_IScrollable];
haxe_ui_toolkit_controls_HScroll.__super__ = haxe_ui_toolkit_controls_Scroll;
haxe_ui_toolkit_controls_HScroll.prototype = $extend(haxe_ui_toolkit_controls_Scroll.prototype,{
	preInitialize: function() {
		haxe_ui_toolkit_controls_Scroll.prototype.preInitialize.call(this);
		if(this._baseStyle != null) this._hasButtons = this._baseStyle.get_hasButtons();
	}
	,initialize: function() {
		haxe_ui_toolkit_controls_Scroll.prototype.initialize.call(this);
		if(this._hasButtons == true) {
			this._deincButton = new haxe_ui_toolkit_controls_Button();
			this._deincButton.set_autoSize(false);
			this._deincButton.set_iconPosition("center");
			this._deincButton.set_percentHeight(100);
			this._deincButton.set_width(this.get_layout().get_innerHeight());
			this._deincButton.set_id("deinc");
			this._deincButton.set_styleName("left");
			this._deincButton.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._onDeinc));
			this.addChild(this._deincButton);
			this._incButton = new haxe_ui_toolkit_controls_Button();
			this._incButton.set_autoSize(false);
			this._incButton.set_iconPosition("center");
			this._incButton.set_percentHeight(100);
			this._incButton.set_width(this.get_layout().get_innerHeight());
			this._incButton.set_id("inc");
			this._incButton.set_styleName("right");
			this._incButton.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._onInc));
			this.addChild(this._incButton);
		}
		this._thumb = new haxe_ui_toolkit_controls_Button();
		this._thumb.set_iconPosition("center");
		this._thumb.set_autoSize(false);
		this._thumb.set_width(50);
		this._thumb.set_percentHeight(100);
		this._thumb.set_id("thumb");
		this._thumb.set_styleName("thumb");
		this._thumb.set_remainPressed(true);
		this._thumb.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._onThumbMouseDown));
		this.addChild(this._thumb);
		this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._onMouseDown));
	}
	,_onThumbMouseDown: function(event) {
		var ptStage = new openfl_geom_Point(event.stageX,event.stageY);
		this._mouseDownOffset = ptStage.x - this._thumb.get_x();
		haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
		this.dispatchEvent(new haxe_ui_toolkit_events_UIEvent("haxeui_" + "scrollStart"));
		event.stopImmediatePropagation();
		event.stopPropagation();
	}
	,_onScreenMouseMove: function(event) {
		var xpos = event.stageX - this._mouseDownOffset;
		var minX = 0;
		if(this._deincButton != null) minX = this._deincButton.get_width() + this.get_layout().get_spacingX();
		var maxX = this.get_layout().get_usableWidth() - this._thumb.get_width();
		if(this._deincButton != null) maxX += this._deincButton.get_width() + this.get_layout().get_spacingX();
		if(xpos < minX) xpos = minX; else if(xpos > maxX) xpos = maxX;
		var ucx = this.get_layout().get_usableWidth();
		ucx -= this._thumb.get_width();
		var m = Std["int"](this.get_max() - this.get_min());
		var v = xpos - minX;
		var newValue = this.get_min() + v / ucx * m;
		this.set_pos(newValue | 0);
	}
	,_onScreenMouseUp: function(event) {
		this._mouseDownOffset = -1;
		if(this._scrollTimer != null) this._scrollTimer.stop();
		this.dispatchEvent(new haxe_ui_toolkit_events_UIEvent("haxeui_" + "scrollStop"));
		haxe_ui_toolkit_core_Screen.get_instance().removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		haxe_ui_toolkit_core_Screen.get_instance().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
	}
	,_onDeinc: function(event) {
		this.dispatchEvent(new haxe_ui_toolkit_events_UIEvent("haxeui_" + "scrollStart"));
		this.deincrementValue();
		this._scrollDirection = 0;
		haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		if(this._scrollTimer == null) {
			this._scrollTimer = new openfl_utils_Timer(50,1);
			this._scrollTimer.addEventListener(openfl_events_TimerEvent.TIMER_COMPLETE,$bind(this,this._onScrollTimerComplete));
		}
		this._scrollTimer.reset();
		this._scrollTimer.start();
		event.stopImmediatePropagation();
		event.stopPropagation();
	}
	,_onInc: function(event) {
		this.dispatchEvent(new haxe_ui_toolkit_events_UIEvent("haxeui_" + "scrollStart"));
		this.incrementValue();
		this._scrollDirection = 1;
		haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		if(this._scrollTimer == null) {
			this._scrollTimer = new openfl_utils_Timer(50,1);
			this._scrollTimer.addEventListener(openfl_events_TimerEvent.TIMER_COMPLETE,$bind(this,this._onScrollTimerComplete));
		}
		this._scrollTimer.reset();
		this._scrollTimer.start();
		event.stopImmediatePropagation();
		event.stopPropagation();
	}
	,_onScrollTimerComplete: function(event) {
		if(this._scrollTimer != null) {
			if(this._scrollDirection == 1) this.incrementValue(); else if(this._scrollDirection == 0) this.deincrementValue();
			this._scrollTimer.reset();
			this._scrollTimer.start();
		}
	}
	,_onMouseDown: function(event) {
		this.dispatchEvent(new haxe_ui_toolkit_events_UIEvent("haxeui_" + "scrollStart"));
		if(event.localX > this._thumb.get_x()) {
			var _g = this;
			_g.set_pos(_g.get_pos() + this.get_pageSize());
		} else {
			var _g1 = this;
			_g1.set_pos(_g1.get_pos() - this.get_pageSize());
		}
		this.dispatchEvent(new haxe_ui_toolkit_events_UIEvent("haxeui_" + "scrollStop"));
	}
	,get_pos: function() {
		return this._pos;
	}
	,set_pos: function(value) {
		if(value < this._min) value = this._min;
		if(value > this._max) value = this._max;
		if(value != this._pos) {
			this._pos = value;
			this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
			this.dispatchEvent(new haxe_ui_toolkit_events_UIEvent("haxeui_" + "scroll"));
			this.invalidate(1);
		}
		return value;
	}
	,get_min: function() {
		return this._min;
	}
	,set_min: function(value) {
		if(value != this._min) {
			this._min = value;
			if(this._pos < this._min) this._pos = this._min;
			this.invalidate(1);
		}
		return value;
	}
	,get_max: function() {
		return this._max;
	}
	,set_max: function(value) {
		if(value != this._max) {
			this._max = value;
			if(this._pos > this._max) this._pos = this._max;
			this.invalidate(1);
		}
		return value;
	}
	,get_pageSize: function() {
		return this._pageSize;
	}
	,set_pageSize: function(value) {
		if(value != this._pageSize) {
			this._pageSize = value;
			this.invalidate(1);
		}
		return value;
	}
	,get_incrementSize: function() {
		return this._incrementSize;
	}
	,set_incrementSize: function(value) {
		this._incrementSize = value;
		return value;
	}
	,deincrementValue: function() {
		var _g = this;
		_g.set_pos(_g.get_pos() - this._incrementSize);
	}
	,incrementValue: function() {
		var _g = this;
		_g.set_pos(_g.get_pos() + this._incrementSize);
	}
	,clone: function() {
		var c = haxe_ui_toolkit_controls_Scroll.prototype.clone.call(this);
		c.set_pos(this.get_pos());
		c.set_min(this.get_min());
		c.set_max(this.get_max());
		c.set_pageSize(this.get_pageSize());
		c.set_incrementSize(this.get_incrementSize());
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_HScroll();
	}
	,__class__: haxe_ui_toolkit_controls_HScroll
	,__properties__: $extend(haxe_ui_toolkit_controls_Scroll.prototype.__properties__,{set_incrementSize:"set_incrementSize",get_incrementSize:"get_incrementSize",set_pageSize:"set_pageSize",get_pageSize:"get_pageSize",set_max:"set_max",get_max:"get_max",set_min:"set_min",get_min:"get_min",set_pos:"set_pos",get_pos:"get_pos"})
});
var haxe_ui_toolkit_controls_HScrollLayout = function() {
	haxe_ui_toolkit_layout_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.HScrollLayout"] = haxe_ui_toolkit_controls_HScrollLayout;
haxe_ui_toolkit_controls_HScrollLayout.__name__ = ["haxe","ui","toolkit","controls","HScrollLayout"];
haxe_ui_toolkit_controls_HScrollLayout.__super__ = haxe_ui_toolkit_layout_DefaultLayout;
haxe_ui_toolkit_controls_HScrollLayout.prototype = $extend(haxe_ui_toolkit_layout_DefaultLayout.prototype,{
	resizeChildren: function() {
		haxe_ui_toolkit_layout_DefaultLayout.prototype.resizeChildren.call(this);
		var deinc = this.get_container().findChild("deinc");
		if(deinc != null) deinc.set_width(this.get_innerHeight());
		var inc = this.get_container().findChild("inc");
		if(inc != null) inc.set_width(this.get_innerHeight());
		var scroll;
		scroll = js_Boot.__cast(this.get_container() , haxe_ui_toolkit_core_interfaces_IScrollable);
		var thumb = this.get_container().findChild("thumb");
		if(thumb != null) {
			var m = scroll.get_max() - scroll.get_min();
			var ucx = this.get_usableWidth();
			var thumbWidth = scroll.get_pageSize() / m * ucx;
			if(thumbWidth < this.get_innerHeight()) thumbWidth = this.get_innerHeight(); else if(thumbWidth > ucx) thumbWidth = ucx;
			if(thumbWidth > 0 && isNaN(thumbWidth) == false) thumb.set_width(thumbWidth);
		}
	}
	,repositionChildren: function() {
		haxe_ui_toolkit_layout_DefaultLayout.prototype.repositionChildren.call(this);
		var deinc = this.get_container().findChild("deinc");
		var inc = this.get_container().findChild("inc");
		if(inc != null) inc.set_x(this.get_container().get_width() - inc.get_width() - this.get_padding().get_right());
		var scroll;
		scroll = js_Boot.__cast(this.get_container() , haxe_ui_toolkit_core_interfaces_IScrollable);
		var thumb = this.get_container().findChild("thumb");
		if(thumb != null) {
			var m = scroll.get_max() - scroll.get_min();
			var u = this.get_usableWidth();
			u -= thumb.get_width();
			var x = (scroll.get_pos() - scroll.get_min()) / m * u;
			x += this.get_padding().get_left();
			if(deinc != null) x += deinc.get_width() + this.get_spacingX();
			thumb.set_x(x);
		}
	}
	,get_usableWidth: function() {
		var ucx = this.get_innerWidth();
		var deinc = this.get_container().findChild("deinc");
		var inc = this.get_container().findChild("inc");
		if(deinc != null) ucx -= deinc.get_width() + this.get_spacingX();
		if(inc != null) ucx -= inc.get_width() + this.get_spacingX();
		return ucx;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_layout_DefaultLayout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_HScrollLayout();
	}
	,__class__: haxe_ui_toolkit_controls_HScrollLayout
});
var haxe_ui_toolkit_controls_Slider = function() {
	this._mouseDownOffset = -1;
	haxe_ui_toolkit_controls_Progress.call(this);
	this._valueBgComp.get_sprite().buttonMode = true;
	this._valueBgComp.get_sprite().useHandCursor = true;
};
$hxClasses["haxe.ui.toolkit.controls.Slider"] = haxe_ui_toolkit_controls_Slider;
haxe_ui_toolkit_controls_Slider.__name__ = ["haxe","ui","toolkit","controls","Slider"];
haxe_ui_toolkit_controls_Slider.__super__ = haxe_ui_toolkit_controls_Progress;
haxe_ui_toolkit_controls_Slider.prototype = $extend(haxe_ui_toolkit_controls_Progress.prototype,{
	initialize: function() {
		haxe_ui_toolkit_controls_Progress.prototype.initialize.call(this);
		this._thumb = new haxe_ui_toolkit_controls_Button();
		this._thumb.set_id("thumb");
		this._thumb.set_remainPressed(true);
		this._thumb.set_autoSize(false);
		this._thumb.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._onMouseDown));
		this.addChild(this._thumb);
		this.addEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this._onMouseWheel));
		this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._onBackgroundMouseDown));
	}
	,get_value: function() {
		return this.get_pos();
	}
	,set_value: function(newValue) {
		if(typeof(newValue) == "string") this.set_pos(Std.parseFloat(newValue)); else this.set_pos(newValue);
		return newValue;
	}
	,_onMouseDown: function(event) {
	}
	,_onScreenMouseMove: function(event) {
	}
	,_onScreenMouseUp: function(event) {
		this._mouseDownOffset = -1;
		haxe_ui_toolkit_core_Screen.get_instance().removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		haxe_ui_toolkit_core_Screen.get_instance().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
	}
	,_onBackgroundMouseDown: function(event) {
	}
	,calcPosFromCoord: function(coord) {
		return 0;
	}
	,_onMouseWheel: function(event) {
		if(event.delta != 0) {
			if(this._direction == "horizontal") {
				if(event.delta < 0) {
					var _g = this;
					_g.set_pos(_g.get_pos() + 5);
				} else if(event.delta > 0) {
					var _g1 = this;
					_g1.set_pos(_g1.get_pos() - 5);
				}
			} else if(this._direction == "vertical") {
				if(event.delta < 0) {
					var _g2 = this;
					_g2.set_pos(_g2.get_pos() - 5);
				} else if(event.delta > 0) {
					var _g3 = this;
					_g3.set_pos(_g3.get_pos() + 5);
				}
			}
		}
	}
	,clone: function() {
		var c = haxe_ui_toolkit_controls_Progress.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_Slider();
	}
	,__class__: haxe_ui_toolkit_controls_Slider
});
var haxe_ui_toolkit_controls_HSlider = function() {
	haxe_ui_toolkit_controls_Slider.call(this);
	this.set_direction("horizontal");
};
$hxClasses["haxe.ui.toolkit.controls.HSlider"] = haxe_ui_toolkit_controls_HSlider;
haxe_ui_toolkit_controls_HSlider.__name__ = ["haxe","ui","toolkit","controls","HSlider"];
haxe_ui_toolkit_controls_HSlider.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_controls_HSlider.__super__ = haxe_ui_toolkit_controls_Slider;
haxe_ui_toolkit_controls_HSlider.prototype = $extend(haxe_ui_toolkit_controls_Slider.prototype,{
	_onMouseDown: function(event) {
		this.startTracking(event.stageX / haxe_ui_toolkit_core_Toolkit.get_scaleFactor() - this._thumb.get_stageX());
	}
	,_onScreenMouseMove: function(event) {
		var xpos = event.stageX / haxe_ui_toolkit_core_Toolkit.get_scaleFactor() - this.get_stageX() - this._mouseDownOffset;
		this.set_pos(this.calcPosFromCoord(xpos));
	}
	,_onBackgroundMouseDown: function(event) {
		if(this._thumb.hitTest(event.stageX,event.stageY) == false) {
			var xpos = event.stageX / haxe_ui_toolkit_core_Toolkit.get_scaleFactor() - this.get_stageX();
			xpos -= this._thumb.get_width() / 2;
			this.set_pos(Std["int"](this.calcPosFromCoord(xpos)));
			this._thumb.set_state("down");
			this.startTracking(this._thumb.get_width() / 2);
		}
	}
	,startTracking: function(offset) {
		this._mouseDownOffset = offset;
		haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
	}
	,calcPosFromCoord: function(xpos) {
		var minX = 0;
		var maxX = this.get_layout().get_usableWidth() - this._thumb.get_width();
		if(xpos < minX) xpos = minX; else if(xpos > maxX) xpos = maxX;
		var ucx = this.get_layout().get_usableWidth();
		ucx -= this._thumb.get_width();
		var m = Std["int"](this.get_max() - this.get_min());
		var v = xpos - minX;
		var newValue = this.get_min() + v / ucx * m;
		return newValue;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_controls_Slider.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_HSlider();
	}
	,__class__: haxe_ui_toolkit_controls_HSlider
});
var haxe_ui_toolkit_controls_Image = function() {
	this._updatingContent = false;
	this._autoDisposeBitmapData = false;
	this._autoHeight = true;
	this._autoWidth = true;
	haxe_ui_toolkit_core_Component.call(this);
	this.set_autoSize(true);
};
$hxClasses["haxe.ui.toolkit.controls.Image"] = haxe_ui_toolkit_controls_Image;
haxe_ui_toolkit_controls_Image.__name__ = ["haxe","ui","toolkit","controls","Image"];
haxe_ui_toolkit_controls_Image.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_controls_Image.__super__ = haxe_ui_toolkit_core_Component;
haxe_ui_toolkit_controls_Image.prototype = $extend(haxe_ui_toolkit_core_Component.prototype,{
	initialize: function() {
		haxe_ui_toolkit_core_Component.prototype.initialize.call(this);
		this.updateContent();
	}
	,dispose: function() {
		this.disposeContent();
		haxe_ui_toolkit_core_Component.prototype.dispose.call(this);
	}
	,disposeContent: function() {
		if(this._bmp != null) {
			if(this._autoDisposeBitmapData == true) this._bmp.bitmapData.dispose();
			this.get_sprite().removeChild(this._bmp);
			this._bmp = null;
		}
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		haxe_ui_toolkit_core_Component.prototype.invalidate.call(this,type,recursive);
		if((type & 256) == 256) this.updateContent();
	}
	,get_value: function() {
		return this.get_resource();
	}
	,set_value: function(newValue) {
		this.set_resource(newValue);
		return newValue;
	}
	,set_width: function(value) {
		this._autoWidth = false;
		this._autoSize = false;
		return haxe_ui_toolkit_core_Component.prototype.set_width.call(this,value);
	}
	,set_height: function(value) {
		this._autoHeight = false;
		this._autoSize = false;
		return haxe_ui_toolkit_core_Component.prototype.set_height.call(this,value);
	}
	,get_resource: function() {
		return this._resource;
	}
	,set_resource: function(value) {
		var _g = this;
		this.disposeContent();
		if(typeof(value) == "string") {
			if(StringTools.endsWith(value,".gif")) haxe_Log.trace("YAGP lib not found for .gif decoding",{ fileName : "Image.hx", lineNumber : 152, className : "haxe.ui.toolkit.controls.Image", methodName : "set_resource"}); else if(StringTools.endsWith(value,".svg")) haxe_Log.trace("SVG lib not found for .svg decoding",{ fileName : "Image.hx", lineNumber : 160, className : "haxe.ui.toolkit.controls.Image", methodName : "set_resource"}); else this.loadBitmap(value,function(bmpData) {
				_g.updateBitmap(bmpData);
			});
		} else if(js_Boot.__instanceof(value,openfl_display_Bitmap)) this.updateBitmap((js_Boot.__cast(value , openfl_display_Bitmap)).bitmapData); else if(js_Boot.__instanceof(value,openfl_display_BitmapData)) this.updateBitmap(js_Boot.__cast(value , openfl_display_BitmapData));
		this._resource = value;
		return value;
	}
	,loadBitmap: function(res,callback) {
		if(StringTools.startsWith(res,"http://")) {
			var l = new openfl_display_Loader();
			l.load(new openfl_net_URLRequest(res));
			l.contentLoaderInfo.addEventListener(openfl_events_Event.INIT,function(dyn) {
				var bmp;
				bmp = js_Boot.__cast(l.content , openfl_display_Bitmap);
				var bmpData = new openfl_display_BitmapData(bmp.get_width(),bmp.get_height(),true,0);
				bmpData.draw(bmp.bitmapData);
				callback(bmpData);
			});
		} else {
			var data = haxe_ui_toolkit_resources_ResourceManager.get_instance().getBitmapData(res);
			if(data == null) throw new js__$Boot_HaxeError("Image [" + res + "] not found!");
			callback(data);
		}
	}
	,updateBitmap: function(bmpData) {
		this._bmp = new openfl_display_Bitmap(bmpData);
		this._bmp.smoothing = true;
		this.updateContent();
	}
	,updateContent: function() {
		if(this._updatingContent) return;
		this._updatingContent = true;
		if(this._bmp != null) {
			if(this.get_sprite().contains(this._bmp) == false) this.get_sprite().addChild(this._bmp);
			if(this.get_ready()) {
				if(this._autoWidth && this._autoHeight) {
					this.set_width(this._bmp.bitmapData.width);
					this.set_height(this._bmp.bitmapData.height);
					this._autoWidth = true;
					this._autoHeight = true;
				} else if(this._autoWidth) {
					this._bmp.set_height(this.get_height());
					this._bmp.set_scaleX(this._bmp.get_scaleY());
					this.set_width(this._bmp.get_width());
					this._autoWidth = true;
				} else if(this._autoHeight) {
					this._bmp.set_width(this.get_width());
					this._bmp.set_scaleY(this._bmp.get_scaleX());
					this.set_height(this._bmp.get_height());
					this._autoHeight = true;
				} else {
					this._bmp.set_width(this.get_width());
					this._bmp.set_height(this.get_height());
				}
			}
		}
		this._updatingContent = false;
	}
	,get_autoDisposeBitmapData: function() {
		return this._autoDisposeBitmapData;
	}
	,set_autoDisposeBitmapData: function(value) {
		this._autoDisposeBitmapData = value;
		return value;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_core_Component.prototype.clone.call(this);
		c.set_resource(this.get_resource());
		c.set_autoDisposeBitmapData(this.get_autoDisposeBitmapData());
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_Image();
	}
	,__class__: haxe_ui_toolkit_controls_Image
	,__properties__: $extend(haxe_ui_toolkit_core_Component.prototype.__properties__,{set_autoDisposeBitmapData:"set_autoDisposeBitmapData",get_autoDisposeBitmapData:"get_autoDisposeBitmapData",set_resource:"set_resource",get_resource:"get_resource"})
});
var haxe_ui_toolkit_controls_Text = function() {
	haxe_ui_toolkit_core_StateComponent.call(this);
	this._valign = "center";
	this.set_autoSize(true);
	this._textDisplay = new haxe_ui_toolkit_text_TextDisplay();
	this._textDisplay.set_text("");
};
$hxClasses["haxe.ui.toolkit.controls.Text"] = haxe_ui_toolkit_controls_Text;
haxe_ui_toolkit_controls_Text.__name__ = ["haxe","ui","toolkit","controls","Text"];
haxe_ui_toolkit_controls_Text.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_controls_Text.__super__ = haxe_ui_toolkit_core_StateComponent;
haxe_ui_toolkit_controls_Text.prototype = $extend(haxe_ui_toolkit_core_StateComponent.prototype,{
	initialize: function() {
		haxe_ui_toolkit_core_StateComponent.prototype.initialize.call(this);
		this.get_sprite().addChild(this._textDisplay.get_display());
		this._textDisplay.set_autoSize(this.get_autoSize());
		this._textDisplay.set_text(this.get_text());
		if(this.get_autoSize() == true) {
			if(this.get_width() == 0) this.set_width(this._textDisplay.get_display().get_width());
			if(this.get_height() == 0) this.set_height(this._textDisplay.get_display().get_height());
		}
	}
	,dispose: function() {
		if(this.get_sprite().contains(this._textDisplay.get_display())) this.get_sprite().removeChild(this._textDisplay.get_display());
		haxe_ui_toolkit_core_StateComponent.prototype.dispose.call(this);
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		if(!this._ready || this._invalidating) return;
		haxe_ui_toolkit_core_StateComponent.prototype.invalidate.call(this,type,recursive);
		this._invalidating = true;
		if((type & 256) == 256 && this._autoSize == false) {
			this._textDisplay.get_display().set_width(this.get_layout().get_innerWidth());
			this._textDisplay.get_display().set_height(this.get_layout().get_innerHeight());
		}
		this._invalidating = false;
	}
	,get_text: function() {
		return this._textDisplay.get_text();
	}
	,set_text: function(value) {
		value = haxe_ui_toolkit_core_StateComponent.prototype.set_text.call(this,value);
		this._textDisplay.set_text(value);
		if(this.get_autoSize() == true) {
			this.set_width(this._textDisplay.get_display().get_width());
			this.set_height(this._textDisplay.get_display().get_height());
		}
		return value;
	}
	,set_autoSize: function(value) {
		value = haxe_ui_toolkit_core_StateComponent.prototype.set_autoSize.call(this,value);
		if(this._textDisplay != null) this._textDisplay.set_autoSize(value);
		return value;
	}
	,set_width: function(value) {
		haxe_ui_toolkit_core_StateComponent.prototype.set_width.call(this,value);
		this._textDisplay.get_display().set_width(value);
		this._textDisplay.set_text(this.get_text());
		this.set_height(this._textDisplay.get_display().get_height());
		return value;
	}
	,applyStyle: function() {
		haxe_ui_toolkit_core_StateComponent.prototype.applyStyle.call(this);
		if(this._textDisplay != null) {
			this._textDisplay.set_style(this._baseStyle);
			if(this.get_autoSize() == true) {
				this.set_width(this._textDisplay.get_display().get_width());
				this.set_height(this._textDisplay.get_display().get_height());
			}
		}
	}
	,get_multiline: function() {
		return this._textDisplay.get_multiline();
	}
	,set_multiline: function(value) {
		this._textDisplay.set_multiline(value);
		return value;
	}
	,get_wrapLines: function() {
		return this._textDisplay.get_wrapLines();
	}
	,set_wrapLines: function(value) {
		this._textDisplay.set_wrapLines(value);
		return value;
	}
	,get_selectable: function() {
		return this._textDisplay.get_selectable();
	}
	,set_selectable: function(value) {
		return this._textDisplay.set_selectable(value);
	}
	,get_textAlign: function() {
		if(this._textDisplay == null) return null;
		return this._textDisplay.get_textAlign();
	}
	,set_textAlign: function(value) {
		if(this._textDisplay != null) this._textDisplay.set_textAlign(value);
		return value;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_core_StateComponent.prototype.clone.call(this);
		c.set_multiline(this.get_multiline());
		c.set_wrapLines(this.get_wrapLines());
		c.set_selectable(this.get_selectable());
		c.set_textAlign(this.get_textAlign());
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_Text();
	}
	,__class__: haxe_ui_toolkit_controls_Text
	,__properties__: $extend(haxe_ui_toolkit_core_StateComponent.prototype.__properties__,{set_textAlign:"set_textAlign",get_textAlign:"get_textAlign",set_selectable:"set_selectable",get_selectable:"get_selectable",set_wrapLines:"set_wrapLines",get_wrapLines:"get_wrapLines",set_multiline:"set_multiline",get_multiline:"get_multiline"})
});
var haxe_ui_toolkit_controls_Link = function() {
	this._isOver = false;
	this._isDown = false;
	haxe_ui_toolkit_controls_Text.call(this);
	this.set_useHandCursor(true);
};
$hxClasses["haxe.ui.toolkit.controls.Link"] = haxe_ui_toolkit_controls_Link;
haxe_ui_toolkit_controls_Link.__name__ = ["haxe","ui","toolkit","controls","Link"];
haxe_ui_toolkit_controls_Link.__super__ = haxe_ui_toolkit_controls_Text;
haxe_ui_toolkit_controls_Link.prototype = $extend(haxe_ui_toolkit_controls_Text.prototype,{
	initialize: function() {
		haxe_ui_toolkit_controls_Text.prototype.initialize.call(this);
		haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._onScreenMouseDown));
		haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
	}
	,_onScreenMouseDown: function(e) {
		if(this.ensureVisible() == false) return;
		if(this.hitTest(e.stageX,e.stageY) == true && this.get_parent().hitTest(e.stageX,e.stageY) == true) {
			this._isDown = true;
			this.set_state("down");
			haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		}
	}
	,_onScreenMouseMove: function(e) {
		if(this.ensureVisible() == false) return;
		if(this.hitTest(e.stageX,e.stageY) == true && this.get_parent().hitTest(e.stageX,e.stageY) == true) {
			if(this._isDown == true) this.set_state("down"); else this.set_state("over");
			this._isOver = true;
		} else if(this._isOver == true) {
			this.set_state("normal");
			this._isOver = false;
		}
	}
	,_onScreenMouseUp: function(e) {
		if(this.ensureVisible() == false) return;
		haxe_ui_toolkit_core_Screen.get_instance().removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		if(this.hitTest(e.stageX,e.stageY) == true && this.get_parent().hitTest(e.stageX,e.stageY) == true && this._isDown == true) {
			this._isDown = false;
			this.set_state("over");
			var uiEvent = new haxe_ui_toolkit_events_UIEvent("haxeui_" + "click");
			this.dispatchEvent(uiEvent);
			if(this.url != null) openfl_Lib.getURL(new openfl_net_URLRequest(this.url));
		} else if(this._isOver == false) {
			this._isDown = false;
			this.set_state("normal");
		}
	}
	,get_states: function() {
		return ["normal","over","down"];
	}
	,ensureVisible: function() {
		if(this.get_visible() == false) return false;
		var p = this.get_parent();
		while(p != null) {
			if(p.get_visible() == false) return false;
			p = p.get_parent();
		}
		return true;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_controls_Text.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_Link();
	}
	,__class__: haxe_ui_toolkit_controls_Link
});
var haxe_ui_toolkit_controls_Menu = function() {
	haxe_ui_toolkit_containers_VBox.call(this);
	this._subMenus = new haxe_ds_ObjectMap();
};
$hxClasses["haxe.ui.toolkit.controls.Menu"] = haxe_ui_toolkit_controls_Menu;
haxe_ui_toolkit_controls_Menu.__name__ = ["haxe","ui","toolkit","controls","Menu"];
haxe_ui_toolkit_controls_Menu.__super__ = haxe_ui_toolkit_containers_VBox;
haxe_ui_toolkit_controls_Menu.prototype = $extend(haxe_ui_toolkit_containers_VBox.prototype,{
	initialize: function() {
		haxe_ui_toolkit_containers_VBox.prototype.initialize.call(this);
		if(this.get_rootMenu() == this) this.get_root().addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._onRootMouseDown));
	}
	,addChild: function(child) {
		var r = null;
		if(js_Boot.__instanceof(child,haxe_ui_toolkit_controls_MenuItem)) {
			(js_Boot.__cast(child , haxe_ui_toolkit_controls_MenuItem)).addEventListener(openfl_events_MouseEvent.MOUSE_OVER,this.buildMouseOverFunction(this.get_numChildren()));
			(js_Boot.__cast(child , haxe_ui_toolkit_controls_MenuItem)).addEventListener(openfl_events_MouseEvent.CLICK,this.buildMouseClickFunction(this.get_numChildren()));
			r = haxe_ui_toolkit_containers_VBox.prototype.addChild.call(this,child);
		} else if(js_Boot.__instanceof(child,haxe_ui_toolkit_controls_MenuSeparator)) r = haxe_ui_toolkit_containers_VBox.prototype.addChild.call(this,child); else if(js_Boot.__instanceof(child,haxe_ui_toolkit_controls_Menu)) {
			var item = new haxe_ui_toolkit_controls_MenuItem();
			(js_Boot.__cast(child , haxe_ui_toolkit_controls_Menu))._parentMenu = this;
			item.set_text((js_Boot.__cast(child , haxe_ui_toolkit_controls_Menu)).get_text());
			item.set_styleName("expandable");
			var value;
			value = js_Boot.__cast(child , haxe_ui_toolkit_controls_Menu);
			this._subMenus.set(item,value);
			this.addChild(item);
		}
		return r;
	}
	,_onRootMouseDown: function(event) {
		var mouseIn = false;
		var menu = this.get_rootMenu();
		while(menu != null) {
			if(menu.hitTest(event.stageX,event.stageY) == true) {
				mouseIn = true;
				break;
			}
			menu = menu._currentSubMenu;
		}
		if(mouseIn == false) this.get_rootMenu().hideSubMenus();
	}
	,buildMouseOverFunction: function(index) {
		var _g = this;
		return function(event) {
			_g.mouseOverItem(index);
		};
	}
	,buildMouseClickFunction: function(index) {
		var _g = this;
		return function(event) {
			_g.mouseClickItem(index);
		};
	}
	,mouseClickItem: function(index) {
		if(this.getChildAt(index) == null) return;
		var item;
		item = js_Boot.__cast(this.getChildAt(index) , haxe_ui_toolkit_controls_MenuItem);
		var subMenu = this._subMenus.h[item.__id__];
		if(subMenu == null) {
			this.get_rootMenu().hideSubMenus();
			var e = new haxe_ui_toolkit_events_MenuEvent(haxe_ui_toolkit_events_MenuEvent.SELECT,item);
			this.get_rootMenu().dispatchEvent(e);
		}
	}
	,mouseOverItem: function(index) {
		if(this.getChildAt(index) == null) return;
		var item;
		item = js_Boot.__cast(this.getChildAt(index) , haxe_ui_toolkit_controls_MenuItem);
		var subMenu = this._subMenus.h[item.__id__];
		if(this._currentItem != null) {
			this._currentItem.set_selected(false);
			this._currentItem = null;
		}
		if(this._currentSubMenu != null && this._currentSubMenu != subMenu) this.hideSubMenus();
		if(subMenu != null) {
			this.showSubMenu(item);
			this._currentItem = item;
		} else {
		}
	}
	,showSubMenu: function(item) {
		item.set_selected(true);
		var subMenu = this._subMenus.h[item.__id__];
		if(subMenu != null && subMenu != this._currentSubMenu) {
			subMenu.set_x(item.get_stageX() + item.get_width());
			subMenu.set_y(item.get_stageY());
			this.get_root().addChild(subMenu);
			this._currentSubMenu = subMenu;
			var transition = haxe_ui_toolkit_core_Toolkit.getTransitionForClass(haxe_ui_toolkit_controls_Menu);
			var transitionTime = haxe_ui_toolkit_core_Toolkit.getTransitionTimeForClass(haxe_ui_toolkit_controls_Menu);
			if(transition == "slide") {
				subMenu.set_clipHeight(0);
				subMenu.get_sprite().set_alpha(1);
				subMenu.set_visible(true);
				motion_Actuate.tween(subMenu,transitionTime,{ clipHeight : subMenu.get_height()},true).ease(motion_easing_Quart.get_easeOut()).onComplete(function() {
					subMenu.clearClip();
				});
			} else if(transition == "fade") {
				subMenu.get_sprite().set_alpha(0);
				subMenu.set_visible(true);
				motion_Actuate.tween(subMenu.get_sprite(),transitionTime,{ alpha : 1},true).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				});
			} else {
				subMenu.get_sprite().set_alpha(1);
				subMenu.set_visible(true);
			}
			var e = new haxe_ui_toolkit_events_MenuEvent(haxe_ui_toolkit_events_MenuEvent.OPEN,item);
			e.menu = subMenu;
			this.get_rootMenu().dispatchEvent(e);
		}
	}
	,hideSubMenus: function() {
		var _g = this;
		if(this._currentSubMenu == null) return;
		var ref = this._currentSubMenu;
		ref.hideSubMenus();
		var transition = haxe_ui_toolkit_core_Toolkit.getTransitionForClass(haxe_ui_toolkit_controls_Menu);
		var transitionTime = haxe_ui_toolkit_core_Toolkit.getTransitionTimeForClass(haxe_ui_toolkit_controls_Menu);
		if(transition == "slide") {
			this._currentSubMenu.get_sprite().set_alpha(1);
			motion_Actuate.tween(ref,transitionTime,{ clipHeight : 0},true).ease(motion_easing_Quart.get_easeOut()).onComplete(function() {
				ref.set_visible(false);
				ref.clearClip();
				_g.get_root().removeChild(ref,false);
				_g._currentSubMenu = null;
				ref.hideSubMenus();
			});
		} else if(transition == "fade") motion_Actuate.tween(ref.get_sprite(),transitionTime,{ alpha : 0},true).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			ref.set_visible(false);
			_g.get_root().removeChild(ref,false);
			_g._currentSubMenu = null;
			ref.hideSubMenus();
		}); else {
			ref.get_sprite().set_alpha(1);
			ref.set_visible(false);
			this.get_root().removeChild(ref,false);
			this._currentSubMenu = null;
			ref.hideSubMenus();
		}
		if(this._currentItem != null) {
			this._currentItem.set_selected(false);
			this._currentItem = null;
		}
	}
	,get_currentSubMenu: function() {
		return this._currentSubMenu;
	}
	,get_parentMenu: function() {
		return this._parentMenu;
	}
	,get_rootMenu: function() {
		var menu = this;
		while(menu._parentMenu != null) menu = menu._parentMenu;
		return menu;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_containers_VBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_Menu();
	}
	,__class__: haxe_ui_toolkit_controls_Menu
	,__properties__: $extend(haxe_ui_toolkit_containers_VBox.prototype.__properties__,{get_rootMenu:"get_rootMenu",get_parentMenu:"get_parentMenu",get_currentSubMenu:"get_currentSubMenu"})
});
var haxe_ui_toolkit_controls_MenuButton = function() {
	haxe_ui_toolkit_controls_Button.call(this);
	this.set_toggle(true);
	this.set_allowSelection(false);
};
$hxClasses["haxe.ui.toolkit.controls.MenuButton"] = haxe_ui_toolkit_controls_MenuButton;
haxe_ui_toolkit_controls_MenuButton.__name__ = ["haxe","ui","toolkit","controls","MenuButton"];
haxe_ui_toolkit_controls_MenuButton._currentMenuButton = null;
haxe_ui_toolkit_controls_MenuButton.__super__ = haxe_ui_toolkit_controls_Button;
haxe_ui_toolkit_controls_MenuButton.prototype = $extend(haxe_ui_toolkit_controls_Button.prototype,{
	initialize: function() {
		haxe_ui_toolkit_controls_Button.prototype.initialize.call(this);
		if(this._menu != null) {
			this._menu.addEventListener(haxe_ui_toolkit_events_MenuEvent.SELECT,$bind(this,this._onMenuSelect));
			this._menu.addEventListener(haxe_ui_toolkit_events_MenuEvent.OPEN,$bind(this,this._onMenuOpen));
		}
	}
	,addChild: function(child) {
		var r = null;
		if(js_Boot.__instanceof(child,haxe_ui_toolkit_controls_MenuItem)) {
			if(this._menu == null) {
				this._menu = new haxe_ui_toolkit_controls_Menu();
				this._menu.set_root(this.get_root());
			}
			this._menu.addChild(child);
		} else if(js_Boot.__instanceof(child,haxe_ui_toolkit_controls_Menu)) this._menu = js_Boot.__cast(child , haxe_ui_toolkit_controls_Menu); else r = haxe_ui_toolkit_controls_Button.prototype.addChild.call(this,child);
		return r;
	}
	,_onMouseOver: function(event) {
		haxe_ui_toolkit_controls_Button.prototype._onMouseOver.call(this,event);
		if(haxe_ui_toolkit_controls_MenuButton._currentMenuButton != null && haxe_ui_toolkit_controls_MenuButton._currentMenuButton != this) {
			haxe_ui_toolkit_controls_MenuButton._currentMenuButton.hideMenu();
			this.showMenu();
		}
	}
	,_onMouseClick: function(event) {
		if(this.get_root().indexOfChild(this._menu) == -1) this.showMenu(); else this.hideMenu();
	}
	,set_selected: function(value) {
		this._selected = value;
		if(this._selected == true) this.set_state("down"); else this.set_state("normal");
		return value;
	}
	,_onRootMouseDown: function(event) {
		var mouseIn = false;
		if(this.hitTest(event.stageX,event.stageY) == true) mouseIn = true;
		if(this._menu != null && this._menu.hitTest(event.stageX,event.stageY) == true) mouseIn = true;
		if(this._menu != null && mouseIn == false) {
			var menu = this._menu.get_rootMenu();
			while(menu != null) {
				if(menu.hitTest(event.stageX,event.stageY) == true) {
					mouseIn = true;
					break;
				}
				menu = menu.get_currentSubMenu();
			}
		}
		if(this._menu != null && mouseIn == false) this.hideMenu();
	}
	,_onMenuSelect: function(event) {
		this.hideMenu();
		var e = new haxe_ui_toolkit_events_MenuEvent(haxe_ui_toolkit_events_MenuEvent.SELECT,event.menuItem);
		this.dispatchEvent(e);
		var uiEvent = new haxe_ui_toolkit_events_UIEvent("haxeui_" + "menuSelect",event.menuItem);
		this.dispatchEvent(uiEvent);
	}
	,_onMenuOpen: function(event) {
		var e = new haxe_ui_toolkit_events_MenuEvent(haxe_ui_toolkit_events_MenuEvent.OPEN);
		e.menu = event.menu;
		this.dispatchEvent(e);
	}
	,showMenu: function() {
		var _g = this;
		this.set_selected(true);
		this._menu.set_x(this.get_stageX() - this.get_root().get_stageX());
		this._menu.set_y(this.get_stageY() + this.get_height() - this.get_root().get_stageY());
		this.get_root().addChild(this._menu);
		this.get_root().addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._onRootMouseDown));
		haxe_ui_toolkit_controls_MenuButton._currentMenuButton = this;
		var transition = haxe_ui_toolkit_core_Toolkit.getTransitionForClass(haxe_ui_toolkit_controls_Menu);
		var transitionTime = haxe_ui_toolkit_core_Toolkit.getTransitionTimeForClass(haxe_ui_toolkit_controls_Menu);
		if(transition == "slide") {
			this._menu.set_clipHeight(0);
			this._menu.get_sprite().set_alpha(1);
			this._menu.set_visible(true);
			motion_Actuate.tween(this._menu,transitionTime,{ clipHeight : this._menu.get_height()},true).ease(motion_easing_Quart.get_easeOut()).onComplete(function() {
				_g._menu.clearClip();
			});
		} else if(transition == "fade") {
			this._menu.get_sprite().set_alpha(0);
			this._menu.set_visible(true);
			motion_Actuate.tween(this._menu.get_sprite(),transitionTime,{ alpha : 1},true).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			});
		} else {
			this._menu.get_sprite().set_alpha(1);
			this._menu.set_visible(true);
		}
		var event = new haxe_ui_toolkit_events_MenuEvent(haxe_ui_toolkit_events_MenuEvent.OPEN);
		event.menu = this._menu;
		this.dispatchEvent(event);
	}
	,hideMenu: function() {
		var _g = this;
		this.set_selected(false);
		this._menu.hideSubMenus();
		this.get_root().removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._onRootMouseDown));
		var transition = haxe_ui_toolkit_core_Toolkit.getTransitionForClass(haxe_ui_toolkit_controls_Menu);
		var transitionTime = haxe_ui_toolkit_core_Toolkit.getTransitionTimeForClass(haxe_ui_toolkit_controls_Menu);
		if(transition == "slide") {
			this._menu.get_sprite().set_alpha(1);
			motion_Actuate.tween(this._menu,transitionTime,{ clipHeight : 0},true).ease(motion_easing_Quart.get_easeOut()).onComplete(function() {
				_g._menu.set_visible(false);
				_g._menu.clearClip();
				_g.get_root().removeChild(_g._menu,false);
			});
		} else if(transition == "fade") motion_Actuate.tween(this._menu.get_sprite(),transitionTime,{ alpha : 0},true).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			_g._menu.set_visible(false);
			_g.get_root().removeChild(_g._menu,false);
		}); else {
			this._menu.get_sprite().set_alpha(1);
			this._menu.set_visible(false);
			this.get_root().removeChild(this._menu,false);
		}
		haxe_ui_toolkit_controls_MenuButton._currentMenuButton = null;
		this.set_selected(false);
	}
	,clone: function() {
		var c = haxe_ui_toolkit_controls_Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_MenuButton();
	}
	,__class__: haxe_ui_toolkit_controls_MenuButton
});
var haxe_ui_toolkit_controls_MenuItem = function() {
	haxe_ui_toolkit_controls_Button.call(this);
	this.set_toggle(true);
	this.set_allowSelection(false);
};
$hxClasses["haxe.ui.toolkit.controls.MenuItem"] = haxe_ui_toolkit_controls_MenuItem;
haxe_ui_toolkit_controls_MenuItem.__name__ = ["haxe","ui","toolkit","controls","MenuItem"];
haxe_ui_toolkit_controls_MenuItem.__super__ = haxe_ui_toolkit_controls_Button;
haxe_ui_toolkit_controls_MenuItem.prototype = $extend(haxe_ui_toolkit_controls_Button.prototype,{
	set_selected: function(value) {
		this._selected = value;
		if(this._selected == true) this.set_state("down"); else this.set_state("normal");
		return value;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_controls_Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_MenuItem();
	}
	,__class__: haxe_ui_toolkit_controls_MenuItem
});
var haxe_ui_toolkit_controls_MenuSeparator = function() {
	haxe_ui_toolkit_core_Component.call(this);
	this.set_layout(new haxe_ui_toolkit_layout_VerticalLayout());
};
$hxClasses["haxe.ui.toolkit.controls.MenuSeparator"] = haxe_ui_toolkit_controls_MenuSeparator;
haxe_ui_toolkit_controls_MenuSeparator.__name__ = ["haxe","ui","toolkit","controls","MenuSeparator"];
haxe_ui_toolkit_controls_MenuSeparator.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_controls_MenuSeparator.__super__ = haxe_ui_toolkit_core_Component;
haxe_ui_toolkit_controls_MenuSeparator.prototype = $extend(haxe_ui_toolkit_core_Component.prototype,{
	initialize: function() {
		haxe_ui_toolkit_core_Component.prototype.initialize.call(this);
		this._line = new haxe_ui_toolkit_core_Component();
		this._line.set_id("line");
		this._line.set_percentWidth(100);
		this.addChild(this._line);
	}
	,clone: function() {
		var c = haxe_ui_toolkit_core_Component.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_MenuSeparator();
	}
	,__class__: haxe_ui_toolkit_controls_MenuSeparator
});
var haxe_ui_toolkit_controls_OptionBox = function() {
	this._down = false;
	haxe_ui_toolkit_core_StateComponent.call(this);
	this.get_sprite().buttonMode = true;
	this.get_sprite().useHandCursor = true;
	if(haxe_ui_toolkit_controls_OptionBox._groups == null) haxe_ui_toolkit_controls_OptionBox._groups = new haxe_ds_StringMap();
	this._value = new haxe_ui_toolkit_controls_OptionBoxValue();
	this._value.set_interactive(false);
	this._label = new haxe_ui_toolkit_controls_Text();
	this._layout = new haxe_ui_toolkit_layout_HorizontalLayout();
	this._autoSize = true;
};
$hxClasses["haxe.ui.toolkit.controls.OptionBox"] = haxe_ui_toolkit_controls_OptionBox;
haxe_ui_toolkit_controls_OptionBox.__name__ = ["haxe","ui","toolkit","controls","OptionBox"];
haxe_ui_toolkit_controls_OptionBox.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_controls_OptionBox._groups = null;
haxe_ui_toolkit_controls_OptionBox.optionInGroup = function(value,option) {
	var exists = false;
	var arr = haxe_ui_toolkit_controls_OptionBox._groups.get(value);
	if(arr != null) {
		var _g = 0;
		while(_g < arr.length) {
			var test = arr[_g];
			++_g;
			if(test == option) {
				exists = true;
				break;
			}
		}
	}
	return exists;
};
haxe_ui_toolkit_controls_OptionBox.__super__ = haxe_ui_toolkit_core_StateComponent;
haxe_ui_toolkit_controls_OptionBox.prototype = $extend(haxe_ui_toolkit_core_StateComponent.prototype,{
	dispose: function() {
		if(this.get_group() != null) {
			var arr = haxe_ui_toolkit_controls_OptionBox._groups.get(this._group);
			HxOverrides.remove(arr,this);
		}
		haxe_ui_toolkit_core_StateComponent.prototype.dispose.call(this);
	}
	,initialize: function() {
		var _g = this;
		haxe_ui_toolkit_core_StateComponent.prototype.initialize.call(this);
		this._value.set_verticalAlign("center");
		this.addChild(this._value);
		this.addChild(this._label);
		this.addEventListener(openfl_events_MouseEvent.CLICK,function(e) {
			if(_g.get_selected() == false) _g.set_selected(!_g.get_selected());
		});
		this.addEventListener(openfl_events_MouseEvent.MOUSE_OVER,$bind(this,this._onMouseOver));
		this.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this._onMouseOut));
		this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._onMouseDown));
		this.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
	}
	,_onMouseOver: function(event) {
		if(event.buttonDown == false) this.set_state("over"); else if(this._down == true) this.set_state("down");
	}
	,_onMouseOut: function(event) {
		if(event.buttonDown == false) this.set_state("normal"); else {
		}
	}
	,_onMouseDown: function(event) {
		this._down = true;
		this.set_state("down");
		haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
	}
	,_onMouseUp: function(event) {
		this._down = false;
		if(this.hitTest(event.stageX,event.stageY)) this.set_state("over"); else this.set_state("normal");
		haxe_ui_toolkit_core_Screen.get_instance().removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
	}
	,get_text: function() {
		return this._label.get_text();
	}
	,set_text: function(value) {
		value = haxe_ui_toolkit_core_StateComponent.prototype.set_text.call(this,value);
		this._label.set_text(value);
		return value;
	}
	,get_selected: function() {
		return this._value.get_value() == "selected";
	}
	,set_selected: function(value) {
		if(this.get_selected() == value) return value;
		if(this._group != null && value == false) {
			var arr = haxe_ui_toolkit_controls_OptionBox._groups.get(this._group);
			var hasSelection = false;
			if(arr != null) {
				var _g = 0;
				while(_g < arr.length) {
					var option = arr[_g];
					++_g;
					if(option != this && option.get_selected() == true) {
						hasSelection = true;
						break;
					}
				}
			}
			if(hasSelection == false) return value;
		}
		this._value.set_value(value == true?"selected":"unselected");
		if(this._group != null && value == true) {
			var arr1 = haxe_ui_toolkit_controls_OptionBox._groups.get(this._group);
			if(arr1 != null) {
				var _g1 = 0;
				while(_g1 < arr1.length) {
					var option1 = arr1[_g1];
					++_g1;
					if(option1 != this) option1.set_selected(false);
				}
			}
		}
		var event = new openfl_events_Event(openfl_events_Event.CHANGE);
		this.dispatchEvent(event);
		return value;
	}
	,get_group: function() {
		return this._group;
	}
	,set_group: function(value) {
		if(value != null) {
			var arr1 = haxe_ui_toolkit_controls_OptionBox._groups.get(value);
			if(arr1 != null) HxOverrides.remove(arr1,this);
		}
		this._group = value;
		var arr = haxe_ui_toolkit_controls_OptionBox._groups.get(value);
		if(arr == null) arr = [];
		if(haxe_ui_toolkit_controls_OptionBox.optionInGroup(value,this) == false) arr.push(this);
		haxe_ui_toolkit_controls_OptionBox._groups.set(value,arr);
		return value;
	}
	,applyStyle: function() {
		haxe_ui_toolkit_core_StateComponent.prototype.applyStyle.call(this);
		if(this._label != null) {
			var labelStyle = new haxe_ui_toolkit_style_Style();
			if(this._baseStyle != null) {
				labelStyle.set_fontName(this._baseStyle.get_fontName());
				labelStyle.set_fontSize(this._baseStyle.get_fontSize());
				labelStyle.set_fontEmbedded(this._baseStyle.get_fontEmbedded());
				labelStyle.set_color(this._baseStyle.get_color());
			}
			this._label.set_baseStyle(labelStyle);
		}
	}
	,get_states: function() {
		return ["normal","over","down"];
	}
	,clone: function() {
		var c = haxe_ui_toolkit_core_StateComponent.prototype.clone.call(this);
		c.set_selected(this.get_selected());
		c.set_group(this.get_group());
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_OptionBox();
	}
	,__class__: haxe_ui_toolkit_controls_OptionBox
	,__properties__: $extend(haxe_ui_toolkit_core_StateComponent.prototype.__properties__,{set_group:"set_group",get_group:"get_group",set_selected:"set_selected",get_selected:"get_selected"})
});
var haxe_ui_toolkit_controls_OptionBoxValue = function() {
	haxe_ui_toolkit_controls_Value.call(this);
	this._value = "unselected";
	this.addValue("selected");
	this.addValue("unselected");
};
$hxClasses["haxe.ui.toolkit.controls.OptionBoxValue"] = haxe_ui_toolkit_controls_OptionBoxValue;
haxe_ui_toolkit_controls_OptionBoxValue.__name__ = ["haxe","ui","toolkit","controls","OptionBoxValue"];
haxe_ui_toolkit_controls_OptionBoxValue.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_controls_OptionBoxValue.__super__ = haxe_ui_toolkit_controls_Value;
haxe_ui_toolkit_controls_OptionBoxValue.prototype = $extend(haxe_ui_toolkit_controls_Value.prototype,{
	clone: function() {
		var c = haxe_ui_toolkit_controls_Value.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_OptionBoxValue();
	}
	,__class__: haxe_ui_toolkit_controls_OptionBoxValue
});
var haxe_ui_toolkit_controls_HProgressLayout = function() {
	haxe_ui_toolkit_layout_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.HProgressLayout"] = haxe_ui_toolkit_controls_HProgressLayout;
haxe_ui_toolkit_controls_HProgressLayout.__name__ = ["haxe","ui","toolkit","controls","HProgressLayout"];
haxe_ui_toolkit_controls_HProgressLayout.__super__ = haxe_ui_toolkit_layout_DefaultLayout;
haxe_ui_toolkit_controls_HProgressLayout.prototype = $extend(haxe_ui_toolkit_layout_DefaultLayout.prototype,{
	resizeChildren: function() {
		haxe_ui_toolkit_layout_DefaultLayout.prototype.resizeChildren.call(this);
		var background = this.get_container().findChild("background",haxe_ui_toolkit_core_Component);
		var value = null;
		if(background != null) value = background.findChild("value");
		var scroll;
		scroll = js_Boot.__cast(this.get_container() , haxe_ui_toolkit_core_interfaces_IScrollable);
		if(value != null) {
			var ucx = this.get_usableWidth();
			var thumb = this.get_container().findChild("thumb");
			if(thumb != null) ucx -= thumb.get_width();
			value.set_percentWidth(-1);
			var cx = (scroll.get_pos() - scroll.get_min()) / (scroll.get_max() - scroll.get_min()) * ucx;
			if(cx < 0) cx = 0; else if(cx > ucx) cx = ucx;
			if(thumb != null) cx += thumb.get_width() / 2;
			if(cx == 0) value.set_visible(false); else {
				value.set_width(cx);
				value.set_visible(true);
			}
		}
	}
	,repositionChildren: function() {
		haxe_ui_toolkit_layout_DefaultLayout.prototype.repositionChildren.call(this);
		var background = this.get_container().findChild("background",haxe_ui_toolkit_core_Component);
		var value = null;
		if(background != null) {
			background.set_y(this.get_container().get_height() / 2 - background.get_height() / 2);
			value = background.findChild("value");
		}
		var scroll;
		scroll = js_Boot.__cast(this.get_container() , haxe_ui_toolkit_core_interfaces_IScrollable);
		if(value != null) {
			var thumb = this.get_container().findChild("thumb");
			if(thumb != null) {
				var xpos = this.get_padding().get_left() + value.get_x() + value.get_width() - thumb.get_width() / 2;
				thumb.set_x(xpos | 0);
			}
		}
	}
	,clone: function() {
		var c = haxe_ui_toolkit_layout_DefaultLayout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_HProgressLayout();
	}
	,__class__: haxe_ui_toolkit_controls_HProgressLayout
});
var haxe_ui_toolkit_controls_VProgressLayout = function() {
	haxe_ui_toolkit_layout_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.VProgressLayout"] = haxe_ui_toolkit_controls_VProgressLayout;
haxe_ui_toolkit_controls_VProgressLayout.__name__ = ["haxe","ui","toolkit","controls","VProgressLayout"];
haxe_ui_toolkit_controls_VProgressLayout.__super__ = haxe_ui_toolkit_layout_DefaultLayout;
haxe_ui_toolkit_controls_VProgressLayout.prototype = $extend(haxe_ui_toolkit_layout_DefaultLayout.prototype,{
	resizeChildren: function() {
		haxe_ui_toolkit_layout_DefaultLayout.prototype.resizeChildren.call(this);
		var background = this.get_container().findChild("background",haxe_ui_toolkit_core_Component);
		var value = null;
		if(background != null) value = background.findChild("value");
		var scroll;
		scroll = js_Boot.__cast(this.get_container() , haxe_ui_toolkit_core_interfaces_IScrollable);
		if(value != null) {
			var ucy = this.get_usableHeight();
			var thumb = this.get_container().findChild("thumb");
			if(thumb != null) ucy -= thumb.get_height();
			value.set_percentHeight(-1);
			var cy = (scroll.get_pos() - scroll.get_min()) / (scroll.get_max() - scroll.get_min()) * ucy;
			if(cy < 0) cy = 0; else if(cy > ucy) cy = ucy;
			if(thumb != null) cy += thumb.get_height() / 2;
			if(cy == 0) value.set_visible(false); else {
				value.set_height(cy);
				value.set_visible(true);
			}
		}
	}
	,repositionChildren: function() {
		haxe_ui_toolkit_layout_DefaultLayout.prototype.repositionChildren.call(this);
		var background = this.get_container().findChild("background",haxe_ui_toolkit_core_Component);
		var value = null;
		if(background != null) {
			background.set_x(this.get_container().get_width() / 2 - background.get_width() / 2);
			value = background.findChild("value");
		}
		var scroll;
		scroll = js_Boot.__cast(this.get_container() , haxe_ui_toolkit_core_interfaces_IScrollable);
		if(value != null) {
			var ucy = this.get_usableHeight();
			value.set_y(ucy - value.get_height() - background.get_layout().get_padding().get_bottom());
			var thumb = this.get_container().findChild("thumb");
			if(thumb != null) {
				var ypos = this.get_padding().get_top() + value.get_y() - thumb.get_height() / 2;
				thumb.set_y(ypos | 0);
			}
		}
	}
	,clone: function() {
		var c = haxe_ui_toolkit_layout_DefaultLayout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_VProgressLayout();
	}
	,__class__: haxe_ui_toolkit_controls_VProgressLayout
});
var haxe_ui_toolkit_controls_Spacer = function() {
	haxe_ui_toolkit_core_Component.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.Spacer"] = haxe_ui_toolkit_controls_Spacer;
haxe_ui_toolkit_controls_Spacer.__name__ = ["haxe","ui","toolkit","controls","Spacer"];
haxe_ui_toolkit_controls_Spacer.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_controls_Spacer.__super__ = haxe_ui_toolkit_core_Component;
haxe_ui_toolkit_controls_Spacer.prototype = $extend(haxe_ui_toolkit_core_Component.prototype,{
	clone: function() {
		var c = haxe_ui_toolkit_core_Component.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_Spacer();
	}
	,__class__: haxe_ui_toolkit_controls_Spacer
});
var haxe_ui_toolkit_controls_TabBar = function() {
	this._selectedIndex = -1;
	haxe_ui_toolkit_containers_ScrollView.call(this);
	this.set_autoSize(false);
	this._scrollSensitivity = 5;
	this._showHScroll = this._showVScroll = false;
	this._content = new haxe_ui_toolkit_containers_HBox();
	this._content.set_id("content");
	this._content.set_percentHeight(100);
	this._content.addEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this._onMouseWheel));
	this.addChild(this._content);
};
$hxClasses["haxe.ui.toolkit.controls.TabBar"] = haxe_ui_toolkit_controls_TabBar;
haxe_ui_toolkit_controls_TabBar.__name__ = ["haxe","ui","toolkit","controls","TabBar"];
haxe_ui_toolkit_controls_TabBar.__super__ = haxe_ui_toolkit_containers_ScrollView;
haxe_ui_toolkit_controls_TabBar.prototype = $extend(haxe_ui_toolkit_containers_ScrollView.prototype,{
	initialize: function() {
		haxe_ui_toolkit_containers_ScrollView.prototype.initialize.call(this);
	}
	,get_selectedIndex: function() {
		return this._selectedIndex;
	}
	,set_selectedIndex: function(value) {
		if(value != this._selectedIndex) {
			var _g1 = 0;
			var _g = this._content.get_children().length;
			while(_g1 < _g) {
				var n = _g1++;
				var button;
				button = js_Boot.__cast(this._content.get_children()[n] , haxe_ui_toolkit_controls_Button);
				if(n == value) button.set_selected(true); else button.set_selected(false);
			}
			this._selectedIndex = value;
			var event = new openfl_events_Event(openfl_events_Event.CHANGE);
			this.dispatchEvent(event);
		}
		return value;
	}
	,get_numTabs: function() {
		return this._content.get_numChildren();
	}
	,addTab: function(text) {
		var _g = this;
		var button = new haxe_ui_toolkit_controls_Button();
		button.set_text(text);
		button.set_toggle(true);
		button.set_id("tabButton");
		button.set_verticalAlign("bottom");
		button.set_allowSelection(false);
		this._content.addChild(button);
		button.set_selected(this._content.get_children().length - 1 == this._selectedIndex);
		button.addEventListener("haxeui_" + "click",$bind(this,this.tabButtonClick),false,1);
		button.addEventListener("haxeui_" + "glyphClick",$bind(this,this.tabGlyphClick));
		button.addEventListener(openfl_events_Event.ADDED_TO_STAGE,function(e) {
			var cy = _g.get_height();
			var newCY = button.get_height() + _g.get_baseStyle().get_paddingTop() + _g.get_baseStyle().get_paddingBottom();
			if(newCY > cy) _g.set_height(newCY);
			button.removeEventListenerType(openfl_events_Event.ADDED_TO_STAGE);
		});
		return button;
	}
	,removeTab: function(index) {
		this._content.removeChildAt(index);
		var newIndex = this.get_selectedIndex();
		if(newIndex > this._content.get_numChildren() - 1) newIndex = this._content.get_numChildren() - 1;
		this.set_selectedIndex(-1);
		this.set_selectedIndex(newIndex);
	}
	,getTabButton: function(index) {
		return this._content.getChildAt(index);
	}
	,removeAllTabs: function() {
		this._content.removeAllChildren();
		this._selectedIndex = -1;
	}
	,setTabText: function(index,text) {
		var button;
		button = js_Boot.__cast(this._content.getChildAt(index) , haxe_ui_toolkit_controls_Button);
		button.set_text(text);
	}
	,tabButtonClick: function(event) {
		this.set_selectedIndex(this._content.indexOfChild(event.displayObject));
	}
	,tabGlyphClick: function(event) {
		var newEvent = new haxe_ui_toolkit_events_UIEvent("haxeui_" + "glyphClick");
		newEvent.data = this._content.indexOfChild(event.displayObject);
		this.dispatchEvent(newEvent);
	}
	,_onMouseWheel: function(event) {
		if(this._hscroll != null && this._content.get_width() > this.get_layout().get_usableWidth()) {
			if(event.delta != 0) {
				if(event.delta < 0) this._hscroll.incrementValue(); else if(event.delta > 0) this._hscroll.deincrementValue();
			}
		}
	}
	,clone: function() {
		var c = haxe_ui_toolkit_containers_ScrollView.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_TabBar();
	}
	,__class__: haxe_ui_toolkit_controls_TabBar
	,__properties__: $extend(haxe_ui_toolkit_containers_ScrollView.prototype.__properties__,{get_numTabs:"get_numTabs",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex"})
});
var haxe_ui_toolkit_controls_TextInputLayout = function() {
	haxe_ui_toolkit_layout_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.TextInputLayout"] = haxe_ui_toolkit_controls_TextInputLayout;
haxe_ui_toolkit_controls_TextInputLayout.__name__ = ["haxe","ui","toolkit","controls","TextInputLayout"];
haxe_ui_toolkit_controls_TextInputLayout.__super__ = haxe_ui_toolkit_layout_DefaultLayout;
haxe_ui_toolkit_controls_TextInputLayout.prototype = $extend(haxe_ui_toolkit_layout_DefaultLayout.prototype,{
	resizeChildren: function() {
		haxe_ui_toolkit_layout_DefaultLayout.prototype.resizeChildren.call(this);
		if(this.get_container().get_sprite().get_numChildren() > 0) {
			var vscroll = this.get_container().findChildAs(haxe_ui_toolkit_controls_VScroll);
			var text = this.findTextField();
			if(text != null) {
				text.set_x(this.get_padding().get_left());
				if(text.get_multiline() == true) {
					text.set_y(this.get_padding().get_top());
					text.set_height(this.get_usableHeight());
				} else {
					text.set_height(text.get_defaultTextFormat().size + 8);
					text.set_y(this.get_container().get_height() / 2 - text.get_height() / 2);
				}
				text.set_width(this.get_usableWidth());
				var placeholder = this.get_container().findChild("placeholder");
				if(placeholder != null) {
					placeholder.set_width(text.get_width());
					placeholder.set_height(text.get_height());
				}
			}
		}
	}
	,repositionChildren: function() {
		haxe_ui_toolkit_layout_DefaultLayout.prototype.repositionChildren.call(this);
		var vscroll = this.get_container().findChildAs(haxe_ui_toolkit_controls_VScroll);
		if(vscroll != null) vscroll.set_x(this.get_container().get_width() - vscroll.get_width() - this.get_padding().get_right());
		var hscroll = this.get_container().findChildAs(haxe_ui_toolkit_controls_HScroll);
		if(hscroll != null) hscroll.set_y(this.get_container().get_height() - hscroll.get_height() - this.get_padding().get_bottom());
		var text = this.findTextField();
		var placeholder = this.get_container().findChild("placeholder");
		if(text != null && placeholder != null) {
			placeholder.set_x(text.get_x());
			placeholder.set_y(text.get_y() + 1);
		}
	}
	,get_usableWidth: function() {
		var ucx = this.get_innerWidth();
		var vscroll = this.get_container().findChildAs(haxe_ui_toolkit_controls_VScroll);
		if(vscroll != null && vscroll.get_visible() == true) ucx -= vscroll.get_width() + this.get_spacingX();
		return ucx;
	}
	,get_usableHeight: function() {
		var ucy = this.get_innerHeight();
		var hscroll = this.get_container().findChildAs(haxe_ui_toolkit_controls_HScroll);
		if(hscroll != null && hscroll.get_visible() == true) ucy -= hscroll.get_height() - this.get_spacingY();
		return ucy;
	}
	,findTextField: function() {
		var tf = null;
		var _g1 = 0;
		var _g = this.get_container().get_sprite().get_numChildren();
		while(_g1 < _g) {
			var i = _g1++;
			var child = this.get_container().get_sprite().getChildAt(i);
			if(js_Boot.__instanceof(child,openfl_text_TextField)) {
				tf = js_Boot.__cast(child , openfl_text_TextField);
				break;
			}
		}
		return tf;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_layout_DefaultLayout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_TextInputLayout();
	}
	,__class__: haxe_ui_toolkit_controls_TextInputLayout
});
var haxe_ui_toolkit_controls_ToolTip = function() {
	this.options = null;
	this.component = null;
	haxe_ui_toolkit_containers_Box.call(this);
	this._autoSize = true;
	this._textField = new haxe_ui_toolkit_controls_Text();
	this._textField.set_text("");
	this.addChild(this._textField);
};
$hxClasses["haxe.ui.toolkit.controls.ToolTip"] = haxe_ui_toolkit_controls_ToolTip;
haxe_ui_toolkit_controls_ToolTip.__name__ = ["haxe","ui","toolkit","controls","ToolTip"];
haxe_ui_toolkit_controls_ToolTip.__super__ = haxe_ui_toolkit_containers_Box;
haxe_ui_toolkit_controls_ToolTip.prototype = $extend(haxe_ui_toolkit_containers_Box.prototype,{
	set_text: function(value) {
		value = haxe_ui_toolkit_containers_Box.prototype.set_text.call(this,value);
		this._textField.set_text(value);
		return value;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_containers_Box.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_ToolTip();
	}
	,__class__: haxe_ui_toolkit_controls_ToolTip
});
var haxe_ui_toolkit_controls_VProgress = function() {
	haxe_ui_toolkit_controls_Progress.call(this);
	this.set_direction("vertical");
};
$hxClasses["haxe.ui.toolkit.controls.VProgress"] = haxe_ui_toolkit_controls_VProgress;
haxe_ui_toolkit_controls_VProgress.__name__ = ["haxe","ui","toolkit","controls","VProgress"];
haxe_ui_toolkit_controls_VProgress.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_controls_VProgress.__super__ = haxe_ui_toolkit_controls_Progress;
haxe_ui_toolkit_controls_VProgress.prototype = $extend(haxe_ui_toolkit_controls_Progress.prototype,{
	clone: function() {
		var c = haxe_ui_toolkit_controls_Progress.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_VProgress();
	}
	,__class__: haxe_ui_toolkit_controls_VProgress
});
var haxe_ui_toolkit_controls_VScroll = function() {
	this._hasButtons = true;
	this._scrollDirection = 0;
	this._mouseDownOffset = -1;
	this._incrementSize = 20;
	this._pageSize = 0;
	this._max = 100;
	this._min = 0;
	this._pos = 0;
	haxe_ui_toolkit_controls_Scroll.call(this);
	this._layout = new haxe_ui_toolkit_controls_VScrollLayout();
};
$hxClasses["haxe.ui.toolkit.controls.VScroll"] = haxe_ui_toolkit_controls_VScroll;
haxe_ui_toolkit_controls_VScroll.__name__ = ["haxe","ui","toolkit","controls","VScroll"];
haxe_ui_toolkit_controls_VScroll.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable,haxe_ui_toolkit_core_interfaces_IScrollable];
haxe_ui_toolkit_controls_VScroll.__super__ = haxe_ui_toolkit_controls_Scroll;
haxe_ui_toolkit_controls_VScroll.prototype = $extend(haxe_ui_toolkit_controls_Scroll.prototype,{
	preInitialize: function() {
		haxe_ui_toolkit_controls_Scroll.prototype.preInitialize.call(this);
		if(this._baseStyle != null) this._hasButtons = this._baseStyle.get_hasButtons();
	}
	,initialize: function() {
		haxe_ui_toolkit_controls_Scroll.prototype.initialize.call(this);
		if(this._hasButtons == true) {
			this._deincButton = new haxe_ui_toolkit_controls_Button();
			this._deincButton.set_autoSize(false);
			this._deincButton.set_iconPosition("center");
			this._deincButton.set_percentWidth(100);
			this._deincButton.set_height(this.get_layout().get_innerWidth());
			this._deincButton.set_id("deinc");
			this._deincButton.set_styleName("up");
			this._deincButton.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._onDeinc));
			this.addChild(this._deincButton);
			this._incButton = new haxe_ui_toolkit_controls_Button();
			this._incButton.set_autoSize(false);
			this._incButton.set_iconPosition("center");
			this._incButton.set_percentWidth(100);
			this._incButton.set_height(this.get_layout().get_innerWidth());
			this._incButton.set_id("inc");
			this._incButton.set_styleName("down");
			this._incButton.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._onInc));
			this.addChild(this._incButton);
		}
		this._thumb = new haxe_ui_toolkit_controls_Button();
		this._thumb.set_iconPosition("center");
		this._thumb.set_autoSize(false);
		this._thumb.set_percentWidth(100);
		this._thumb.set_height(50);
		this._thumb.set_id("thumb");
		this._thumb.set_styleName("thumb");
		this._thumb.set_remainPressed(true);
		this._thumb.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._onThumbMouseDown));
		this.addChild(this._thumb);
		this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._onMouseDown));
	}
	,_onThumbMouseDown: function(event) {
		var ptStage = new openfl_geom_Point(event.stageX,event.stageY);
		this._mouseDownOffset = ptStage.y - this._thumb.get_y();
		haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
		this.dispatchEvent(new haxe_ui_toolkit_events_UIEvent("haxeui_" + "scrollStart"));
		event.stopImmediatePropagation();
		event.stopPropagation();
	}
	,_onScreenMouseMove: function(event) {
		var ypos = event.stageY - this._mouseDownOffset;
		var minY = 0;
		if(this._deincButton != null) minY = this._deincButton.get_height() + this.get_layout().get_spacingY();
		var maxY = this.get_layout().get_usableHeight() - this._thumb.get_height();
		if(this._deincButton != null) maxY += this._deincButton.get_height() + this.get_layout().get_spacingY();
		if(ypos < minY) ypos = minY; else if(ypos > maxY) ypos = maxY;
		var ucy = this.get_layout().get_usableHeight();
		ucy -= this._thumb.get_height();
		var m = Std["int"](this.get_max() - this.get_min());
		var v = ypos - minY;
		var newValue = this.get_min() + v / ucy * m;
		this.set_pos(newValue | 0);
	}
	,_onScreenMouseUp: function(event) {
		this._mouseDownOffset = -1;
		if(this._scrollTimer != null) this._scrollTimer.stop();
		this.dispatchEvent(new haxe_ui_toolkit_events_UIEvent("haxeui_" + "scrollStop"));
		haxe_ui_toolkit_core_Screen.get_instance().removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		haxe_ui_toolkit_core_Screen.get_instance().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
	}
	,_onDeinc: function(event) {
		this.dispatchEvent(new haxe_ui_toolkit_events_UIEvent("haxeui_" + "scrollStart"));
		this.deincrementValue();
		this._scrollDirection = 0;
		haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		if(this._scrollTimer == null) {
			this._scrollTimer = new openfl_utils_Timer(50,1);
			this._scrollTimer.addEventListener(openfl_events_TimerEvent.TIMER_COMPLETE,$bind(this,this._onScrollTimerComplete));
		}
		this._scrollTimer.reset();
		this._scrollTimer.start();
		event.stopImmediatePropagation();
		event.stopPropagation();
	}
	,_onInc: function(event) {
		this.dispatchEvent(new haxe_ui_toolkit_events_UIEvent("haxeui_" + "scrollStart"));
		this.incrementValue();
		this._scrollDirection = 1;
		haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		if(this._scrollTimer == null) {
			this._scrollTimer = new openfl_utils_Timer(50,1);
			this._scrollTimer.addEventListener(openfl_events_TimerEvent.TIMER_COMPLETE,$bind(this,this._onScrollTimerComplete));
		}
		this._scrollTimer.reset();
		this._scrollTimer.start();
		event.stopImmediatePropagation();
		event.stopPropagation();
	}
	,_onScrollTimerComplete: function(event) {
		if(this._scrollTimer != null) {
			if(this._scrollDirection == 1) this.incrementValue(); else if(this._scrollDirection == 0) this.deincrementValue();
			this._scrollTimer.reset();
			this._scrollTimer.start();
		}
	}
	,_onMouseDown: function(event) {
		this.dispatchEvent(new haxe_ui_toolkit_events_UIEvent("haxeui_" + "scrollStart"));
		if(event.localY > this._thumb.get_y()) {
			var _g = this;
			_g.set_pos(_g.get_pos() + this.get_pageSize());
		} else {
			var _g1 = this;
			_g1.set_pos(_g1.get_pos() - this.get_pageSize());
		}
		this.dispatchEvent(new haxe_ui_toolkit_events_UIEvent("haxeui_" + "scrollStop"));
	}
	,get_pos: function() {
		return this._pos;
	}
	,set_pos: function(value) {
		if(value < this._min) value = this._min;
		if(value > this._max) value = this._max;
		if(value != this._pos) {
			this._pos = value;
			this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
			this.dispatchEvent(new haxe_ui_toolkit_events_UIEvent("haxeui_" + "scroll"));
			this.invalidate(1);
		}
		return value;
	}
	,get_min: function() {
		return this._min;
	}
	,set_min: function(value) {
		if(value != this._min) {
			this._min = value;
			if(this._pos < this._min) this._pos = this._min;
			this.invalidate(1);
		}
		return value;
	}
	,get_max: function() {
		return this._max;
	}
	,set_max: function(value) {
		if(value != this._max) {
			this._max = value;
			if(this._pos > this._max) this._pos = this._max;
			this.invalidate(1);
		}
		return value;
	}
	,get_pageSize: function() {
		return this._pageSize;
	}
	,set_pageSize: function(value) {
		if(value != this._pageSize) {
			this._pageSize = value;
			this.invalidate(1);
		}
		return value;
	}
	,get_incrementSize: function() {
		return this._incrementSize;
	}
	,set_incrementSize: function(value) {
		this._incrementSize = value;
		return value;
	}
	,deincrementValue: function() {
		var _g = this;
		_g.set_pos(_g.get_pos() - this._incrementSize);
	}
	,incrementValue: function() {
		var _g = this;
		_g.set_pos(_g.get_pos() + this._incrementSize);
	}
	,clone: function() {
		var c = haxe_ui_toolkit_controls_Scroll.prototype.clone.call(this);
		c.set_pos(this.get_pos());
		c.set_min(this.get_min());
		c.set_max(this.get_max());
		c.set_pageSize(this.get_pageSize());
		c.set_incrementSize(this.get_incrementSize());
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_VScroll();
	}
	,__class__: haxe_ui_toolkit_controls_VScroll
	,__properties__: $extend(haxe_ui_toolkit_controls_Scroll.prototype.__properties__,{set_incrementSize:"set_incrementSize",get_incrementSize:"get_incrementSize",set_pageSize:"set_pageSize",get_pageSize:"get_pageSize",set_max:"set_max",get_max:"get_max",set_min:"set_min",get_min:"get_min",set_pos:"set_pos",get_pos:"get_pos"})
});
var haxe_ui_toolkit_controls_VScrollLayout = function() {
	haxe_ui_toolkit_layout_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.VScrollLayout"] = haxe_ui_toolkit_controls_VScrollLayout;
haxe_ui_toolkit_controls_VScrollLayout.__name__ = ["haxe","ui","toolkit","controls","VScrollLayout"];
haxe_ui_toolkit_controls_VScrollLayout.__super__ = haxe_ui_toolkit_layout_DefaultLayout;
haxe_ui_toolkit_controls_VScrollLayout.prototype = $extend(haxe_ui_toolkit_layout_DefaultLayout.prototype,{
	resizeChildren: function() {
		haxe_ui_toolkit_layout_DefaultLayout.prototype.resizeChildren.call(this);
		var deinc = this.get_container().findChild("deinc");
		if(deinc != null) deinc.set_height(this.get_innerWidth());
		var inc = this.get_container().findChild("inc");
		if(inc != null) inc.set_height(this.get_innerWidth());
		var scroll;
		scroll = js_Boot.__cast(this.get_container() , haxe_ui_toolkit_core_interfaces_IScrollable);
		var thumb = this.get_container().findChild("thumb");
		if(thumb != null) {
			var m = scroll.get_max() - scroll.get_min();
			var ucy = this.get_usableHeight();
			var thumbHeight = scroll.get_pageSize() / m * ucy;
			if(thumbHeight < this.get_innerWidth()) thumbHeight = this.get_innerWidth(); else if(thumbHeight > ucy) thumbHeight = ucy;
			if(thumbHeight > 0 && isNaN(thumbHeight) == false) thumb.set_height(thumbHeight);
		}
	}
	,repositionChildren: function() {
		haxe_ui_toolkit_layout_DefaultLayout.prototype.repositionChildren.call(this);
		var deinc = this.get_container().findChild("deinc");
		var inc = this.get_container().findChild("inc");
		if(inc != null) inc.set_y(this.get_container().get_height() - inc.get_height() - this.get_padding().get_bottom());
		var scroll;
		scroll = js_Boot.__cast(this.get_container() , haxe_ui_toolkit_core_interfaces_IScrollable);
		var thumb = this.get_container().findChild("thumb");
		if(thumb != null) {
			var m = scroll.get_max() - scroll.get_min();
			var u = this.get_usableHeight();
			u -= thumb.get_height();
			var y = (scroll.get_pos() - scroll.get_min()) / m * u;
			y += this.get_padding().get_top();
			if(deinc != null) y += deinc.get_height() + this.get_spacingY();
			thumb.set_y(y);
		}
	}
	,get_usableHeight: function() {
		var ucy = this.get_innerHeight();
		var deinc = this.get_container().findChild("deinc");
		var inc = this.get_container().findChild("inc");
		if(deinc != null) ucy -= deinc.get_height() + this.get_spacingY();
		if(inc != null) ucy -= inc.get_height() + this.get_spacingY();
		return ucy;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_layout_DefaultLayout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_VScrollLayout();
	}
	,__class__: haxe_ui_toolkit_controls_VScrollLayout
});
var haxe_ui_toolkit_controls_VSlider = function() {
	haxe_ui_toolkit_controls_Slider.call(this);
	this.set_direction("vertical");
};
$hxClasses["haxe.ui.toolkit.controls.VSlider"] = haxe_ui_toolkit_controls_VSlider;
haxe_ui_toolkit_controls_VSlider.__name__ = ["haxe","ui","toolkit","controls","VSlider"];
haxe_ui_toolkit_controls_VSlider.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_controls_VSlider.__super__ = haxe_ui_toolkit_controls_Slider;
haxe_ui_toolkit_controls_VSlider.prototype = $extend(haxe_ui_toolkit_controls_Slider.prototype,{
	_onMouseDown: function(event) {
		this.startTracking(event.stageY / haxe_ui_toolkit_core_Toolkit.get_scaleFactor() - this._thumb.get_stageY());
	}
	,_onScreenMouseMove: function(event) {
		var ypos = event.stageY / haxe_ui_toolkit_core_Toolkit.get_scaleFactor() - this.get_stageY() - this._mouseDownOffset;
		this.set_pos(this.calcPosFromCoord(ypos));
	}
	,_onBackgroundMouseDown: function(event) {
		if(this._thumb.hitTest(event.stageX,event.stageY) == false) {
			var ypos = event.stageY / haxe_ui_toolkit_core_Toolkit.get_scaleFactor() - this.get_stageY();
			ypos -= this._thumb.get_height() / 2;
			this.set_pos(Std["int"](this.calcPosFromCoord(ypos)));
			this._thumb.set_state("down");
			this.startTracking(this._thumb.get_height() / 2);
		}
	}
	,startTracking: function(offset) {
		this._mouseDownOffset = offset;
		haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
	}
	,calcPosFromCoord: function(ypos) {
		var minY = 0;
		var maxY = this.get_layout().get_usableHeight() - this._thumb.get_height();
		if(ypos < minY) ypos = minY; else if(ypos > maxY) ypos = maxY;
		var ucy = this.get_layout().get_usableHeight();
		ucy -= this._thumb.get_height();
		var m = Std["int"](this.get_max() - this.get_min());
		var v = ypos - minY;
		var newValue = this.get_max() - v / ucy * m;
		return newValue;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_controls_Slider.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_VSlider();
	}
	,__class__: haxe_ui_toolkit_controls_VSlider
});
var haxe_ui_toolkit_controls_popups_PopupContent = function() {
	haxe_ui_toolkit_containers_VBox.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.popups.PopupContent"] = haxe_ui_toolkit_controls_popups_PopupContent;
haxe_ui_toolkit_controls_popups_PopupContent.__name__ = ["haxe","ui","toolkit","controls","popups","PopupContent"];
haxe_ui_toolkit_controls_popups_PopupContent.__super__ = haxe_ui_toolkit_containers_VBox;
haxe_ui_toolkit_controls_popups_PopupContent.prototype = $extend(haxe_ui_toolkit_containers_VBox.prototype,{
	onButtonClicked: function(button) {
		return true;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_containers_VBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_popups_PopupContent();
	}
	,__class__: haxe_ui_toolkit_controls_popups_PopupContent
});
var haxe_ui_toolkit_controls_popups_SimplePopupContent = function(text) {
	if(text == null) text = "";
	haxe_ui_toolkit_controls_popups_PopupContent.call(this);
	this._autoSize = true;
	this._textControl = new haxe_ui_toolkit_controls_Text();
	this._textControl.set_multiline(true);
	this._textControl.set_wrapLines(true);
	this._textControl.set_percentWidth(100);
	this._textControl.set_text(text);
	this._textControl.set_autoSize(true);
};
$hxClasses["haxe.ui.toolkit.controls.popups.SimplePopupContent"] = haxe_ui_toolkit_controls_popups_SimplePopupContent;
haxe_ui_toolkit_controls_popups_SimplePopupContent.__name__ = ["haxe","ui","toolkit","controls","popups","SimplePopupContent"];
haxe_ui_toolkit_controls_popups_SimplePopupContent.__super__ = haxe_ui_toolkit_controls_popups_PopupContent;
haxe_ui_toolkit_controls_popups_SimplePopupContent.prototype = $extend(haxe_ui_toolkit_controls_popups_PopupContent.prototype,{
	initialize: function() {
		haxe_ui_toolkit_controls_popups_PopupContent.prototype.initialize.call(this);
		this.addChild(this._textControl);
	}
	,clone: function() {
		var c = haxe_ui_toolkit_controls_popups_PopupContent.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_popups_SimplePopupContent();
	}
	,__class__: haxe_ui_toolkit_controls_popups_SimplePopupContent
});
var haxe_ui_toolkit_controls_popups_BusyPopupContent = function(text) {
	if(text == null) text = "";
	haxe_ui_toolkit_controls_popups_SimplePopupContent.call(this,text);
};
$hxClasses["haxe.ui.toolkit.controls.popups.BusyPopupContent"] = haxe_ui_toolkit_controls_popups_BusyPopupContent;
haxe_ui_toolkit_controls_popups_BusyPopupContent.__name__ = ["haxe","ui","toolkit","controls","popups","BusyPopupContent"];
haxe_ui_toolkit_controls_popups_BusyPopupContent.__super__ = haxe_ui_toolkit_controls_popups_SimplePopupContent;
haxe_ui_toolkit_controls_popups_BusyPopupContent.prototype = $extend(haxe_ui_toolkit_controls_popups_SimplePopupContent.prototype,{
	initialize: function() {
		this.addChild(this._textControl);
		this.set_height(this._textControl.get_height() + 15);
	}
	,clone: function() {
		var c = haxe_ui_toolkit_controls_popups_SimplePopupContent.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_popups_BusyPopupContent();
	}
	,__class__: haxe_ui_toolkit_controls_popups_BusyPopupContent
});
var haxe_ui_toolkit_controls_popups_CalendarPopupContent = function() {
	haxe_ui_toolkit_controls_popups_PopupContent.call(this);
	this._cal = new haxe_ui_toolkit_containers_CalendarView();
	this._cal.set_percentWidth(100);
};
$hxClasses["haxe.ui.toolkit.controls.popups.CalendarPopupContent"] = haxe_ui_toolkit_controls_popups_CalendarPopupContent;
haxe_ui_toolkit_controls_popups_CalendarPopupContent.__name__ = ["haxe","ui","toolkit","controls","popups","CalendarPopupContent"];
haxe_ui_toolkit_controls_popups_CalendarPopupContent.__super__ = haxe_ui_toolkit_controls_popups_PopupContent;
haxe_ui_toolkit_controls_popups_CalendarPopupContent.prototype = $extend(haxe_ui_toolkit_controls_popups_PopupContent.prototype,{
	initialize: function() {
		haxe_ui_toolkit_controls_popups_PopupContent.prototype.initialize.call(this);
		this.addChild(this._cal);
		this.set_height(this._cal.get_height());
	}
	,get_selectedDate: function() {
		return this._cal.get_selectedDate();
	}
	,set_selectedDate: function(value) {
		this._cal.set_selectedDate(value);
		return value;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_controls_popups_PopupContent.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_popups_CalendarPopupContent();
	}
	,__class__: haxe_ui_toolkit_controls_popups_CalendarPopupContent
	,__properties__: $extend(haxe_ui_toolkit_controls_popups_PopupContent.prototype.__properties__,{set_selectedDate:"set_selectedDate",get_selectedDate:"get_selectedDate"})
});
var haxe_ui_toolkit_controls_popups_CustomPopupContent = function(display) {
	haxe_ui_toolkit_controls_popups_PopupContent.call(this);
	this._display = display;
};
$hxClasses["haxe.ui.toolkit.controls.popups.CustomPopupContent"] = haxe_ui_toolkit_controls_popups_CustomPopupContent;
haxe_ui_toolkit_controls_popups_CustomPopupContent.__name__ = ["haxe","ui","toolkit","controls","popups","CustomPopupContent"];
haxe_ui_toolkit_controls_popups_CustomPopupContent.__super__ = haxe_ui_toolkit_controls_popups_PopupContent;
haxe_ui_toolkit_controls_popups_CustomPopupContent.prototype = $extend(haxe_ui_toolkit_controls_popups_PopupContent.prototype,{
	initialize: function() {
		haxe_ui_toolkit_controls_popups_PopupContent.prototype.initialize.call(this);
		this.addChild(this._display);
		this.set_height(this._display.get_height());
	}
	,clone: function() {
		var c = haxe_ui_toolkit_controls_popups_PopupContent.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_popups_CustomPopupContent();
	}
	,__class__: haxe_ui_toolkit_controls_popups_CustomPopupContent
});
var haxe_ui_toolkit_controls_popups_ListPopupContent = function(dataSource,selectedIndex,fn) {
	if(selectedIndex == null) selectedIndex = -1;
	this.DELAY = 0;
	this._selectedIndex = -1;
	this._maxListSize = 4;
	haxe_ui_toolkit_controls_popups_PopupContent.call(this);
	this._selectedIndex = selectedIndex;
	this._fn = fn;
	this._list = new haxe_ui_toolkit_containers_ListView();
	this._list.set_percentWidth(100);
	this._list.set_dataSource(dataSource);
};
$hxClasses["haxe.ui.toolkit.controls.popups.ListPopupContent"] = haxe_ui_toolkit_controls_popups_ListPopupContent;
haxe_ui_toolkit_controls_popups_ListPopupContent.__name__ = ["haxe","ui","toolkit","controls","popups","ListPopupContent"];
haxe_ui_toolkit_controls_popups_ListPopupContent.__super__ = haxe_ui_toolkit_controls_popups_PopupContent;
haxe_ui_toolkit_controls_popups_ListPopupContent.prototype = $extend(haxe_ui_toolkit_controls_popups_PopupContent.prototype,{
	initialize: function() {
		haxe_ui_toolkit_controls_popups_PopupContent.prototype.initialize.call(this);
		this._list.addEventListener("haxeui_" + "change",$bind(this,this._onListChange));
		this.addChild(this._list);
		var n = this._maxListSize;
		if(n > this._list.get_listSize()) n = this._list.get_listSize();
		var listHeight = n * this._list.get_itemHeight() + (this._list.get_layout().get_padding().get_top() + this._list.get_layout().get_padding().get_bottom());
		this._list.set_height(listHeight);
		this.set_height(listHeight);
		this._list.setSelectedIndexNoEvent(this._selectedIndex);
	}
	,get_selectedIndex: function() {
		var index = this._selectedIndex;
		if(this._list.get_ready()) index = this._list.get_selectedIndex();
		return index;
	}
	,set_selectedIndex: function(value) {
		this._selectedIndex = value;
		if(this._list.get_ready()) this._list.set_selectedIndex(value);
		return value;
	}
	,get_listSize: function() {
		if(this._list.get_ready() == false) return -1;
		return this._list.get_listSize();
	}
	,_onListChange: function(event) {
		this.hideTimer = new openfl_utils_Timer(this.DELAY,1);
		this.hideTimer.addEventListener(openfl_events_TimerEvent.TIMER_COMPLETE,$bind(this,this._onTimerComplete));
		this.hideTimer.start();
	}
	,_onTimerComplete: function(event) {
		this.hideTimer.removeEventListener(openfl_events_TimerEvent.TIMER_COMPLETE,$bind(this,this._onTimerComplete));
		if(Std["is"](this.get_parent(),haxe_ui_toolkit_controls_popups_Popup)) haxe_ui_toolkit_core_PopupManager.get_instance().hidePopup(js_Boot.__cast(this.get_parent() , haxe_ui_toolkit_controls_popups_Popup));
		if(this._fn != null) {
			var item = this._list.get_selectedItems()[0];
			var index = this._list.getItemIndex(item);
			item.get_data().index = index;
			this._fn(item);
		}
	}
	,setSelectedIndexNoEvent: function(index) {
		this._selectedIndex = index;
		if(this._list.get_ready()) this._list.setSelectedIndexNoEvent(index);
	}
	,clone: function() {
		var c = haxe_ui_toolkit_controls_popups_PopupContent.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_popups_ListPopupContent();
	}
	,__class__: haxe_ui_toolkit_controls_popups_ListPopupContent
	,__properties__: $extend(haxe_ui_toolkit_controls_popups_PopupContent.prototype.__properties__,{get_listSize:"get_listSize",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex"})
});
var haxe_ui_toolkit_core_interfaces_IDraggable = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IDraggable"] = haxe_ui_toolkit_core_interfaces_IDraggable;
haxe_ui_toolkit_core_interfaces_IDraggable.__name__ = ["haxe","ui","toolkit","core","interfaces","IDraggable"];
haxe_ui_toolkit_core_interfaces_IDraggable.prototype = {
	__class__: haxe_ui_toolkit_core_interfaces_IDraggable
};
var haxe_ui_toolkit_controls_popups_Popup = function(title,content,config,fn) {
	var _g = this;
	haxe_ui_toolkit_containers_VBox.call(this);
	this._autoSize = true;
	if(title != null) {
		this._titleBar = new haxe_ui_toolkit_containers_Box();
		this._titleBar.set_autoSize(false);
		this._titleBar.set_id("titleBar");
	}
	this._content = content;
	this._content.popup = this;
	if(title != null) {
		this._title = new haxe_ui_toolkit_controls_Text();
		this._title.set_id("title");
		this._title.set_text(title);
	}
	this._buttonBar = new haxe_ui_toolkit_containers_Box();
	this._buttonBar.set_id("buttonBar");
	this._buttonBar.set_horizontalAlign("center");
	this._config = config;
	if(this._config == null) {
		this._config = { };
		this._config.buttons = [];
	}
	if(this._config.id != null) this.set_id(this._config.id);
	if(this._config.styleName != null) this.set_styleName(this._config.styleName);
	if(this._config.dismiss != null && (this._config.dismiss & 65536) > 0) this.addEventListener(openfl_events_MouseEvent.CLICK,function(e) {
		haxe_ui_toolkit_core_PopupManager.get_instance().hidePopup(_g);
		_g.callClosingCallback(4096);
	});
	this._fn = fn;
};
$hxClasses["haxe.ui.toolkit.controls.popups.Popup"] = haxe_ui_toolkit_controls_popups_Popup;
haxe_ui_toolkit_controls_popups_Popup.__name__ = ["haxe","ui","toolkit","controls","popups","Popup"];
haxe_ui_toolkit_controls_popups_Popup.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IDraggable];
haxe_ui_toolkit_controls_popups_Popup.__super__ = haxe_ui_toolkit_containers_VBox;
haxe_ui_toolkit_controls_popups_Popup.prototype = $extend(haxe_ui_toolkit_containers_VBox.prototype,{
	initialize: function() {
		var _g = this;
		haxe_ui_toolkit_containers_VBox.prototype.initialize.call(this);
		if(this._titleBar != null) {
			this._titleBar.set_percentWidth(100);
			this._titleBar.addChild(this._title);
			if(this._config.closeButton == true) {
				this._exitButton = new haxe_ui_toolkit_controls_Button();
				this._exitButton.set_text("x");
				this._exitButton.set_id("close");
				this._exitButton.set_styleName("close");
				this._exitButton.addEventListener(openfl_events_MouseEvent.CLICK,function(e) {
					haxe_ui_toolkit_core_PopupManager.get_instance().hidePopup(_g);
				});
				this._titleBar.addChild(this._exitButton);
			}
			if(this._config.disableDrag == false || this._config.disableDrag == null) {
				this._titleBar.get_sprite().buttonMode = true;
				this._titleBar.get_sprite().useHandCursor = true;
			}
			this.addChild(this._titleBar);
		}
		if(this._content == null) this._content = new haxe_ui_toolkit_controls_popups_PopupContent();
		this._content.set_id("popupContent");
		this._content.set_percentWidth(100);
		this.addChild(this._content);
		if(this._config.buttons.length > 0) {
			var box = new haxe_ui_toolkit_containers_HBox();
			box.set_horizontalAlign(this._buttonBar.get_horizontalAlign());
			var buttons = this._config.buttons;
			this._buttonBar.addChild(box);
			var _g1 = 0;
			while(_g1 < buttons.length) {
				var info = [buttons[_g1]];
				++_g1;
				if((info[0].type & 16777216) != 16777216) {
					var button = this.createStandardButton(info[0].type);
					if(button != null) box.addChild(button);
				} else {
					var button1 = new haxe_ui_toolkit_controls_Button();
					button1.set_text(info[0].text);
					button1.addEventListener(openfl_events_MouseEvent.CLICK,(function(info) {
						return function(e1) {
							_g.clickButton(info[0].type);
						};
					})(info));
					box.addChild(button1);
				}
			}
			this.addChild(this._buttonBar);
		}
		if(this._config.width != null) this.set_width(this._config.width);
		haxe_ui_toolkit_core_PopupManager.get_instance().centerPopup(this);
	}
	,allowDrag: function(event) {
		if(this._config.disableDrag == true) return false;
		return this._config.dragAnywhere || (this._titleBar == null?false:this._titleBar.hitTest(event.stageX,event.stageY));
	}
	,get_content: function() {
		return this._content;
	}
	,get_config: function() {
		return this._config;
	}
	,createStandardButton: function(v) {
		var _g = this;
		var button = null;
		if(v == 1) {
			button = new haxe_ui_toolkit_controls_Button();
			button.set_text("OK");
			button.addEventListener(openfl_events_MouseEvent.CLICK,function(e) {
				_g.clickButton(1);
			});
		}
		if(v == 16) {
			button = new haxe_ui_toolkit_controls_Button();
			button.set_text("Yes");
			button.addEventListener(openfl_events_MouseEvent.CLICK,function(e1) {
				_g.clickButton(16);
			});
		}
		if(v == 256) {
			button = new haxe_ui_toolkit_controls_Button();
			button.set_text("No");
			button.addEventListener(openfl_events_MouseEvent.CLICK,function(e2) {
				_g.clickButton(256);
			});
		}
		if(v == 4096) {
			button = new haxe_ui_toolkit_controls_Button();
			button.set_text("Cancel");
			button.addEventListener(openfl_events_MouseEvent.CLICK,function(e3) {
				_g.clickButton(4096);
			});
		}
		if(v == 65536) {
			button = new haxe_ui_toolkit_controls_Button();
			button.set_text("Confirm");
			button.addEventListener(openfl_events_MouseEvent.CLICK,function(e4) {
				_g.clickButton(65536);
			});
		}
		if(v == 1048576) {
			button = new haxe_ui_toolkit_controls_Button();
			button.set_text("Close");
			button.addEventListener(openfl_events_MouseEvent.CLICK,function(e5) {
				_g.clickButton(1048576);
			});
		}
		return button;
	}
	,clickButton: function(button) {
		if(this._content.onButtonClicked(button) == true) haxe_ui_toolkit_core_PopupManager.get_instance().hidePopup(this);
		if(this._fn != null) this._fn(button);
	}
	,callClosingCallback: function(button) {
		if(this._fn != null) this._fn(button);
	}
	,clone: function() {
		var c = haxe_ui_toolkit_containers_VBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_popups_Popup();
	}
	,__class__: haxe_ui_toolkit_controls_popups_Popup
	,__properties__: $extend(haxe_ui_toolkit_containers_VBox.prototype.__properties__,{get_config:"get_config",get_content:"get_content"})
});
var haxe_ui_toolkit_controls_selection_DateSelector = function() {
	this.dateFormat = "%d/%m/%Y";
	haxe_ui_toolkit_controls_Button.call(this);
	this.set_text("Select Date");
	this.set_toggle(true);
};
$hxClasses["haxe.ui.toolkit.controls.selection.DateSelector"] = haxe_ui_toolkit_controls_selection_DateSelector;
haxe_ui_toolkit_controls_selection_DateSelector.__name__ = ["haxe","ui","toolkit","controls","selection","DateSelector"];
haxe_ui_toolkit_controls_selection_DateSelector.__super__ = haxe_ui_toolkit_controls_Button;
haxe_ui_toolkit_controls_selection_DateSelector.prototype = $extend(haxe_ui_toolkit_controls_Button.prototype,{
	preInitialize: function() {
		haxe_ui_toolkit_controls_Button.prototype.preInitialize.call(this);
		if(this._baseStyle != null) {
			if(this._baseStyle.get_selectionMethod() != null) this._method = this._baseStyle.get_selectionMethod();
		}
	}
	,initialize: function() {
		haxe_ui_toolkit_controls_Button.prototype.initialize.call(this);
		this.set_autoSize(false);
	}
	,_onMouseClick: function(event) {
		haxe_ui_toolkit_controls_Button.prototype._onMouseClick.call(this,event);
		if(this._cal == null || this._cal.get_visible() == false) this.showCalendar(); else this.hideCalendar();
	}
	,applyStyle: function() {
		haxe_ui_toolkit_controls_Button.prototype.applyStyle.call(this);
		if(this._baseStyle != null) {
			if(this._baseStyle.get_selectionMethod() != null && this._method == null) this._method = this._baseStyle.get_selectionMethod();
		}
	}
	,showCalendar: function() {
		var _g = this;
		if(this._method == "popup") haxe_ui_toolkit_core_PopupManager.get_instance().showCalendar("Select Date",function(button,date) {
			_g.set_selected(false);
			if(button == 65536) {
				var dateString = DateTools.format(date,_g.dateFormat);
				_g.set_text(dateString);
			}
		}); else {
			if(this._cal == null) {
				this._cal = new haxe_ui_toolkit_containers_CalendarView();
				this._cal.set_styleName("dropDown");
				if(this.get_id() != null) this._cal.set_id(this.get_id() + "_dropDown");
				this._cal.addEventListener(openfl_events_Event.CHANGE,$bind(this,this.onDateChange));
				this._cal.addEventListener(openfl_events_Event.ADDED_TO_STAGE,function(e) {
					_g.showCalendar();
				});
				this.get_root().addChild(this._cal);
				return;
			}
			this.get_root().addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._onRootMouseDown));
			this.get_root().addEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this._onRootMouseDown));
			this._cal.set_x(this.get_stageX() - this.get_root().get_stageX());
			this._cal.set_y(this.get_stageY() + this.get_height() - this.get_root().get_stageY());
			if(this._cal.get_stageY() + this._cal.get_height() > haxe_ui_toolkit_core_Screen.get_instance().get_height() / haxe_ui_toolkit_core_Toolkit.get_scaleFactor()) {
				this._cal.set_y(this.get_stageY() - this._cal.get_height());
				this.set_styleName("dropUp");
			} else this.set_styleName(null);
			var transition = haxe_ui_toolkit_core_Toolkit.getTransitionForClass(haxe_ui_toolkit_controls_selection_DateSelector);
			var transitionTime = haxe_ui_toolkit_core_Toolkit.getTransitionTimeForClass(haxe_ui_toolkit_controls_selection_DateSelector);
			if(transition == "slide") {
				this._cal.set_clipHeight(0);
				this._cal.get_sprite().set_alpha(1);
				this._cal.set_visible(true);
				motion_Actuate.tween(this._cal,transitionTime,{ clipHeight : this._cal.get_height()},true).ease(motion_easing_Quart.get_easeOut()).onComplete(function() {
					_g._cal.clearClip();
				});
			} else if(transition == "fade") {
				this._cal.get_sprite().set_alpha(0);
				this._cal.set_visible(true);
				motion_Actuate.tween(this._cal.get_sprite(),transitionTime,{ alpha : 1},true).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				});
			} else {
				this._cal.get_sprite().set_alpha(1);
				this._cal.set_visible(true);
			}
			this.set_selected(true);
		}
	}
	,hideCalendar: function() {
		var _g = this;
		if(this._cal != null) {
			var transition = haxe_ui_toolkit_core_Toolkit.getTransitionForClass(haxe_ui_toolkit_controls_selection_DateSelector);
			var transitionTime = haxe_ui_toolkit_core_Toolkit.getTransitionTimeForClass(haxe_ui_toolkit_controls_selection_DateSelector);
			if(transition == "slide") {
				this._cal.get_sprite().set_alpha(1);
				motion_Actuate.tween(this._cal,transitionTime,{ clipHeight : 0},true).ease(motion_easing_Quart.get_easeOut()).onComplete(function() {
					_g._cal.set_visible(false);
					_g._cal.clearClip();
				});
			} else if(transition == "fade") motion_Actuate.tween(this._cal.get_sprite(),transitionTime,{ alpha : 0},true).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				_g._cal.set_visible(false);
			}); else {
				this._cal.get_sprite().set_alpha(1);
				this._cal.set_visible(false);
			}
			this.set_selected(false);
		}
	}
	,get_method: function() {
		return this._method;
	}
	,set_method: function(value) {
		this._method = value;
		return value;
	}
	,get_date: function() {
		if(this._cal != null) return this._cal.get_selectedDate();
		return new Date();
	}
	,set_dateFormat: function(value) {
		this.dateFormat = value;
		if(this._cal != null) this.set_text(DateTools.format(this._cal.get_selectedDate(),this.dateFormat));
		return value;
	}
	,_onRootMouseDown: function(event) {
		var mouseInList = false;
		if(this._cal != null) mouseInList = this._cal.hitTest(event.stageX,event.stageY);
		var mouseIn = this.hitTest(event.stageX,event.stageY);
		if(mouseInList == false && this._cal != null && mouseIn == false) {
			this.get_root().removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._onRootMouseDown));
			this.get_root().removeEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this._onRootMouseDown));
			this.hideCalendar();
		}
	}
	,onDateChange: function(event) {
		var dateString = DateTools.format(this._cal.get_selectedDate(),this.dateFormat);
		this.set_text(dateString);
		this.hideCalendar();
	}
	,clone: function() {
		var c = haxe_ui_toolkit_controls_Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_selection_DateSelector();
	}
	,__class__: haxe_ui_toolkit_controls_selection_DateSelector
	,__properties__: $extend(haxe_ui_toolkit_controls_Button.prototype.__properties__,{set_dateFormat:"set_dateFormat",get_date:"get_date",set_method:"set_method",get_method:"get_method"})
});
var haxe_ui_toolkit_controls_selection_ListSelector = function() {
	this._selectedIndex = -1;
	this._maxListSize = 4;
	haxe_ui_toolkit_controls_Button.call(this);
	this.set_toggle(true);
	this.set_allowSelection(false);
	this.dispatchChangeEvents = false;
	this.set_autoSize(false);
};
$hxClasses["haxe.ui.toolkit.controls.selection.ListSelector"] = haxe_ui_toolkit_controls_selection_ListSelector;
haxe_ui_toolkit_controls_selection_ListSelector.__name__ = ["haxe","ui","toolkit","controls","selection","ListSelector"];
haxe_ui_toolkit_controls_selection_ListSelector.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IDataComponent];
haxe_ui_toolkit_controls_selection_ListSelector.__super__ = haxe_ui_toolkit_controls_Button;
haxe_ui_toolkit_controls_selection_ListSelector.prototype = $extend(haxe_ui_toolkit_controls_Button.prototype,{
	preInitialize: function() {
		haxe_ui_toolkit_controls_Button.prototype.preInitialize.call(this);
		if(this._baseStyle != null) {
			if(this._baseStyle.get_selectionMethod() != null) this._method = this._baseStyle.get_selectionMethod();
		}
	}
	,initialize: function() {
		haxe_ui_toolkit_controls_Button.prototype.initialize.call(this);
	}
	,_onMouseClick: function(event) {
		if(this._list == null || this._list.get_visible() == false) this.showList(); else this.hideList();
	}
	,applyStyle: function() {
		haxe_ui_toolkit_controls_Button.prototype.applyStyle.call(this);
		if(this._baseStyle != null) {
			if(this._baseStyle.get_selectionMethod() != null && this._method == null) this._method = this._baseStyle.get_selectionMethod();
			if(this._baseStyle.get_listSize() != -1) this.set_listSize(this._baseStyle.get_listSize());
		}
	}
	,get_dataSource: function() {
		if(this._dataSource == null) this._dataSource = new haxe_ui_toolkit_data_ArrayDataSource();
		return this._dataSource;
	}
	,set_dataSource: function(value) {
		this._dataSource = value;
		return value;
	}
	,showList: function() {
		var _g = this;
		if(this._method == "popup") haxe_ui_toolkit_core_PopupManager.get_instance().showList(this.get_dataSource(),this._selectedIndex,"Select Item",{ },function(item) {
			_g._selectedIndex = item.get_data().index;
			_g.set_text(item.get_data().text);
			_g._selectedItems = [];
			_g._selectedItems.push(item);
			_g.set_selected(false);
			var event = new haxe_ui_toolkit_events_UIEvent("haxeui_" + "change");
			_g.dispatchEvent(event);
		}); else {
			if(this._list == null) {
				this._list = new haxe_ui_toolkit_containers_ListView();
				this._list.set_styleName("dropDown");
				if(this.get_id() != null) this._list.set_id(this.get_id() + "_dropDown");
				this._list.addEventListener("haxeui_" + "change",$bind(this,this._onListChange));
				this._list.get_content().addEventListener(openfl_events_Event.ADDED_TO_STAGE,function(e) {
					_g.showList();
				});
				this.get_root().addChild(this._list);
				return;
			}
			this._list.set_dataSource(this._dataSource);
			this.get_root().addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._onRootMouseDown));
			this.get_root().addEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this._onRootMouseDown));
			this._list.set_x(this.get_stageX() - this.get_root().get_stageX());
			this._list.set_y(this.get_stageY() + this.get_height() - this.get_root().get_stageY());
			this._list.set_width(this.get_width());
			var n = this._maxListSize;
			if(n > this._list.get_listSize()) n = this._list.get_listSize();
			var listHeight = n * this._list.get_itemHeight() + (this._list.get_layout().get_padding().get_top() + this._list.get_layout().get_padding().get_bottom());
			this._list.set_height(listHeight);
			this._list.setSelectedIndexNoEvent(this._selectedIndex);
			if(this._list.get_stageY() + listHeight > haxe_ui_toolkit_core_Screen.get_instance().get_height() / haxe_ui_toolkit_core_Toolkit.get_scaleFactor()) {
				this._list.set_y(this.get_stageY() - this._list.get_height());
				this.set_styleName("dropUp");
			} else this.set_styleName(null);
			var transition = haxe_ui_toolkit_core_Toolkit.getTransitionForClass(haxe_ui_toolkit_controls_selection_ListSelector);
			var transitionTime = haxe_ui_toolkit_core_Toolkit.getTransitionTimeForClass(haxe_ui_toolkit_controls_selection_ListSelector);
			if(transition == "slide") {
				this._list.set_clipHeight(0);
				this._list.get_sprite().set_alpha(1);
				this._list.set_visible(true);
				motion_Actuate.tween(this._list,transitionTime,{ clipHeight : listHeight},true).ease(motion_easing_Quart.get_easeOut()).onComplete(function() {
					_g._list.clearClip();
				});
			} else if(transition == "fade") {
				this._list.get_sprite().set_alpha(0);
				this._list.set_visible(true);
				motion_Actuate.tween(this._list.get_sprite(),transitionTime,{ alpha : 1},true).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				});
			} else {
				this._list.get_sprite().set_alpha(1);
				this._list.set_visible(true);
			}
			this.set_selected(true);
		}
	}
	,hideList: function() {
		var _g = this;
		if(this._list != null) {
			var transition = haxe_ui_toolkit_core_Toolkit.getTransitionForClass(haxe_ui_toolkit_controls_selection_ListSelector);
			var transitionTime = haxe_ui_toolkit_core_Toolkit.getTransitionTimeForClass(haxe_ui_toolkit_controls_selection_ListSelector);
			if(transition == "slide") {
				this._list.get_sprite().set_alpha(1);
				motion_Actuate.tween(this._list,transitionTime,{ clipHeight : 0},true).ease(motion_easing_Quart.get_easeOut()).onComplete(function() {
					_g._list.set_visible(false);
					_g._list.clearClip();
				});
			} else if(transition == "fade") motion_Actuate.tween(this._list.get_sprite(),transitionTime,{ alpha : 0},true).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				_g._list.set_visible(false);
			}); else {
				this._list.get_sprite().set_alpha(1);
				this._list.set_visible(false);
			}
			this.set_selected(false);
		}
	}
	,get_method: function() {
		return this._method;
	}
	,set_method: function(value) {
		this._method = value;
		return value;
	}
	,get_listSize: function() {
		return this._maxListSize;
	}
	,set_listSize: function(value) {
		this._maxListSize = value;
		return value;
	}
	,get_selectedItems: function() {
		return this._selectedItems;
	}
	,get_selectedIndex: function() {
		return this._selectedIndex;
	}
	,set_selectedIndex: function(value) {
		this._selectedIndex = value;
		if(this._list != null) {
			this._list.set_selectedIndex(value);
			this._selectedItems = this._list.get_selectedItems();
		}
		if(this._selectedIndex < 0) this.set_text(""); else if(this._dataSource != null) {
			var n = 0;
			if(this.get_dataSource().moveFirst()) do {
				if(n == this._selectedIndex) {
					this.set_text(this._dataSource.get().text);
					break;
				}
				n++;
			} while(this.get_dataSource().moveNext());
		}
		return value;
	}
	,_onRootMouseDown: function(event) {
		var mouseInList = false;
		if(this._list != null) mouseInList = this._list.hitTest(event.stageX,event.stageY);
		var mouseIn = this.hitTest(event.stageX,event.stageY);
		if(mouseInList == false && this._list != null && mouseIn == false) {
			this.get_root().removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._onRootMouseDown));
			this.get_root().removeEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this._onRootMouseDown));
			this.hideList();
		}
	}
	,_onListChange: function(event) {
		if(this._list.get_selectedItems() != null && this._list.get_selectedItems().length > 0) {
			this.set_text(this._list.get_selectedItems()[0].get_data().text);
			this._selectedIndex = this._list.get_selectedIndex();
			this._selectedItems = this._list.get_selectedItems();
			this.hideList();
			var event1 = new haxe_ui_toolkit_events_UIEvent("haxeui_" + "change");
			this.dispatchEvent(event1);
		}
	}
	,clone: function() {
		var c = haxe_ui_toolkit_controls_Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_selection_ListSelector();
	}
	,__class__: haxe_ui_toolkit_controls_selection_ListSelector
	,__properties__: $extend(haxe_ui_toolkit_controls_Button.prototype.__properties__,{set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex",get_selectedItems:"get_selectedItems",set_listSize:"set_listSize",get_listSize:"get_listSize",set_method:"set_method",get_method:"get_method",set_dataSource:"set_dataSource",get_dataSource:"get_dataSource"})
});
var haxe_ui_toolkit_controls_selection_DropDownList = function() {
	haxe_ui_toolkit_containers_ListView.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.selection.DropDownList"] = haxe_ui_toolkit_controls_selection_DropDownList;
haxe_ui_toolkit_controls_selection_DropDownList.__name__ = ["haxe","ui","toolkit","controls","selection","DropDownList"];
haxe_ui_toolkit_controls_selection_DropDownList.__super__ = haxe_ui_toolkit_containers_ListView;
haxe_ui_toolkit_controls_selection_DropDownList.prototype = $extend(haxe_ui_toolkit_containers_ListView.prototype,{
	clone: function() {
		var c = haxe_ui_toolkit_containers_ListView.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_controls_selection_DropDownList();
	}
	,__class__: haxe_ui_toolkit_controls_selection_DropDownList
});
var haxe_ui_toolkit_core_ClassManager = function() {
	this.registerDefaults();
};
$hxClasses["haxe.ui.toolkit.core.ClassManager"] = haxe_ui_toolkit_core_ClassManager;
haxe_ui_toolkit_core_ClassManager.__name__ = ["haxe","ui","toolkit","core","ClassManager"];
haxe_ui_toolkit_core_ClassManager.__properties__ = {get_instance:"get_instance"}
haxe_ui_toolkit_core_ClassManager._instance = null;
haxe_ui_toolkit_core_ClassManager.instance = null;
haxe_ui_toolkit_core_ClassManager.get_instance = function() {
	if(haxe_ui_toolkit_core_ClassManager._instance == null) haxe_ui_toolkit_core_ClassManager._instance = new haxe_ui_toolkit_core_ClassManager();
	return haxe_ui_toolkit_core_ClassManager._instance;
};
haxe_ui_toolkit_core_ClassManager.prototype = {
	registerDefaults: function() {
	}
	,getComponentClassName: function(simpleName) {
		if(this.componentClassMap == null) return null;
		var key = simpleName;
		var entry = this.componentClassMap.get(key);
		if(entry == null) return null;
		return entry.className;
	}
	,registerComponentClass: function(cls,simpleName) {
		var className = Type.getClassName(cls);
		this.registerComponentClassName(className,simpleName);
	}
	,registerComponentClassName: function(className,simpleName) {
		if(this.componentClassMap == null) this.componentClassMap = new haxe_ds_StringMap();
		var entry = new haxe_ui_toolkit_core__$ClassManager_ComponentRegistryEntry();
		entry.simpleName = simpleName;
		entry.className = className;
		this.componentClassMap.set(simpleName,entry);
	}
	,hasDataSourceClass: function(simpleName) {
		if(this.dataSourceClassMap == null) return false;
		return this.dataSourceClassMap.exists(simpleName);
	}
	,getDataSourceClassName: function(simpleName) {
		if(this.dataSourceClassMap == null) return null;
		var entry = this.dataSourceClassMap.get(simpleName);
		if(entry == null) return null;
		return entry.className;
	}
	,registerDataSourceClass: function(cls,simpleName) {
		var className = Type.getClassName(cls);
		this.registerDataSourceClassName(className,simpleName);
	}
	,registerDataSourceClassName: function(className,simpleName) {
		if(this.dataSourceClassMap == null) this.dataSourceClassMap = new haxe_ds_StringMap();
		var entry = new haxe_ui_toolkit_core__$ClassManager_DataSourceRegistryEntry();
		entry.simpleName = simpleName;
		entry.className = className;
		this.dataSourceClassMap.set(simpleName,entry);
	}
	,__class__: haxe_ui_toolkit_core_ClassManager
};
var haxe_ui_toolkit_core__$ClassManager_ClassRegistryEntry = function() {
};
$hxClasses["haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry"] = haxe_ui_toolkit_core__$ClassManager_ClassRegistryEntry;
haxe_ui_toolkit_core__$ClassManager_ClassRegistryEntry.__name__ = ["haxe","ui","toolkit","core","_ClassManager","ClassRegistryEntry"];
haxe_ui_toolkit_core__$ClassManager_ClassRegistryEntry.prototype = {
	__class__: haxe_ui_toolkit_core__$ClassManager_ClassRegistryEntry
};
var haxe_ui_toolkit_core__$ClassManager_ComponentRegistryEntry = function() {
	haxe_ui_toolkit_core__$ClassManager_ClassRegistryEntry.call(this);
};
$hxClasses["haxe.ui.toolkit.core._ClassManager.ComponentRegistryEntry"] = haxe_ui_toolkit_core__$ClassManager_ComponentRegistryEntry;
haxe_ui_toolkit_core__$ClassManager_ComponentRegistryEntry.__name__ = ["haxe","ui","toolkit","core","_ClassManager","ComponentRegistryEntry"];
haxe_ui_toolkit_core__$ClassManager_ComponentRegistryEntry.__super__ = haxe_ui_toolkit_core__$ClassManager_ClassRegistryEntry;
haxe_ui_toolkit_core__$ClassManager_ComponentRegistryEntry.prototype = $extend(haxe_ui_toolkit_core__$ClassManager_ClassRegistryEntry.prototype,{
	__class__: haxe_ui_toolkit_core__$ClassManager_ComponentRegistryEntry
});
var haxe_ui_toolkit_core__$ClassManager_DataSourceRegistryEntry = function() {
	haxe_ui_toolkit_core__$ClassManager_ClassRegistryEntry.call(this);
};
$hxClasses["haxe.ui.toolkit.core._ClassManager.DataSourceRegistryEntry"] = haxe_ui_toolkit_core__$ClassManager_DataSourceRegistryEntry;
haxe_ui_toolkit_core__$ClassManager_DataSourceRegistryEntry.__name__ = ["haxe","ui","toolkit","core","_ClassManager","DataSourceRegistryEntry"];
haxe_ui_toolkit_core__$ClassManager_DataSourceRegistryEntry.__super__ = haxe_ui_toolkit_core__$ClassManager_ClassRegistryEntry;
haxe_ui_toolkit_core__$ClassManager_DataSourceRegistryEntry.prototype = $extend(haxe_ui_toolkit_core__$ClassManager_ClassRegistryEntry.prototype,{
	__class__: haxe_ui_toolkit_core__$ClassManager_DataSourceRegistryEntry
});
var haxe_ui_toolkit_core_Client = function() {
};
$hxClasses["haxe.ui.toolkit.core.Client"] = haxe_ui_toolkit_core_Client;
haxe_ui_toolkit_core_Client.__name__ = ["haxe","ui","toolkit","core","Client"];
haxe_ui_toolkit_core_Client.__properties__ = {get_instance:"get_instance"}
haxe_ui_toolkit_core_Client._instance = null;
haxe_ui_toolkit_core_Client.instance = null;
haxe_ui_toolkit_core_Client.get_instance = function() {
	if(haxe_ui_toolkit_core_Client._instance == null) {
		haxe_ui_toolkit_core_Client._instance = new haxe_ui_toolkit_core_Client();
		haxe_ui_toolkit_core_Client._instance.init();
	}
	return haxe_ui_toolkit_core_Client._instance;
};
haxe_ui_toolkit_core_Client.prototype = {
	init: function() {
	}
	,get_language: function() {
		return openfl_system_Capabilities.get_language();
	}
	,get_dpi: function() {
		return openfl_system_Capabilities.get_screenDPI();
	}
	,get_platform: function() {
		return "html5";
		return null;
	}
	,get_target: function() {
		return "html5";
		return null;
	}
	,get_mobile: function() {
		return false;
	}
	,get_screenWidth: function() {
		return openfl_system_Capabilities.get_screenResolutionX();
	}
	,get_screenHeight: function() {
		return openfl_system_Capabilities.get_screenResolutionY();
	}
	,get_windowWidth: function() {
		return openfl_Lib.current.stage.stageWidth;
	}
	,get_windowHeight: function() {
		return openfl_Lib.current.stage.stageHeight;
	}
	,__class__: haxe_ui_toolkit_core_Client
	,__properties__: {get_mobile:"get_mobile",get_target:"get_target",get_windowHeight:"get_windowHeight",get_windowWidth:"get_windowWidth",get_screenHeight:"get_screenHeight",get_screenWidth:"get_screenWidth",get_platform:"get_platform",get_dpi:"get_dpi",get_language:"get_language"}
};
var haxe_ui_toolkit_core_Controller = function(view,options) {
	var _g = this;
	if(js_Boot.__instanceof(view,haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer)) this._view = js_Boot.__cast(view , haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer); else if(js_Boot.__instanceof(view,Class)) {
		var cls;
		cls = js_Boot.__cast(view , Class);
		this._view = Type.createInstance(cls,[]);
	} else if(view != null) options = view;
	if(this._view == null) this._view = new haxe_ui_toolkit_core_Component();
	if(options != null) {
		var _g1 = 0;
		var _g11 = Reflect.fields(options);
		while(_g1 < _g11.length) {
			var f = _g11[_g1];
			++_g1;
			if(Reflect.getProperty(this._view,"set_" + f) != null) Reflect.setProperty(this._view,f,Reflect.field(options,f));
		}
	}
	this.refereshNamedComponents();
	this._view.addEventListener("haxeui_" + "addedToStage",function(e) {
		if(_g._view.get_width() != 0 && _g._view.get_height() != 0) _g.onReady();
	});
};
$hxClasses["haxe.ui.toolkit.core.Controller"] = haxe_ui_toolkit_core_Controller;
haxe_ui_toolkit_core_Controller.__name__ = ["haxe","ui","toolkit","core","Controller"];
haxe_ui_toolkit_core_Controller.prototype = {
	onReady: function() {
	}
	,addChild: function(child,options) {
		var childObject = null;
		if(js_Boot.__instanceof(child,haxe_ui_toolkit_core_interfaces_IDisplayObject)) childObject = js_Boot.__cast(child , haxe_ui_toolkit_core_interfaces_IDisplayObject); else if(js_Boot.__instanceof(child,Class)) {
			var cls;
			cls = js_Boot.__cast(child , Class);
			childObject = Type.createInstance(cls,[]);
		} else if(child != null) options = child;
		if(childObject == null) childObject = new haxe_ui_toolkit_core_Component();
		if(options != null) {
			var _g = 0;
			var _g1 = Reflect.fields(options);
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				if(Reflect.getProperty(childObject,"set_" + f) != null) Reflect.setProperty(childObject,f,Reflect.field(options,f));
			}
		}
		var retVal = this._view.addChild(childObject);
		this.refereshNamedComponents();
		return retVal;
	}
	,attachView: function(newView) {
		this._view = newView;
		this.refereshNamedComponents();
	}
	,attachEvent: function(id,type,listener) {
		var c = this.getComponent(id);
		if(c != null) c.addEventListener(type,listener);
	}
	,detachEvent: function(id,type,listener) {
		var c = this.getComponent(id);
		if(c != null) c.removeEventListener(type,listener);
	}
	,detachEvents: function(id,type) {
		var c = this.getComponent(id);
		if(c != null) c.removeEventListenerType(type);
	}
	,getComponent: function(id) {
		return this.getComponentAs(id,haxe_ui_toolkit_core_Component);
	}
	,getComponentAs: function(id,type) {
		var c = this._namedComponents.get(id);
		if(c == null) return null;
		return c;
	}
	,refereshNamedComponents: function() {
		this._namedComponents = new haxe_ds_StringMap();
		this.addNamedComponentsFrom(this._view);
	}
	,addNamedComponentsFrom: function(parent) {
		if(parent == null) return;
		if(parent != null && parent.get_id() != null) this._namedComponents.set(parent.get_id(),parent);
		var _g = 0;
		var _g1 = parent.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			this.addNamedComponentsFrom(js_Boot.__cast(child , haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer));
		}
	}
	,get_view: function() {
		return this._view;
	}
	,get_root: function() {
		if(this._view == null) return null;
		return this._view.get_root();
	}
	,get_popup: function() {
		var popup = null;
		if(Std["is"](this.get_view().get_parent(),haxe_ui_toolkit_controls_popups_PopupContent)) popup = (js_Boot.__cast(this.get_view().get_parent() , haxe_ui_toolkit_controls_popups_PopupContent)).popup;
		return popup;
	}
	,get_namedComponents: function() {
		return this._namedComponents;
	}
	,showPopup: function(text,title,config,fn) {
		if(config == null) config = 1;
		return this.showSimplePopup(text,title,config,fn);
	}
	,showSimplePopup: function(text,title,config,fn) {
		if(config == null) config = 1;
		return haxe_ui_toolkit_core_PopupManager.get_instance().showSimple(text,title,config,fn);
	}
	,showCustomPopup: function(content,title,config,fn) {
		if(config == null) config = 1;
		var display = null;
		if(js_Boot.__instanceof(content,haxe_ui_toolkit_core_interfaces_IDisplayObject)) display = js_Boot.__cast(content , haxe_ui_toolkit_core_interfaces_IDisplayObject); else if(typeof(content) == "string") display = haxe_ui_toolkit_core_Toolkit.processXmlResource(js_Boot.__cast(content , String));
		if(display == null) return null;
		return haxe_ui_toolkit_core_PopupManager.get_instance().showCustom(display,title,config,fn);
	}
	,showListPopup: function(items,selectedIndex,title,fn) {
		if(selectedIndex == null) selectedIndex = -1;
		return haxe_ui_toolkit_core_PopupManager.get_instance().showList(items,selectedIndex,title,fn);
	}
	,showBusyPopup: function(text,delay,title,config,fn) {
		if(delay == null) delay = -1;
		this.hideBusy();
		return this._currentBusyPopup = haxe_ui_toolkit_core_PopupManager.get_instance().showBusy(text,delay,title,config,fn);
	}
	,showBusy: function(text,delay,title,config,fn) {
		if(delay == null) delay = -1;
		return this.showBusyPopup(text,delay,title,config,fn);
	}
	,hideBusy: function() {
		if(this._currentBusyPopup != null) {
			haxe_ui_toolkit_core_PopupManager.get_instance().hidePopup(this._currentBusyPopup);
			this._currentBusyPopup = null;
		}
	}
	,showCalendarPopup: function(title,fn) {
		return haxe_ui_toolkit_core_PopupManager.get_instance().showCalendar(title,fn);
	}
	,__class__: haxe_ui_toolkit_core_Controller
	,__properties__: {get_namedComponents:"get_namedComponents",get_popup:"get_popup",get_root:"get_root",get_view:"get_view"}
};
var haxe_ui_toolkit_core_FocusManager = function() {
};
$hxClasses["haxe.ui.toolkit.core.FocusManager"] = haxe_ui_toolkit_core_FocusManager;
haxe_ui_toolkit_core_FocusManager.__name__ = ["haxe","ui","toolkit","core","FocusManager"];
haxe_ui_toolkit_core_FocusManager.__properties__ = {get_instance:"get_instance"}
haxe_ui_toolkit_core_FocusManager._instance = null;
haxe_ui_toolkit_core_FocusManager.instance = null;
haxe_ui_toolkit_core_FocusManager.get_instance = function() {
	if(haxe_ui_toolkit_core_FocusManager._instance == null) haxe_ui_toolkit_core_FocusManager._instance = new haxe_ui_toolkit_core_FocusManager();
	return haxe_ui_toolkit_core_FocusManager._instance;
};
haxe_ui_toolkit_core_FocusManager.prototype = {
	__class__: haxe_ui_toolkit_core_FocusManager
};
var haxe_ui_toolkit_core_Macros = function() { };
$hxClasses["haxe.ui.toolkit.core.Macros"] = haxe_ui_toolkit_core_Macros;
haxe_ui_toolkit_core_Macros.__name__ = ["haxe","ui","toolkit","core","Macros"];
haxe_ui_toolkit_core_Macros.processNode = function(node,types,paths) {
	var nodeName;
	if(node.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + node.nodeType);
	nodeName = node.nodeName;
	var n = nodeName.indexOf(":");
	if(n != -1) nodeName = HxOverrides.substr(nodeName,n + 1,nodeName.length);
	nodeName = nodeName.toLowerCase();
	if(nodeName == "import") {
	}
	var id = node.get("id");
	if(id != null && id.length > 0) {
		var cls = haxe_ui_toolkit_core_Macros.componentClasses.get(nodeName);
		if(cls != null) {
			if(__map_reserved[id] != null) types.setReserved(id,cls); else types.h[id] = cls;
		} else haxe_Log.trace("WARNING: '" + nodeName + "' hasnt been registered",{ fileName : "Macros.hx", lineNumber : 479, className : "haxe.ui.toolkit.core.Macros", methodName : "processNode"});
	}
	var $it0 = node.elements();
	while( $it0.hasNext() ) {
		var child = $it0.next();
		haxe_ui_toolkit_core_Macros.processNode(child,types,paths);
	}
};
haxe_ui_toolkit_core_Macros.getFunction = function(name,fields) {
	var fn = null;
	var _g = 0;
	try {
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			if(f.name == name) {
				{
					var _g1 = f.kind;
					switch(_g1[1]) {
					case 1:
						var f1 = _g1[2];
						fn = f1;
						throw "__break__";
						break;
					default:
					}
				}
				throw "__break__";
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	return fn;
};
haxe_ui_toolkit_core_Macros.addFunction = function(name,e,access,fields,pos) {
	var fn;
	{
		var _g = e.expr;
		switch(_g[1]) {
		case 11:
			var f = _g[3];
			fn = f;
			break;
		default:
			throw new js__$Boot_HaxeError("false");
		}
	}
	fields.push({ name : name, doc : null, meta : [], access : access, kind : haxe_macro_FieldType.FFun(fn), pos : pos});
};
haxe_ui_toolkit_core_Macros.getFieldsWithMeta = function(meta,fields) {
	var arr = [];
	var _g = 0;
	while(_g < fields.length) {
		var f = fields[_g];
		++_g;
		if(haxe_ui_toolkit_core_Macros.hasMeta(f,meta)) arr.push(f);
	}
	return arr;
};
haxe_ui_toolkit_core_Macros.getSuperClass = function(t) {
	var superClass = null;
	switch(t[1]) {
	case 5:
		var t1 = t[2];
		break;
	case 0:
		var t2 = t[2];
		break;
	case 7:
		var t3 = t[2];
		break;
	case 4:
		var t4 = t[2];
		break;
	case 6:
		var t5 = t[2];
		break;
	case 2:
		var t6 = t[2];
		superClass = t6.get().superClass;
		break;
	case 1:
		var t7 = t[2];
		break;
	case 3:
		var t8 = t[2];
		break;
	case 8:
		var t9 = t[2];
		break;
	}
	return superClass;
};
haxe_ui_toolkit_core_Macros.insertLine = function(fn,e,location) {
	{
		var _g = fn.expr.expr;
		switch(_g[1]) {
		case 12:
			var el = _g[2];
			fn.expr = { expr : haxe_macro_ExprDef.EBlock(haxe_ui_toolkit_core_Macros.insertExpr(el,location,e)), pos : { file : "/usr/share/haxe/lib/haxeui/1,8,4/haxe/ui/toolkit/core/Macros.hx", min : 18014, max : 18043}};
			break;
		default:
			fn.expr = { expr : haxe_macro_ExprDef.EBlock(haxe_ui_toolkit_core_Macros.insertExpr([fn.expr],location,e)), pos : { file : "/usr/share/haxe/lib/haxeui/1,8,4/haxe/ui/toolkit/core/Macros.hx", min : 18066, max : 18104}};
		}
	}
};
haxe_ui_toolkit_core_Macros.insertExpr = function(arr,pos,item) {
	if(pos == -1) arr.push(item); else arr.splice(pos,0,item);
	return arr;
};
haxe_ui_toolkit_core_Macros.getClassNameFromType = function(t) {
	var className = "";
	switch(t[1]) {
	case 5:
		var t1 = t[2];
		className = t1.toString();
		break;
	case 0:
		var t2 = t[2];
		className = t2.toString();
		break;
	case 7:
		var t3 = t[2];
		className = "";
		break;
	case 4:
		var t4 = t[2];
		className = t4.toString();
		break;
	case 6:
		var t5 = t[2];
		className = "";
		break;
	case 2:
		var t6 = t[2];
		className = t6.toString();
		break;
	case 1:
		var t7 = t[2];
		className = t7.toString();
		break;
	case 3:
		var t8 = t[2];
		className = t8.toString();
		break;
	case 8:
		var t9 = t[2];
		className = t9.toString();
		break;
	}
	return className;
};
haxe_ui_toolkit_core_Macros.hasMeta = function(f,meta) {
	var has = false;
	var _g = 0;
	var _g1 = f.meta;
	while(_g < _g1.length) {
		var m = _g1[_g];
		++_g;
		if(m.name == meta || m.name == ":" + meta) {
			has = true;
			break;
		}
	}
	return has;
};
haxe_ui_toolkit_core_Macros.getClassName = function(t) {
	var name = null;
	switch(t[1]) {
	case 5:
		var t1 = t[2];
		break;
	case 0:
		var t2 = t[2];
		break;
	case 7:
		var t3 = t[2];
		break;
	case 4:
		var t4 = t[2];
		break;
	case 6:
		var t5 = t[2];
		break;
	case 2:
		var t6 = t[2];
		name = t6.get().module;
		break;
	case 1:
		var t7 = t[2];
		break;
	case 3:
		var t8 = t[2];
		break;
	case 8:
		var t9 = t[2];
		break;
	}
	return name;
};
haxe_ui_toolkit_core_Macros.hasInterface = function(t,interfaceRequired) {
	var has = false;
	switch(t[1]) {
	case 5:
		var t1 = t[2];
		break;
	case 0:
		var t2 = t[2];
		break;
	case 7:
		var t3 = t[2];
		break;
	case 4:
		var t4 = t[2];
		break;
	case 6:
		var t5 = t[2];
		break;
	case 2:
		var t6 = t[2];
		while(t6 != null) {
			var _g = 0;
			var _g1 = t6.get().interfaces;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				var interfaceName = i.t.toString();
				if(interfaceName == interfaceRequired) {
					has = true;
					break;
				}
			}
			if(has == false) {
				if(t6.get().superClass != null) t6 = t6.get().superClass.t; else t6 = null;
			} else break;
		}
		break;
	case 1:
		var t7 = t[2];
		break;
	case 3:
		var t8 = t[2];
		break;
	case 8:
		var t9 = t[2];
		break;
	}
	return has;
};
haxe_ui_toolkit_core_Macros.resolveResource = function(resourcePath,paths) {
	return resourcePath;
};
var haxe_ui_toolkit_core_PopupManager = function() {
	this._modalPopups = new List();
	this.defaultWidth = 300;
	this.defaultTitle = "HaxeUI";
};
$hxClasses["haxe.ui.toolkit.core.PopupManager"] = haxe_ui_toolkit_core_PopupManager;
haxe_ui_toolkit_core_PopupManager.__name__ = ["haxe","ui","toolkit","core","PopupManager"];
haxe_ui_toolkit_core_PopupManager.__properties__ = {get_instance:"get_instance"}
haxe_ui_toolkit_core_PopupManager._instance = null;
haxe_ui_toolkit_core_PopupManager.instance = null;
haxe_ui_toolkit_core_PopupManager.get_instance = function() {
	if(haxe_ui_toolkit_core_PopupManager._instance == null) haxe_ui_toolkit_core_PopupManager._instance = new haxe_ui_toolkit_core_PopupManager();
	return haxe_ui_toolkit_core_PopupManager._instance;
};
haxe_ui_toolkit_core_PopupManager.prototype = {
	onKeyPress: function(e) {
		if(this._modalPopups.length == 0) return;
		var p = this._modalPopups.first();
		if(p.get_config().dismiss != null) {
			if(e.keyCode == 27 && p.get_config().dismiss == 1) {
				e.stopImmediatePropagation();
				this.dismissModal(257);
			} else if(e.keyCode == 13 && p.get_config().dismiss == 16) {
				e.stopImmediatePropagation();
				this.dismissModal(272);
			} else if(p.get_config().dismiss == 256) {
				e.stopImmediatePropagation();
				this.dismissModal(256);
			}
		}
	}
	,showSimple: function(text,title,config,fn) {
		if(config == null) config = 1;
		var p = this.buildPopup(new haxe_ui_toolkit_controls_popups_SimplePopupContent(text),title,config,fn);
		this.showPopup(p);
		return p;
	}
	,showCustom: function(display,title,config,fn) {
		if(config == null) config = 1;
		var p = this.buildPopup(new haxe_ui_toolkit_controls_popups_CustomPopupContent(display),title,config,fn);
		this.showPopup(p);
		return p;
	}
	,showList: function(items,selectedIndex,title,config,fn) {
		if(selectedIndex == null) selectedIndex = -1;
		var ds = null;
		if((items instanceof Array) && items.__enum__ == null) {
			var arr;
			arr = js_Boot.__cast(items , Array);
			ds = new haxe_ui_toolkit_data_ArrayDataSource();
			var _g = 0;
			while(_g < arr.length) {
				var item = arr[_g];
				++_g;
				if(typeof(item) == "string") {
					var o = { };
					o.text = js_Boot.__cast(item , String);
					ds.add(o);
				} else ds.add(item);
			}
		} else if(js_Boot.__instanceof(items,haxe_ui_toolkit_data_IDataSource)) ds = js_Boot.__cast(items , haxe_ui_toolkit_data_IDataSource);
		var p = this.buildPopup(new haxe_ui_toolkit_controls_popups_ListPopupContent(ds,selectedIndex,fn),title,config,fn);
		this.showPopup(p);
		return p;
	}
	,showCalendar: function(title,fn) {
		var config = { modal : true, buttons : 69632};
		var content = new haxe_ui_toolkit_controls_popups_CalendarPopupContent();
		var tempFn = function(button) {
			if(fn != null) {
				if(button == 65536) fn(button,content.get_selectedDate()); else fn(button,null);
			}
		};
		var p = this.buildPopup(content,title,config,tempFn);
		this.showPopup(p);
		return p;
	}
	,showBusy: function(text,delay,title,config,fn) {
		if(delay == null) delay = -1;
		var _g = this;
		if(config == null) config = { };
		config.useDefaultTitle = false;
		var p = this.buildPopup(new haxe_ui_toolkit_controls_popups_BusyPopupContent(text),title,config,fn);
		this.showPopup(p);
		if(delay > 0) {
			var timer = new haxe_Timer(delay);
			timer.run = function() {
				timer.stop();
				_g.hidePopup(p);
			};
		}
		return p;
	}
	,showPopup: function(p) {
		var modal = true;
		if(p.get_config().modal != null) modal = p.get_config().modal;
		if(modal == true) {
			if(this._modalPopups.length == 0) openfl_Lib.current.stage.addEventListener(openfl_events_KeyboardEvent.KEY_DOWN,$bind(this,this.onKeyPress));
			this._modalPopups.push(p);
			p.get_root().showModalOverlay();
		}
		p.get_root().addChild(p);
		this.centerPopup(p);
		var transition = haxe_ui_toolkit_core_Toolkit.getTransitionForClass(haxe_ui_toolkit_controls_popups_Popup);
		var transitionTime = haxe_ui_toolkit_core_Toolkit.getTransitionTimeForClass(haxe_ui_toolkit_controls_popups_Popup);
		if(transition == "slide") {
			var ypos = p.get_y();
			p.set_y(-p.get_height());
			p.set_visible(true);
			motion_Actuate.tween(p,transitionTime,{ y : ypos},true).ease(motion_easing_Quart.get_easeOut()).onComplete(function() {
			});
		} else if(transition == "fade") {
			p.get_sprite().set_alpha(0);
			p.set_visible(true);
			motion_Actuate.tween(p.get_sprite(),transitionTime,{ alpha : 1},true).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			});
		} else p.set_visible(true);
		haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_Event.RESIZE,$bind(this,this._onScreenResize));
	}
	,hidePopup: function(p,dispose) {
		if(dispose == null) dispose = true;
		this._modalPopups.remove(p);
		if(this._modalPopups.length == 0) openfl_Lib.current.stage.removeEventListener(openfl_events_KeyboardEvent.KEY_DOWN,$bind(this,this.onKeyPress));
		var transition = haxe_ui_toolkit_core_Toolkit.getTransitionForClass(haxe_ui_toolkit_controls_popups_Popup);
		var transitionTime = haxe_ui_toolkit_core_Toolkit.getTransitionTimeForClass(haxe_ui_toolkit_controls_popups_Popup);
		if(transition == "slide") motion_Actuate.tween(p,transitionTime,{ y : p.get_root().get_height()},true).ease(motion_easing_Quart.get_easeOut()).onComplete(function() {
			p.get_root().removeChild(p,dispose);
			p.get_root().hideModalOverlay();
		}); else if(transition == "fade") motion_Actuate.tween(p.get_sprite(),transitionTime,{ alpha : 0},true).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			p.get_root().removeChild(p,dispose);
			p.get_root().hideModalOverlay();
		}); else {
			p.get_root().removeChild(p,dispose);
			p.get_root().hideModalOverlay();
		}
		haxe_ui_toolkit_core_Screen.get_instance().removeEventListener(openfl_events_Event.RESIZE,$bind(this,this._onScreenResize));
	}
	,_onScreenResize: function(event) {
		var _g_head = this._modalPopups.h;
		var _g_val = null;
		while(_g_head != null) {
			var p;
			p = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			this.centerPopup(p);
		}
	}
	,centerPopup: function(p) {
		var cx = p.get_width();
		if(p.get_percentWidth() > 0) cx = p.get_root().get_width() * p.get_percentWidth() / 100;
		p.set_x(Std["int"](p.get_root().get_width() / 2 - cx / 2));
		p.set_y(Std["int"](p.get_root().get_height() / 2 - p.get_height() / 2));
	}
	,dismissModal: function(action) {
		if(this._modalPopups.length == 0) return;
		var p = this._modalPopups.first();
		if(p.get_config().dismiss != null && (p.get_config().dismiss & action) > 0) {
			this.hidePopup(p);
			p.callClosingCallback(4096);
		}
	}
	,buildPopup: function(content,title,config,fn) {
		config = this.buildConfig(config);
		if(title == null && config.useDefaultTitle == true) title = haxe_ui_toolkit_core_PopupManager.get_instance().defaultTitle;
		var p = new haxe_ui_toolkit_controls_popups_Popup(title,content,config,fn);
		p.set_root(config.root);
		p.set_visible(false);
		return p;
	}
	,buildConfig: function(config) {
		var c;
		if(((config | 0) === config) || (config instanceof Array) && config.__enum__ == null) c = { }; else c = Reflect.copy(config);
		c.id = null;
		c.styleName = null;
		c.modal = true;
		c.width = haxe_ui_toolkit_core_PopupManager.get_instance().defaultWidth;
		c.useDefaultTitle = true;
		c.root = haxe_ui_toolkit_core_RootManager.get_instance().get_currentRoot();
		if(config != null && !((config | 0) === config) && !((config instanceof Array) && config.__enum__ == null)) {
			if(config.id != null) c.id = config.id; else c.id = null;
			if(config.styleName != null) c.styleName = config.styleName; else c.styleName = null;
			if(config.modal != null) c.modal = config.modal; else c.modal = true;
			if(config.width != null) c.width = config.width; else c.width = haxe_ui_toolkit_core_PopupManager.get_instance().defaultWidth;
			if(config.useDefaultTitle != null) c.useDefaultTitle = config.useDefaultTitle; else c.useDefaultTitle = true;
			if(config.root != null) c.root = config.root; else c.root = haxe_ui_toolkit_core_RootManager.get_instance().get_currentRoot();
		}
		c.buttons = [];
		if(config != null) {
			if(((config | 0) === config)) c.buttons = this.buildButtonArray(config); else if((config instanceof Array) && config.__enum__ == null) c.buttons = this.buildButtonArray(config); else if(config.buttons != null) c.buttons = this.buildButtonArray(config.buttons);
		}
		return c;
	}
	,buildButtonArray: function(data) {
		var buttons = [];
		if(((data | 0) === data)) {
			var n;
			n = js_Boot.__cast(data , Int);
			if((n & 1) == 1) buttons.push(new haxe_ui_toolkit_core_PopupButtonInfo(1));
			if((n & 16) == 16) buttons.push(new haxe_ui_toolkit_core_PopupButtonInfo(16));
			if((n & 256) == 256) buttons.push(new haxe_ui_toolkit_core_PopupButtonInfo(256));
			if((n & 4096) == 4096) buttons.push(new haxe_ui_toolkit_core_PopupButtonInfo(4096));
			if((n & 65536) == 65536) buttons.push(new haxe_ui_toolkit_core_PopupButtonInfo(65536));
			if((n & 1048576) == 1048576) buttons.push(new haxe_ui_toolkit_core_PopupButtonInfo(1048576));
		} else if((data instanceof Array) && data.__enum__ == null) {
			var arr = data;
			var _g = 0;
			while(_g < arr.length) {
				var item = arr[_g];
				++_g;
				if(((item | 0) === item)) buttons.push(new haxe_ui_toolkit_core_PopupButtonInfo(js_Boot.__cast(item , Int))); else {
					var type = 16777216;
					if(item.type != null) type = item.type;
					var text = item.text;
					var fn = item.fn;
					buttons.push(new haxe_ui_toolkit_core_PopupButtonInfo(type,text,fn));
				}
			}
		}
		return buttons;
	}
	,__class__: haxe_ui_toolkit_core_PopupManager
};
var haxe_ui_toolkit_core_PopupButton = function() { };
$hxClasses["haxe.ui.toolkit.core.PopupButton"] = haxe_ui_toolkit_core_PopupButton;
haxe_ui_toolkit_core_PopupButton.__name__ = ["haxe","ui","toolkit","core","PopupButton"];
var haxe_ui_toolkit_core_PopupButtonInfo = function(type,text,fn) {
	if(type == null) type = 1;
	this.type = -1;
	this.type = type;
	this.text = text;
	this.fn = fn;
};
$hxClasses["haxe.ui.toolkit.core.PopupButtonInfo"] = haxe_ui_toolkit_core_PopupButtonInfo;
haxe_ui_toolkit_core_PopupButtonInfo.__name__ = ["haxe","ui","toolkit","core","PopupButtonInfo"];
haxe_ui_toolkit_core_PopupButtonInfo.prototype = {
	__class__: haxe_ui_toolkit_core_PopupButtonInfo
};
var haxe_ui_toolkit_core_Dismiss = function() { };
$hxClasses["haxe.ui.toolkit.core.Dismiss"] = haxe_ui_toolkit_core_Dismiss;
haxe_ui_toolkit_core_Dismiss.__name__ = ["haxe","ui","toolkit","core","Dismiss"];
var haxe_ui_toolkit_core_Root = function() {
	this._modalOverlayCounter = 0;
	haxe_ui_toolkit_core_Component.call(this);
	this._layout = new haxe_ui_toolkit_layout_AbsoluteLayout();
	this._clipContent = false;
	this._mousePos = new openfl_geom_Point(0,0);
	haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_Event.RESIZE,$bind(this,this._onScreenResize));
};
$hxClasses["haxe.ui.toolkit.core.Root"] = haxe_ui_toolkit_core_Root;
haxe_ui_toolkit_core_Root.__name__ = ["haxe","ui","toolkit","core","Root"];
haxe_ui_toolkit_core_Root.__super__ = haxe_ui_toolkit_core_Component;
haxe_ui_toolkit_core_Root.prototype = $extend(haxe_ui_toolkit_core_Component.prototype,{
	preInitialize: function() {
		var _g = this;
		haxe_ui_toolkit_core_Component.prototype.preInitialize.call(this);
		this.addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,function(event) {
			_g._mousePos = new openfl_geom_Point(event.stageX,event.stageY);
		});
		this.resizeRoot();
	}
	,_onScreenResize: function(event) {
		this.resizeRoot();
	}
	,get_mousePosition: function() {
		return this._mousePos;
	}
	,add: function(item) {
		var r = null;
		if(typeof(item) == "string") r = this.addChild(haxe_ui_toolkit_core_Toolkit.processXmlResource(item)); else if(js_Boot.__instanceof(item,haxe_ui_toolkit_core_Controller)) r = this.addChild((js_Boot.__cast(item , haxe_ui_toolkit_core_Controller)).get_view()); else haxe_Log.trace(Std.string(item) + " item not supported in Root.add",{ fileName : "Root.hx", lineNumber : 67, className : "haxe.ui.toolkit.core.Root", methodName : "add"});
		return r;
	}
	,resizeRoot: function() {
		if(this.get_percentWidth() > 0) this.set_width(haxe_ui_toolkit_core_Screen.get_instance().get_width() * this.get_percentWidth() / 100);
		if(this.get_percentHeight() > 0) this.set_height(haxe_ui_toolkit_core_Screen.get_instance().get_height() * this.get_percentHeight() / 100);
	}
	,showModalOverlay: function() {
		this._modalOverlayCounter++;
		if(this._modalOverlay == null) {
			this._modalOverlay = new haxe_ui_toolkit_core_Component();
			this._modalOverlay.set_id("modalOverlay");
			this._modalOverlay.set_percentWidth(this._modalOverlay.set_percentHeight(100));
			this._modalOverlay.set_onClick(function(e) {
				haxe_ui_toolkit_core_PopupManager.get_instance().dismissModal(4096);
			});
		}
		if(this.findChild("modalOverlay") == null) this.addChild(this._modalOverlay);
		this._modalOverlay.set_visible(true);
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(child,haxe_ui_toolkit_controls_popups_Popup) == false && child.get_id() != "modalOverlay") {
				var c;
				c = js_Boot.__cast(child , haxe_ui_toolkit_core_Component);
			}
		}
	}
	,hideModalOverlay: function() {
		this._modalOverlayCounter--;
		if(this._modalOverlayCounter <= 0) {
			if(this._modalOverlay != null) this._modalOverlay.set_visible(false);
			var _g = 0;
			var _g1 = this.get_children();
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(js_Boot.__instanceof(child,haxe_ui_toolkit_controls_popups_Popup) == false && child.get_id() != "modalOverlay") {
					var c;
					c = js_Boot.__cast(child , haxe_ui_toolkit_core_Component);
				}
			}
			this._modalOverlayCounter = 0;
		}
	}
	,clone: function() {
		var c = haxe_ui_toolkit_core_Component.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_core_Root();
	}
	,__class__: haxe_ui_toolkit_core_Root
	,__properties__: $extend(haxe_ui_toolkit_core_Component.prototype.__properties__,{get_mousePosition:"get_mousePosition"})
});
var haxe_ui_toolkit_core_RootManager = function() {
	this._roots = [];
};
$hxClasses["haxe.ui.toolkit.core.RootManager"] = haxe_ui_toolkit_core_RootManager;
haxe_ui_toolkit_core_RootManager.__name__ = ["haxe","ui","toolkit","core","RootManager"];
haxe_ui_toolkit_core_RootManager.__properties__ = {get_instance:"get_instance"}
haxe_ui_toolkit_core_RootManager._instance = null;
haxe_ui_toolkit_core_RootManager.instance = null;
haxe_ui_toolkit_core_RootManager.get_instance = function() {
	if(haxe_ui_toolkit_core_RootManager._instance == null) haxe_ui_toolkit_core_RootManager._instance = new haxe_ui_toolkit_core_RootManager();
	return haxe_ui_toolkit_core_RootManager._instance;
};
haxe_ui_toolkit_core_RootManager.prototype = {
	createRoot: function(options,fn) {
		if(options == null) options = { };
		if(options.parent != null) options.parent = options.parent; else options.parent = openfl_Lib.current.stage;
		var root = new haxe_ui_toolkit_core_Root();
		root.get_sprite().set_scaleX(root.get_sprite().set_scaleY(haxe_ui_toolkit_core_Toolkit.get_scaleFactor()));
		this._roots.push(root);
		root.addEventListener(openfl_events_Event.ADDED_TO_STAGE,function(e) {
			if(fn != null) {
				fn(root);
				root.invalidate(1048576);
			}
			root.removeEventListenerType(openfl_events_Event.ADDED_TO_STAGE);
		});
		root.set_root(root);
		root.set_id(options.id != null?options.id:"root");
		root.set_styleName(options.styleName != null?options.styleName:null);
		root.set_x(options.x != null?options.x:0);
		root.set_y(options.y != null?options.y:0);
		root.set_width(options.width != null?options.width:0);
		root.set_height(options.height != null?options.height:0);
		root.set_percentWidth(options.percentWidth != null?options.percentWidth:-1);
		root.set_percentHeight(options.percentHeight != null?options.percentHeight:-1);
		options.parent.addChild(root.get_sprite());
		return root;
	}
	,destroyRoot: function(root) {
		if(root.get_sprite().parent != null) root.get_sprite().parent.removeChild(root.get_sprite());
		root.dispose();
		HxOverrides.remove(this._roots,root);
	}
	,destroyAllRoots: function() {
		var _g = 0;
		var _g1 = this._roots;
		while(_g < _g1.length) {
			var root = _g1[_g];
			++_g;
			this.destroyRoot(root);
		}
	}
	,get_roots: function() {
		return this._roots;
	}
	,get_currentRoot: function() {
		if(this._roots.length == 0) return null;
		return this._roots[this._roots.length - 1];
	}
	,__class__: haxe_ui_toolkit_core_RootManager
	,__properties__: {get_currentRoot:"get_currentRoot",get_roots:"get_roots"}
};
var haxe_ui_toolkit_core_Screen = function() {
	this._cursorY = -1;
	this._cursorX = -1;
	this.addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
};
$hxClasses["haxe.ui.toolkit.core.Screen"] = haxe_ui_toolkit_core_Screen;
haxe_ui_toolkit_core_Screen.__name__ = ["haxe","ui","toolkit","core","Screen"];
haxe_ui_toolkit_core_Screen.__properties__ = {get_instance:"get_instance"}
haxe_ui_toolkit_core_Screen._instance = null;
haxe_ui_toolkit_core_Screen.instance = null;
haxe_ui_toolkit_core_Screen.get_instance = function() {
	if(haxe_ui_toolkit_core_Screen._instance == null) haxe_ui_toolkit_core_Screen._instance = new haxe_ui_toolkit_core_Screen();
	return haxe_ui_toolkit_core_Screen._instance;
};
haxe_ui_toolkit_core_Screen.prototype = {
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		var target = openfl_Lib.current.stage;
		target.addEventListener(type,listener,useCapture,priority,useWeakReference);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		var target = openfl_Lib.current.stage;
		target.removeEventListener(type,listener,useCapture);
	}
	,get_width: function() {
		return openfl_Lib.current.stage.stageWidth;
	}
	,get_height: function() {
		return openfl_Lib.current.stage.stageHeight;
	}
	,get_cursorX: function() {
		return this._cursorX;
	}
	,get_cursorY: function() {
		return this._cursorY;
	}
	,_onScreenMouseMove: function(event) {
		this._cursorX = event.stageX;
		this._cursorY = event.stageY;
	}
	,__class__: haxe_ui_toolkit_core_Screen
	,__properties__: {get_cursorY:"get_cursorY",get_cursorX:"get_cursorX",get_height:"get_height",get_width:"get_width"}
};
var haxe_ui_toolkit_core__$ToolTipManager_ToolTipPosition_$Impl_$ = {};
$hxClasses["haxe.ui.toolkit.core._ToolTipManager.ToolTipPosition_Impl_"] = haxe_ui_toolkit_core__$ToolTipManager_ToolTipPosition_$Impl_$;
haxe_ui_toolkit_core__$ToolTipManager_ToolTipPosition_$Impl_$.__name__ = ["haxe","ui","toolkit","core","_ToolTipManager","ToolTipPosition_Impl_"];
haxe_ui_toolkit_core__$ToolTipManager_ToolTipPosition_$Impl_$.fromString = function(s) {
	switch(s) {
	case "top":
		return "top";
	case "bottom":
		return "bottom";
	case "left":
		return "left";
	case "right":
		return "right";
	default:
		throw new js__$Boot_HaxeError("Invalid value for enum ToolTipPosition: " + s);
	}
};
var haxe_ui_toolkit_core__$ToolTipManager_ToolTipRelativeTo_$Impl_$ = {};
$hxClasses["haxe.ui.toolkit.core._ToolTipManager.ToolTipRelativeTo_Impl_"] = haxe_ui_toolkit_core__$ToolTipManager_ToolTipRelativeTo_$Impl_$;
haxe_ui_toolkit_core__$ToolTipManager_ToolTipRelativeTo_$Impl_$.__name__ = ["haxe","ui","toolkit","core","_ToolTipManager","ToolTipRelativeTo_Impl_"];
haxe_ui_toolkit_core__$ToolTipManager_ToolTipRelativeTo_$Impl_$.fromString = function(s) {
	switch(s) {
	case "cursor":
		return "cursor";
	case "target":
		return "target";
	default:
		throw new js__$Boot_HaxeError("Invalid value for enum ToolTipRelativeTo: " + s);
	}
};
var haxe_ui_toolkit_core_ToolTipOptionsDefaults = function() { };
$hxClasses["haxe.ui.toolkit.core.ToolTipOptionsDefaults"] = haxe_ui_toolkit_core_ToolTipOptionsDefaults;
haxe_ui_toolkit_core_ToolTipOptionsDefaults.__name__ = ["haxe","ui","toolkit","core","ToolTipOptionsDefaults"];
haxe_ui_toolkit_core_ToolTipOptionsDefaults.applyDefaults = function(to) {
	if(to.position != null) to.position = to.position; else to.position = haxe_ui_toolkit_core_ToolTipManager.get_instance().defaults.position;
	if(to.relativeTo != null) to.relativeTo = to.relativeTo; else to.relativeTo = haxe_ui_toolkit_core_ToolTipManager.get_instance().defaults.relativeTo;
	if(to.center != null) to.center = to.center; else to.center = haxe_ui_toolkit_core_ToolTipManager.get_instance().defaults.center;
	if(to.autoHide != null) to.autoHide = to.autoHide; else to.autoHide = true;
	if(to.offsetX != null) to.offsetX = to.offsetX; else to.offsetX = haxe_ui_toolkit_core_ToolTipManager.get_instance().defaults.offsetX;
	if(to.offsetY != null) to.offsetY = to.offsetY; else to.offsetY = haxe_ui_toolkit_core_ToolTipManager.get_instance().defaults.offsetY;
	if(to.delay != null) to.delay = to.delay; else to.delay = haxe_ui_toolkit_core_ToolTipManager.get_instance().defaults.delay;
	if(to.follow != null) to.follow = to.follow; else to.follow = haxe_ui_toolkit_core_ToolTipManager.get_instance().defaults.follow;
};
var haxe_ui_toolkit_core_ToolTipOptionsComponentDefaults = function() { };
$hxClasses["haxe.ui.toolkit.core.ToolTipOptionsComponentDefaults"] = haxe_ui_toolkit_core_ToolTipOptionsComponentDefaults;
haxe_ui_toolkit_core_ToolTipOptionsComponentDefaults.__name__ = ["haxe","ui","toolkit","core","ToolTipOptionsComponentDefaults"];
haxe_ui_toolkit_core_ToolTipOptionsComponentDefaults.applyDefaultsFromComponent = function(to,from) {
	if(from.toolTipPosition != null) to.position = from.toolTipPosition;
	if(from.toolTipRelativeTo != null) to.relativeTo = from.toolTipRelativeTo;
	if(from.toolTipCenter != null) to.center = from.toolTipCenter;
	if(from.toolTipOffsetX != null) to.offsetX = from.toolTipOffsetX;
	if(from.toolTipOffsetY != null) to.offsetY = from.toolTipOffsetY;
	if(from.toolTipFollow != null) to.follow = from.toolTipFollow;
};
var haxe_ui_toolkit_core_ToolTipManager = function() {
	this.defaults = { position : "top", relativeTo : "cursor", center : true, offsetX : 3, offsetY : 3, delay : 700, follow : false};
	haxe_ui_toolkit_core_Screen.get_instance();
};
$hxClasses["haxe.ui.toolkit.core.ToolTipManager"] = haxe_ui_toolkit_core_ToolTipManager;
haxe_ui_toolkit_core_ToolTipManager.__name__ = ["haxe","ui","toolkit","core","ToolTipManager"];
haxe_ui_toolkit_core_ToolTipManager.__properties__ = {get_instance:"get_instance"}
haxe_ui_toolkit_core_ToolTipManager._instance = null;
haxe_ui_toolkit_core_ToolTipManager.instance = null;
haxe_ui_toolkit_core_ToolTipManager.get_instance = function() {
	if(haxe_ui_toolkit_core_ToolTipManager._instance == null) haxe_ui_toolkit_core_ToolTipManager._instance = new haxe_ui_toolkit_core_ToolTipManager();
	return haxe_ui_toolkit_core_ToolTipManager._instance;
};
haxe_ui_toolkit_core_ToolTipManager.prototype = {
	showToolTip: function(c,options,event) {
		if(this._currentToolTip != null && this._currentToolTip.component == c) return;
		if(options == null) options = { };
		haxe_ui_toolkit_core_ToolTipOptionsComponentDefaults.applyDefaultsFromComponent(options,c);
		haxe_ui_toolkit_core_ToolTipOptionsDefaults.applyDefaults(options);
		if(event == null || event.get_component() != c) {
			options.relativeTo = "target";
			options.autoHide = false;
		}
		this.hideCurrentToolTip();
		this._currentToolTip = new haxe_ui_toolkit_controls_ToolTip();
		this._currentToolTip.set_text(c.get_toolTip());
		this._currentToolTip.component = c;
		this._currentToolTip.options = options;
		c.get_root().addChild(this._currentToolTip);
		this._currentToolTip.set_alpha(0);
		this.positionTooltip(this._currentToolTip,options);
		motion_Actuate.tween(this._currentToolTip,.3,{ alpha : 1});
		haxe_ui_toolkit_core_Screen.get_instance().addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
	}
	,_onScreenMouseMove: function(event) {
		if(this._currentToolTip != null) {
			if(this._currentToolTip.options.follow == true) this.positionTooltip(this._currentToolTip,this._currentToolTip.options);
			if(this._currentToolTip.component.hitTest(event.stageX,event.stageY) == false && this._currentToolTip.options.autoHide == true) this.hideCurrentToolTip();
		}
	}
	,positionTooltip: function(tooltip,options) {
		var c = tooltip.component;
		var xpos = c.get_stageX() - c.get_root().get_stageX();
		var ypos = c.get_stageY() - c.get_root().get_stageY();
		if(options.relativeTo == "cursor") {
			xpos = haxe_ui_toolkit_core_Screen.get_instance().get_cursorX();
			ypos = haxe_ui_toolkit_core_Screen.get_instance().get_cursorY();
		}
		var _g = options.position;
		if(_g != null) switch(_g) {
		case "top":
			if(options.relativeTo == "cursor") {
				xpos += options.offsetX;
				if(options.center == true) xpos -= this._currentToolTip.get_width() / 2;
				ypos -= this._currentToolTip.get_height() + options.offsetY;
			} else if(options.relativeTo == "target") {
				if(options.center == true) xpos = xpos + (c.get_width() / 2 - this._currentToolTip.get_width() / 2); else xpos += options.offsetX;
				ypos -= this._currentToolTip.get_height() + options.offsetY;
			}
			break;
		case "bottom":
			if(options.relativeTo == "cursor") {
				xpos += options.offsetX;
				if(options.center == true) xpos -= this._currentToolTip.get_width() / 2;
				ypos += options.offsetY;
			} else if(options.relativeTo == "target") {
				if(options.center == true) xpos = xpos + (c.get_width() / 2 - this._currentToolTip.get_width() / 2); else xpos += options.offsetX;
				ypos += this._currentToolTip.get_height() + options.offsetY;
			}
			break;
		case "left":
			if(options.relativeTo == "cursor") {
				xpos -= this._currentToolTip.get_width() + options.offsetX;
				ypos += options.offsetY;
				if(options.center == true) ypos -= this._currentToolTip.get_height() / 2;
			} else if(options.relativeTo == "target") {
				xpos -= this._currentToolTip.get_width() + options.offsetX;
				if(options.center == true) ypos = ypos + (c.get_height() / 2 - this._currentToolTip.get_height() / 2); else ypos += options.offsetY;
			}
			break;
		case "right":
			if(options.relativeTo == "cursor") {
				xpos += options.offsetX;
				ypos += options.offsetY;
				if(options.center == true) ypos -= this._currentToolTip.get_height() / 2;
			} else if(options.relativeTo == "target") {
				xpos += c.get_width() + options.offsetX;
				if(options.center == true) ypos = ypos + (c.get_height() / 2 - this._currentToolTip.get_height() / 2); else ypos += options.offsetY;
			}
			break;
		}
		tooltip.set_x(xpos);
		tooltip.set_y(ypos);
	}
	,hideCurrentToolTip: function() {
		haxe_ui_toolkit_core_Screen.get_instance().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
		if(this._currentToolTip != null) {
			var copy = this._currentToolTip;
			motion_Actuate.tween(this._currentToolTip,.3,{ alpha : 0}).onComplete(function() {
				copy.get_root().removeChild(copy);
			});
		}
		haxe_ui_toolkit_core_Screen.get_instance().removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
		this._currentToolTip = null;
	}
	,toolTipVisible: function(c) {
		if(this._currentToolTip == null) return false;
		return this._currentToolTip.component == c;
	}
	,__class__: haxe_ui_toolkit_core_ToolTipManager
};
var haxe_ui_toolkit_core_Toolkit = function() {
	this.initInstance();
};
$hxClasses["haxe.ui.toolkit.core.Toolkit"] = haxe_ui_toolkit_core_Toolkit;
haxe_ui_toolkit_core_Toolkit.__name__ = ["haxe","ui","toolkit","core","Toolkit"];
haxe_ui_toolkit_core_Toolkit.__properties__ = {set_scaleFactor:"set_scaleFactor",get_scaleFactor:"get_scaleFactor",set_defaultTransition:"set_defaultTransition",get_defaultTransition:"get_defaultTransition",get_versionString:"get_versionString",get_versionInfo:"get_versionInfo",get_instance:"get_instance"}
haxe_ui_toolkit_core_Toolkit._instance = null;
haxe_ui_toolkit_core_Toolkit.instance = null;
haxe_ui_toolkit_core_Toolkit.get_instance = function() {
	if(haxe_ui_toolkit_core_Toolkit._instance == null) {
		openfl_Lib.current.stage.align = openfl_display_StageAlign.TOP_LEFT;
		openfl_Lib.current.stage.scaleMode = openfl_display_StageScaleMode.NO_SCALE;
		haxe_ui_toolkit_core_Toolkit._instance = new haxe_ui_toolkit_core_Toolkit();
	}
	return haxe_ui_toolkit_core_Toolkit._instance;
};
haxe_ui_toolkit_core_Toolkit.init = function() {
	(function() {
		var value = JSON.parse("{\n\t\"name\": \"openfl\",\n\t\"url\": \"http://www.openfl.org\",\n\t\"license\": \"MIT\",\n\t\"tags\": [],\n\t\"description\": \"The \\\"Open Flash Library\\\" for fast 2D development\",\n\t\"version\": \"3.5.2\",\n\t\"releasenote\": \"Extern improvements, minor fixes\",\n\t\"contributors\": [ \"singmajesty\" ]\n}");
		haxe_ui_toolkit_core_Toolkit._versionInfo.set("openfl",value);
		var value1 = JSON.parse("{\n\t\"name\": \"lime\",\n\t\"url\": \"https://github.com/openfl/lime\",\n\t\"license\": \"MIT\",\n\t\"tags\": [],\n\t\"description\": \"A flexible lightweight layer for Haxe cross-platform developers\",\n\t\"version\": \"2.8.3\",\n\t\"releasenote\": \"Improved current Android NDK support, other fixes\",\n\t\"contributors\": [ \"singmajesty\" ]\n}");
		haxe_ui_toolkit_core_Toolkit._versionInfo.set("lime",value1);
		var value2 = JSON.parse("{\r\n  \"name\": \"hscript\",\r\n  \"url\": \"https://github.com/HaxeFoundation/hscript\",\r\n  \"license\": \"MIT\",\r\n  \"description\": \"Haxe Script is a scripting engine for a subset of the Haxe language\",\r\n  \"version\": \"2.0.5\",\r\n  \"releasenote\": \"switch and array comprehension support\",\r\n  \"contributors\": [\"ncannasse\"]\r\n}");
		haxe_ui_toolkit_core_Toolkit._versionInfo.set("hscript",value2);
		var value3 = JSON.parse("{\n    \"name\": \"haxeui\",\n    \"license\": \"MIT\",\n    \"tags\": [\n        \"rich\",\n        \"ui\"\n    ],\n    \"description\": \"Styleable application centric rich UI\",\n    \"contributors\": [\n        \"ianharrigan\"\n    ],\n    \"releasenote\": \"Stop fixing openfl/lime versions\",\n    \"version\": \"1.8.4\",\n    \"url\": \"https://github.com/ianharrigan/haxeui\",\n    \"dependencies\": {\n        \"lime\": \"\",\n        \"actuate\": \"\",\n        \"openfl\": \"\",\n        \"hscript\": \"\"\n    }\n}");
		haxe_ui_toolkit_core_Toolkit._versionInfo.set("haxeui",value3);
		var value4 = JSON.parse("{\r\n  \"name\": \"actuate\",\r\n  \"url\": \"http://github.com/openfl/actuate\",\r\n  \"license\": \"MIT\",\r\n  \"tags\": [ \"flash\", \"cpp\", \"neko\", \"js\" ],\r\n  \"description\": \"Actuate is a fast and flexible tween library that uses a jQuery-style \\\"chaining\\\" syntax. It out-performs other libraries (such as TweenLite) and is easy to extend with custom actuators.\",\r\n  \"version\": \"1.8.6\",\r\n  \"releasenote\": \"Patches for C++ type reflection, Actuate.update and Lime\",\r\n  \"contributors\": [ \"singmajesty\" ],\r\n  \"dependencies\": {}\r\n}\r\n");
		haxe_ui_toolkit_core_Toolkit._versionInfo.set("actuate",value4);
		var value5 = JSON.parse("{\r\n    \"name\"         : \"haxeui-rich-text\",\r\n    \"url\"          : \"https://github.com/ianharrigan/haxeui-rich-text\",\r\n    \"license\"      : \"MIT\",\r\n    \"tags\"         : [\"rich\", \"ui\", \"haxeui\"],\r\n    \"description\"  : \"Rich text for HaxeUI\",\r\n    \"version\"      : \"0.1.2\",\r\n    \"releasenote\"  : \"Improved RegExp syntax rules\",\r\n    \"contributors\" : [\"ianharrigan\"],\r\n    \"dependencies\" : {\r\n        \"openfl\"        : \"\",\r\n        \"actuate\"       : \"\",\r\n        \"hscript\"       : \"\",\r\n        \"haxeui\"       : \"\"\r\n    }\r\n}\r\n");
		haxe_ui_toolkit_core_Toolkit._versionInfo.set("haxeui-rich-text",value5);
	})();
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.ScrollView","scrollview");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Text","text");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.DefaultScrollViewRefreshing","defaultscrollviewrefreshing");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.ScrollViewRefreshPrompt","scrollviewrefreshprompt");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.TextInput","textinput");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.Absolute","absolute");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.ListView","listview");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.VBox","vbox");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Menu","menu");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.ContinuousHBox","continuoushbox");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.renderers.ItemRenderer","itemrenderer");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.renderers.ComponentItemRenderer","componentitemrenderer");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.Component","component");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.HBox","hbox");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.HSplitter","hsplitter");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.MenuItem","menuitem");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.Container","container");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.MenuSeparator","menuseparator");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Spacer","spacer");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.VSplitterGripper","vsplittergripper");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.VScroll","vscroll");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.MenuBar","menubar");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Value","value");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.DefaultScrollViewRefreshPrompt","defaultscrollviewrefreshprompt");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.HScroll","hscroll");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.CheckBoxValue","checkboxvalue");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.ScrollViewRefreshing","refreshing");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.ScrollViewRefreshPrompt","refreshprompt");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.TabView","tabview");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Progress","progress");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.ExpandablePanel","expandablepanel");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.ToolTip","tooltip");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Slider","slider");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.MenuButton","menubutton");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.VSplitter","vsplitter");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.selection.DropDownList","dropdownlist");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.CalendarView","calendarview");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.ExpandableButton","expandablebutton");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Link","link");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.StateComponent","statecomponent");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.VSlider","vslider");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.VProgress","vprogress");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.CalendarDay","calendarday");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.ContinuousVBox","continuousvbox");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.richtext.RTFView","rtfview");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.TabBar","tabbar");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Image","image");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.OptionBoxValue","optionboxvalue");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.ScrollViewRefreshing","scrollviewrefreshing");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.HSlider","hslider");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.TableView","tableview");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.richtext.Code","code");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.CheckBox","checkbox");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.TableViewRow","tableviewrow");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.DisplayObject","displayobject");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.OptionBox","optionbox");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.Root","root");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.DisplayObjectContainer","displayobjectcontainer");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.Box","box");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.HProgress","hprogress");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.StyleableDisplayObject","styleabledisplayobject");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.Stack","stack");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.AccordionButton","accordionbutton");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.HSplitterGripper","hsplittergripper");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.Grid","grid");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.SpriteContainer","spritecontainer");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Divider","divider");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.selection.ListSelector","listselector");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.Accordion","accordion");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Button","button");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Scroll","scroll");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.renderers.BasicItemRenderer","basicitemrenderer");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Calendar","calendar");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.selection.DateSelector","dateselector");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerDataSourceClassName("haxe.ui.toolkit.data.ArrayDataSource","array");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerDataSourceClassName("haxe.ui.toolkit.data.XMLDataSource","xml");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerDataSourceClassName("haxe.ui.toolkit.data.JSONDataSource","json");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerDataSourceClassName("haxe.ui.toolkit.data.FilesDataSource","files");
	haxe_ui_toolkit_core_ClassManager.get_instance().registerDataSourceClassName("haxe.ui.toolkit.data.MySQLDataSource","mysql");
	haxe_ui_toolkit_themes_Theme.addAsset("__PUBLIC__","css/rtf.css");
	haxe_ui_toolkit_themes_Theme.addAsset("__PUBLIC__","css/code.css");
	haxe_ui_toolkit_themes_Theme.addAsset("gradient","styles/gradient/gradient.css");
	haxe_ui_toolkit_themes_Theme.addAsset("default",haxe_ui_toolkit_style_DefaultStyles);
	haxe_ui_toolkit_themes_Theme.addAsset("gradient_mobile","styles/gradient/gradient_mobile.css");
	haxe_ui_toolkit_themes_Theme.addAsset("windows","styles/windows/windows.css");
	haxe_ui_toolkit_themes_Theme.addAsset("windows","styles/windows/buttons.css");
	haxe_ui_toolkit_themes_Theme.addAsset("windows","styles/windows/tabs.css");
	haxe_ui_toolkit_themes_Theme.addAsset("windows","styles/windows/listview.css");
	haxe_ui_toolkit_themes_Theme.addAsset("windows","styles/windows/scrolls.css");
	haxe_ui_toolkit_themes_Theme.addAsset("windows","styles/windows/sliders.css");
	haxe_ui_toolkit_themes_Theme.addAsset("windows","styles/windows/accordion.css");
	haxe_ui_toolkit_themes_Theme.addAsset("windows","styles/windows/rtf.css");
	haxe_ui_toolkit_themes_Theme.addAsset("windows","styles/windows/calendar.css");
	haxe_ui_toolkit_themes_Theme.addAsset("windows","styles/windows/popups.css");
	haxe_ui_toolkit_themes_Theme.addAsset("windows","styles/windows/menus.css");
	haxe_ui_toolkit_core_Toolkit.get_instance();
	haxe_ui_toolkit_core_Toolkit.registerXMLProcessor(haxe_ui_toolkit_core_xml_UIProcessor,"ui");
	haxe_ui_toolkit_core_Toolkit.registerXMLProcessor(haxe_ui_toolkit_core_xml_UIProcessor,"selection");
	haxe_ui_toolkit_core_Toolkit.registerXMLProcessor(haxe_ui_toolkit_core_xml_StyleProcessor,"style");
	haxe_ui_toolkit_core_Toolkit.registerXMLProcessor(haxe_ui_toolkit_core_xml_DataProcessor,"data");
	var setDefaultTransition = function(cls,transition,time) {
		var className = Type.getClassName(cls);
		if(haxe_ui_toolkit_core_Toolkit._transitionRegister == null || haxe_ui_toolkit_core_Toolkit._transitionRegister.get(className) == null) {
			haxe_ui_toolkit_core_Toolkit.setTransitionForClass(cls,transition);
			if(haxe_ui_toolkit_core_Toolkit._transitionTimeRegister == null || haxe_ui_toolkit_core_Toolkit._transitionTimeRegister.get(className) == null) haxe_ui_toolkit_core_Toolkit.setTransitionTimeForClass(cls,time);
		}
	};
	setDefaultTransition(haxe_ui_toolkit_controls_Menu,"fade",0.1);
	setDefaultTransition(haxe_ui_toolkit_controls_selection_DateSelector,"slide",0.15);
	setDefaultTransition(haxe_ui_toolkit_controls_selection_ListSelector,"slide",0.15);
	setDefaultTransition(haxe_ui_toolkit_controls_popups_Popup,"slide",0.3);
	var t = null;
	if(js_Boot.__instanceof(haxe_ui_toolkit_core_Toolkit.theme,haxe_ui_toolkit_themes_Theme)) t = haxe_ui_toolkit_core_Toolkit.theme; else if(typeof(haxe_ui_toolkit_core_Toolkit.theme) == "string") {
		t = new haxe_ui_toolkit_themes_Theme();
		t.name = haxe_ui_toolkit_core_Toolkit.theme;
	}
	if(t == null && haxe_ui_toolkit_core_Toolkit.useDefaultTheme == true) t = new haxe_ui_toolkit_themes_DefaultTheme();
	if(t != null) t.apply();
};
haxe_ui_toolkit_core_Toolkit.versionInfo = null;
haxe_ui_toolkit_core_Toolkit.get_versionInfo = function() {
	return haxe_ui_toolkit_core_Toolkit._versionInfo;
};
haxe_ui_toolkit_core_Toolkit.versionString = null;
haxe_ui_toolkit_core_Toolkit.get_versionString = function() {
	var s = "";
	var $it0 = haxe_ui_toolkit_core_Toolkit._versionInfo.keys();
	while( $it0.hasNext() ) {
		var lib = $it0.next();
		s += lib + " [" + Std.string(haxe_ui_toolkit_core_Toolkit._versionInfo.get(lib).version) + "]\n";
	}
	return s;
};
haxe_ui_toolkit_core_Toolkit._registeredProcessors = null;
haxe_ui_toolkit_core_Toolkit.registerXMLProcessor = function(cls,prefix) {
	if(haxe_ui_toolkit_core_Toolkit._registeredProcessors == null) haxe_ui_toolkit_core_Toolkit._registeredProcessors = new haxe_ds_StringMap();
	haxe_ui_toolkit_core_Toolkit._registeredProcessors.set(prefix,Type.getClassName(cls));
};
haxe_ui_toolkit_core_Toolkit.theme = null;
haxe_ui_toolkit_core_Toolkit.processXmlResource = function(resourceId) {
	return haxe_ui_toolkit_core_Toolkit.processXml(haxe_ui_toolkit_resources_ResourceManager.get_instance().getXML(resourceId));
};
haxe_ui_toolkit_core_Toolkit.processXml = function(xml) {
	var result = null;
	result = haxe_ui_toolkit_core_Toolkit.processXmlNode(xml.firstElement());
	haxe_ui_toolkit_core_Toolkit.postProcessXmlNode(xml.firstElement(),result);
	return result;
};
haxe_ui_toolkit_core_Toolkit.processXmlNode = function(node) {
	if(node == null) return null;
	var result = null;
	var nodeName;
	if(node.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + node.nodeType);
	nodeName = node.nodeName;
	var n = nodeName.indexOf(":");
	if(n != -1) nodeName = HxOverrides.substr(nodeName,n + 1,nodeName.length);
	nodeName = nodeName.toLowerCase();
	var condition = node.get("condition");
	if(condition != null) {
		var parser = new hscript_Parser();
		var program = parser.parseString(condition);
		var interp = new hscript_Interp();
		var clientWrapper = new haxe_ui_toolkit_hscript_ClientWrapper();
		interp.variables.set("Client",clientWrapper);
		var conditionResult = interp.execute(program);
		if(conditionResult == false) return null;
	}
	if(nodeName == "import") {
		var importResource = node.get("resource");
		if(importResource != null) {
			var importData = haxe_ui_toolkit_resources_ResourceManager.get_instance().getText(importResource);
			if(importData != null) {
				var importXml = Xml.parse(importData);
				return haxe_ui_toolkit_core_Toolkit.processXml(importXml);
			}
		}
	} else if(nodeName == "script") {
	} else if(nodeName == "style") {
		var p = new haxe_ui_toolkit_core_xml_StyleProcessor();
		result = p.process(node);
	} else if(haxe_ui_toolkit_core_ClassManager.get_instance().hasDataSourceClass(nodeName)) {
		var p1 = new haxe_ui_toolkit_core_xml_DataProcessor();
		result = p1.process(node);
	} else {
		var p2 = new haxe_ui_toolkit_core_xml_UIProcessor();
		result = p2.process(node);
		if(result == null) haxe_Log.trace("WARNING: Could not find processor for '" + nodeName + "'",{ fileName : "Toolkit.hx", lineNumber : 189, className : "haxe.ui.toolkit.core.Toolkit", methodName : "processXmlNode"});
	}
	var $it0 = node.elements();
	while( $it0.hasNext() ) {
		var child = $it0.next();
		var childResult = haxe_ui_toolkit_core_Toolkit.processXmlNode(child);
		if(js_Boot.__instanceof(childResult,haxe_ui_toolkit_data_IDataSource) && js_Boot.__instanceof(result,haxe_ui_toolkit_core_interfaces_IDataComponent)) (js_Boot.__cast(result , haxe_ui_toolkit_core_interfaces_IDataComponent)).set_dataSource(js_Boot.__cast(childResult , haxe_ui_toolkit_data_IDataSource));
		if(js_Boot.__instanceof(childResult,haxe_ui_toolkit_core_interfaces_IDisplayObject) && js_Boot.__instanceof(result,haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer)) (js_Boot.__cast(result , haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer)).addChild(js_Boot.__cast(childResult , haxe_ui_toolkit_core_interfaces_IDisplayObject));
	}
	return result;
};
haxe_ui_toolkit_core_Toolkit.postProcessXmlNode = function(node,parentObject) {
	if(node == null) return null;
	var result = null;
	var nodeName;
	if(node.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + node.nodeType);
	nodeName = node.nodeName;
	var n = nodeName.indexOf(":");
	if(n != -1) nodeName = HxOverrides.substr(nodeName,n + 1,nodeName.length);
	nodeName = nodeName.toLowerCase();
	var condition = node.get("condition");
	if(condition != null) {
		var parser = new hscript_Parser();
		var program = parser.parseString(condition);
		var interp = new hscript_Interp();
		var clientWrapper = new haxe_ui_toolkit_hscript_ClientWrapper();
		interp.variables.set("Client",clientWrapper);
		var conditionResult = interp.execute(program);
		if(conditionResult == false) return null;
	}
	if(nodeName == "script") {
		var scriptResource = node.get("resource");
		var scriptData = "";
		if(scriptResource != null) {
			scriptData += haxe_ui_toolkit_resources_ResourceManager.get_instance().getText(scriptResource);
			scriptData += "\n\n";
		}
		var scriptNodeData = ((function($this) {
			var $r;
			if(node.nodeType != Xml.Document && node.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + node.nodeType);
			$r = node.children[0];
			return $r;
		}(this))).get_nodeValue();
		if(scriptNodeData != null) {
			scriptNodeData = StringTools.trim(scriptNodeData);
			scriptData += "\n\n" + scriptNodeData;
		}
		if(parentObject != null && js_Boot.__instanceof(parentObject,haxe_ui_toolkit_core_interfaces_IComponent)) (js_Boot.__cast(parentObject , haxe_ui_toolkit_core_interfaces_IComponent)).addScriptlet(scriptData);
	}
	var $it0 = node.elements();
	while( $it0.hasNext() ) {
		var child = $it0.next();
		var childResult = haxe_ui_toolkit_core_Toolkit.postProcessXmlNode(child,parentObject);
	}
	return result;
};
haxe_ui_toolkit_core_Toolkit._transitionRegister = null;
haxe_ui_toolkit_core_Toolkit._transitionTimeRegister = null;
haxe_ui_toolkit_core_Toolkit.get_defaultTransition = function() {
	return haxe_ui_toolkit_core_Toolkit._defaultTransition;
};
haxe_ui_toolkit_core_Toolkit.set_defaultTransition = function(value) {
	haxe_ui_toolkit_core_Toolkit._defaultTransition = value;
	return value;
};
haxe_ui_toolkit_core_Toolkit.get_defaultTransitionTime = function() {
	return haxe_ui_toolkit_core_Toolkit._defaultTransitionTime;
};
haxe_ui_toolkit_core_Toolkit.set_defaultTransitionTime = function(value) {
	haxe_ui_toolkit_core_Toolkit._defaultTransitionTime = value;
	return value;
};
haxe_ui_toolkit_core_Toolkit.getTransitionForClass = function(cls) {
	var s = haxe_ui_toolkit_core_Toolkit._defaultTransition;
	var className = Type.getClassName(cls);
	if(haxe_ui_toolkit_core_Toolkit._transitionRegister != null && haxe_ui_toolkit_core_Toolkit._transitionRegister.get(className) != null) s = haxe_ui_toolkit_core_Toolkit._transitionRegister.get(className);
	return s;
};
haxe_ui_toolkit_core_Toolkit.setTransitionForClass = function(cls,transition) {
	if(haxe_ui_toolkit_core_Toolkit._transitionRegister == null) haxe_ui_toolkit_core_Toolkit._transitionRegister = new haxe_ds_StringMap();
	var className = Type.getClassName(cls);
	haxe_ui_toolkit_core_Toolkit._transitionRegister.set(className,transition);
};
haxe_ui_toolkit_core_Toolkit.getTransitionTimeForClass = function(cls) {
	var s = haxe_ui_toolkit_core_Toolkit._defaultTransitionTime;
	var className = Type.getClassName(cls);
	if(haxe_ui_toolkit_core_Toolkit._transitionTimeRegister != null && haxe_ui_toolkit_core_Toolkit._transitionTimeRegister.get(className) != null) s = haxe_ui_toolkit_core_Toolkit._transitionTimeRegister.get(className);
	return s;
};
haxe_ui_toolkit_core_Toolkit.setTransitionTimeForClass = function(cls,transitionTime) {
	if(haxe_ui_toolkit_core_Toolkit._transitionTimeRegister == null) haxe_ui_toolkit_core_Toolkit._transitionTimeRegister = new haxe_ds_StringMap();
	var className = Type.getClassName(cls);
	haxe_ui_toolkit_core_Toolkit._transitionTimeRegister.set(className,transitionTime);
};
haxe_ui_toolkit_core_Toolkit.addScriptletClass = function(name,cls) {
	haxe_ui_toolkit_hscript_ScriptManager.get_instance().addClass(name,cls);
};
haxe_ui_toolkit_core_Toolkit.addStyleSheet = function(resourceId) {
	haxe_ui_toolkit_style_StyleManager.get_instance().addStyles(haxe_ui_toolkit_style_StyleParser.fromString(haxe_ui_toolkit_resources_ResourceManager.get_instance().getText(resourceId)));
};
haxe_ui_toolkit_core_Toolkit.open = function(fn,options) {
	if(options != null) return haxe_ui_toolkit_core_Toolkit.openPopup(options,fn);
	return haxe_ui_toolkit_core_Toolkit.openFullscreen(fn);
};
haxe_ui_toolkit_core_Toolkit.openFullscreen = function(fn) {
	var root = haxe_ui_toolkit_core_RootManager.get_instance().createRoot({ x : 0, y : 0, percentWidth : 100, percentHeight : 100, styleName : "fullscreen"},fn);
	return root;
};
haxe_ui_toolkit_core_Toolkit.openPopup = function(options,fn) {
	if(options == null) options = { };
	if(options.x != null) options.x = options.x; else options.x = 20;
	if(options.y != null) options.y = options.y; else options.y = 20;
	if(options.styleName != null) options.styleName = options.styleName; else options.styleName = "popup";
	var root = haxe_ui_toolkit_core_RootManager.get_instance().createRoot(options,fn);
	return root;
};
haxe_ui_toolkit_core_Toolkit.get_scaleFactor = function() {
	if(haxe_ui_toolkit_core_Toolkit._scaleFactor == 0) {
		if(haxe_ui_toolkit_core_Toolkit.autoScale == true) {
			haxe_ui_toolkit_core_Toolkit.set_scaleFactor(openfl_system_Capabilities.get_screenDPI());
			if(haxe_ui_toolkit_core_Toolkit._scaleFactor > 160) haxe_ui_toolkit_core_Toolkit._scaleFactor /= 160; else haxe_ui_toolkit_core_Toolkit._scaleFactor = 1;
		} else haxe_ui_toolkit_core_Toolkit._scaleFactor = 1;
	}
	return haxe_ui_toolkit_core_Toolkit._scaleFactor;
};
haxe_ui_toolkit_core_Toolkit.set_scaleFactor = function(value) {
	haxe_ui_toolkit_core_Toolkit._scaleFactor = value;
	return value;
};
haxe_ui_toolkit_core_Toolkit.prototype = {
	initInstance: function() {
		haxe_ui_toolkit_core_ClassManager.get_instance();
	}
	,__class__: haxe_ui_toolkit_core_Toolkit
};
var haxe_ui_toolkit_core_XMLController = function(xmlResourceId) {
	haxe_ui_toolkit_core_Controller.call(this,haxe_ui_toolkit_core_Toolkit.processXml(Xml.parse(haxe_ui_toolkit_resources_ResourceManager.get_instance().getText(xmlResourceId))));
};
$hxClasses["haxe.ui.toolkit.core.XMLController"] = haxe_ui_toolkit_core_XMLController;
haxe_ui_toolkit_core_XMLController.__name__ = ["haxe","ui","toolkit","core","XMLController"];
haxe_ui_toolkit_core_XMLController.__super__ = haxe_ui_toolkit_core_Controller;
haxe_ui_toolkit_core_XMLController.prototype = $extend(haxe_ui_toolkit_core_Controller.prototype,{
	__class__: haxe_ui_toolkit_core_XMLController
});
var haxe_ui_toolkit_core_base_HorizontalAlign = function() { };
$hxClasses["haxe.ui.toolkit.core.base.HorizontalAlign"] = haxe_ui_toolkit_core_base_HorizontalAlign;
haxe_ui_toolkit_core_base_HorizontalAlign.__name__ = ["haxe","ui","toolkit","core","base","HorizontalAlign"];
var haxe_ui_toolkit_core_base_State = function() { };
$hxClasses["haxe.ui.toolkit.core.base.State"] = haxe_ui_toolkit_core_base_State;
haxe_ui_toolkit_core_base_State.__name__ = ["haxe","ui","toolkit","core","base","State"];
var haxe_ui_toolkit_core_base_VerticalAlign = function() { };
$hxClasses["haxe.ui.toolkit.core.base.VerticalAlign"] = haxe_ui_toolkit_core_base_VerticalAlign;
haxe_ui_toolkit_core_base_VerticalAlign.__name__ = ["haxe","ui","toolkit","core","base","VerticalAlign"];
var haxe_ui_toolkit_core_interfaces_Direction = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.Direction"] = haxe_ui_toolkit_core_interfaces_Direction;
haxe_ui_toolkit_core_interfaces_Direction.__name__ = ["haxe","ui","toolkit","core","interfaces","Direction"];
var haxe_ui_toolkit_core_interfaces_InvalidationFlag = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.InvalidationFlag"] = haxe_ui_toolkit_core_interfaces_InvalidationFlag;
haxe_ui_toolkit_core_interfaces_InvalidationFlag.__name__ = ["haxe","ui","toolkit","core","interfaces","InvalidationFlag"];
var haxe_ui_toolkit_core_renderers_ItemRenderer = function() {
	haxe_ui_toolkit_core_StateComponent.call(this);
	this.get_sprite().buttonMode = true;
	this.get_sprite().useHandCursor = true;
	this.set_state("normal");
};
$hxClasses["haxe.ui.toolkit.core.renderers.ItemRenderer"] = haxe_ui_toolkit_core_renderers_ItemRenderer;
haxe_ui_toolkit_core_renderers_ItemRenderer.__name__ = ["haxe","ui","toolkit","core","renderers","ItemRenderer"];
haxe_ui_toolkit_core_renderers_ItemRenderer.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable,haxe_ui_toolkit_core_interfaces_IItemRenderer];
haxe_ui_toolkit_core_renderers_ItemRenderer.__super__ = haxe_ui_toolkit_core_StateComponent;
haxe_ui_toolkit_core_renderers_ItemRenderer.prototype = $extend(haxe_ui_toolkit_core_StateComponent.prototype,{
	initialize: function() {
		haxe_ui_toolkit_core_StateComponent.prototype.initialize.call(this);
		this.addStatesRecursively(this);
	}
	,addStatesRecursively: function(c) {
		if(js_Boot.__instanceof(c,haxe_ui_toolkit_core_StateComponent) && c != this) (js_Boot.__cast(c , haxe_ui_toolkit_core_StateComponent)).addStates(this.get_states());
		var _g = 0;
		var _g1 = c.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(this.isInteractive(c)) continue;
			if(js_Boot.__instanceof(c,haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer)) this.addStatesRecursively(js_Boot.__cast(child , haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer));
		}
	}
	,get_data: function() {
		return this._data;
	}
	,set_data: function(value) {
		this._data = value;
		this.updateComponents();
		this.attachEvents(this);
		return value;
	}
	,update: function() {
		this.updateComponents();
	}
	,allowSelection: function(stageX,stageY) {
		var allow = true;
		var c = this.findComponentUnderPoint(stageX,stageY);
		while(c != null) {
			if(this.isInteractive(c)) {
				allow = false;
				break;
			}
			if(js_Boot.__instanceof(c,haxe_ui_toolkit_core_DisplayObjectContainer) == false) break;
			c = (js_Boot.__cast(c , haxe_ui_toolkit_core_DisplayObjectContainer)).findComponentUnderPoint(stageX,stageY);
		}
		return allow;
	}
	,attachEvents: function(c) {
		var _g = 0;
		var _g1 = c.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(this.isInteractive(child)) this.attachEvent(child); else if(js_Boot.__instanceof(child,haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer)) this.attachEvents(js_Boot.__cast(child , haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer));
		}
	}
	,attachEvent: function(c) {
		if(js_Boot.__instanceof(c,haxe_ui_toolkit_controls_Slider)) {
			c.removeEventListener("haxeui_" + "change",$bind(this,this._onComponentEvent));
			c.addEventListener("haxeui_" + "change",$bind(this,this._onComponentEvent));
		} else if(js_Boot.__instanceof(c,haxe_ui_toolkit_controls_Button)) {
			c.removeEventListener("haxeui_" + "click",$bind(this,this._onComponentEvent));
			c.addEventListener("haxeui_" + "click",$bind(this,this._onComponentEvent));
		} else if(js_Boot.__instanceof(c,haxe_ui_toolkit_controls_TextInput)) {
			c.removeEventListener("haxeui_" + "change",$bind(this,this._onComponentEvent));
			c.addEventListener("haxeui_" + "change",$bind(this,this._onComponentEvent));
		} else if(js_Boot.__instanceof(c,haxe_ui_toolkit_controls_CheckBox)) {
			c.removeEventListener("haxeui_" + "change",$bind(this,this._onComponentEvent));
			c.addEventListener("haxeui_" + "change",$bind(this,this._onComponentEvent));
		}
	}
	,_onComponentEvent: function(event) {
		if(event.get_component() != null && event.get_component().get_id() != null && event.get_component().get_id().length > 0) Reflect.setField(this._data,event.get_component().get_id(),event.get_component().get_value());
		this.dispatchProxyEvent("haxeui_" + "componentEvent",event);
	}
	,dispatchProxyEvent: function(type,refEvent) {
		if(this.eventDispatcher != null) {
			var c = null;
			if(refEvent != null && refEvent.get_component() != null) c = refEvent.get_component();
			var uiEvent = new haxe_ui_toolkit_events_UIEvent(type,c);
			uiEvent.data = this._data;
			uiEvent.data.update = $bind(this,this.update);
			uiEvent.data.itemRenderer = this;
			this.eventDispatcher.dispatchEvent(uiEvent);
		}
	}
	,updateComponents: function() {
		var fields = Reflect.fields(this._data);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			var componentId = f;
			var value = Reflect.field(this._data,f);
			var c = this.findChild(componentId,null,true);
			if(c != null) this.updateComponentValue(c,value);
		}
	}
	,updateComponentValue: function(c,value) {
		if(js_Boot.__instanceof(c,haxe_ui_toolkit_core_Component) && value != (js_Boot.__cast(c , haxe_ui_toolkit_core_Component)).get_value()) (js_Boot.__cast(c , haxe_ui_toolkit_core_Component)).set_value(value);
	}
	,get_states: function() {
		return ["normal","over","selected","disabled"];
	}
	,set_state: function(value) {
		this.setStateRecursively(value,this);
		return haxe_ui_toolkit_core_StateComponent.prototype.set_state.call(this,value);
	}
	,setStateRecursively: function(value,c) {
		if(js_Boot.__instanceof(c,haxe_ui_toolkit_core_StateComponent) && c != this) (js_Boot.__cast(c , haxe_ui_toolkit_core_StateComponent)).set_state(value);
		var _g = 0;
		var _g1 = c.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(this.isInteractive(c)) continue;
			if(js_Boot.__instanceof(c,haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer)) this.setStateRecursively(value,js_Boot.__cast(child , haxe_ui_toolkit_core_interfaces_IDisplayObjectContainer));
		}
	}
	,isInteractive: function(c) {
		if(js_Boot.__instanceof(c,haxe_ui_toolkit_controls_Button) || js_Boot.__instanceof(c,haxe_ui_toolkit_controls_Slider) || js_Boot.__instanceof(c,haxe_ui_toolkit_controls_TextInput) || js_Boot.__instanceof(c,haxe_ui_toolkit_controls_CheckBox)) return true;
		return false;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_core_StateComponent.prototype.clone.call(this);
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			c.addChild(child.clone());
		}
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_core_renderers_ItemRenderer();
	}
	,__class__: haxe_ui_toolkit_core_renderers_ItemRenderer
	,__properties__: $extend(haxe_ui_toolkit_core_StateComponent.prototype.__properties__,{set_data:"set_data",get_data:"get_data"})
});
var haxe_ui_toolkit_core_renderers_BasicItemRenderer = function() {
	haxe_ui_toolkit_core_renderers_ItemRenderer.call(this);
	this._layout = new haxe_ui_toolkit_layout_HorizontalLayout();
	this._maintext = new haxe_ui_toolkit_controls_Text();
	this._maintext.set_text("Text");
	this._maintext.set_id("text");
	this._maintext.set_verticalAlign("center");
	this._maintext.set_percentWidth(100);
	this.addChild(this._maintext);
};
$hxClasses["haxe.ui.toolkit.core.renderers.BasicItemRenderer"] = haxe_ui_toolkit_core_renderers_BasicItemRenderer;
haxe_ui_toolkit_core_renderers_BasicItemRenderer.__name__ = ["haxe","ui","toolkit","core","renderers","BasicItemRenderer"];
haxe_ui_toolkit_core_renderers_BasicItemRenderer.__super__ = haxe_ui_toolkit_core_renderers_ItemRenderer;
haxe_ui_toolkit_core_renderers_BasicItemRenderer.prototype = $extend(haxe_ui_toolkit_core_renderers_ItemRenderer.prototype,{
	set_data: function(value) {
		var n = 0;
		if(value.icon != null) {
			if(this._icon == null) {
				this._icon = new haxe_ui_toolkit_controls_Image();
				this._icon.set_id("icon");
				this._icon.set_verticalAlign("center");
				this.addChildAt(this._icon,n);
				n++;
			}
		}
		if(value.subtext != null) {
			if(this._vbox == null) {
				this._vbox = new haxe_ui_toolkit_containers_VBox();
				this._vbox.set_percentWidth(100);
				this.addChildAt(this._vbox,n);
			}
			if(this._subtext == null) {
				this._subtext = new haxe_ui_toolkit_controls_Text();
				this._subtext.set_id("subtext");
				this._subtext.set_percentWidth(100);
				this._subtext.set_multiline(true);
				this._subtext.set_wrapLines(true);
				this.removeChild(this._maintext,false);
				this._vbox.addChild(this._maintext);
				this._vbox.addChild(this._subtext);
			}
		}
		return haxe_ui_toolkit_core_renderers_ItemRenderer.prototype.set_data.call(this,value);
	}
	,clone: function() {
		var c = haxe_ui_toolkit_core_renderers_ItemRenderer.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_core_renderers_BasicItemRenderer();
	}
	,__class__: haxe_ui_toolkit_core_renderers_BasicItemRenderer
});
var haxe_ui_toolkit_core_renderers_ComponentItemRenderer = function() {
	haxe_ui_toolkit_core_renderers_BasicItemRenderer.call(this);
};
$hxClasses["haxe.ui.toolkit.core.renderers.ComponentItemRenderer"] = haxe_ui_toolkit_core_renderers_ComponentItemRenderer;
haxe_ui_toolkit_core_renderers_ComponentItemRenderer.__name__ = ["haxe","ui","toolkit","core","renderers","ComponentItemRenderer"];
haxe_ui_toolkit_core_renderers_ComponentItemRenderer.__super__ = haxe_ui_toolkit_core_renderers_BasicItemRenderer;
haxe_ui_toolkit_core_renderers_ComponentItemRenderer.prototype = $extend(haxe_ui_toolkit_core_renderers_BasicItemRenderer.prototype,{
	get_component: function() {
		return this._component;
	}
	,set_data: function(value) {
		var type = value.componentType;
		if(type != null) {
			var cls = this.getClassFromType(type);
			if(cls != null && js_Boot.__instanceof(this._component,cls) == false) {
				if(this._component != null) this.removeChild(this._component);
				this._component = Type.createInstance(cls,[]);
				this._component.set_verticalAlign("center");
				this._component.set_id("componentValue");
				this._component.set_styleName(value.componentStyleName);
				if(value.componentSize != null) {
					var cx = value.componentSize;
					this._component.set_autoSize(false);
					this._component.set_width(cx);
				}
				this.addChildAt(this._component,this.get_numChildren());
			}
		}
		return haxe_ui_toolkit_core_renderers_BasicItemRenderer.prototype.set_data.call(this,value);
	}
	,getClassFromType: function(type) {
		type = type.toLowerCase();
		if(type == "button") return haxe_ui_toolkit_controls_Button; else if(type == "slider") return haxe_ui_toolkit_controls_HSlider; else if(type == "image") return haxe_ui_toolkit_controls_Image; else if(type == "textinput") return haxe_ui_toolkit_controls_TextInput;
		return null;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_core_renderers_BasicItemRenderer.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_core_renderers_ComponentItemRenderer();
	}
	,__class__: haxe_ui_toolkit_core_renderers_ComponentItemRenderer
	,__properties__: $extend(haxe_ui_toolkit_core_renderers_BasicItemRenderer.prototype.__properties__,{get_component:"get_component"})
});
var haxe_ui_toolkit_core_xml_IXMLProcessor = function() { };
$hxClasses["haxe.ui.toolkit.core.xml.IXMLProcessor"] = haxe_ui_toolkit_core_xml_IXMLProcessor;
haxe_ui_toolkit_core_xml_IXMLProcessor.__name__ = ["haxe","ui","toolkit","core","xml","IXMLProcessor"];
haxe_ui_toolkit_core_xml_IXMLProcessor.prototype = {
	__class__: haxe_ui_toolkit_core_xml_IXMLProcessor
};
var haxe_ui_toolkit_core_xml_XMLProcessor = function() {
};
$hxClasses["haxe.ui.toolkit.core.xml.XMLProcessor"] = haxe_ui_toolkit_core_xml_XMLProcessor;
haxe_ui_toolkit_core_xml_XMLProcessor.__name__ = ["haxe","ui","toolkit","core","xml","XMLProcessor"];
haxe_ui_toolkit_core_xml_XMLProcessor.__interfaces__ = [haxe_ui_toolkit_core_xml_IXMLProcessor];
haxe_ui_toolkit_core_xml_XMLProcessor.prototype = {
	process: function(node) {
		return null;
	}
	,stripNamespace: function(nodeName) {
		var n = nodeName.indexOf(":");
		if(n != -1) nodeName = HxOverrides.substr(nodeName,n + 1,nodeName.length);
		nodeName = nodeName.toLowerCase();
		return nodeName;
	}
	,__class__: haxe_ui_toolkit_core_xml_XMLProcessor
};
var haxe_ui_toolkit_core_xml_DataProcessor = function() {
	haxe_ui_toolkit_core_xml_XMLProcessor.call(this);
};
$hxClasses["haxe.ui.toolkit.core.xml.DataProcessor"] = haxe_ui_toolkit_core_xml_DataProcessor;
haxe_ui_toolkit_core_xml_DataProcessor.__name__ = ["haxe","ui","toolkit","core","xml","DataProcessor"];
haxe_ui_toolkit_core_xml_DataProcessor.createDataSource = function(className,config) {
	var ds = Type.createInstance(haxe_ui_toolkit_util_Types.resolveClass(className),[]);
	if(ds != null) {
		ds.create(config);
		haxe_ui_toolkit_data_DataManager.get_instance().registerDataSource(ds);
	}
	return ds;
};
haxe_ui_toolkit_core_xml_DataProcessor.__super__ = haxe_ui_toolkit_core_xml_XMLProcessor;
haxe_ui_toolkit_core_xml_DataProcessor.prototype = $extend(haxe_ui_toolkit_core_xml_XMLProcessor.prototype,{
	process: function(node) {
		var result = null;
		var nodeName = this.stripNamespace((function($this) {
			var $r;
			if(node.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + node.nodeType);
			$r = node.nodeName;
			return $r;
		}(this)));
		nodeName = nodeName.toLowerCase();
		var className = haxe_ui_toolkit_core_ClassManager.get_instance().getDataSourceClassName(nodeName);
		if(className != null) result = haxe_ui_toolkit_core_xml_DataProcessor.createDataSource(className,node);
		return result;
	}
	,__class__: haxe_ui_toolkit_core_xml_DataProcessor
});
var haxe_ui_toolkit_core_xml_StyleProcessor = function() {
	haxe_ui_toolkit_core_xml_XMLProcessor.call(this);
};
$hxClasses["haxe.ui.toolkit.core.xml.StyleProcessor"] = haxe_ui_toolkit_core_xml_StyleProcessor;
haxe_ui_toolkit_core_xml_StyleProcessor.__name__ = ["haxe","ui","toolkit","core","xml","StyleProcessor"];
haxe_ui_toolkit_core_xml_StyleProcessor.__super__ = haxe_ui_toolkit_core_xml_XMLProcessor;
haxe_ui_toolkit_core_xml_StyleProcessor.prototype = $extend(haxe_ui_toolkit_core_xml_XMLProcessor.prototype,{
	process: function(node) {
		var styleData = ((function($this) {
			var $r;
			if(node.nodeType != Xml.Document && node.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + node.nodeType);
			$r = node.children[0];
			return $r;
		}(this))).get_nodeValue();
		styleData = StringTools.trim(styleData);
		var styles = haxe_ui_toolkit_style_StyleParser.fromString(styleData);
		haxe_ui_toolkit_style_StyleManager.get_instance().addStyles(styles);
		return null;
	}
	,__class__: haxe_ui_toolkit_core_xml_StyleProcessor
});
var haxe_ui_toolkit_core_xml_UIProcessor = function() {
	haxe_ui_toolkit_core_xml_XMLProcessor.call(this);
};
$hxClasses["haxe.ui.toolkit.core.xml.UIProcessor"] = haxe_ui_toolkit_core_xml_UIProcessor;
haxe_ui_toolkit_core_xml_UIProcessor.__name__ = ["haxe","ui","toolkit","core","xml","UIProcessor"];
haxe_ui_toolkit_core_xml_UIProcessor.createComponent = function(className,config) {
	var c = Type.createInstance(haxe_ui_toolkit_util_Types.resolveClass(className),[]);
	try {
		var $it0 = config.attributes();
		while( $it0.hasNext() ) {
			var attr = $it0.next();
			if(StringTools.startsWith(attr,"xmlns:")) continue;
			var value = config.get(attr);
			if(haxe_ui_toolkit_hscript_ScriptUtils.isScript(value)) value = haxe_ui_toolkit_hscript_ScriptManager.get_instance().executeScript(value);
			if(attr == "width") {
				var width = 0;
				var percentWidth = -1;
				var widthString = value;
				if(widthString != null) {
					width = parseFloat(widthString);
					if(widthString.indexOf("%") != -1) {
						width = 0;
						percentWidth = Std.parseFloat(HxOverrides.substr(widthString,0,widthString.length - 1));
					}
				}
				if(width != 0) c.set_width(width);
				if(percentWidth != -1) c.set_percentWidth(percentWidth);
			} else if(attr == "height") {
				var height = 0;
				var percentHeight = -1;
				var heightString = value;
				if(heightString != null) {
					height = parseFloat(heightString);
					if(heightString.indexOf("%") != -1) {
						height = 0;
						percentHeight = Std.parseFloat(HxOverrides.substr(heightString,0,heightString.length - 1));
					}
				}
				if(height != 0) c.set_height(height);
				if(percentHeight != -1) c.set_percentHeight(percentHeight);
			} else if(attr == "style") {
				if(js_Boot.__instanceof(c,haxe_ui_toolkit_core_StyleableDisplayObject)) {
					var inlineStyles = haxe_ui_toolkit_style_StyleParser.fromString("_temp {" + value + "}");
					if(inlineStyles != null) {
						var style = inlineStyles.getStyle("_temp");
						if(style != null) {
							(js_Boot.__cast(c , haxe_ui_toolkit_core_StyleableDisplayObject)).set_style(style);
							(js_Boot.__cast(c , haxe_ui_toolkit_core_StyleableDisplayObject)).set_styleString(value);
						}
					}
				}
			} else if(attr == "condition") {
			} else if(attr == "layout") switch(value) {
			case "absolute":
				c.set_layout(new haxe_ui_toolkit_layout_AbsoluteLayout());
				throw "__break__";
				break;
			case "box":
				c.set_layout(new haxe_ui_toolkit_layout_BoxLayout());
				throw "__break__";
				break;
			case "grid":
				c.set_layout(new haxe_ui_toolkit_layout_GridLayout());
				throw "__break__";
				break;
			case "horizontal":
				c.set_layout(new haxe_ui_toolkit_layout_HorizontalLayout());
				throw "__break__";
				break;
			case "vertical":
				c.set_layout(new haxe_ui_toolkit_layout_VerticalLayout());
				throw "__break__";
				break;
			case "continuousVertical":
				c.set_layout(new haxe_ui_toolkit_layout_VerticalContinuousLayout());
				throw "__break__";
				break;
			case "continuousHorizontal":
				c.set_layout(new haxe_ui_toolkit_layout_HorizontalContinuousLayout());
				throw "__break__";
				break;
			default:
				c.set_layout(new haxe_ui_toolkit_layout_DefaultLayout());
				throw "__break__";
			} else if(attr == "dataSource") {
				if(js_Boot.__instanceof(c,haxe_ui_toolkit_core_interfaces_IDataComponent)) {
					var dataComponent;
					dataComponent = js_Boot.__cast(c , haxe_ui_toolkit_core_interfaces_IDataComponent);
					var registeredDataSource = haxe_ui_toolkit_data_DataManager.get_instance().getRegisteredDataSource(value);
					if(registeredDataSource != null) dataComponent.set_dataSource(registeredDataSource); else {
						var n = value.indexOf("://");
						if(n != -1) {
							var proto = HxOverrides.substr(value,0,n);
							value = HxOverrides.substr(value,n + 3,value.length);
							var className1 = haxe_ui_toolkit_core_ClassManager.get_instance().getDataSourceClassName(proto);
							var ds = Type.createInstance(haxe_ui_toolkit_util_Types.resolveClass(className1),[]);
							if(ds != null) {
								ds.createFromResource(value);
								haxe_ui_toolkit_data_DataManager.get_instance().registerDataSource(ds);
								dataComponent.set_dataSource(ds);
							}
						}
					}
				}
			} else if(attr == "text") c.set_text(value); else if(StringTools.startsWith(attr.toLowerCase(),"on")) {
				var event = HxOverrides.substr(attr,2,1).toLowerCase() + HxOverrides.substr(attr,3,null);
				c.addScriptletEventHandler(event,value);
			} else try {
				if(Std.parseInt(value) != null) {
					if(value.indexOf(".") == -1) Reflect.setProperty(c,attr,Std.parseInt(value)); else Reflect.setProperty(c,attr,parseFloat(value));
				} else if(value == "true" || value == "yes" || value == "false" || value == "no") Reflect.setProperty(c,attr,haxe_ui_toolkit_util_TypeParser.parseBool(value)); else Reflect.setProperty(c,attr,value);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				haxe_Log.trace("Exception setting component property: " + attr + " (" + Std.string(e) + ")",{ fileName : "UIProcessor.hx", lineNumber : 168, className : "haxe.ui.toolkit.core.xml.UIProcessor", methodName : "createComponent"});
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	return c;
};
haxe_ui_toolkit_core_xml_UIProcessor.__super__ = haxe_ui_toolkit_core_xml_XMLProcessor;
haxe_ui_toolkit_core_xml_UIProcessor.prototype = $extend(haxe_ui_toolkit_core_xml_XMLProcessor.prototype,{
	process: function(node) {
		var result = null;
		var nodeName;
		if(node.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + node.nodeType);
		nodeName = node.nodeName;
		var n = nodeName.indexOf(":");
		if(n != -1) nodeName = HxOverrides.substr(nodeName,n + 1,nodeName.length);
		nodeName = nodeName.toLowerCase();
		var className = haxe_ui_toolkit_core_ClassManager.get_instance().getComponentClassName(nodeName);
		var direction = node.get("direction");
		if(direction != null) {
			var directionalPrefix = HxOverrides.substr(direction,0,1);
			var directionalName = directionalPrefix + nodeName;
			var directionalClassName = haxe_ui_toolkit_core_ClassManager.get_instance().getComponentClassName(directionalName);
			if(directionalClassName != null) className = directionalClassName;
		}
		if(className != null) result = haxe_ui_toolkit_core_xml_UIProcessor.createComponent(className,node);
		return result;
	}
	,__class__: haxe_ui_toolkit_core_xml_UIProcessor
});
var haxe_ui_toolkit_data_IDataSource = function() { };
$hxClasses["haxe.ui.toolkit.data.IDataSource"] = haxe_ui_toolkit_data_IDataSource;
haxe_ui_toolkit_data_IDataSource.__name__ = ["haxe","ui","toolkit","data","IDataSource"];
haxe_ui_toolkit_data_IDataSource.prototype = {
	__class__: haxe_ui_toolkit_data_IDataSource
	,__properties__: {set_allowEvents:"set_allowEvents",get_allowEvents:"get_allowEvents",set_id:"set_id",get_id:"get_id"}
};
var haxe_ui_toolkit_data_DataSource = function() {
	this._hasChanged = false;
	this._allowEvents = true;
	this.allowDeletions = true;
	this.allowUpdates = true;
	this.allowAdditions = true;
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["haxe.ui.toolkit.data.DataSource"] = haxe_ui_toolkit_data_DataSource;
haxe_ui_toolkit_data_DataSource.__name__ = ["haxe","ui","toolkit","data","DataSource"];
haxe_ui_toolkit_data_DataSource.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IEventDispatcher,haxe_ui_toolkit_data_IDataSource];
haxe_ui_toolkit_data_DataSource.__super__ = openfl_events_EventDispatcher;
haxe_ui_toolkit_data_DataSource.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	get_config: function() {
		return this._config;
	}
	,clone: function() {
		var newDS = null;
		return newDS;
	}
	,get_allowEvents: function() {
		return this._allowEvents;
	}
	,set_allowEvents: function(value) {
		this._allowEvents = value;
		if(this._allowEvents == true) {
			if(this._hasChanged == true) this.dispatchChanged();
		}
		return value;
	}
	,get_id: function() {
		return this._id;
	}
	,set_id: function(value) {
		this._id = value;
		return value;
	}
	,create: function(config) {
		this._config = config;
		if(this._config == null) return;
		this._id = config.get("id");
	}
	,open: function() {
		return this._open();
	}
	,close: function() {
		return this._close();
	}
	,moveFirst: function() {
		return this._moveFirst();
	}
	,moveNext: function() {
		return this._moveNext();
	}
	,get: function() {
		return this._get();
	}
	,add: function(o) {
		var b = false;
		if(this.allowAdditions) {
			b = this._add(o);
			if(b == true) this.dispatchChanged();
		}
		return b;
	}
	,update: function(o) {
		var b = false;
		if(this.allowUpdates) {
			b = this._update(o);
			if(b) this.dispatchChanged();
		}
		return b;
	}
	,remove: function() {
		var b = false;
		if(this.allowDeletions) {
			b = this._remove();
			if(b) this.dispatchChanged();
		}
		return b;
	}
	,removeAll: function() {
		if(this.moveFirst()) do this.remove(); while(this.moveFirst());
	}
	,hash: function() {
		var o = this.get();
		if(o == null) return null;
		return "" + this.getObjectId(o);
	}
	,size: function() {
		return -1;
	}
	,_open: function() {
		return false;
	}
	,_close: function() {
		return false;
	}
	,_moveFirst: function() {
		return false;
	}
	,_moveNext: function() {
		return false;
	}
	,_get: function() {
		return null;
	}
	,_add: function(o) {
		return false;
	}
	,_update: function(o) {
		return false;
	}
	,_remove: function() {
		return false;
	}
	,createFromString: function(data,config) {
	}
	,createFromResource: function(resourceId,config) {
		if(resourceId != null) {
			var data = haxe_ui_toolkit_resources_ResourceManager.get_instance().getText(resourceId);
			this.createFromString(data,config);
		}
	}
	,dispatchChanged: function() {
		this._hasChanged = true;
		if(this._allowEvents == true) {
			this._hasChanged = false;
			this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
		}
	}
	,getObjectId: function(obj) {
		if(js_Boot.__instanceof(obj,Class)) {
			if(obj.__cls_id__ == null) obj.__cls_id__ = haxe_ui_toolkit_data_DataSource.clsId++;
			return obj.__cls_id__;
		} else {
			if(obj.__get_id__ == null) {
				var cls = Type.getClass(obj);
				if(cls == null) {
					var id = Std.random(2147483647);
					obj.__get_id__ = function() {
						return id;
					};
					return id;
				}
				var fstid = Std.random(2147483647);
				var _this = this;
				cls.prototype.__get_id__ = function() {
					if(_this.___id___ == null) return _this.___id___ = Std.random(2147483647);
					return _this.___id___;
				};
			}
			return obj.__get_id__();
		}
	}
	,__class__: haxe_ui_toolkit_data_DataSource
	,__properties__: {set_id:"set_id",get_id:"get_id",set_allowEvents:"set_allowEvents",get_allowEvents:"get_allowEvents",get_config:"get_config"}
});
var haxe_ui_toolkit_data_ArrayDataSource = function() {
	this.pos = 0;
	haxe_ui_toolkit_data_DataSource.call(this);
	this.array = [];
};
$hxClasses["haxe.ui.toolkit.data.ArrayDataSource"] = haxe_ui_toolkit_data_ArrayDataSource;
haxe_ui_toolkit_data_ArrayDataSource.__name__ = ["haxe","ui","toolkit","data","ArrayDataSource"];
haxe_ui_toolkit_data_ArrayDataSource.__super__ = haxe_ui_toolkit_data_DataSource;
haxe_ui_toolkit_data_ArrayDataSource.prototype = $extend(haxe_ui_toolkit_data_DataSource.prototype,{
	create: function(config) {
		haxe_ui_toolkit_data_DataSource.prototype.create.call(this,config);
		if(config == null) return;
		this._id = config.get("id");
		var delimeter = config.get("delimeter");
		if(delimeter == null) delimeter = ",";
		delimeter = StringTools.replace(delimeter,"\\n","\n");
		var resource = config.get("resource");
		if(resource != null) this.createFromResource(resource,{ delimeter : delimeter});
		var nodeText = null;
		if((function($this) {
			var $r;
			if(config.nodeType != Xml.Document && config.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + config.nodeType);
			$r = config.children[0];
			return $r;
		}(this)) != null) nodeText = ((function($this) {
			var $r;
			if(config.nodeType != Xml.Document && config.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + config.nodeType);
			$r = config.children[0];
			return $r;
		}(this))).get_nodeValue();
		if(nodeText != null) this.createFromString(nodeText,{ delimeter : delimeter});
	}
	,_moveFirst: function() {
		this.pos = 0;
		if(this.array == null || this.array.length == 0) return false;
		return true;
	}
	,_moveNext: function() {
		if(this.array == null || this.array.length == 0) return false;
		var b = false;
		if(this.pos + 1 < this.array.length) {
			this.pos += 1;
			b = true;
		}
		return b;
	}
	,_get: function() {
		if(this.array == null || this.array.length == 0) return null;
		return this.array[this.pos];
	}
	,_add: function(o) {
		this.array.push(o);
		return true;
	}
	,_remove: function() {
		var x = this.get();
		return HxOverrides.remove(this.array,x);
	}
	,size: function() {
		return this.array.length;
	}
	,createFromString: function(data,config) {
		if(data != null) {
			if(config == null) config = { };
			if(config.delimeter != null) config.delimeter = config.delimeter; else config.delimeter = ",";
			var arr = data.split(config.delimeter);
			if(arr != null) {
				var _g = 0;
				while(_g < arr.length) {
					var s = arr[_g];
					++_g;
					s = StringTools.trim(s);
					if(s.length > 0) {
						var o = { text : s};
						this.add(o);
					}
				}
			}
		}
	}
	,__class__: haxe_ui_toolkit_data_ArrayDataSource
});
var haxe_ui_toolkit_data_DataManager = function() {
	this._dataSourceMap = new haxe_ds_StringMap();
};
$hxClasses["haxe.ui.toolkit.data.DataManager"] = haxe_ui_toolkit_data_DataManager;
haxe_ui_toolkit_data_DataManager.__name__ = ["haxe","ui","toolkit","data","DataManager"];
haxe_ui_toolkit_data_DataManager.__properties__ = {get_instance:"get_instance"}
haxe_ui_toolkit_data_DataManager._instance = null;
haxe_ui_toolkit_data_DataManager.instance = null;
haxe_ui_toolkit_data_DataManager.get_instance = function() {
	if(haxe_ui_toolkit_data_DataManager._instance == null) haxe_ui_toolkit_data_DataManager._instance = new haxe_ui_toolkit_data_DataManager();
	return haxe_ui_toolkit_data_DataManager._instance;
};
haxe_ui_toolkit_data_DataManager.prototype = {
	registerDataSource: function(dataSource) {
		var dataSourceId = dataSource.get_id();
		if(dataSourceId == null || dataSourceId.length == 0) {
			dataSourceId = haxe_ui_toolkit_util_Identifier.guid();
			dataSource.set_id(dataSourceId);
		}
		this._dataSourceMap.set(dataSourceId,dataSource);
	}
	,getRegisteredDataSource: function(id) {
		return this._dataSourceMap.get(id);
	}
	,get_dataSources: function() {
		var arr = [];
		var $it0 = this._dataSourceMap.iterator();
		while( $it0.hasNext() ) {
			var ds = $it0.next();
			arr.push(ds);
		}
		return arr;
	}
	,__class__: haxe_ui_toolkit_data_DataManager
	,__properties__: {get_dataSources:"get_dataSources"}
};
var haxe_ui_toolkit_data_FilesDataSource = function() {
	haxe_ui_toolkit_data_ArrayDataSource.call(this);
};
$hxClasses["haxe.ui.toolkit.data.FilesDataSource"] = haxe_ui_toolkit_data_FilesDataSource;
haxe_ui_toolkit_data_FilesDataSource.__name__ = ["haxe","ui","toolkit","data","FilesDataSource"];
haxe_ui_toolkit_data_FilesDataSource.__super__ = haxe_ui_toolkit_data_ArrayDataSource;
haxe_ui_toolkit_data_FilesDataSource.prototype = $extend(haxe_ui_toolkit_data_ArrayDataSource.prototype,{
	create: function(config) {
		if(config == null) return;
		this._id = config.get("id");
		var resource = config.get("resource");
		if(resource != null) this.createFromString(resource);
	}
	,_open: function() {
		return true;
	}
	,createFromString: function(data,config) {
		if(data != null) this._dir = this.fixDir(data);
	}
	,createFromResource: function(resourceId,config) {
		this.createFromString(resourceId,config);
	}
	,isDir: function(dir) {
		var isDir = false;
		return isDir;
	}
	,isRoot: function(dir) {
		var isRoot = false;
		return isRoot;
	}
	,fixDir: function(dir) {
		if(dir == null) return "";
		var fixedDir = dir;
		fixedDir = StringTools.replace(fixedDir,"\\","/");
		if(fixedDir.lastIndexOf("/") == fixedDir.length - 1 || fixedDir.lastIndexOf("\\") == fixedDir.length - 1) fixedDir = HxOverrides.substr(fixedDir,0,fixedDir.length - 1);
		return fixedDir;
	}
	,__class__: haxe_ui_toolkit_data_FilesDataSource
});
var haxe_ui_toolkit_data_JSONDataSource = function() {
	haxe_ui_toolkit_data_ArrayDataSource.call(this);
};
$hxClasses["haxe.ui.toolkit.data.JSONDataSource"] = haxe_ui_toolkit_data_JSONDataSource;
haxe_ui_toolkit_data_JSONDataSource.__name__ = ["haxe","ui","toolkit","data","JSONDataSource"];
haxe_ui_toolkit_data_JSONDataSource.__super__ = haxe_ui_toolkit_data_ArrayDataSource;
haxe_ui_toolkit_data_JSONDataSource.prototype = $extend(haxe_ui_toolkit_data_ArrayDataSource.prototype,{
	create: function(config) {
		if(config == null) return;
		this._id = config.get("id");
		var resource = config.get("resource");
		if(resource != null) this.createFromResource(resource);
		var nodeText = null;
		if((function($this) {
			var $r;
			if(config.nodeType != Xml.Document && config.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + config.nodeType);
			$r = config.children[0];
			return $r;
		}(this)) != null) nodeText = ((function($this) {
			var $r;
			if(config.nodeType != Xml.Document && config.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + config.nodeType);
			$r = config.children[0];
			return $r;
		}(this))).get_nodeValue();
		if(nodeText != null) this.createFromString(nodeText);
	}
	,createFromString: function(data,config) {
		if(data != null) {
			var jsonObject = JSON.parse(data);
			var arr = null;
			if((jsonObject instanceof Array) && jsonObject.__enum__ == null) {
				arr = js_Boot.__cast(jsonObject , Array);
				var _g = 0;
				while(_g < arr.length) {
					var o = arr[_g];
					++_g;
					this.add(o);
				}
			}
		}
	}
	,__class__: haxe_ui_toolkit_data_JSONDataSource
});
var haxe_ui_toolkit_data_MySQLDataSource = function() {
	haxe_ui_toolkit_data_DataSource.call(this);
};
$hxClasses["haxe.ui.toolkit.data.MySQLDataSource"] = haxe_ui_toolkit_data_MySQLDataSource;
haxe_ui_toolkit_data_MySQLDataSource.__name__ = ["haxe","ui","toolkit","data","MySQLDataSource"];
haxe_ui_toolkit_data_MySQLDataSource.__super__ = haxe_ui_toolkit_data_DataSource;
haxe_ui_toolkit_data_MySQLDataSource.prototype = $extend(haxe_ui_toolkit_data_DataSource.prototype,{
	__class__: haxe_ui_toolkit_data_MySQLDataSource
});
var haxe_ui_toolkit_data_XMLDataSource = function() {
	haxe_ui_toolkit_data_ArrayDataSource.call(this);
};
$hxClasses["haxe.ui.toolkit.data.XMLDataSource"] = haxe_ui_toolkit_data_XMLDataSource;
haxe_ui_toolkit_data_XMLDataSource.__name__ = ["haxe","ui","toolkit","data","XMLDataSource"];
haxe_ui_toolkit_data_XMLDataSource.__super__ = haxe_ui_toolkit_data_ArrayDataSource;
haxe_ui_toolkit_data_XMLDataSource.prototype = $extend(haxe_ui_toolkit_data_ArrayDataSource.prototype,{
	create: function(config) {
		if(config == null) return;
		this._id = config.get("id");
		var resource = config.get("resource");
		if(resource != null) this.createFromResource(resource);
		var nodeText = null;
		if((function($this) {
			var $r;
			if(config.nodeType != Xml.Document && config.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + config.nodeType);
			$r = config.children[0];
			return $r;
		}(this)) != null) nodeText = config.firstElement().toString();
		if(nodeText != null) this.createFromString(nodeText);
	}
	,createFromString: function(data,config) {
		if(data != null) {
			var xml = Xml.parse(data);
			if(xml != null) {
				var it = xml.firstElement().elements();
				while( it.hasNext() ) {
					var e = it.next();
					var o = { };
					var $it0 = e.attributes();
					while( $it0.hasNext() ) {
						var attrName = $it0.next();
						Reflect.setField(o,attrName,e.get(attrName));
					}
					if(Reflect.fields(o).length != 0) this.add(o);
				}
			}
		}
	}
	,__class__: haxe_ui_toolkit_data_XMLDataSource
});
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = openfl_events_EventPhase.AT_TARGET;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = ["openfl","events","Event"];
openfl_events_Event.prototype = {
	clone: function() {
		var event = new openfl_events_Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,formatToString: function(className,p1,p2,p3,p4,p5) {
		var parameters = [];
		if(p1 != null) parameters.push(p1);
		if(p2 != null) parameters.push(p2);
		if(p3 != null) parameters.push(p3);
		if(p4 != null) parameters.push(p4);
		if(p5 != null) parameters.push(p5);
		return $bind(this,this.__formatToString).apply(this,[className,parameters]);
	}
	,isDefaultPrevented: function() {
		return this.__preventDefault;
	}
	,preventDefault: function() {
		if(this.cancelable) this.__preventDefault = true;
	}
	,stopImmediatePropagation: function() {
		this.__isCancelled = true;
		this.__isCancelledNow = true;
	}
	,stopPropagation: function() {
		this.__isCancelled = true;
	}
	,toString: function() {
		return this.__formatToString("Event",["type","bubbles","cancelable"]);
	}
	,__formatToString: function(className,parameters) {
		var output = "[" + className;
		var arg = null;
		var _g = 0;
		while(_g < parameters.length) {
			var param = parameters[_g];
			++_g;
			arg = Reflect.field(this,param);
			if(typeof(arg) == "string") output += " " + param + "=\"" + Std.string(arg) + "\""; else output += " " + param + "=" + Std.string(arg);
		}
		output += "]";
		return output;
	}
	,__class__: openfl_events_Event
};
var haxe_ui_toolkit_events_MenuEvent = function(type,menuItem) {
	openfl_events_Event.call(this,type);
	this.menuItem = menuItem;
};
$hxClasses["haxe.ui.toolkit.events.MenuEvent"] = haxe_ui_toolkit_events_MenuEvent;
haxe_ui_toolkit_events_MenuEvent.__name__ = ["haxe","ui","toolkit","events","MenuEvent"];
haxe_ui_toolkit_events_MenuEvent.__super__ = openfl_events_Event;
haxe_ui_toolkit_events_MenuEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: haxe_ui_toolkit_events_MenuEvent
});
var haxe_ui_toolkit_events_UIEvent = function(type,c,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this._component = c;
};
$hxClasses["haxe.ui.toolkit.events.UIEvent"] = haxe_ui_toolkit_events_UIEvent;
haxe_ui_toolkit_events_UIEvent.__name__ = ["haxe","ui","toolkit","events","UIEvent"];
haxe_ui_toolkit_events_UIEvent.__super__ = openfl_events_Event;
haxe_ui_toolkit_events_UIEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var c = new haxe_ui_toolkit_events_UIEvent(this.type,this._component,this.bubbles,this.cancelable);
		c.displayObject = this.displayObject;
		c.data = this.data;
		c.stageX = this.stageX;
		c.stageY = this.stageY;
		return c;
	}
	,get_component: function() {
		if(this._component != null) return this._component;
		if(this.displayObject == null || js_Boot.__instanceof(this.displayObject,haxe_ui_toolkit_core_Component) == false) return null;
		return js_Boot.__cast(this.displayObject , haxe_ui_toolkit_core_Component);
	}
	,getComponentAs: function(type) {
		var c = this.get_component();
		if(c == null) return null;
		return c;
	}
	,getDataAs: function(type) {
		var d = this.data;
		if(d == null) return null;
		return d;
	}
	,__class__: haxe_ui_toolkit_events_UIEvent
	,__properties__: {get_component:"get_component"}
});
var haxe_ui_toolkit_hscript_ClientWrapper = function() {
	this.language = haxe_ui_toolkit_core_Client.get_instance().get_language();
	this.dpi = haxe_ui_toolkit_core_Client.get_instance().get_dpi();
	this.platform = haxe_ui_toolkit_core_Client.get_instance().get_platform();
	this.target = haxe_ui_toolkit_core_Client.get_instance().get_target();
	this.mobile = haxe_ui_toolkit_core_Client.get_instance().get_mobile();
	this.screenWidth = haxe_ui_toolkit_core_Client.get_instance().get_screenWidth();
	this.screenHeight = haxe_ui_toolkit_core_Client.get_instance().get_screenHeight();
	this.windowWidth = haxe_ui_toolkit_core_Client.get_instance().get_windowWidth();
	this.windowHeight = haxe_ui_toolkit_core_Client.get_instance().get_windowHeight();
};
$hxClasses["haxe.ui.toolkit.hscript.ClientWrapper"] = haxe_ui_toolkit_hscript_ClientWrapper;
haxe_ui_toolkit_hscript_ClientWrapper.__name__ = ["haxe","ui","toolkit","hscript","ClientWrapper"];
haxe_ui_toolkit_hscript_ClientWrapper.prototype = {
	__class__: haxe_ui_toolkit_hscript_ClientWrapper
};
var hscript_Interp = function() {
	this.variables = new haxe_ds_StringMap();
	this.locals = new haxe_ds_StringMap();
	this.variables.set("null",null);
	this.variables.set("true",true);
	this.variables.set("false",false);
	this.variables.set("trace",function(e) {
		haxe_Log.trace(Std.string(e),{ fileName : "hscript", lineNumber : 0});
	});
	this.initOps();
};
$hxClasses["hscript.Interp"] = hscript_Interp;
hscript_Interp.__name__ = ["hscript","Interp"];
hscript_Interp.prototype = {
	initOps: function() {
		var me = this;
		this.binops = new haxe_ds_StringMap();
		this.binops.set("+",function(e1,e2) {
			return me.expr(e1) + me.expr(e2);
		});
		this.binops.set("-",function(e11,e21) {
			return me.expr(e11) - me.expr(e21);
		});
		this.binops.set("*",function(e12,e22) {
			return me.expr(e12) * me.expr(e22);
		});
		this.binops.set("/",function(e13,e23) {
			return me.expr(e13) / me.expr(e23);
		});
		this.binops.set("%",function(e14,e24) {
			return me.expr(e14) % me.expr(e24);
		});
		this.binops.set("&",function(e15,e25) {
			return me.expr(e15) & me.expr(e25);
		});
		this.binops.set("|",function(e16,e26) {
			return me.expr(e16) | me.expr(e26);
		});
		this.binops.set("^",function(e17,e27) {
			return me.expr(e17) ^ me.expr(e27);
		});
		this.binops.set("<<",function(e18,e28) {
			return me.expr(e18) << me.expr(e28);
		});
		this.binops.set(">>",function(e19,e29) {
			return me.expr(e19) >> me.expr(e29);
		});
		this.binops.set(">>>",function(e110,e210) {
			return me.expr(e110) >>> me.expr(e210);
		});
		this.binops.set("==",function(e111,e211) {
			return me.expr(e111) == me.expr(e211);
		});
		this.binops.set("!=",function(e112,e212) {
			return me.expr(e112) != me.expr(e212);
		});
		this.binops.set(">=",function(e113,e213) {
			return me.expr(e113) >= me.expr(e213);
		});
		this.binops.set("<=",function(e114,e214) {
			return me.expr(e114) <= me.expr(e214);
		});
		this.binops.set(">",function(e115,e215) {
			return me.expr(e115) > me.expr(e215);
		});
		this.binops.set("<",function(e116,e216) {
			return me.expr(e116) < me.expr(e216);
		});
		this.binops.set("||",function(e117,e217) {
			return me.expr(e117) == true || me.expr(e217) == true;
		});
		this.binops.set("&&",function(e118,e218) {
			return me.expr(e118) == true && me.expr(e218) == true;
		});
		this.binops.set("=",$bind(this,this.assign));
		this.binops.set("...",function(e119,e219) {
			return new IntIterator(me.expr(e119),me.expr(e219));
		});
		this.assignOp("+=",function(v1,v2) {
			return v1 + v2;
		});
		this.assignOp("-=",function(v11,v21) {
			return v11 - v21;
		});
		this.assignOp("*=",function(v12,v22) {
			return v12 * v22;
		});
		this.assignOp("/=",function(v13,v23) {
			return v13 / v23;
		});
		this.assignOp("%=",function(v14,v24) {
			return v14 % v24;
		});
		this.assignOp("&=",function(v15,v25) {
			return v15 & v25;
		});
		this.assignOp("|=",function(v16,v26) {
			return v16 | v26;
		});
		this.assignOp("^=",function(v17,v27) {
			return v17 ^ v27;
		});
		this.assignOp("<<=",function(v18,v28) {
			return v18 << v28;
		});
		this.assignOp(">>=",function(v19,v29) {
			return v19 >> v29;
		});
		this.assignOp(">>>=",function(v110,v210) {
			return v110 >>> v210;
		});
	}
	,assign: function(e1,e2) {
		var v = this.expr(e2);
		switch(e1[1]) {
		case 1:
			var id = e1[2];
			var l = this.locals.get(id);
			if(l == null) this.variables.set(id,v); else l.r = v;
			break;
		case 5:
			var f = e1[3];
			var e = e1[2];
			v = this.set(this.expr(e),f,v);
			break;
		case 16:
			var index = e1[3];
			var e3 = e1[2];
			this.expr(e3)[this.expr(index)] = v;
			break;
		default:
			this.error(hscript_Error.EInvalidOp("="));
		}
		return v;
	}
	,assignOp: function(op,fop) {
		var me = this;
		this.binops.set(op,function(e1,e2) {
			return me.evalAssignOp(op,fop,e1,e2);
		});
	}
	,evalAssignOp: function(op,fop,e1,e2) {
		var v;
		switch(e1[1]) {
		case 1:
			var id = e1[2];
			var l = this.locals.get(id);
			v = fop(this.expr(e1),this.expr(e2));
			if(l == null) this.variables.set(id,v); else l.r = v;
			break;
		case 5:
			var f = e1[3];
			var e = e1[2];
			var obj = this.expr(e);
			v = fop(this.get(obj,f),this.expr(e2));
			v = this.set(obj,f,v);
			break;
		case 16:
			var index = e1[3];
			var e3 = e1[2];
			var arr = this.expr(e3);
			var index1 = this.expr(index);
			v = fop(arr[index1],this.expr(e2));
			arr[index1] = v;
			break;
		default:
			return this.error(hscript_Error.EInvalidOp(op));
		}
		return v;
	}
	,increment: function(e,prefix,delta) {
		switch(e[1]) {
		case 1:
			var id = e[2];
			var l = this.locals.get(id);
			var v;
			if(l == null) v = this.variables.get(id); else v = l.r;
			if(prefix) {
				v += delta;
				if(l == null) {
					var value = v;
					this.variables.set(id,value);
				} else l.r = v;
			} else if(l == null) {
				var value1 = v + delta;
				this.variables.set(id,value1);
			} else l.r = v + delta;
			return v;
		case 5:
			var f = e[3];
			var e1 = e[2];
			var obj = this.expr(e1);
			var v1 = this.get(obj,f);
			if(prefix) {
				v1 += delta;
				this.set(obj,f,v1);
			} else this.set(obj,f,v1 + delta);
			return v1;
		case 16:
			var index = e[3];
			var e2 = e[2];
			var arr = this.expr(e2);
			var index1 = this.expr(index);
			var v2 = arr[index1];
			if(prefix) {
				v2 += delta;
				arr[index1] = v2;
			} else arr[index1] = v2 + delta;
			return v2;
		default:
			return this.error(hscript_Error.EInvalidOp(delta > 0?"++":"--"));
		}
	}
	,execute: function(expr) {
		this.depth = 0;
		this.locals = new haxe_ds_StringMap();
		this.declared = [];
		return this.exprReturn(expr);
	}
	,exprReturn: function(e) {
		try {
			return this.expr(e);
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			if( js_Boot.__instanceof(e1,hscript__$Interp_Stop) ) {
				switch(e1[1]) {
				case 0:
					throw new js__$Boot_HaxeError("Invalid break");
					break;
				case 1:
					throw new js__$Boot_HaxeError("Invalid continue");
					break;
				case 2:
					var v = e1[2];
					return v;
				}
			} else throw(e1);
		}
		return null;
	}
	,duplicate: function(h) {
		var h2 = new haxe_ds_StringMap();
		var $it0 = h.keys();
		while( $it0.hasNext() ) {
			var k = $it0.next();
			var value;
			value = __map_reserved[k] != null?h.getReserved(k):h.h[k];
			if(__map_reserved[k] != null) h2.setReserved(k,value); else h2.h[k] = value;
		}
		return h2;
	}
	,restore: function(old) {
		while(this.declared.length > old) {
			var d = this.declared.pop();
			this.locals.set(d.n,d.old);
		}
	}
	,edef: function(e) {
		return e;
	}
	,error: function(e) {
		throw new js__$Boot_HaxeError(e);
		return null;
	}
	,resolve: function(id) {
		var l = this.locals.get(id);
		if(l != null) return l.r;
		var v = this.variables.get(id);
		if(v == null && !this.variables.exists(id)) this.error(hscript_Error.EUnknownVariable(id));
		return v;
	}
	,expr: function(e) {
		var _g = this;
		switch(e[1]) {
		case 0:
			var c = e[2];
			switch(c[1]) {
			case 0:
				var v = c[2];
				return v;
			case 1:
				var f = c[2];
				return f;
			case 2:
				var s = c[2];
				return s;
			}
			break;
		case 1:
			var id = e[2];
			return this.resolve(id);
		case 2:
			var e1 = e[4];
			var n = e[2];
			this.declared.push({ n : n, old : this.locals.get(n)});
			var value = { r : e1 == null?null:this.expr(e1)};
			this.locals.set(n,value);
			return null;
		case 3:
			var e2 = e[2];
			return this.expr(e2);
		case 4:
			var exprs = e[2];
			var old = this.declared.length;
			var v1 = null;
			var _g1 = 0;
			while(_g1 < exprs.length) {
				var e3 = exprs[_g1];
				++_g1;
				v1 = this.expr(e3);
			}
			this.restore(old);
			return v1;
		case 5:
			var f1 = e[3];
			var e4 = e[2];
			return this.get(this.expr(e4),f1);
		case 6:
			var e21 = e[4];
			var e11 = e[3];
			var op = e[2];
			var fop = this.binops.get(op);
			if(fop == null) this.error(hscript_Error.EInvalidOp(op));
			return fop(e11,e21);
		case 7:
			var e5 = e[4];
			var prefix = e[3];
			var op1 = e[2];
			switch(op1) {
			case "!":
				return this.expr(e5) != true;
			case "-":
				return -this.expr(e5);
			case "++":
				return this.increment(e5,prefix,1);
			case "--":
				return this.increment(e5,prefix,-1);
			case "~":
				return ~this.expr(e5);
			default:
				this.error(hscript_Error.EInvalidOp(op1));
			}
			break;
		case 8:
			var params = e[3];
			var e6 = e[2];
			var args = [];
			var _g2 = 0;
			while(_g2 < params.length) {
				var p = params[_g2];
				++_g2;
				args.push(this.expr(p));
			}
			switch(e6[1]) {
			case 5:
				var f2 = e6[3];
				var e7 = e6[2];
				var obj = this.expr(e7);
				if(obj == null) this.error(hscript_Error.EInvalidAccess(f2));
				return this.fcall(obj,f2,args);
			default:
				return this.call(null,this.expr(e6),args);
			}
			break;
		case 9:
			var e22 = e[4];
			var e12 = e[3];
			var econd = e[2];
			if(this.expr(econd) == true) return this.expr(e12); else if(e22 == null) return null; else return this.expr(e22);
			break;
		case 10:
			var e8 = e[3];
			var econd1 = e[2];
			this.whileLoop(econd1,e8);
			return null;
		case 11:
			var e9 = e[4];
			var it = e[3];
			var v2 = e[2];
			this.forLoop(v2,it,e9);
			return null;
		case 12:
			throw new js__$Boot_HaxeError(hscript__$Interp_Stop.SBreak);
			break;
		case 13:
			throw new js__$Boot_HaxeError(hscript__$Interp_Stop.SContinue);
			break;
		case 15:
			var e10 = e[2];
			throw new js__$Boot_HaxeError(hscript__$Interp_Stop.SReturn(e10 == null?null:this.expr(e10)));
			break;
		case 14:
			var name = e[4];
			var fexpr = e[3];
			var params1 = e[2];
			var capturedLocals = this.duplicate(this.locals);
			var me = this;
			var hasOpt = false;
			var minParams = 0;
			var _g5 = 0;
			while(_g5 < params1.length) {
				var p2 = params1[_g5];
				++_g5;
				if(p2.opt) hasOpt = true; else minParams++;
			}
			var f3 = function(args1) {
				if(args1.length != params1.length) {
					if(args1.length < minParams) {
						var str = "Invalid number of parameters. Got " + args1.length + ", required " + minParams;
						if(name != null) str += " for function '" + name + "'";
						throw new js__$Boot_HaxeError(str);
					}
					var args2 = [];
					var extraParams = args1.length - minParams;
					var pos = 0;
					var _g3 = 0;
					while(_g3 < params1.length) {
						var p1 = params1[_g3];
						++_g3;
						if(p1.opt) {
							if(extraParams > 0) {
								args2.push(args1[pos++]);
								extraParams--;
							} else args2.push(null);
						} else args2.push(args1[pos++]);
					}
					args1 = args2;
				}
				var old1 = me.locals;
				var depth = me.depth;
				me.depth++;
				me.locals = me.duplicate(capturedLocals);
				var _g11 = 0;
				var _g4 = params1.length;
				while(_g11 < _g4) {
					var i = _g11++;
					me.locals.set(params1[i].name,{ r : args1[i]});
				}
				var r = null;
				if(_g.inTry) try {
					r = me.exprReturn(fexpr);
				} catch( e13 ) {
					haxe_CallStack.lastException = e13;
					if (e13 instanceof js__$Boot_HaxeError) e13 = e13.val;
					me.locals = old1;
					me.depth = depth;
					throw new js__$Boot_HaxeError(e13);
				} else r = me.exprReturn(fexpr);
				me.locals = old1;
				me.depth = depth;
				return r;
			};
			var f4 = Reflect.makeVarArgs(f3);
			if(name != null) {
				if(this.depth == 0) this.variables.set(name,f4); else {
					this.declared.push({ n : name, old : this.locals.get(name)});
					var ref = { r : f4};
					this.locals.set(name,ref);
					if(__map_reserved[name] != null) capturedLocals.setReserved(name,ref); else capturedLocals.h[name] = ref;
				}
			}
			return f4;
		case 17:
			var arr = e[2];
			var a = [];
			var _g6 = 0;
			while(_g6 < arr.length) {
				var e14 = arr[_g6];
				++_g6;
				a.push(this.expr(e14));
			}
			return a;
		case 16:
			var index = e[3];
			var e15 = e[2];
			return this.expr(e15)[this.expr(index)];
		case 18:
			var params2 = e[3];
			var cl = e[2];
			var a1 = [];
			var _g7 = 0;
			while(_g7 < params2.length) {
				var e16 = params2[_g7];
				++_g7;
				a1.push(this.expr(e16));
			}
			return this.cnew(cl,a1);
		case 19:
			var e17 = e[2];
			throw new js__$Boot_HaxeError(this.expr(e17));
			break;
		case 20:
			var ecatch = e[5];
			var n1 = e[3];
			var e18 = e[2];
			var old2 = this.declared.length;
			var oldTry = this.inTry;
			try {
				this.inTry = true;
				var v3 = this.expr(e18);
				this.restore(old2);
				this.inTry = oldTry;
				return v3;
			} catch( $e0 ) {
				haxe_CallStack.lastException = $e0;
				if ($e0 instanceof js__$Boot_HaxeError) $e0 = $e0.val;
				if( js_Boot.__instanceof($e0,hscript__$Interp_Stop) ) {
					var err = $e0;
					this.inTry = oldTry;
					throw new js__$Boot_HaxeError(err);
				} else {
				var err1 = $e0;
				this.restore(old2);
				this.inTry = oldTry;
				this.declared.push({ n : n1, old : this.locals.get(n1)});
				this.locals.set(n1,{ r : err1});
				var v4 = this.expr(ecatch);
				this.restore(old2);
				return v4;
				}
			}
			break;
		case 21:
			var fl = e[2];
			var o = { };
			var _g8 = 0;
			while(_g8 < fl.length) {
				var f5 = fl[_g8];
				++_g8;
				this.set(o,f5.name,this.expr(f5.e));
			}
			return o;
		case 22:
			var e23 = e[4];
			var e19 = e[3];
			var econd2 = e[2];
			if(this.expr(econd2) == true) return this.expr(e19); else return this.expr(e23);
			break;
		case 23:
			var def = e[4];
			var cases = e[3];
			var e20 = e[2];
			var val = this.expr(e20);
			var match = false;
			var _g9 = 0;
			while(_g9 < cases.length) {
				var c1 = cases[_g9];
				++_g9;
				var _g12 = 0;
				var _g21 = c1.values;
				while(_g12 < _g21.length) {
					var v5 = _g21[_g12];
					++_g12;
					if(this.expr(v5) == val) {
						match = true;
						break;
					}
				}
				if(match) {
					val = this.expr(c1.expr);
					break;
				}
			}
			if(!match) if(def == null) val = null; else val = this.expr(def);
			return val;
		}
		return null;
	}
	,whileLoop: function(econd,e) {
		var old = this.declared.length;
		try {
			while(this.expr(econd) == true) try {
				this.expr(e);
			} catch( err ) {
				haxe_CallStack.lastException = err;
				if (err instanceof js__$Boot_HaxeError) err = err.val;
				if( js_Boot.__instanceof(err,hscript__$Interp_Stop) ) {
					switch(err[1]) {
					case 1:
						break;
					case 0:
						throw "__break__";
						break;
					case 2:
						throw new js__$Boot_HaxeError(err);
						break;
					}
				} else throw(err);
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		this.restore(old);
	}
	,makeIterator: function(v) {
		try {
			v = $iterator(v)();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
		}
		if(v.hasNext == null || v.next == null) this.error(hscript_Error.EInvalidIterator(v));
		return v;
	}
	,forLoop: function(n,it,e) {
		var old = this.declared.length;
		this.declared.push({ n : n, old : this.locals.get(n)});
		var it1 = this.makeIterator(this.expr(it));
		try {
			while(it1.hasNext()) {
				var value = { r : it1.next()};
				this.locals.set(n,value);
				try {
					this.expr(e);
				} catch( err ) {
					haxe_CallStack.lastException = err;
					if (err instanceof js__$Boot_HaxeError) err = err.val;
					if( js_Boot.__instanceof(err,hscript__$Interp_Stop) ) {
						switch(err[1]) {
						case 1:
							break;
						case 0:
							throw "__break__";
							break;
						case 2:
							throw new js__$Boot_HaxeError(err);
							break;
						}
					} else throw(err);
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		this.restore(old);
	}
	,get: function(o,f) {
		if(o == null) this.error(hscript_Error.EInvalidAccess(f));
		return Reflect.field(o,f);
	}
	,set: function(o,f,v) {
		if(o == null) this.error(hscript_Error.EInvalidAccess(f));
		o[f] = v;
		return v;
	}
	,fcall: function(o,f,args) {
		return this.call(o,Reflect.field(o,f),args);
	}
	,call: function(o,f,args) {
		return Reflect.callMethod(o,f,args);
	}
	,cnew: function(cl,args) {
		var c = Type.resolveClass(cl);
		if(c == null) c = this.resolve(cl);
		return Type.createInstance(c,args);
	}
	,__class__: hscript_Interp
};
var haxe_ui_toolkit_hscript_ScriptInterp = function() {
	hscript_Interp.call(this);
	var defaultClasses = haxe_ui_toolkit_hscript_ScriptManager.get_instance().get_classes();
	var $it0 = defaultClasses.keys();
	while( $it0.hasNext() ) {
		var name = $it0.next();
		var c;
		c = __map_reserved[name] != null?defaultClasses.getReserved(name):defaultClasses.h[name];
		var value = c;
		this.variables.set(name,value);
	}
};
$hxClasses["haxe.ui.toolkit.hscript.ScriptInterp"] = haxe_ui_toolkit_hscript_ScriptInterp;
haxe_ui_toolkit_hscript_ScriptInterp.__name__ = ["haxe","ui","toolkit","hscript","ScriptInterp"];
haxe_ui_toolkit_hscript_ScriptInterp.__super__ = hscript_Interp;
haxe_ui_toolkit_hscript_ScriptInterp.prototype = $extend(hscript_Interp.prototype,{
	get: function(o,f) {
		if(o == null) throw new js__$Boot_HaxeError(this.error(hscript_Error.EInvalidAccess(f)));
		return Reflect.getProperty(o,f);
	}
	,set: function(o,f,v) {
		if(o == null) throw new js__$Boot_HaxeError(this.error(hscript_Error.EInvalidAccess(f)));
		Reflect.setProperty(o,f,v);
		return v;
	}
	,__class__: haxe_ui_toolkit_hscript_ScriptInterp
});
var haxe_ui_toolkit_hscript_ScriptManager = function() {
	this._defaultClasses = new haxe_ds_StringMap();
	this._defaultClasses.set("Std",Std);
	this._defaultClasses.set("Math",Math);
	var value = haxe_ui_toolkit_core_Client.get_instance();
	this._defaultClasses.set("Client",value);
	this._defaultClasses.set("Timer",haxe_Timer);
};
$hxClasses["haxe.ui.toolkit.hscript.ScriptManager"] = haxe_ui_toolkit_hscript_ScriptManager;
haxe_ui_toolkit_hscript_ScriptManager.__name__ = ["haxe","ui","toolkit","hscript","ScriptManager"];
haxe_ui_toolkit_hscript_ScriptManager.__properties__ = {get_instance:"get_instance"}
haxe_ui_toolkit_hscript_ScriptManager._instance = null;
haxe_ui_toolkit_hscript_ScriptManager.instance = null;
haxe_ui_toolkit_hscript_ScriptManager.get_instance = function() {
	if(haxe_ui_toolkit_hscript_ScriptManager._instance == null) haxe_ui_toolkit_hscript_ScriptManager._instance = new haxe_ui_toolkit_hscript_ScriptManager();
	return haxe_ui_toolkit_hscript_ScriptManager._instance;
};
haxe_ui_toolkit_hscript_ScriptManager.prototype = {
	get_classes: function() {
		return this._defaultClasses;
	}
	,addClass: function(name,cls) {
		var value = cls;
		this._defaultClasses.set(name,value);
	}
	,executeScript: function(script) {
		var fullScript = "";
		fullScript += script;
		var retVal = null;
		try {
			var parser = new hscript_Parser();
			var program = parser.parseString(fullScript);
			var interp = new haxe_ui_toolkit_hscript_ScriptInterp();
			retVal = interp.execute(program);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			retVal = script;
		}
		return retVal;
	}
	,__class__: haxe_ui_toolkit_hscript_ScriptManager
	,__properties__: {get_classes:"get_classes"}
};
var haxe_ui_toolkit_hscript_ScriptUtils = function() { };
$hxClasses["haxe.ui.toolkit.hscript.ScriptUtils"] = haxe_ui_toolkit_hscript_ScriptUtils;
haxe_ui_toolkit_hscript_ScriptUtils.__name__ = ["haxe","ui","toolkit","hscript","ScriptUtils"];
haxe_ui_toolkit_hscript_ScriptUtils.isScript = function(data) {
	if(data.indexOf("+") != -1 || data.indexOf("-") != -1 || data.indexOf("*") != -1 || data.indexOf("/") != -1 || data.indexOf("(") != -1 || data.indexOf(")") != -1 || data.indexOf("[") != -1 || data.indexOf("]") != -1) return true;
	return false;
};
haxe_ui_toolkit_hscript_ScriptUtils.isCssException = function(name) {
	if(name == "filter" || name == "icon" || name == "backgroundImage" || name == "fontName") return true;
	return false;
};
var haxe_ui_toolkit_layout_AbsoluteLayout = function() {
	haxe_ui_toolkit_layout_Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.layout.AbsoluteLayout"] = haxe_ui_toolkit_layout_AbsoluteLayout;
haxe_ui_toolkit_layout_AbsoluteLayout.__name__ = ["haxe","ui","toolkit","layout","AbsoluteLayout"];
haxe_ui_toolkit_layout_AbsoluteLayout.__super__ = haxe_ui_toolkit_layout_Layout;
haxe_ui_toolkit_layout_AbsoluteLayout.prototype = $extend(haxe_ui_toolkit_layout_Layout.prototype,{
	resizeChildren: function() {
		haxe_ui_toolkit_layout_Layout.prototype.resizeChildren.call(this);
		var ucx = this.get_usableWidth();
		var ucy = this.get_usableHeight();
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_percentWidth() > -1) child.set_width(ucx * child.get_percentWidth() / 100);
			if(child.get_percentHeight() > -1) child.set_height(ucy * child.get_percentHeight() / 100);
		}
	}
	,clone: function() {
		var c = haxe_ui_toolkit_layout_Layout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_layout_AbsoluteLayout();
	}
	,__class__: haxe_ui_toolkit_layout_AbsoluteLayout
});
var haxe_ui_toolkit_layout_BoxLayout = function() {
	haxe_ui_toolkit_layout_Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.layout.BoxLayout"] = haxe_ui_toolkit_layout_BoxLayout;
haxe_ui_toolkit_layout_BoxLayout.__name__ = ["haxe","ui","toolkit","layout","BoxLayout"];
haxe_ui_toolkit_layout_BoxLayout.__super__ = haxe_ui_toolkit_layout_Layout;
haxe_ui_toolkit_layout_BoxLayout.prototype = $extend(haxe_ui_toolkit_layout_Layout.prototype,{
	resizeChildren: function() {
		haxe_ui_toolkit_layout_Layout.prototype.resizeChildren.call(this);
		var ucx = this.get_usableWidth();
		var ucy = this.get_usableHeight();
		var totalWidth = 0;
		var totalHeight = 0;
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_percentWidth() > -1) child.set_width(ucx * child.get_percentWidth() / 100);
			if(child.get_percentHeight() > -1) child.set_height(ucy * child.get_percentHeight() / 100);
			if(child.get_width() > totalWidth) totalWidth = child.get_width();
			if(child.get_height() > totalHeight) totalHeight = child.get_height();
		}
		this.autoSize(totalWidth,totalHeight);
	}
	,repositionChildren: function() {
		haxe_ui_toolkit_layout_Layout.prototype.repositionChildren.call(this);
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			var xpos = this.get_padding().get_left();
			var ypos = this.get_padding().get_top();
			var halign = child.get_horizontalAlign();
			var valign = child.get_verticalAlign();
			switch(halign) {
			case "center":
				xpos = this.get_container().get_width() / 2 - child.get_width() / 2;
				break;
			case "right":
				xpos = this.get_container().get_width() - child.get_width() - this.get_padding().get_right();
				break;
			default:
			}
			switch(valign) {
			case "center":
				ypos = this.get_container().get_height() / 2 - child.get_height() / 2;
				break;
			case "bottom":
				ypos = this.get_container().get_height() - child.get_height() - this.get_padding().get_bottom();
				break;
			default:
			}
			child.set_x(xpos);
			child.set_y(ypos);
		}
	}
	,get_usableWidth: function() {
		var ucx = haxe_ui_toolkit_layout_Layout.prototype.get_usableWidth.call(this);
		return ucx;
	}
	,get_usableHeight: function() {
		var ucy = haxe_ui_toolkit_layout_Layout.prototype.get_usableHeight.call(this);
		return ucy;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_layout_Layout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_layout_BoxLayout();
	}
	,__class__: haxe_ui_toolkit_layout_BoxLayout
});
var haxe_ui_toolkit_layout_GridLayout = function() {
	this._columns = 1;
	haxe_ui_toolkit_layout_Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.layout.GridLayout"] = haxe_ui_toolkit_layout_GridLayout;
haxe_ui_toolkit_layout_GridLayout.__name__ = ["haxe","ui","toolkit","layout","GridLayout"];
haxe_ui_toolkit_layout_GridLayout.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_layout_GridLayout.__super__ = haxe_ui_toolkit_layout_Layout;
haxe_ui_toolkit_layout_GridLayout.prototype = $extend(haxe_ui_toolkit_layout_Layout.prototype,{
	get_columns: function() {
		return this._columns;
	}
	,set_columns: function(value) {
		this._columns = value;
		return value;
	}
	,resizeChildren: function() {
		haxe_ui_toolkit_layout_Layout.prototype.resizeChildren.call(this);
		var columnWidths = this.calcColumnWidths();
		var rowHeights = this.calcRowHeights();
		var explicitWidths = this.calcExplicitWidths();
		var explicitHeights = this.calcExplicitHeights();
		var totalWidth = 0;
		var totalHeight = 0;
		var rowIndex = 0;
		var columnIndex = 0;
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_percentWidth() > -1) {
				var ucx = columnWidths[columnIndex];
				if(explicitWidths[columnIndex] == false) child.set_width(ucx); else child.set_width(ucx * child.get_percentWidth() / 100);
			}
			if(child.get_percentHeight() > -1) {
				var ucy = rowHeights[rowIndex];
				if(explicitHeights[rowIndex] == false) child.set_height(ucy); else child.set_height(ucy * child.get_percentHeight() / 100);
			}
			columnIndex++;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				rowIndex++;
			}
		}
		var _g2 = 0;
		while(_g2 < columnWidths.length) {
			var cx = columnWidths[_g2];
			++_g2;
			totalWidth += cx;
		}
		if(columnWidths.length > 1) totalWidth += this.get_spacingX() * (columnWidths.length - 1);
		var _g3 = 0;
		while(_g3 < rowHeights.length) {
			var cy = rowHeights[_g3];
			++_g3;
			totalHeight += cy;
		}
		if(rowHeights.length > 1) totalHeight += this.get_spacingY() * (rowHeights.length - 1);
		this.autoSize(totalWidth,totalHeight);
	}
	,repositionChildren: function() {
		haxe_ui_toolkit_layout_Layout.prototype.repositionChildren.call(this);
		var columnWidths = this.calcColumnWidths();
		var rowHeights = this.calcRowHeights();
		var rowIndex = 0;
		var columnIndex = 0;
		var xpos = this.get_padding().get_left();
		var ypos = this.get_padding().get_top();
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			var halign = child.get_horizontalAlign();
			var valign = child.get_verticalAlign();
			switch(halign) {
			case "center":
				child.set_x(xpos + (columnWidths[columnIndex] - child.get_width()) * 0.5);
				break;
			case "right":
				child.set_x(xpos + (columnWidths[columnIndex] - child.get_width()));
				break;
			default:
				child.set_x(xpos);
			}
			switch(valign) {
			case "center":
				child.set_y(ypos + (rowHeights[rowIndex] - child.get_height()) * 0.5);
				break;
			case "bottom":
				child.set_y(ypos + (rowHeights[rowIndex] - child.get_height()));
				break;
			default:
				child.set_y(ypos);
			}
			xpos += columnWidths[columnIndex] + this.get_spacingX();
			columnIndex++;
			if(columnIndex >= this._columns) {
				xpos = this.get_padding().get_left();
				ypos += rowHeights[rowIndex] + this.get_spacingY();
				columnIndex = 0;
				rowIndex++;
			}
		}
	}
	,get_usableWidth: function() {
		var ucx = haxe_ui_toolkit_layout_Layout.prototype.get_usableWidth.call(this);
		return ucx;
	}
	,get_usableHeight: function() {
		var ucy = haxe_ui_toolkit_layout_Layout.prototype.get_usableHeight.call(this);
		return ucy;
	}
	,calcExplicitWidths: function() {
		var explicitWidths = [];
		var _g1 = 0;
		var _g = this._columns;
		while(_g1 < _g) {
			var n = _g1++;
			explicitWidths.push(false);
		}
		var rowIndex = 0;
		var columnIndex = 0;
		var _g2 = 0;
		var _g11 = this.get_container().get_children();
		while(_g2 < _g11.length) {
			var child = _g11[_g2];
			++_g2;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_percentWidth() < 0 && child.get_width() > 0) explicitWidths[columnIndex] = true;
			columnIndex++;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				rowIndex++;
			}
		}
		return explicitWidths;
	}
	,calcExplicitHeights: function() {
		var visibleChildren = 0;
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.get_visible()) visibleChildren++;
		}
		var rowCount = visibleChildren / this._columns | 0;
		if(visibleChildren % this._columns != 0) rowCount++;
		var explicitHeights = [];
		var _g2 = 0;
		while(_g2 < rowCount) {
			var n = _g2++;
			explicitHeights.push(false);
		}
		var rowIndex = 0;
		var columnIndex = 0;
		var _g3 = 0;
		var _g11 = this.get_container().get_children();
		while(_g3 < _g11.length) {
			var child = _g11[_g3];
			++_g3;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_percentHeight() < 0 && child.get_height() > 0) explicitHeights[columnIndex % this._columns] = true;
			columnIndex++;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				rowIndex++;
			}
		}
		return explicitHeights;
	}
	,calcColumnWidths: function() {
		var columnWidths = [];
		var _g1 = 0;
		var _g = this._columns;
		while(_g1 < _g) {
			var n = _g1++;
			columnWidths.push(0);
		}
		var rowIndex = 0;
		var columnIndex = 0;
		var _g2 = 0;
		var _g11 = this.get_container().get_children();
		while(_g2 < _g11.length) {
			var child = _g11[_g2];
			++_g2;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_percentWidth() <= 0) {
				if(child.get_width() > columnWidths[columnIndex]) columnWidths[columnIndex] = child.get_width();
			}
			columnIndex++;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				rowIndex++;
			}
		}
		var copy = columnWidths.slice();
		rowIndex = 0;
		columnIndex = 0;
		var _g3 = 0;
		var _g12 = this.get_container().get_children();
		while(_g3 < _g12.length) {
			var child1 = _g12[_g3];
			++_g3;
			if(child1.get_visible() == false || child1.get_includeInLayout() == false) continue;
			if(child1.get_percentWidth() > 0) {
				var ucx = this.get_usableWidth() - (this.get_columns() - 1) * this.get_spacingX();
				var _g31 = 0;
				var _g21 = columnWidths.length;
				while(_g31 < _g21) {
					var n1 = _g31++;
					if(n1 != columnIndex) ucx -= copy[n1];
				}
				var cx = ucx * child1.get_percentWidth() / 100;
				if(cx > columnWidths[columnIndex]) columnWidths[columnIndex] = cx;
			}
			columnIndex++;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				rowIndex++;
			}
		}
		return columnWidths;
	}
	,calcRowHeights: function() {
		var visibleChildren = 0;
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.get_visible()) visibleChildren++;
		}
		var rowCount = visibleChildren / this._columns | 0;
		if(visibleChildren % this._columns != 0) rowCount++;
		var rowHeights = [];
		var _g2 = 0;
		while(_g2 < rowCount) {
			var n = _g2++;
			rowHeights.push(0);
		}
		var rowIndex = 0;
		var columnIndex = 0;
		var _g3 = 0;
		var _g11 = this.get_container().get_children();
		while(_g3 < _g11.length) {
			var child = _g11[_g3];
			++_g3;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_percentHeight() <= 0) {
				if(child.get_height() > rowHeights[rowIndex]) rowHeights[rowIndex] = child.get_height();
			}
			columnIndex++;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				rowIndex++;
			}
		}
		var copy = rowHeights.slice();
		rowIndex = 0;
		columnIndex = 0;
		var _g4 = 0;
		var _g12 = this.get_container().get_children();
		while(_g4 < _g12.length) {
			var child1 = _g12[_g4];
			++_g4;
			if(child1.get_visible() == false || child1.get_includeInLayout() == false) continue;
			if(child1.get_percentHeight() > 0) {
				var ucy = this.get_usableHeight() - (rowCount - 1) * this.get_spacingY();
				var _g31 = 0;
				var _g21 = rowHeights.length;
				while(_g31 < _g21) {
					var n1 = _g31++;
					if(n1 != rowIndex) ucy -= copy[n1];
				}
				var cy = ucy * child1.get_percentHeight() / 100;
				if(cy > rowHeights[rowIndex] && this._columns == 1) rowHeights[rowIndex] = cy; else if(ucy > rowHeights[rowIndex]) rowHeights[rowIndex] = ucy;
			}
			columnIndex++;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				rowIndex++;
			}
		}
		return rowHeights;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_layout_Layout.prototype.clone.call(this);
		c.set_columns(this.get_columns());
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_layout_GridLayout();
	}
	,__class__: haxe_ui_toolkit_layout_GridLayout
	,__properties__: $extend(haxe_ui_toolkit_layout_Layout.prototype.__properties__,{set_columns:"set_columns",get_columns:"get_columns"})
});
var haxe_ui_toolkit_layout_HorizontalContinuousLayout = function() {
	haxe_ui_toolkit_layout_Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.layout.HorizontalContinuousLayout"] = haxe_ui_toolkit_layout_HorizontalContinuousLayout;
haxe_ui_toolkit_layout_HorizontalContinuousLayout.__name__ = ["haxe","ui","toolkit","layout","HorizontalContinuousLayout"];
haxe_ui_toolkit_layout_HorizontalContinuousLayout.__super__ = haxe_ui_toolkit_layout_Layout;
haxe_ui_toolkit_layout_HorizontalContinuousLayout.prototype = $extend(haxe_ui_toolkit_layout_Layout.prototype,{
	repositionChildren: function() {
		haxe_ui_toolkit_layout_Layout.prototype.repositionChildren.call(this);
		var xpos = this.get_padding().get_left();
		var ypos = this.get_padding().get_top();
		var usedCX = this.get_padding().get_left() + this.get_padding().get_right();
		var usedCY = this.get_padding().get_top() + this.get_padding().get_bottom();
		var rowCY = 0;
		var rowHeights = [];
		var rowChildren = [];
		rowHeights.push(0);
		var row = 0;
		var maxCX = this.get_container().get_width();
		if(this.get_container().get_autoSize() == true && this.get_container().get_parent() != null) maxCX = this.get_container().get_parent().get_layout().get_usableWidth();
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			rowChildren.push(child);
			if(child.get_percentWidth() > -1) child.set_width((maxCX - this.get_spacingX()) * child.get_percentWidth() / 100);
			usedCX += child.get_width() + this.get_spacingX();
			if(usedCX - this.get_spacingX() > maxCX) {
				xpos = this.get_padding().get_left();
				rowHeights.push(0);
				ypos += rowHeights[row] + this.get_spacingY();
				row++;
				usedCX = this.get_padding().get_left() + this.get_padding().get_right() + child.get_width() + this.get_spacingX();
				rowChildren = [];
				rowChildren.push(child);
			}
			var reposition = false;
			if(child.get_height() > rowHeights[row]) {
				rowHeights[row] = child.get_height();
				reposition = true;
			}
			usedCY = this.get_padding().get_top() + this.get_padding().get_bottom();
			var _g2 = 0;
			while(_g2 < rowHeights.length) {
				var cy = rowHeights[_g2];
				++_g2;
				usedCY += cy + this.get_spacingY();
			}
			usedCY -= this.get_spacingY();
			if(reposition) {
				var _g21 = 0;
				while(_g21 < rowChildren.length) {
					var temp = rowChildren[_g21];
					++_g21;
					var valign1 = temp.get_verticalAlign();
					var tempYpos = temp.get_y();
					switch(valign1) {
					case "center":
						tempYpos = usedCY - temp.get_height() - this.get_padding().get_top() - (rowHeights[row] / 2 - temp.get_height() / 2);
						break;
					case "bottom":
						tempYpos = usedCY - temp.get_height() - this.get_padding().get_top();
						break;
					default:
					}
					temp.set_y(tempYpos);
				}
			}
			if(usedCX - this.get_spacingX() > this.get_container().get_width() && this.get_container().get_autoSize()) this.get_container().set_width(usedCX - this.get_spacingX());
			if(usedCY > this.get_container().get_height() && this.get_container().get_autoSize()) this.get_container().set_height(usedCY);
			var valign = child.get_verticalAlign();
			var tempYPos = ypos;
			switch(valign) {
			case "center":
				tempYPos = usedCY - child.get_height() - this.get_padding().get_top() - (rowHeights[row] / 2 - child.get_height() / 2);
				break;
			case "bottom":
				tempYPos = usedCY - child.get_height() - this.get_padding().get_top();
				break;
			default:
			}
			child.set_x(xpos);
			child.set_y(tempYPos);
			xpos += child.get_width() + this.get_spacingX();
		}
	}
	,clone: function() {
		var c = haxe_ui_toolkit_layout_Layout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_layout_HorizontalContinuousLayout();
	}
	,__class__: haxe_ui_toolkit_layout_HorizontalContinuousLayout
});
var haxe_ui_toolkit_layout_HorizontalLayout = function() {
	haxe_ui_toolkit_layout_Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.layout.HorizontalLayout"] = haxe_ui_toolkit_layout_HorizontalLayout;
haxe_ui_toolkit_layout_HorizontalLayout.__name__ = ["haxe","ui","toolkit","layout","HorizontalLayout"];
haxe_ui_toolkit_layout_HorizontalLayout.__super__ = haxe_ui_toolkit_layout_Layout;
haxe_ui_toolkit_layout_HorizontalLayout.prototype = $extend(haxe_ui_toolkit_layout_Layout.prototype,{
	resizeChildren: function() {
		haxe_ui_toolkit_layout_Layout.prototype.resizeChildren.call(this);
		var ucx = this.get_usableWidth();
		var ucy = this.get_usableHeight();
		var totalWidth = 0;
		var totalHeight = 0;
		var numChildren = 0;
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			numChildren++;
			if(child.get_percentWidth() > -1) child.set_width(ucx * child.get_percentWidth() / 100);
			if(child.get_percentHeight() > -1) child.set_height(ucy * child.get_percentHeight() / 100);
			totalWidth += child.get_width();
			if(child.get_height() > totalHeight) totalHeight = child.get_height();
		}
		if(numChildren > 1) totalWidth += this.get_spacingX() * (numChildren - 1);
		this.autoSize(totalWidth,totalHeight);
	}
	,repositionChildren: function() {
		haxe_ui_toolkit_layout_Layout.prototype.repositionChildren.call(this);
		var xpos = this.get_padding().get_left();
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			var ypos = this.get_padding().get_top();
			var valign = child.get_verticalAlign();
			switch(valign) {
			case "center":
				ypos = this.get_container().get_height() / 2 - child.get_height() / 2;
				break;
			case "bottom":
				ypos = this.get_container().get_height() - child.get_height() - this.get_padding().get_bottom();
				break;
			default:
			}
			child.set_x(xpos);
			child.set_y(ypos);
			xpos += child.get_width() + this.get_spacingX();
		}
	}
	,get_usableWidth: function() {
		var ucx = haxe_ui_toolkit_layout_Layout.prototype.get_usableWidth.call(this);
		var visibleChildren = 0;
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.get_visible()) visibleChildren++;
		}
		if(visibleChildren > 1) ucx -= this.get_spacingX() * (visibleChildren - 1);
		var _g2 = 0;
		var _g11 = this.get_container().get_children();
		while(_g2 < _g11.length) {
			var child = _g11[_g2];
			++_g2;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_width() > 0 && child.get_percentWidth() < 0) ucx -= child.get_width();
		}
		if(ucx < 0) ucx = 0;
		return ucx;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_layout_Layout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_layout_HorizontalLayout();
	}
	,__class__: haxe_ui_toolkit_layout_HorizontalLayout
});
var haxe_ui_toolkit_layout_VerticalContinuousLayout = function() {
	haxe_ui_toolkit_layout_Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.layout.VerticalContinuousLayout"] = haxe_ui_toolkit_layout_VerticalContinuousLayout;
haxe_ui_toolkit_layout_VerticalContinuousLayout.__name__ = ["haxe","ui","toolkit","layout","VerticalContinuousLayout"];
haxe_ui_toolkit_layout_VerticalContinuousLayout.__super__ = haxe_ui_toolkit_layout_Layout;
haxe_ui_toolkit_layout_VerticalContinuousLayout.prototype = $extend(haxe_ui_toolkit_layout_Layout.prototype,{
	repositionChildren: function() {
		haxe_ui_toolkit_layout_Layout.prototype.repositionChildren.call(this);
		var xpos = this.get_padding().get_left();
		var ypos = this.get_padding().get_top();
		var usedCX = this.get_padding().get_left() + this.get_padding().get_right();
		var usedCY = this.get_padding().get_top() + this.get_padding().get_bottom();
		var colCX = 0;
		var colWidths = [];
		var colChildren = [];
		colWidths.push(0);
		var col = 0;
		var maxCY = this.get_container().get_height();
		if(this.get_container().get_autoSize() == true && this.get_container().get_parent() != null) maxCY = this.get_container().get_parent().get_layout().get_usableHeight();
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			colChildren.push(child);
			usedCY += child.get_height() + this.get_spacingY();
			if(usedCY - this.get_spacingY() > maxCY) {
				ypos = this.get_padding().get_top();
				colWidths.push(0);
				xpos += colWidths[col] + this.get_spacingX();
				col++;
				usedCY = this.get_padding().get_top() + this.get_padding().get_bottom() + child.get_height() + this.get_spacingY();
				colChildren = [];
				colChildren.push(child);
			}
			var reposition = false;
			if(child.get_width() > colWidths[col]) {
				colWidths[col] = child.get_width();
				reposition = true;
			}
			usedCX = this.get_padding().get_left() + this.get_padding().get_right();
			var _g2 = 0;
			while(_g2 < colWidths.length) {
				var cx = colWidths[_g2];
				++_g2;
				usedCX += cx + this.get_spacingX();
			}
			usedCX -= this.get_spacingX();
			if(reposition) {
				var _g21 = 0;
				while(_g21 < colChildren.length) {
					var temp = colChildren[_g21];
					++_g21;
					var halign1 = child.get_horizontalAlign();
					var tempXpos = temp.get_x();
					switch(halign1) {
					case "center":
						tempXpos = usedCX - temp.get_width() - this.get_padding().get_left() - (colWidths[col] / 2 - temp.get_width() / 2);
						break;
					case "right":
						tempXpos = usedCX - temp.get_width() - this.get_padding().get_left();
						break;
					default:
					}
					temp.set_x(tempXpos);
				}
			}
			if(usedCY - this.get_spacingY() > this.get_container().get_height() && this.get_container().get_autoSize()) this.get_container().set_height(usedCY - this.get_spacingY());
			if(usedCX > this.get_container().get_width() && this.get_container().get_autoSize()) this.get_container().set_width(usedCX);
			var halign = child.get_horizontalAlign();
			var tempXPos = xpos;
			switch(halign) {
			case "center":
				tempXPos = usedCX - child.get_width() - this.get_padding().get_left() - (colWidths[col] / 2 - child.get_width() / 2);
				break;
			case "right":
				tempXPos = usedCX - child.get_width() - this.get_padding().get_left();
				break;
			default:
			}
			child.set_x(tempXPos);
			child.set_y(ypos);
			ypos += child.get_height() + this.get_spacingY();
		}
	}
	,clone: function() {
		var c = haxe_ui_toolkit_layout_Layout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_layout_VerticalContinuousLayout();
	}
	,__class__: haxe_ui_toolkit_layout_VerticalContinuousLayout
});
var haxe_ui_toolkit_layout_VerticalLayout = function() {
	haxe_ui_toolkit_layout_Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.layout.VerticalLayout"] = haxe_ui_toolkit_layout_VerticalLayout;
haxe_ui_toolkit_layout_VerticalLayout.__name__ = ["haxe","ui","toolkit","layout","VerticalLayout"];
haxe_ui_toolkit_layout_VerticalLayout.__super__ = haxe_ui_toolkit_layout_Layout;
haxe_ui_toolkit_layout_VerticalLayout.prototype = $extend(haxe_ui_toolkit_layout_Layout.prototype,{
	resizeChildren: function() {
		haxe_ui_toolkit_layout_Layout.prototype.resizeChildren.call(this);
		var ucx = this.get_usableWidth();
		var ucy = this.get_usableHeight();
		var totalWidth = 0;
		var totalHeight = 0;
		var numChildren = 0;
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			numChildren++;
			if(child.get_percentWidth() > -1) child.set_width(ucx * child.get_percentWidth() / 100);
			if(child.get_percentHeight() > -1) child.set_height(ucy * child.get_percentHeight() / 100);
			totalHeight += child.get_height();
			if(child.get_width() > totalWidth) totalWidth = child.get_width();
		}
		if(numChildren > 1) totalHeight += this.get_spacingY() * (numChildren - 1);
		this.autoSize(totalWidth,totalHeight);
	}
	,repositionChildren: function() {
		haxe_ui_toolkit_layout_Layout.prototype.repositionChildren.call(this);
		var ypos = this.get_padding().get_top();
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			var xpos = this.get_padding().get_left();
			var halign = child.get_horizontalAlign();
			switch(halign) {
			case "center":
				xpos = this.get_container().get_width() / 2 - child.get_width() / 2;
				break;
			case "right":
				xpos = this.get_container().get_width() - child.get_width() - this.get_padding().get_left();
				break;
			default:
			}
			child.set_x(xpos);
			child.set_y(ypos);
			ypos += child.get_height() + this.get_spacingY();
		}
	}
	,get_usableHeight: function() {
		var ucy = haxe_ui_toolkit_layout_Layout.prototype.get_usableHeight.call(this);
		var visibleChildren = 0;
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.get_visible()) visibleChildren++;
		}
		if(visibleChildren > 1) ucy -= this.get_spacingY() * (visibleChildren - 1);
		var _g2 = 0;
		var _g11 = this.get_container().get_children();
		while(_g2 < _g11.length) {
			var child = _g11[_g2];
			++_g2;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_height() > 0 && child.get_percentHeight() < 0) ucy -= child.get_height();
		}
		if(ucy < 0) ucy = 0;
		return ucy;
	}
	,clone: function() {
		var c = haxe_ui_toolkit_layout_Layout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe_ui_toolkit_layout_VerticalLayout();
	}
	,__class__: haxe_ui_toolkit_layout_VerticalLayout
});
var haxe_ui_toolkit_resources_IResourceHook = function() { };
$hxClasses["haxe.ui.toolkit.resources.IResourceHook"] = haxe_ui_toolkit_resources_IResourceHook;
haxe_ui_toolkit_resources_IResourceHook.__name__ = ["haxe","ui","toolkit","resources","IResourceHook"];
haxe_ui_toolkit_resources_IResourceHook.prototype = {
	__class__: haxe_ui_toolkit_resources_IResourceHook
};
var haxe_ui_toolkit_resources_ResourceManager = function() {
};
$hxClasses["haxe.ui.toolkit.resources.ResourceManager"] = haxe_ui_toolkit_resources_ResourceManager;
haxe_ui_toolkit_resources_ResourceManager.__name__ = ["haxe","ui","toolkit","resources","ResourceManager"];
haxe_ui_toolkit_resources_ResourceManager.__properties__ = {get_instance:"get_instance"}
haxe_ui_toolkit_resources_ResourceManager._instance = null;
haxe_ui_toolkit_resources_ResourceManager.instance = null;
haxe_ui_toolkit_resources_ResourceManager.get_instance = function() {
	if(haxe_ui_toolkit_resources_ResourceManager._instance == null) haxe_ui_toolkit_resources_ResourceManager._instance = new haxe_ui_toolkit_resources_ResourceManager();
	return haxe_ui_toolkit_resources_ResourceManager._instance;
};
haxe_ui_toolkit_resources_ResourceManager.prototype = {
	hasAsset: function(resouceId) {
		return openfl_Assets.exists(resouceId);
	}
	,getXML: function(resourceId,locale) {
		var text = this.getText(resourceId,locale);
		var xml = null;
		if(text != null) xml = Xml.parse(text);
		return xml;
	}
	,getText: function(resourceId,locale) {
		var str = null;
		if(this.resourceHook != null) {
			str = this.resourceHook.getText(resourceId,locale);
			if(str != null) return str;
		}
		str = haxe_Resource.getString(resourceId);
		if(str == null) str = openfl_Assets.getText(resourceId);
		return str;
	}
	,getBitmapData: function(resourceId,locale) {
		if(resourceId == null || resourceId.length == 0) return null;
		var bmp = null;
		if(this.resourceHook != null) {
			bmp = this.resourceHook.getBitmapData(resourceId,locale);
			if(bmp != null) return bmp;
		}
		var bytes = haxe_Resource.getBytes(resourceId);
		if(bytes != null) {
			var ba = haxe_ui_toolkit_util_ByteConverter.fromHaxeBytes(bytes);
			var loader = new openfl_display_Loader();
			loader.loadBytes(ba);
			if(loader.content != null) bmp = (js_Boot.__cast(loader.content , openfl_display_Bitmap)).bitmapData;
		} else bmp = openfl_Assets.getBitmapData(resourceId,true);
		return bmp;
	}
	,getBytes: function(resourceId,locale) {
		var ba = null;
		if(this.resourceHook != null) {
			ba = this.resourceHook.getBytes(resourceId,locale);
			if(ba != null) return ba;
		}
		ba = openfl_Assets.getBytes(resourceId);
		return ba;
	}
	,reset: function() {
	}
	,__class__: haxe_ui_toolkit_resources_ResourceManager
};
var haxe_ui_toolkit_style_Styles = function() {
	this._styles = new haxe_ds_StringMap();
	this._styleRules = [];
};
$hxClasses["haxe.ui.toolkit.style.Styles"] = haxe_ui_toolkit_style_Styles;
haxe_ui_toolkit_style_Styles.__name__ = ["haxe","ui","toolkit","style","Styles"];
haxe_ui_toolkit_style_Styles.prototype = {
	addStyle: function(rule,style) {
		if(rule.indexOf(",") != -1) {
			var rules = rule.split(",");
			var _g = 0;
			while(_g < rules.length) {
				var r = rules[_g];
				++_g;
				r = StringTools.trim(r);
				this.addStyle(r,style);
			}
			return null;
		}
		var currentStyle = this.getStyle(rule);
		if(currentStyle != null) {
			currentStyle.merge(style);
			style = currentStyle;
		} else this._styleRules.push(rule);
		this._styles.set(rule,style);
		return style;
	}
	,getStyle: function(rule) {
		return this._styles.get(rule);
	}
	,get_rules: function() {
		return HxOverrides.iter(this._styleRules);
	}
	,__class__: haxe_ui_toolkit_style_Styles
	,__properties__: {get_rules:"get_rules"}
};
var haxe_ui_toolkit_style_DefaultStyles = function() {
	haxe_ui_toolkit_style_Styles.call(this);
	this.addStyle("Root",new haxe_ui_toolkit_style_Style({ padding : 0}));
	this.addStyle("Root.popup",new haxe_ui_toolkit_style_Style({ padding : 0}));
	this.addStyle("Root.fullscreen",new haxe_ui_toolkit_style_Style({ padding : 0, backgroundColor : 8947848}));
	this.addStyle("Component",new haxe_ui_toolkit_style_Style({ padding : 0, backgroundColor : 8947848}));
	this.addStyle("#modalOverlay",new haxe_ui_toolkit_style_Style({ backgroundColor : 8947848, alpha : .7}));
	this.addStyle("Text",new haxe_ui_toolkit_style_Style({ fontSize : 14, fontEmbedded : true, color : 4473924}));
	this.addStyle("Code",new haxe_ui_toolkit_style_Style({ fontSize : 14, fontName : "_sans", fontEmbedded : false, color : 4473924}));
	this.addStyle("Container",new haxe_ui_toolkit_style_Style({ spacing : 5}));
	this.addStyle("Accordion",new haxe_ui_toolkit_style_Style({ spacing : 0}));
	this.addStyle(".page",new haxe_ui_toolkit_style_Style({ padding : 5, backgroundColor : -1}));
	this.addStyle("Button",new haxe_ui_toolkit_style_Style({ fontSize : 14, fontEmbedded : true, backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, color : 2236962, padding : 10, borderColor : 4473924, borderSize : 1, cornerRadius : 2, filter : new openfl_filters_DropShadowFilter(2,45,4473924,1,2,2,1,3), spacing : 5, textAlign : "center"}));
	this.addStyle("Button:over",new haxe_ui_toolkit_style_Style({ backgroundColor : 16758635, backgroundColorGradientEnd : 16744196, color : 2236962}));
	this.addStyle("Button:down",new haxe_ui_toolkit_style_Style({ backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, color : 4473924}));
	this.addStyle("Button:disabled",new haxe_ui_toolkit_style_Style({ backgroundColor : 9211020, backgroundColorGradientEnd : 7105644, color : 13421772, borderColor : 6710886}));
	this.addStyle("Button.expandable",new haxe_ui_toolkit_style_Style({ icon : "styles/default/expand.png", textAlign : "left"}));
	this.addStyle("Button.expandable:down",new haxe_ui_toolkit_style_Style({ icon : "styles/default/collapse.png"}));
	this.addStyle("CheckBox, OptionBox",new haxe_ui_toolkit_style_Style({ spacingX : 2, fontSize : 14, fontEmbedded : true, color : 4473924}));
	this.addStyle("CheckBoxValue, OptionBoxValue",new haxe_ui_toolkit_style_Style({ width : 32, height : 32}));
	this.addStyle("CheckBoxValue #unselected",new haxe_ui_toolkit_style_Style({ iconPosition : "center"}));
	this.addStyle("CheckBoxValue #unselected:disabled",new haxe_ui_toolkit_style_Style({ }));
	this.addStyle("CheckBoxValue #selected",new haxe_ui_toolkit_style_Style({ icon : "styles/default/cross.png", iconPosition : "center"}));
	this.addStyle("CheckBoxValue #selected:disabled",new haxe_ui_toolkit_style_Style({ }));
	this.addStyle("OptionBoxValue #unselected",new haxe_ui_toolkit_style_Style({ iconPosition : "center"}));
	this.addStyle("OptionBoxValue #unselected:disabled",new haxe_ui_toolkit_style_Style({ }));
	this.addStyle("OptionBoxValue #selected",new haxe_ui_toolkit_style_Style({ icon : "styles/default/circle.png", iconPosition : "center"}));
	this.addStyle("OptionBoxValue #selected:disabled",new haxe_ui_toolkit_style_Style({ }));
	this.addStyle("TextInput",new haxe_ui_toolkit_style_Style({ backgroundColor : 16777215, color : 2236962, width : 150, height : 42, borderColor : 2236962, borderSize : 1, padding : 2, cornerRadius : 2, filter : new openfl_filters_DropShadowFilter(2,45,12566463,1,2,2,1,3,true), fontSize : 14, fontEmbedded : true}));
	this.addStyle("TextInput #placeholder",new haxe_ui_toolkit_style_Style({ color : 11184810}));
	this.addStyle("ListSelector, DateSelector",new haxe_ui_toolkit_style_Style({ icon : "styles/default/up_down.png", iconPosition : "right", selectionMethod : "popup", textAlign : "left"}));
	this.addStyle("CalendarView, Calendar",new haxe_ui_toolkit_style_Style({ width : 310, height : 310, spacing : 3, padding : 2}));
	this.addStyle("CalendarView",new haxe_ui_toolkit_style_Style({ backgroundColor : 8947848, filter : new openfl_filters_DropShadowFilter(1,45,2236962,1,2,2,1,3), borderColor : 4473924, borderSize : 1, cornerRadius : 2, padding : 5, spacing : 5}));
	this.addStyle("CalendarView Calendar",new haxe_ui_toolkit_style_Style({ borderSize : 0}));
	this.addStyle("CalendarPopupContent",new haxe_ui_toolkit_style_Style({ padding : 50}));
	this.addStyle("CalendarDay",new haxe_ui_toolkit_style_Style({ padding : 0, backgroundColor : 13421772}));
	this.addStyle("CalendarView #currentMonthYear",new haxe_ui_toolkit_style_Style({ textAlign : "center"}));
	this.addStyle("Calendar #selectedDay",new haxe_ui_toolkit_style_Style({ fontSize : 14, fontEmbedded : true, backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, color : 2236962, padding : 10, borderColor : 4473924, borderSize : 1, cornerRadius : 2, filter : new openfl_filters_DropShadowFilter(2,45,4473924,1,2,2,1,3), spacing : 5}));
	this.addStyle("CalendarDay:over, Calendar #selectedDay:over",new haxe_ui_toolkit_style_Style({ backgroundColor : 16758635, backgroundColorGradientEnd : 16744196, color : 2236962}));
	this.addStyle("CalendarDay:down, Calendar #selectedDay:down",new haxe_ui_toolkit_style_Style({ backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, color : 4473924}));
	this.addStyle("TabView",new haxe_ui_toolkit_style_Style({ backgroundColor : 13421772, borderColor : -1, filter : null, spacing : 0}));
	this.addStyle("TabView Container",new haxe_ui_toolkit_style_Style({ backgroundColor : 13421772}));
	this.addStyle("TabBar",new haxe_ui_toolkit_style_Style({ backgroundColor : 8947848, height : 41, paddingTop : 0, paddingLeft : 0, paddingRight : 0, paddingBottom : 0, cornerRadius : 0, filter : null, borderColor : -1, borderSize : 0, spacing : 0}));
	this.addStyle("TabBar #content",new haxe_ui_toolkit_style_Style({ spacing : 1, borderColor : -1, backgroundColor : 8947848}));
	this.addStyle("TabBar #container",new haxe_ui_toolkit_style_Style({ backgroundColor : 8947848}));
	this.addStyle("TabBar Button",new haxe_ui_toolkit_style_Style({ height : 42, iconPosition : "left", cornerRadius : 0, autoSize : true, backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, color : 2236962, borderSize : 0, borderColor : -1, paddingLeft : 20, paddingRight : 20}));
	this.addStyle("TabBar Button:down",new haxe_ui_toolkit_style_Style({ backgroundColor : 15658734, backgroundColorGradientEnd : 13421772, color : 4473924}));
	this.addStyle("HProgress",new haxe_ui_toolkit_style_Style({ width : 150, height : 30, backgroundColor : 6710886, borderColor : -1, padding : 2, cornerRadius : 2, borderSize : 0, filter : new openfl_filters_DropShadowFilter(1,45,4473924,1,2,2,1,3,true)}));
	this.addStyle("HProgress #background",new haxe_ui_toolkit_style_Style({ percentWidth : 100, percentHeight : 100, backgroundColor : -1, borderSize : 0, borderColor : -1}));
	this.addStyle("HProgress #value",new haxe_ui_toolkit_style_Style({ percentHeight : 100, backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, borderColor : -1, cornerRadius : 2}));
	this.addStyle("VProgress",new haxe_ui_toolkit_style_Style({ width : 30, height : 150, backgroundColor : 6710886, borderColor : -1, padding : 2, cornerRadius : 2, borderSize : 0, filter : new openfl_filters_DropShadowFilter(1,45,4473924,1,2,2,1,3,true)}));
	this.addStyle("VProgress #background",new haxe_ui_toolkit_style_Style({ percentWidth : 100, percentHeight : 100, backgroundColor : -1, borderSize : 0, borderColor : -1}));
	this.addStyle("VProgress #value",new haxe_ui_toolkit_style_Style({ percentWidth : 100, backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, borderColor : -1, cornerRadius : 2, gradientType : "horizontal"}));
	this.addStyle("HSlider",new haxe_ui_toolkit_style_Style({ width : 150, height : 30, backgroundColor : 6710886, borderColor : -1, padding : 2, paddingLeft : 2, paddingRight : 2, cornerRadius : 2, borderSize : 0, filter : new openfl_filters_DropShadowFilter(1,45,4473924,1,2,2,1,3,true)}));
	this.addStyle("HSlider #background",new haxe_ui_toolkit_style_Style({ percentWidth : 100, percentHeight : 100, backgroundColor : -1, borderSize : 0, borderColor : -1}));
	this.addStyle("HSlider #value",new haxe_ui_toolkit_style_Style({ percentHeight : 0, backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, borderColor : -1, cornerRadius : 2}));
	this.addStyle("HSlider Button",new haxe_ui_toolkit_style_Style({ width : 26, height : 26, gradientType : "vertical", filter : new openfl_filters_DropShadowFilter(2,45,6710886,1,2,2,1,3,false)}));
	this.addStyle("VSlider",new haxe_ui_toolkit_style_Style({ width : 30, height : 150, backgroundColor : 6710886, borderColor : -1, padding : 2, paddingLeft : 2, paddingRight : 2, cornerRadius : 2, borderSize : 0, filter : new openfl_filters_DropShadowFilter(1,45,4473924,1,2,2,1,3,true)}));
	this.addStyle("VSlider #background",new haxe_ui_toolkit_style_Style({ percentWidth : 100, percentHeight : 100, backgroundColor : -1, borderSize : 0, borderColor : -1}));
	this.addStyle("VSlider #value",new haxe_ui_toolkit_style_Style({ percentWidth : 0, backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, borderColor : -1, cornerRadius : 2}));
	this.addStyle("VSlider Button",new haxe_ui_toolkit_style_Style({ width : 26, height : 26, gradientType : "horizontal", filter : new openfl_filters_DropShadowFilter(2,45,6710886,1,2,2,1,3,false)}));
	this.addStyle("ScrollView",new haxe_ui_toolkit_style_Style({ backgroundColor : 4473924, borderColor : -1, padding : 1, cornerRadius : 2, borderSize : 0, filter : new openfl_filters_DropShadowFilter(1,45,4473924,1,2,2,1,3,true), inlineScrolls : true, autoHideScrolls : true, spacing : 0}));
	this.addStyle("ListView",new haxe_ui_toolkit_style_Style({ }));
	this.addStyle("ListView #content",new haxe_ui_toolkit_style_Style({ backgroundColor : 4473924, borderColor : -1, padding : 0, spacing : 1}));
	this.addStyle(".even, .odd",new haxe_ui_toolkit_style_Style({ padding : 10, backgroundColor : 6710886}));
	this.addStyle(".even:over, .odd:over",new haxe_ui_toolkit_style_Style({ backgroundColor : 16758635, backgroundColorGradientEnd : 16744196, color : 2236962}));
	this.addStyle(".even:selected, .odd:selected",new haxe_ui_toolkit_style_Style({ backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, color : 4473924}));
	this.addStyle(".even #text, .odd #text",new haxe_ui_toolkit_style_Style({ color : 16754764}));
	this.addStyle(".even #text:over, .odd #text:over",new haxe_ui_toolkit_style_Style({ color : 2236962}));
	this.addStyle(".even #text:selected, .odd #text:selected",new haxe_ui_toolkit_style_Style({ color : 4473924}));
	this.addStyle("VScroll",new haxe_ui_toolkit_style_Style({ width : 10, height : 100, hasButtons : false}));
	this.addStyle("VScroll Button",new haxe_ui_toolkit_style_Style({ cornerRadius : 2, gradientType : "horizontal", filter : null}));
	this.addStyle("HScroll",new haxe_ui_toolkit_style_Style({ width : 100, height : 10, hasButtons : false}));
	this.addStyle("HScroll Button",new haxe_ui_toolkit_style_Style({ cornerRadius : 2, gradientType : "vertical", filter : null}));
	this.addStyle("MenuBar",new haxe_ui_toolkit_style_Style({ backgroundColor : 14671325, percentWidth : 100, height : 10, padding : 5, borderColor : -1, cornerRadius : 0, filter : new openfl_filters_DropShadowFilter(2,45,4473924,1,2,2,1,3), autoSize : true}));
	this.addStyle("MenuBar Container",new haxe_ui_toolkit_style_Style({ backgroundColor : 14671325}));
	this.addStyle("Popup",new haxe_ui_toolkit_style_Style({ backgroundColor : 8947848, filter : new openfl_filters_DropShadowFilter(2,45,4473924,1,2,2,1,3), borderColor : 8947848, borderSize : 1, cornerRadius : 2, padding : 1, spacing : 1, width : 400}));
	this.addStyle("Popup Container",new haxe_ui_toolkit_style_Style({ backgroundColor : 13421772}));
	this.addStyle("Popup #titleBar",new haxe_ui_toolkit_style_Style({ backgroundColor : 13421772, height : 45, paddingTop : 5, paddingBottom : 5, paddingLeft : 5, paddingRight : 5}));
	this.addStyle("Popup #titleBar Button.close",new haxe_ui_toolkit_style_Style({ autoSize : false, width : 23, height : 24, horizontalAlignment : "left", verticalAlignment : "center", filter : null, backgroundImage : "styles/default/cross.png", backgroundColor : 13421772, borderColor : 13421772}));
	this.addStyle("Popup #popupContent",new haxe_ui_toolkit_style_Style({ padding : 5, backgroundColor : 13421772}));
	this.addStyle("Popup #buttonBar",new haxe_ui_toolkit_style_Style({ paddingTop : 5, paddingBottom : 5, height : 55, backgroundColor : 13421772, percentWidth : 100}));
	this.addStyle("Popup #titleBar #title",new haxe_ui_toolkit_style_Style({ fontEmbedded : true, fontSize : 24, color : 8947848, horizontalAlignment : "right"}));
	this.addStyle("ListPopupContent ListView, ListPopupContent #popupContent",new haxe_ui_toolkit_style_Style({ padding : 2, borderSize : 0}));
	this.addStyle("Menu",new haxe_ui_toolkit_style_Style({ backgroundColor : 8947848, filter : new openfl_filters_DropShadowFilter(2,45,4473924,1,2,2,1,3), borderColor : 4473924, borderSize : 1, cornerRadius : 1, padding : 1, width : 175, spacing : 1}));
	this.addStyle("MenuButton",new haxe_ui_toolkit_style_Style({ backgroundColor : 14671325, backgroundColorGradientEnd : 14671325, color : 2236962, padding : 10, borderColor : -1, borderSize : 0, cornerRadius : 2, filter : null}));
	this.addStyle("MenuButton:over",new haxe_ui_toolkit_style_Style({ backgroundColor : 16758635, backgroundColorGradientEnd : 16744196, color : 2236962, filter : new openfl_filters_DropShadowFilter(2,45,4473924,1,2,2,1,3), borderSize : 1}));
	this.addStyle("MenuButton:down",new haxe_ui_toolkit_style_Style({ backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, color : 4473924, filter : new openfl_filters_DropShadowFilter(2,45,4473924,1,2,2,1,3), borderSize : 1}));
	this.addStyle("MenuItem",new haxe_ui_toolkit_style_Style({ percentWidth : 100, iconPosition : "right", filter : null, borderSize : 0, cornerRadius : 0, backgroundColor : 13421772, color : 2236962, textAlign : "left"}));
	this.addStyle("MenuItem:over",new haxe_ui_toolkit_style_Style({ backgroundColor : 16758635, backgroundColorGradientEnd : 16744196, color : 2236962}));
	this.addStyle("MenuItem:down",new haxe_ui_toolkit_style_Style({ backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, color : 4473924}));
	this.addStyle("MenuItem.expandable",new haxe_ui_toolkit_style_Style({ icon : "styles/default/expand.png"}));
	this.addStyle("MenuSeparator",new haxe_ui_toolkit_style_Style({ backgroundColor : 8947848, percentWidth : 100, paddingTop : 2, paddingLeft : 5, paddingBottom : 3, paddingRight : 5}));
	this.addStyle("MenuSeparator #line",new haxe_ui_toolkit_style_Style({ height : 0, backgroundColor : 8947848}));
	this.addStyle("Divider",new haxe_ui_toolkit_style_Style({ paddingTop : 5, percentWidth : 100}));
	this.addStyle("Divider #text",new haxe_ui_toolkit_style_Style({ fontSize : 16, fontBold : true, color : 6710886}));
	this.addStyle("Divider #line",new haxe_ui_toolkit_style_Style({ height : 2, backgroundColor : 6710886}));
};
$hxClasses["haxe.ui.toolkit.style.DefaultStyles"] = haxe_ui_toolkit_style_DefaultStyles;
haxe_ui_toolkit_style_DefaultStyles.__name__ = ["haxe","ui","toolkit","style","DefaultStyles"];
haxe_ui_toolkit_style_DefaultStyles.__super__ = haxe_ui_toolkit_style_Styles;
haxe_ui_toolkit_style_DefaultStyles.prototype = $extend(haxe_ui_toolkit_style_Styles.prototype,{
	__class__: haxe_ui_toolkit_style_DefaultStyles
});
var haxe_ui_toolkit_style_Style = function(defaults) {
	this._listSize = -1;
	this._inlineScrolls = -1;
	this._autoHideScrolls = -1;
	this._hasButtons = -1;
	this._iconHeight = -1;
	this._iconWidth = -1;
	this._fontUnderline = -1;
	this._fontItalic = -1;
	this._fontBold = -1;
	this._fontEmbedded = -1;
	this._fontScale = -1;
	this._fontSize = -1;
	this._alpha = -1;
	this._filterSet = false;
	this._cornerRadiusBottomRight = -1;
	this._cornerRadiusBottomLeft = -1;
	this._cornerRadiusTopRight = -1;
	this._cornerRadiusTopLeft = -1;
	this._rotationZ = -1;
	this._rotationY = -1;
	this._rotationX = -1;
	this._spacingY = -1;
	this._spacingX = -1;
	this._paddingBottom = -1;
	this._paddingTop = -1;
	this._paddingRight = -1;
	this._paddingLeft = -1;
	this._color = -1;
	this._borderAlpha = -1;
	this._borderSize = -1;
	this._borderColor = -1;
	this._backgroundAlpha = -1;
	this._backgroundColorGradientEnd = -1;
	this._backgroundColor = -1;
	this._autoSize = -1;
	this._percentHeight = -1;
	this._percentWidth = -1;
	this._height = -1;
	this._width = -1;
	this._visible = -1;
	this._autoApply = true;
	var _g = 0;
	var _g1 = Reflect.fields(defaults);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		if(Reflect.getProperty(this,"set_" + field) != null) Reflect.setProperty(this,field,Reflect.field(defaults,field));
	}
};
$hxClasses["haxe.ui.toolkit.style.Style"] = haxe_ui_toolkit_style_Style;
haxe_ui_toolkit_style_Style.__name__ = ["haxe","ui","toolkit","style","Style"];
haxe_ui_toolkit_style_Style.__interfaces__ = [haxe_ui_toolkit_core_interfaces_IClonable];
haxe_ui_toolkit_style_Style.prototype = {
	get_target: function() {
		return this._target;
	}
	,set_target: function(value) {
		this._target = value;
		this.apply();
		return value;
	}
	,get_autoApply: function() {
		return this._autoApply;
	}
	,set_autoApply: function(value) {
		this._autoApply = value;
		return value;
	}
	,get_visible: function() {
		if(this.hasDynamicValue("visible")) return this.getDynamicValue("visible");
		if(this._visible == -1) return false;
		return this._visible == 1;
	}
	,set_visible: function(value) {
		if(value) this._visible = 1; else this._visible = 0;
		this.apply();
		return value;
	}
	,get_visibleSet: function() {
		if(this.hasDynamicValue("visible")) return true;
		if(this._visible != -1) return true;
		return false;
	}
	,get_width: function() {
		if(this.hasDynamicValue("width")) return this.getDynamicValue("width");
		return this._width;
	}
	,set_width: function(value) {
		if(value != this._width) {
			this._width = value;
			this.apply();
		}
		return value;
	}
	,get_height: function() {
		if(this.hasDynamicValue("height")) return this.getDynamicValue("height");
		return this._height;
	}
	,set_height: function(value) {
		if(value != this._height) {
			this._height = value;
			this.apply();
		}
		return value;
	}
	,get_percentWidth: function() {
		if(this.hasDynamicValue("percentWidth")) return this.getDynamicValue("percentWidth");
		return this._percentWidth;
	}
	,set_percentWidth: function(value) {
		if(value != this._percentWidth) {
			this._percentWidth = value;
			this.apply();
		}
		return value;
	}
	,get_percentHeight: function() {
		if(this.hasDynamicValue("percentHeight")) return this.getDynamicValue("percentHeight");
		return this._percentHeight;
	}
	,set_percentHeight: function(value) {
		if(value != this._percentHeight) {
			this._percentHeight = value;
			this.apply();
		}
		return value;
	}
	,get_autoSize: function() {
		if(this.hasDynamicValue("autoSize")) return this.getDynamicValue("autoSize");
		if(this._autoSize == -1) return true;
		return this._autoSize == 1;
	}
	,set_autoSize: function(value) {
		if(value) this._autoSize = 1; else this._autoSize = 0;
		this.apply();
		return value;
	}
	,get_autoSizeSet: function() {
		if(this.hasDynamicValue("autoSize")) return true;
		if(this._autoSize != -1) return true;
		return false;
	}
	,get_backgroundImage: function() {
		if(this.hasDynamicValue("backgroundImage")) return this.getDynamicValue("backgroundImage");
		return this._backgroundImage;
	}
	,set_backgroundImage: function(value) {
		if(value != this._backgroundImage) {
			this._backgroundImage = value;
			this.apply();
		}
		return value;
	}
	,get_backgroundImageScale9: function() {
		if(this.hasDynamicValue("backgroundImageScale9")) return this.getDynamicValue("backgroundImageScale9");
		return this._backgroundImageScale9;
	}
	,set_backgroundImageScale9: function(value) {
		if(value != this._backgroundImageScale9) {
			this._backgroundImageScale9 = value;
			this.apply();
		}
		return value;
	}
	,get_backgroundImageRect: function() {
		if(this.hasDynamicValue("backgroundImageRect")) return this.getDynamicValue("backgroundImageRect");
		return this._backgroundImageRect;
	}
	,set_backgroundImageRect: function(value) {
		if(value != this._backgroundImageRect) {
			this._backgroundImageRect = value;
			this.apply();
		}
		return value;
	}
	,get_backgroundColor: function() {
		if(this.hasDynamicValue("backgroundColor")) return this.getDynamicValue("backgroundColor");
		return this._backgroundColor;
	}
	,set_backgroundColor: function(value) {
		if(value != this._backgroundColor) {
			this._backgroundColor = value;
			this.apply();
		}
		return value;
	}
	,get_backgroundColorGradientEnd: function() {
		if(this.hasDynamicValue("backgroundColorGradientEnd")) return this.getDynamicValue("backgroundColorGradientEnd");
		return this._backgroundColorGradientEnd;
	}
	,set_backgroundColorGradientEnd: function(value) {
		if(value != this._backgroundColorGradientEnd) {
			this._backgroundColorGradientEnd = value;
			this.apply();
		}
		return value;
	}
	,get_backgroundAlpha: function() {
		if(this.hasDynamicValue("backgroundAlpha")) return this.getDynamicValue("backgroundAlpha");
		return this._backgroundAlpha;
	}
	,set_backgroundAlpha: function(value) {
		if(value != this._backgroundAlpha) {
			this._backgroundAlpha = value;
			this.apply();
		}
		return value;
	}
	,get_borderColor: function() {
		if(this.hasDynamicValue("borderColor")) return this.getDynamicValue("borderColor");
		return this._borderColor;
	}
	,set_borderColor: function(value) {
		if(value != this._borderColor) {
			this._borderColor = value;
			this.apply();
		}
		return value;
	}
	,get_borderSize: function() {
		if(this.hasDynamicValue("borderSize")) return this.getDynamicValue("borderSize");
		return this._borderSize;
	}
	,set_borderSize: function(value) {
		if(value != this._borderSize) {
			this._borderSize = value;
			this.apply();
		}
		return value;
	}
	,get_borderAlpha: function() {
		if(this.hasDynamicValue("borderAlpha")) return this.getDynamicValue("borderAlpha");
		return this._borderAlpha;
	}
	,set_borderAlpha: function(value) {
		if(value != this._borderAlpha) {
			this._borderAlpha = value;
			this.apply();
		}
		return value;
	}
	,get_color: function() {
		if(this.hasDynamicValue("color")) return this.getDynamicValue("color");
		return this._color;
	}
	,set_color: function(value) {
		if(value != this._color) {
			this._color = value;
			this.apply();
		}
		return value;
	}
	,get_paddingLeft: function() {
		if(this.hasDynamicValue("paddingLeft")) return this.getDynamicValue("paddingLeft");
		if(this.hasDynamicValue("padding")) return this.getDynamicValue("padding");
		return this._paddingLeft;
	}
	,set_paddingLeft: function(value) {
		if(value != this._paddingLeft) {
			this._paddingLeft = value;
			this.apply();
		}
		return value;
	}
	,get_paddingRight: function() {
		if(this.hasDynamicValue("paddingRight")) return this.getDynamicValue("paddingRight");
		if(this.hasDynamicValue("padding")) return this.getDynamicValue("padding");
		return this._paddingRight;
	}
	,set_paddingRight: function(value) {
		if(value != this._paddingRight) {
			this._paddingRight = value;
			this.apply();
		}
		return value;
	}
	,get_paddingTop: function() {
		if(this.hasDynamicValue("paddingTop")) return this.getDynamicValue("paddingTop");
		if(this.hasDynamicValue("padding")) return this.getDynamicValue("padding");
		return this._paddingTop;
	}
	,set_paddingTop: function(value) {
		if(value != this._paddingTop) {
			this._paddingTop = value;
			this.apply();
		}
		return value;
	}
	,get_paddingBottom: function() {
		if(this.hasDynamicValue("paddingBottom")) return this.getDynamicValue("paddingBottom");
		if(this.hasDynamicValue("padding")) return this.getDynamicValue("padding");
		return this._paddingBottom;
	}
	,set_paddingBottom: function(value) {
		if(value != this._paddingBottom) {
			this._paddingBottom = value;
			this.apply();
		}
		return value;
	}
	,get_padding: function() {
		if(this.hasDynamicValue("padding")) return this.getDynamicValue("padding");
		return js_Boot.__cast(this._paddingLeft | this._paddingRight | this._paddingTop | this._paddingBottom , Int);
	}
	,set_padding: function(value) {
		if(value != this._paddingLeft || value != this._paddingRight || value != this._paddingTop || value != this._paddingBottom) {
			this._paddingLeft = value;
			this._paddingRight = value;
			this._paddingTop = value;
			this._paddingBottom = value;
			this.apply();
		}
		return value;
	}
	,get_spacingX: function() {
		if(this.hasDynamicValue("spacingX")) return this.getDynamicValue("spacingX");
		if(this.hasDynamicValue("spacing")) return this.getDynamicValue("spacing");
		return this._spacingX;
	}
	,set_spacingX: function(value) {
		if(value != this._spacingX) {
			this._spacingX = value;
			this.apply();
		}
		return value;
	}
	,get_spacingY: function() {
		if(this.hasDynamicValue("spacingY")) return this.getDynamicValue("spacingY");
		if(this.hasDynamicValue("spacing")) return this.getDynamicValue("spacing");
		return this._spacingY;
	}
	,set_spacingY: function(value) {
		if(value != this._spacingY) {
			this._spacingY = value;
			this.apply();
		}
		return value;
	}
	,get_spacing: function() {
		if(this.hasDynamicValue("spacing")) return this.getDynamicValue("spacing");
		return this._spacingX | this._spacingY;
	}
	,set_spacing: function(value) {
		if(value != this._spacingX || value != this._spacingY) {
			this._spacingX = value;
			this._spacingY = value;
			this.apply();
		}
		return value;
	}
	,get_rotationX: function() {
		if(this.hasDynamicValue("rotationX")) return this.getDynamicValue("rotationX");
		return this._rotationX;
	}
	,set_rotationX: function(value) {
		if(value != this._rotationX) {
			this._rotationX = value;
			this.apply();
		}
		return value;
	}
	,get_rotationY: function() {
		if(this.hasDynamicValue("rotationY")) return this.getDynamicValue("rotationY");
		return this._rotationY;
	}
	,set_rotationY: function(value) {
		if(value != this._rotationY) {
			this._rotationY = value;
			this.apply();
		}
		return value;
	}
	,get_rotationZ: function() {
		if(this.hasDynamicValue("rotationZ")) return this.getDynamicValue("rotationZ");
		return this._rotationY;
	}
	,set_rotationZ: function(value) {
		if(value != this._rotationZ) {
			this._rotationZ = value;
			this.apply();
		}
		return value;
	}
	,get_horizontalAlignment: function() {
		if(this.hasDynamicValue("horizontalAlignment")) return this.getDynamicValue("horizontalAlignment");
		return this._horizontalAlignment;
	}
	,set_horizontalAlignment: function(value) {
		if(value != this._horizontalAlignment) {
			this._horizontalAlignment = value;
			this.apply();
		}
		return value;
	}
	,get_verticalAlignment: function() {
		if(this.hasDynamicValue("verticalAlignment")) return this.getDynamicValue("verticalAlignment");
		return this._verticalAlignment;
	}
	,set_verticalAlignment: function(value) {
		if(value != this._verticalAlignment) {
			this._verticalAlignment = value;
			this.apply();
		}
		return value;
	}
	,get_cornerRadiusTopLeft: function() {
		if(this.hasDynamicValue("cornerRadiusTopLeft")) return this.getDynamicValue("cornerRadiusTopLeft");
		if(this.hasDynamicValue("cornerRadius")) return this.getDynamicValue("cornerRadius");
		return this._cornerRadiusTopLeft;
	}
	,set_cornerRadiusTopLeft: function(value) {
		if(value != this._cornerRadiusTopLeft) {
			this._cornerRadiusTopLeft = value;
			this.apply();
		}
		return value;
	}
	,get_cornerRadiusTopRight: function() {
		if(this.hasDynamicValue("cornerRadiusTopRight")) return this.getDynamicValue("cornerRadiusTopRight");
		if(this.hasDynamicValue("cornerRadius")) return this.getDynamicValue("cornerRadius");
		return this._cornerRadiusTopRight;
	}
	,set_cornerRadiusTopRight: function(value) {
		if(value != this._cornerRadiusTopRight) {
			this._cornerRadiusTopRight = value;
			this.apply();
		}
		return value;
	}
	,get_cornerRadiusBottomLeft: function() {
		if(this.hasDynamicValue("cornerRadiusBottomLeft")) return this.getDynamicValue("cornerRadiusBottomLeft");
		if(this.hasDynamicValue("cornerRadius")) return this.getDynamicValue("cornerRadius");
		return this._cornerRadiusBottomLeft;
	}
	,set_cornerRadiusBottomLeft: function(value) {
		if(value != this._cornerRadiusBottomLeft) {
			this._cornerRadiusBottomLeft = value;
			this.apply();
		}
		return value;
	}
	,get_cornerRadiusBottomRight: function() {
		if(this.hasDynamicValue("cornerRadiusBottomRight")) return this.getDynamicValue("cornerRadiusBottomRight");
		if(this.hasDynamicValue("cornerRadius")) return this.getDynamicValue("cornerRadius");
		return this._cornerRadiusBottomRight;
	}
	,set_cornerRadiusBottomRight: function(value) {
		if(value != this._cornerRadiusBottomRight) {
			this._cornerRadiusBottomRight = value;
			this.apply();
		}
		return value;
	}
	,get_cornerRadius: function() {
		if(this.hasDynamicValue("cornerRadius")) return this.getDynamicValue("cornerRadius");
		return this._cornerRadiusTopLeft | this._cornerRadiusTopRight | this._cornerRadiusBottomLeft | this._cornerRadiusBottomRight;
	}
	,set_cornerRadius: function(value) {
		if(value != this._cornerRadiusTopLeft || value != this._cornerRadiusTopRight || value != this._cornerRadiusBottomLeft || value != this._cornerRadiusBottomRight) {
			this._cornerRadiusTopLeft = value;
			this._cornerRadiusTopRight = value;
			this._cornerRadiusBottomLeft = value;
			this._cornerRadiusBottomRight = value;
			this.apply();
		}
		return value;
	}
	,get_filter: function() {
		var filter = null;
		if(this.hasDynamicValue("filter")) filter = this.getDynamicValue("filter"); else filter = this._filter;
		var overrideQuality = -1;
		if(overrideQuality != -1) filter = haxe_ui_toolkit_util_FilterParser.changeFilterQuality(filter,overrideQuality);
		return filter;
	}
	,set_filter: function(value) {
		this._filterSet = true;
		this._filter = value;
		this.apply();
		return this._filter;
	}
	,get_alpha: function() {
		if(this.hasDynamicValue("alpha")) return this.getDynamicValue("alpha");
		return this._alpha;
	}
	,set_alpha: function(value) {
		if(value != this._alpha) {
			this._alpha = value;
			this.apply();
		}
		return value;
	}
	,get_fontName: function() {
		if(this.hasDynamicValue("fontName")) return this.getDynamicValue("fontName");
		return this._fontName;
	}
	,set_fontName: function(value) {
		if(value != this._fontName) {
			this._fontName = value;
			this.apply();
		}
		return value;
	}
	,get_fontSize: function() {
		if(this.hasDynamicValue("fontSize")) return this.getDynamicValue("fontSize");
		var size = this._fontSize;
		if(this._fontScale > 0) size = this._fontSize * this._fontScale;
		return size;
	}
	,set_fontSize: function(value) {
		if(value != this._fontSize) {
			this._fontSize = value;
			this.apply();
		}
		return value;
	}
	,get_fontScale: function() {
		if(this.hasDynamicValue("fontScale")) return this.getDynamicValue("fontScale");
		return this._fontScale;
	}
	,set_fontScale: function(value) {
		if(value != this._fontScale) {
			this._fontScale = value;
			this.apply();
		}
		return value;
	}
	,get_fontEmbedded: function() {
		if(this.hasDynamicValue("fontEmbedded")) return this.getDynamicValue("fontEmbedded");
		if(this._fontEmbedded == -1) return false;
		return this._fontEmbedded == 1;
	}
	,set_fontEmbedded: function(value) {
		if(value) this._fontEmbedded = 1; else this._fontEmbedded = 0;
		this.apply();
		return value;
	}
	,get_fontBold: function() {
		if(this.hasDynamicValue("fontBold")) return this.getDynamicValue("fontBold");
		if(this._fontBold == -1) return false;
		return this._fontBold == 1;
	}
	,set_fontBold: function(value) {
		if(value) this._fontBold = 1; else this._fontBold = 0;
		this.apply();
		return value;
	}
	,get_fontItalic: function() {
		if(this.hasDynamicValue("fontItalic")) return this.getDynamicValue("fontItalic");
		if(this._fontItalic == -1) return false;
		return this._fontItalic == 1;
	}
	,set_fontItalic: function(value) {
		if(value) this._fontItalic = 1; else this._fontItalic = 0;
		this.apply();
		return value;
	}
	,get_fontUnderline: function() {
		if(this.hasDynamicValue("fontUnderline")) return this.getDynamicValue("fontUnderline");
		if(this._fontUnderline == -1) return false;
		return this._fontUnderline == 1;
	}
	,set_fontUnderline: function(value) {
		if(value) this._fontUnderline = 1; else this._fontUnderline = 0;
		this.apply();
		return value;
	}
	,get_textAlign: function() {
		if(this.hasDynamicValue("textAlign")) return this.getDynamicValue("textAlign");
		return this._textAlign;
	}
	,set_textAlign: function(value) {
		if(value != this._textAlign) {
			this._textAlign = value;
			this.apply();
		}
		return value;
	}
	,get_iconPosition: function() {
		if(this.hasDynamicValue("iconPosition")) return this.getDynamicValue("iconPosition");
		return this._iconPosition;
	}
	,set_iconPosition: function(value) {
		if(value != this._iconPosition) {
			this._iconPosition = value;
			this.apply();
		}
		return value;
	}
	,get_icon: function() {
		if(this.hasDynamicValue("icon")) return this.getDynamicValue("icon");
		return this._icon;
	}
	,set_icon: function(value) {
		if(value != this._icon) {
			this._icon = value;
			this.apply();
		}
		return value;
	}
	,get_iconWidth: function() {
		if(this.hasDynamicValue("iconWidth")) return this.getDynamicValue("iconWidth");
		return this._iconWidth;
	}
	,set_iconWidth: function(value) {
		if(value != this._iconWidth) {
			this._iconWidth = value;
			this.apply();
		}
		return value;
	}
	,get_iconHeight: function() {
		if(this.hasDynamicValue("iconHeight")) return this.getDynamicValue("iconHeight");
		return this._iconHeight;
	}
	,set_iconHeight: function(value) {
		if(value != this._iconHeight) {
			this._iconHeight = value;
			this.apply();
		}
		return value;
	}
	,get_hasButtons: function() {
		if(this.hasDynamicValue("hasButtons")) return this.getDynamicValue("hasButtons");
		if(this._hasButtons == -1) return true;
		return this._hasButtons == 1;
	}
	,set_hasButtons: function(value) {
		if(value) this._hasButtons = 1; else this._hasButtons = 0;
		this.apply();
		return value;
	}
	,get_gradientType: function() {
		if(this.hasDynamicValue("gradientType")) return this.getDynamicValue("gradientType");
		return this._gradientType;
	}
	,set_gradientType: function(value) {
		if(value != this._gradientType) {
			this._gradientType = value;
			this.apply();
		}
		return value;
	}
	,get_selectionMethod: function() {
		if(this.hasDynamicValue("selectionMethod")) return this.getDynamicValue("selectionMethod");
		return this._selectionMethod;
	}
	,set_selectionMethod: function(value) {
		if(value != this._selectionMethod) {
			this._selectionMethod = value;
			this.apply();
		}
		return value;
	}
	,get_autoHideScrolls: function() {
		if(this.hasDynamicValue("autoHideScrolls")) return this.getDynamicValue("autoHideScrolls");
		if(this._autoHideScrolls == -1) return false;
		return this._autoHideScrolls == 1;
	}
	,set_autoHideScrolls: function(value) {
		if(value) this._autoHideScrolls = 1; else this._autoHideScrolls = 0;
		this.apply();
		return value;
	}
	,get_inlineScrolls: function() {
		if(this.hasDynamicValue("inlineScrolls")) return this.getDynamicValue("inlineScrolls");
		if(this._inlineScrolls == -1) return false;
		return this._inlineScrolls == 1;
	}
	,set_inlineScrolls: function(value) {
		if(value) this._inlineScrolls = 1; else this._inlineScrolls = 0;
		this.apply();
		return value;
	}
	,get_listSize: function() {
		if(this.hasDynamicValue("listSize")) return this.getDynamicValue("listSize");
		return this._listSize;
	}
	,set_listSize: function(value) {
		this._listSize = value;
		this.apply();
		return value;
	}
	,apply: function() {
		if(this._target != null && this._autoApply == true) {
			if(js_Boot.__instanceof(this._target,haxe_ui_toolkit_core_StyleableDisplayObject)) (js_Boot.__cast(this._target , haxe_ui_toolkit_core_StyleableDisplayObject)).applyStyle();
		}
	}
	,addDynamicValue: function(property,script) {
		if(this._dynamicValues == null) this._dynamicValues = new haxe_ds_StringMap();
		this._dynamicValues.set(property,script);
	}
	,hasDynamicValue: function(property) {
		if(this._dynamicValues == null) return false;
		return this._dynamicValues.get(property) != null;
	}
	,getDynamicValue: function(property) {
		var script = this._dynamicValues.get(property);
		var retVal = haxe_ui_toolkit_hscript_ScriptManager.get_instance().executeScript(script);
		return retVal;
	}
	,merge: function($with) {
		if($with == null) return;
		if($with._visible != -1) this._visible = $with._visible;
		if($with._width != -1) this._width = $with._width;
		if($with._height != -1) this._height = $with._height;
		if($with._percentWidth != -1) this._percentWidth = $with._percentWidth;
		if($with._percentHeight != -1) this._percentHeight = $with._percentHeight;
		if($with._autoSize != -1) this._autoSize = $with._autoSize;
		if($with._backgroundImage != null) {
			this._backgroundImage = $with._backgroundImage;
			this._backgroundImageScale9 = null;
			this._backgroundImageRect = null;
		}
		if($with._backgroundImageScale9 != null) this._backgroundImageScale9 = $with._backgroundImageScale9;
		if($with._backgroundImageRect != null) this._backgroundImageRect = $with._backgroundImageRect;
		if($with._backgroundColor != -1) this._backgroundColor = $with._backgroundColor;
		if($with._backgroundColor != -1) this._backgroundColorGradientEnd = $with._backgroundColor;
		if($with._backgroundColorGradientEnd != -1) this._backgroundColorGradientEnd = $with._backgroundColorGradientEnd;
		if($with._backgroundAlpha != -1) this._backgroundAlpha = $with._backgroundAlpha;
		if($with._borderColor != -1) this._borderColor = $with._borderColor;
		if($with._borderSize != -1) this._borderSize = $with._borderSize;
		if($with._borderAlpha != -1) this._borderAlpha = $with._borderAlpha;
		if($with._color != -1) this._color = $with._color;
		if($with._paddingLeft != -1) this._paddingLeft = $with._paddingLeft;
		if($with._paddingRight != -1) this._paddingRight = $with._paddingRight;
		if($with._paddingTop != -1) this._paddingTop = $with._paddingTop;
		if($with._paddingBottom != -1) this._paddingBottom = $with._paddingBottom;
		if($with._spacingX != -1) this._spacingX = $with._spacingX;
		if($with._spacingY != -1) this._spacingY = $with._spacingY;
		if($with._horizontalAlignment != null) this._horizontalAlignment = $with._horizontalAlignment;
		if($with._verticalAlignment != null) this._verticalAlignment = $with._verticalAlignment;
		if($with._cornerRadiusTopLeft != -1) this._cornerRadiusTopLeft = $with._cornerRadiusTopLeft;
		if($with._cornerRadiusTopRight != -1) this._cornerRadiusTopRight = $with._cornerRadiusTopRight;
		if($with._cornerRadiusBottomLeft != -1) this._cornerRadiusBottomLeft = $with._cornerRadiusBottomLeft;
		if($with._cornerRadiusBottomRight != -1) this._cornerRadiusBottomRight = $with._cornerRadiusBottomRight;
		if($with._filterSet == true) {
			this._filter = $with._filter;
			this._filterSet = $with._filterSet;
		}
		if($with._alpha != -1) this._alpha = $with._alpha;
		if($with._fontName != null) this._fontName = $with._fontName;
		if($with._fontSize != -1) this._fontSize = $with._fontSize;
		if($with._fontScale != -1) this._fontScale = $with._fontScale;
		if($with._fontEmbedded != -1) this._fontEmbedded = $with._fontEmbedded;
		if($with._fontBold != -1) this._fontBold = $with._fontBold;
		if($with._fontItalic != -1) this._fontItalic = $with._fontItalic;
		if($with._fontUnderline != -1) this._fontUnderline = $with._fontUnderline;
		if($with._textAlign != null) this._textAlign = $with._textAlign;
		if($with._iconPosition != null) this._iconPosition = $with._iconPosition;
		if($with._icon != null) this._icon = $with._icon;
		if($with._iconWidth != -1) this._iconWidth = $with._iconWidth;
		if($with._iconHeight != -1) this._iconHeight = $with._iconHeight;
		if($with._hasButtons != -1) this._hasButtons = $with._hasButtons;
		if($with._gradientType != null) this._gradientType = $with._gradientType;
		if($with._selectionMethod != null) this._selectionMethod = $with._selectionMethod;
		if($with._autoHideScrolls != -1) this._autoHideScrolls = $with._autoHideScrolls;
		if($with._inlineScrolls != -1) this._inlineScrolls = $with._inlineScrolls;
		if($with._listSize != -1) this._listSize = $with._listSize;
		if($with._dynamicValues != null) {
			if(this._dynamicValues == null) this._dynamicValues = new haxe_ds_StringMap();
			var $it0 = $with._dynamicValues.keys();
			while( $it0.hasNext() ) {
				var property = $it0.next();
				var script = $with._dynamicValues.get(property);
				this._dynamicValues.set(property,script);
			}
		}
	}
	,toString: function() {
		var s = "";
		if(this._width != -1 || this.hasDynamicValue("width")) s += "width: " + (this._width != -1?Std.string(this._width):this._dynamicValues.get("width")) + ";\n";
		if(this._height != -1 || this.hasDynamicValue("height")) s += "height: " + (this._height != -1?Std.string(this._height):this._dynamicValues.get("height")) + ";\n";
		if(this._percentWidth != -1 || this.hasDynamicValue("percentWidth")) s += "width: " + (this._percentWidth != -1?Std.string(this._percentWidth):this._dynamicValues.get("percentWidth")) + "%;\n";
		if(this._percentHeight != -1 || this.hasDynamicValue("percentHeight")) s += "height: " + (this._percentHeight != -1?Std.string(this._percentHeight):this._dynamicValues.get("percentHeight")) + "%;\n";
		if(this._backgroundImage != null || this.hasDynamicValue("backgroundImage")) s += "backgroundImage: \"" + (this._backgroundImage != null?Std.string(this._backgroundImage):this._dynamicValues.get("backgroundImage")) + "\";\n";
		if(this._backgroundColor != -1 || this.hasDynamicValue("backgroundColor")) s += "backgroundColor: #" + (this._backgroundColor != -1?StringTools.hex(this._backgroundColor,6):this._dynamicValues.get("backgroundColor")) + ";\n";
		if(this._backgroundColorGradientEnd != -1 || this.hasDynamicValue("backgroundColorGradientEnd")) s += "backgroundColorGradientEnd: #" + (this._backgroundColorGradientEnd != -1?StringTools.hex(this._backgroundColorGradientEnd,6):this._dynamicValues.get("backgroundColorGradientEnd")) + ";\n";
		return s;
	}
	,addRawProperty: function(prop) {
		if(this._rawProperties == null) this._rawProperties = [];
		this._rawProperties.push(prop);
	}
	,get_rawProperties: function() {
		return this._rawProperties;
	}
	,self: function() {
		return new haxe_ui_toolkit_style_Style();
	}
	,clone: function() {
		var c = this.self();
		c.merge(this);
		return c;
	}
	,__class__: haxe_ui_toolkit_style_Style
	,__properties__: {get_rawProperties:"get_rawProperties",set_listSize:"set_listSize",get_listSize:"get_listSize",set_autoApply:"set_autoApply",get_autoApply:"get_autoApply",set_target:"set_target",get_target:"get_target",set_inlineScrolls:"set_inlineScrolls",get_inlineScrolls:"get_inlineScrolls",set_autoHideScrolls:"set_autoHideScrolls",get_autoHideScrolls:"get_autoHideScrolls",set_selectionMethod:"set_selectionMethod",get_selectionMethod:"get_selectionMethod",set_gradientType:"set_gradientType",get_gradientType:"get_gradientType",set_hasButtons:"set_hasButtons",get_hasButtons:"get_hasButtons",set_iconHeight:"set_iconHeight",get_iconHeight:"get_iconHeight",set_iconWidth:"set_iconWidth",get_iconWidth:"get_iconWidth",set_icon:"set_icon",get_icon:"get_icon",set_iconPosition:"set_iconPosition",get_iconPosition:"get_iconPosition",set_textAlign:"set_textAlign",get_textAlign:"get_textAlign",set_fontUnderline:"set_fontUnderline",get_fontUnderline:"get_fontUnderline",set_fontItalic:"set_fontItalic",get_fontItalic:"get_fontItalic",set_fontBold:"set_fontBold",get_fontBold:"get_fontBold",set_fontEmbedded:"set_fontEmbedded",get_fontEmbedded:"get_fontEmbedded",set_fontScale:"set_fontScale",get_fontScale:"get_fontScale",set_fontSize:"set_fontSize",get_fontSize:"get_fontSize",set_fontName:"set_fontName",get_fontName:"get_fontName",set_alpha:"set_alpha",get_alpha:"get_alpha",set_filter:"set_filter",get_filter:"get_filter",set_cornerRadius:"set_cornerRadius",get_cornerRadius:"get_cornerRadius",set_cornerRadiusBottomRight:"set_cornerRadiusBottomRight",get_cornerRadiusBottomRight:"get_cornerRadiusBottomRight",set_cornerRadiusBottomLeft:"set_cornerRadiusBottomLeft",get_cornerRadiusBottomLeft:"get_cornerRadiusBottomLeft",set_cornerRadiusTopRight:"set_cornerRadiusTopRight",get_cornerRadiusTopRight:"get_cornerRadiusTopRight",set_cornerRadiusTopLeft:"set_cornerRadiusTopLeft",get_cornerRadiusTopLeft:"get_cornerRadiusTopLeft",set_horizontalAlignment:"set_horizontalAlignment",get_horizontalAlignment:"get_horizontalAlignment",set_verticalAlignment:"set_verticalAlignment",get_verticalAlignment:"get_verticalAlignment",set_spacing:"set_spacing",get_spacing:"get_spacing",set_spacingY:"set_spacingY",get_spacingY:"get_spacingY",set_spacingX:"set_spacingX",get_spacingX:"get_spacingX",set_padding:"set_padding",get_padding:"get_padding",set_paddingBottom:"set_paddingBottom",get_paddingBottom:"get_paddingBottom",set_paddingTop:"set_paddingTop",get_paddingTop:"get_paddingTop",set_paddingRight:"set_paddingRight",get_paddingRight:"get_paddingRight",set_paddingLeft:"set_paddingLeft",get_paddingLeft:"get_paddingLeft",set_color:"set_color",get_color:"get_color",set_borderAlpha:"set_borderAlpha",get_borderAlpha:"get_borderAlpha",set_borderSize:"set_borderSize",get_borderSize:"get_borderSize",set_borderColor:"set_borderColor",get_borderColor:"get_borderColor",set_backgroundAlpha:"set_backgroundAlpha",get_backgroundAlpha:"get_backgroundAlpha",set_backgroundColorGradientEnd:"set_backgroundColorGradientEnd",get_backgroundColorGradientEnd:"get_backgroundColorGradientEnd",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_backgroundImageRect:"set_backgroundImageRect",get_backgroundImageRect:"get_backgroundImageRect",set_backgroundImageScale9:"set_backgroundImageScale9",get_backgroundImageScale9:"get_backgroundImageScale9",set_backgroundImage:"set_backgroundImage",get_backgroundImage:"get_backgroundImage",get_autoSizeSet:"get_autoSizeSet",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_percentHeight:"set_percentHeight",get_percentHeight:"get_percentHeight",set_percentWidth:"set_percentWidth",get_percentWidth:"get_percentWidth",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",get_visibleSet:"get_visibleSet",set_visible:"set_visible",get_visible:"get_visible"}
};
var haxe_ui_toolkit_style_StyleHelper = function() { };
$hxClasses["haxe.ui.toolkit.style.StyleHelper"] = haxe_ui_toolkit_style_StyleHelper;
haxe_ui_toolkit_style_StyleHelper.__name__ = ["haxe","ui","toolkit","style","StyleHelper"];
haxe_ui_toolkit_style_StyleHelper.sectionCache = null;
haxe_ui_toolkit_style_StyleHelper.clearCache = function() {
	haxe_ui_toolkit_style_StyleHelper.sectionCache = new haxe_ds_StringMap();
};
haxe_ui_toolkit_style_StyleHelper.paintStyle = function(g,style,rc) {
	g.clear();
	if(style == null || rc.width == 0 || rc.height == 0) return;
	if(style.get_backgroundColor() != -1 || style.get_borderColor() != -1) {
		if(style.get_borderColor() != -1) {
			var borderSize = 1;
			if(style.get_borderSize() != -1) borderSize = style.get_borderSize();
			if(borderSize > 0) {
				var borderAlpha = 1;
				if(style.get_borderAlpha() != -1) borderAlpha = style.get_borderAlpha();
				g.lineStyle(borderSize,style.get_borderColor(),borderAlpha);
				rc.inflate(-(borderSize / 2),-(borderSize / 2));
			}
		}
		if(style.get_backgroundColor() != -1) {
			var backgroundAlpha = 1;
			if(style.get_backgroundAlpha() != -1) backgroundAlpha = style.get_backgroundAlpha();
			if(style.get_backgroundColorGradientEnd() != -1) {
				var w = rc.width | 0;
				var h = rc.height | 0;
				var colors_0 = style.get_backgroundColor();
				var colors_1 = style.get_backgroundColorGradientEnd();
				var alphas_0 = backgroundAlpha;
				var alphas_1 = backgroundAlpha;
				var ratios_0 = 0;
				var ratios_1 = 255;
				var matrix = new openfl_geom_Matrix();
				var gradientType = "vertical";
				if(style.get_gradientType() != null) gradientType = style.get_gradientType();
				if(gradientType == "vertical") matrix.createGradientBox(w - 2,h - 2,Math.PI / 2,0,0); else if(gradientType == "horizontal") matrix.createGradientBox(w - 2,h - 2,0,0,0);
				g.beginFill(style.get_backgroundColor(),backgroundAlpha);
			} else g.beginFill(style.get_backgroundColor(),backgroundAlpha);
		}
		if(style.get_cornerRadiusTopLeft() != -1 || style.get_cornerRadiusTopRight() != -1 || style.get_cornerRadiusBottomLeft() != -1 || style.get_cornerRadiusBottomRight() != -1) {
			var radiusTopLeft = style.get_cornerRadiusTopLeft();
			var radiusTopRight = style.get_cornerRadiusTopRight();
			var radiusBottomLeft = style.get_cornerRadiusBottomLeft();
			var radiusBottomRight = style.get_cornerRadiusBottomRight();
			if(((radiusTopLeft | 0) & (radiusTopRight | 0) & (radiusBottomLeft | 0) & (radiusBottomRight | 0)) == radiusTopLeft) {
				radiusTopLeft -= 2;
				g.drawRoundRect(rc.get_left(),rc.get_top(),rc.width,rc.height,radiusTopLeft + 2,radiusTopLeft + 2);
			} else g.drawRect(rc.get_left(),rc.get_top(),rc.width,rc.height);
		} else g.drawRect(rc.get_left(),rc.get_top(),rc.width,rc.height);
		g.endFill();
	}
	if(style.get_backgroundImage() != null) {
		var backgroundImageRect = null;
		if(style.get_backgroundImageRect() != null) backgroundImageRect = style.get_backgroundImageRect();
		if(((function($this) {
			var $r;
			var _this = style.get_backgroundImage();
			$r = HxOverrides.substr(_this,-3,null);
			return $r;
		}(this))).toLowerCase() != "svg") {
			if(style.get_backgroundImageScale9() != null) haxe_ui_toolkit_style_StyleHelper.paintScale9(g,style.get_backgroundImage(),backgroundImageRect,style.get_backgroundImageScale9(),rc); else {
				var rects = new haxe_ds_StringMap();
				var bitmapData = haxe_ui_toolkit_style_StyleHelper.getBitmapSection(style.get_backgroundImage(),backgroundImageRect);
				if(bitmapData != null) {
					rects.set("middle",new openfl_geom_Rectangle(0,0,bitmapData.width,bitmapData.height));
					haxe_ui_toolkit_style_StyleHelper.paintCompoundBitmap(g,style.get_backgroundImage(),backgroundImageRect,rects,rc);
				}
			}
		} else {
		}
	}
};
haxe_ui_toolkit_style_StyleHelper.paintScale9 = function(g,resourceId,resourceRect,scale9,rc) {
	if(scale9 != null) {
		var resource = haxe_ui_toolkit_style_StyleHelper.getBitmapSection(resourceId,resourceRect);
		if(resource == null) return;
		var w = resource.width;
		var h = resource.height;
		var x1 = Std["int"](scale9.get_left());
		var y1 = Std["int"](scale9.get_top());
		var x2 = Std["int"](scale9.get_right());
		var y2 = Std["int"](scale9.get_bottom());
		var rects = new haxe_ds_StringMap();
		rects.set("top.left",new openfl_geom_Rectangle(0,0,x1,y1));
		rects.set("top",new openfl_geom_Rectangle(x1,0,x2 - x1,y1));
		rects.set("top.right",new openfl_geom_Rectangle(x2,0,w - x2,y1));
		rects.set("left",new openfl_geom_Rectangle(0,y1,x1,y2 - y1));
		rects.set("middle",new openfl_geom_Rectangle(x1,y1,x2 - x1,y2 - y1));
		rects.set("right",new openfl_geom_Rectangle(x2,y1,w - x2,y2 - y1));
		rects.set("bottom.left",new openfl_geom_Rectangle(0,y2,x1,h - y2));
		rects.set("bottom",new openfl_geom_Rectangle(x1,y2,x2 - x1,h - y2));
		rects.set("bottom.right",new openfl_geom_Rectangle(x2,y2,w - x2,h - y2));
		haxe_ui_toolkit_style_StyleHelper.paintCompoundBitmap(g,resourceId,resourceRect,rects,rc);
	}
};
haxe_ui_toolkit_style_StyleHelper.paintCompoundBitmap = function(g,resourceId,resourceRect,sourceRects,targetRect) {
	targetRect.set_left(Std["int"](targetRect.get_left()));
	targetRect.set_top(Std["int"](targetRect.get_top()));
	targetRect.set_right(Std["int"](targetRect.get_right()));
	targetRect.set_bottom(Std["int"](targetRect.get_bottom()));
	var tl;
	tl = __map_reserved["top.left"] != null?sourceRects.getReserved("top.left"):sourceRects.h["top.left"];
	if(tl != null) haxe_ui_toolkit_style_StyleHelper.paintBitmapSection(g,resourceId,resourceRect,tl,new openfl_geom_Rectangle(0,0,tl.width,tl.height)); else tl = new openfl_geom_Rectangle();
	var tr;
	tr = __map_reserved["top.right"] != null?sourceRects.getReserved("top.right"):sourceRects.h["top.right"];
	if(tr != null) haxe_ui_toolkit_style_StyleHelper.paintBitmapSection(g,resourceId,resourceRect,tr,new openfl_geom_Rectangle(targetRect.width - tr.width,0,tr.width,tr.height)); else tr = new openfl_geom_Rectangle();
	var t;
	t = __map_reserved.top != null?sourceRects.getReserved("top"):sourceRects.h["top"];
	if(t != null) haxe_ui_toolkit_style_StyleHelper.paintBitmapSection(g,resourceId,resourceRect,t,new openfl_geom_Rectangle(tl.width,0,targetRect.width - tl.width - tr.width,t.height)); else t = new openfl_geom_Rectangle();
	var bl;
	bl = __map_reserved["bottom.left"] != null?sourceRects.getReserved("bottom.left"):sourceRects.h["bottom.left"];
	if(bl != null) haxe_ui_toolkit_style_StyleHelper.paintBitmapSection(g,resourceId,resourceRect,bl,new openfl_geom_Rectangle(0,targetRect.height - bl.height,bl.width,bl.height)); else bl = new openfl_geom_Rectangle();
	var br;
	br = __map_reserved["bottom.right"] != null?sourceRects.getReserved("bottom.right"):sourceRects.h["bottom.right"];
	if(br != null) haxe_ui_toolkit_style_StyleHelper.paintBitmapSection(g,resourceId,resourceRect,br,new openfl_geom_Rectangle(targetRect.width - br.width,targetRect.height - br.height,br.width,br.height)); else br = new openfl_geom_Rectangle();
	var b;
	b = __map_reserved.bottom != null?sourceRects.getReserved("bottom"):sourceRects.h["bottom"];
	if(b != null) haxe_ui_toolkit_style_StyleHelper.paintBitmapSection(g,resourceId,resourceRect,b,new openfl_geom_Rectangle(bl.width,targetRect.height - b.height,targetRect.width - bl.width - br.width,b.height)); else b = new openfl_geom_Rectangle();
	var l;
	l = __map_reserved.left != null?sourceRects.getReserved("left"):sourceRects.h["left"];
	if(l != null) haxe_ui_toolkit_style_StyleHelper.paintBitmapSection(g,resourceId,resourceRect,l,new openfl_geom_Rectangle(0,tl.height,l.width,targetRect.height - tl.height - bl.height)); else l = new openfl_geom_Rectangle();
	var r;
	r = __map_reserved.right != null?sourceRects.getReserved("right"):sourceRects.h["right"];
	if(r != null) haxe_ui_toolkit_style_StyleHelper.paintBitmapSection(g,resourceId,resourceRect,r,new openfl_geom_Rectangle(targetRect.width - r.width,tr.height,r.width,targetRect.height - tl.height - bl.height)); else r = new openfl_geom_Rectangle();
	var m;
	m = __map_reserved.middle != null?sourceRects.getReserved("middle"):sourceRects.h["middle"];
	if(m != null) haxe_ui_toolkit_style_StyleHelper.paintBitmapSection(g,resourceId,resourceRect,m,new openfl_geom_Rectangle(l.width,t.height,targetRect.width - l.width - r.width,targetRect.height - t.height - b.height)); else m = new openfl_geom_Rectangle();
};
haxe_ui_toolkit_style_StyleHelper.paintBitmapSection = function(g,resourceId,resourceRect,src,dst) {
	var srcData = haxe_ui_toolkit_style_StyleHelper.getBitmapSection(resourceId,resourceRect);
	if(srcData == null) return;
	if(src.width <= 0 || src.height <= 0 || dst.width <= 0 || dst.height <= 0) return;
	if(resourceRect == null) resourceRect = new openfl_geom_Rectangle(0,0,srcData.width,srcData.height);
	var cacheId = resourceId + "_" + resourceRect.get_left() + "_" + resourceRect.get_top() + "_" + resourceRect.width + "_" + resourceRect.height + "___" + src.get_left() + "_" + src.get_top() + "_" + src.width + "_" + src.height;
	var section = haxe_ui_toolkit_style_StyleHelper.sectionCache.get(cacheId);
	if(section == null) {
		var fillcolor = 16777215;
		section = new openfl_display_BitmapData(src.width | 0,src.height | 0,true,fillcolor);
		section.copyPixels(srcData,src,new openfl_geom_Point(0,0));
		haxe_ui_toolkit_style_StyleHelper.sectionCache.set(cacheId,section);
	}
	src.set_left(Std["int"](src.get_left()));
	src.set_top(Std["int"](src.get_top()));
	src.set_bottom(Std["int"](src.get_bottom()));
	src.set_right(Std["int"](src.get_right()));
	dst.set_left(Std["int"](dst.get_left()));
	dst.set_top(Std["int"](dst.get_top()));
	dst.set_bottom(Std["int"](dst.get_bottom()));
	dst.set_right(Std["int"](dst.get_right()));
	var mat = new openfl_geom_Matrix();
	mat.scale(dst.width / section.width,dst.height / section.height);
	mat.translate(dst.get_left(),dst.get_top());
	g.lineStyle(0,0,0);
	g.beginBitmapFill(section,mat,false,false);
	g.drawRect(dst.x,dst.y,dst.width,dst.height);
	g.endFill();
};
haxe_ui_toolkit_style_StyleHelper.getBitmapSection = function(resourceId,rc) {
	if(resourceId == null || resourceId.length == 0) return null;
	if(haxe_ui_toolkit_style_StyleHelper.sectionCache == null) haxe_ui_toolkit_style_StyleHelper.sectionCache = new haxe_ds_StringMap();
	if(rc == null) {
		var resource = haxe_ui_toolkit_resources_ResourceManager.get_instance().getBitmapData(resourceId);
		if(resource != null) rc = new openfl_geom_Rectangle(0,0,resource.width,resource.height);
	}
	var cacheId = resourceId + "_" + rc.get_left() + "_" + rc.get_top() + "_" + rc.width + "_" + rc.height;
	var section = haxe_ui_toolkit_style_StyleHelper.sectionCache.get(cacheId);
	if(section == null) {
		var resource1 = haxe_ui_toolkit_resources_ResourceManager.get_instance().getBitmapData(resourceId);
		if(resource1 != null) {
			var fillcolor = 16777215;
			section = new openfl_display_BitmapData(rc.width | 0,rc.height | 0,true,fillcolor);
			section.copyPixels(resource1,rc,new openfl_geom_Point(0,0));
			haxe_ui_toolkit_style_StyleHelper.sectionCache.set(cacheId,section);
		}
	}
	return section;
};
var haxe_ui_toolkit_style_StyleManager = function() {
	this._cacheStyles = true;
	this.stylesBuilt = 0;
	this._styles = new haxe_ds_StringMap();
	this._rules = [];
	this.stylesBuiltFor = new haxe_ds_StringMap();
};
$hxClasses["haxe.ui.toolkit.style.StyleManager"] = haxe_ui_toolkit_style_StyleManager;
haxe_ui_toolkit_style_StyleManager.__name__ = ["haxe","ui","toolkit","style","StyleManager"];
haxe_ui_toolkit_style_StyleManager.__properties__ = {get_instance:"get_instance"}
haxe_ui_toolkit_style_StyleManager._instance = null;
haxe_ui_toolkit_style_StyleManager.instance = null;
haxe_ui_toolkit_style_StyleManager.get_instance = function() {
	if(haxe_ui_toolkit_style_StyleManager._instance == null) haxe_ui_toolkit_style_StyleManager._instance = new haxe_ui_toolkit_style_StyleManager();
	return haxe_ui_toolkit_style_StyleManager._instance;
};
haxe_ui_toolkit_style_StyleManager.prototype = {
	getRules: function() {
		return this._rules;
	}
	,removeStyle: function(rule) {
		this._styles.remove(rule);
		HxOverrides.remove(this._rules,rule);
	}
	,addStyle: function(rule,style) {
		this._cachedStyles = null;
		var arr = rule.split(",");
		var _g = 0;
		while(_g < arr.length) {
			var a = arr[_g];
			++_g;
			a = StringTools.trim(a);
			var existingStyleRule = this._styles.get(a);
			var existingStyle = null;
			if(existingStyleRule != null) {
				var existingStyle1 = existingStyleRule.style;
				existingStyle1.merge(style);
				var styleRule = new haxe_ui_toolkit_style__$StyleManager_StyleRule(a,existingStyle1);
				this._styles.set(a,styleRule);
			} else {
				var styleRule1 = new haxe_ui_toolkit_style__$StyleManager_StyleRule(a,style);
				this._styles.set(a,styleRule1);
				this._rules.push(a);
			}
		}
	}
	,addStyles: function(styles) {
		var $it0 = styles.get_rules();
		while( $it0.hasNext() ) {
			var rule = $it0.next();
			this.addStyle(rule,styles.getStyle(rule));
		}
	}
	,findStyle: function(rule) {
		var existingStyleRule = this._styles.get(rule);
		if(existingStyleRule != null) return existingStyleRule.style;
		return null;
	}
	,clear: function() {
		this._styles = new haxe_ds_StringMap();
		this._rules = [];
		haxe_ui_toolkit_style_StyleHelper.clearCache();
	}
	,get_useCache: function() {
		return this._cacheStyles;
	}
	,set_useCache: function(value) {
		this._cacheStyles = false;
		return value;
	}
	,clearCache: function() {
		this._cachedStyles = new haxe_ds_StringMap();
	}
	,findAncestor: function(c,rulePart) {
		var a = null;
		var t = c;
		while(a == null) if(this.rulePartMatch(t,rulePart,null) == true) a = t; else {
			t = t.get_parent();
			if(t == null) break;
		}
		return a;
	}
	,rulePartMatch: function(c,rulePart,state,overriddenClassName) {
		var match = false;
		if(state == "normal") state = null;
		var className = Type.getClassName(c == null?null:js_Boot.getClass(c));
		var n = className.lastIndexOf(".");
		className = HxOverrides.substr(className,n + 1,className.length);
		if(overriddenClassName != null) className = overriddenClassName;
		var id = c.get_id();
		var styleName = null;
		if(js_Boot.__instanceof(c,haxe_ui_toolkit_core_interfaces_IStyleableDisplayObject)) styleName = (js_Boot.__cast(c , haxe_ui_toolkit_core_interfaces_IStyleableDisplayObject)).get_styleName();
		var rulePartId = rulePart.id;
		var rulePartClassName = rulePart.className;
		var rulePartState = rulePart.state;
		var rulePartStyleName = rulePart.styleName;
		if(rulePartStyleName != null && rulePartStyleName.length == 0) rulePartStyleName = null;
		var s = new haxe_ui_toolkit_style_Style();
		if(rulePartId != null) {
			match = rulePartId == id;
			if(rulePartStyleName != null && match == true) match = rulePartStyleName == styleName;
		} else if(rulePartClassName != null) {
			match = rulePartClassName == className;
			if(rulePartStyleName != null && match == true) match = rulePartStyleName == styleName;
		} else if(rulePartStyleName != null) match = rulePartStyleName == styleName;
		if(rulePartState != null && match == true) match = rulePartState == state;
		return match;
	}
	,ruleMatch: function(c,rule,state,overriddenClassName) {
		var match = true;
		if(state == "normal") state = null;
		var className = Type.getClassName(c == null?null:js_Boot.getClass(c));
		var n = className.lastIndexOf(".");
		className = HxOverrides.substr(className,n + 1,className.length);
		if(overriddenClassName != null) className = overriddenClassName;
		var id = c.get_id();
		var styleName = null;
		if(js_Boot.__instanceof(c,haxe_ui_toolkit_core_interfaces_IStyleableDisplayObject)) styleName = (js_Boot.__cast(c , haxe_ui_toolkit_core_interfaces_IStyleableDisplayObject)).get_styleName();
		var styleRule = this._styles.get(rule);
		var skipRule = true;
		if(styleRule.isRelevant(id,className,state,styleName) == true) skipRule = false;
		if(styleName != null && rule.indexOf("." + styleName) != -1) skipRule = false;
		if(skipRule == true) return false;
		var t = c;
		var _g = 0;
		var _g1 = styleRule.ruleParts;
		while(_g < _g1.length) {
			var rulePart = _g1[_g];
			++_g;
			var partMatch = this.rulePartMatch(t,rulePart,state,overriddenClassName);
			if(partMatch == false) {
				t = this.findAncestor(t,rulePart);
				if(t == null) {
					match = false;
					break;
				} else state = null;
			}
		}
		return match;
	}
	,buildStyleFor: function(c,state) {
		if(state == "normal") state = null;
		var cacheKey = null;
		if(this._cacheStyles == true) {
			cacheKey = this.buildFullCacheKey(c,state);
			if(this._cachedStyles == null) this._cachedStyles = new haxe_ds_StringMap();
			if(this._cachedStyles.get(cacheKey) != null) return this._cachedStyles.get(cacheKey).clone();
		}
		var style = new haxe_ui_toolkit_style_Style();
		style.set_autoApply(false);
		var superClass = Type.getSuperClass(c == null?null:js_Boot.getClass(c));
		while(superClass != haxe_ui_toolkit_core_Component && superClass != haxe_ui_toolkit_core_StateComponent && superClass != haxe_ui_toolkit_core_StyleableDisplayObject && superClass != haxe_ui_toolkit_core_DisplayObjectContainer && superClass != haxe_ui_toolkit_core_DisplayObject && superClass != null) {
			var superClassName = Type.getClassName(superClass);
			var n1 = superClassName.lastIndexOf(".");
			superClassName = HxOverrides.substr(superClassName,n1 + 1,superClassName.length);
			var _g = 0;
			var _g1 = this._rules;
			while(_g < _g1.length) {
				var rule = _g1[_g];
				++_g;
				if(this.ruleMatch(c,rule,state,superClassName) == true) {
					var matchedStyle = this._styles.get(rule).style;
					style.merge(matchedStyle);
				}
			}
			superClass = Type.getSuperClass(superClass);
		}
		var _g2 = 0;
		var _g11 = this._rules;
		while(_g2 < _g11.length) {
			var rule1 = _g11[_g2];
			++_g2;
			if(this.ruleMatch(c,rule1,state) == true) {
				var matchedStyle1 = this._styles.get(rule1).style;
				style.merge(matchedStyle1);
			}
		}
		this.stylesBuilt++;
		var className = Type.getClassName(c == null?null:js_Boot.getClass(c));
		if(this.stylesBuiltFor.get(className) == null) this.stylesBuiltFor.set(className,0);
		var n = this.stylesBuiltFor.get(className);
		n++;
		this.stylesBuiltFor.set(className,n);
		if(this._cacheStyles == true && cacheKey != null) this._cachedStyles.set(cacheKey,style);
		style.set_target(c);
		style.set_autoApply(true);
		return style.clone();
	}
	,buildCacheKey: function(c,state) {
		if(state == "normal") state = null;
		var className = Type.getClassName(c == null?null:js_Boot.getClass(c));
		var n = className.lastIndexOf(".");
		className = HxOverrides.substr(className,n + 1,className.length);
		var id = c.get_id();
		var styleName = null;
		var styleString = null;
		if(js_Boot.__instanceof(c,haxe_ui_toolkit_core_interfaces_IStyleableDisplayObject)) {
			styleName = (js_Boot.__cast(c , haxe_ui_toolkit_core_interfaces_IStyleableDisplayObject)).get_styleName();
			styleString = (js_Boot.__cast(c , haxe_ui_toolkit_core_interfaces_IStyleableDisplayObject)).get_styleString();
		}
		var s = className;
		if(id != null) s += "#" + id;
		if(styleName != null) s += "." + styleName;
		if(state != null) s += ":" + state;
		if(styleString != null) s += "{" + styleString + "}";
		return s;
	}
	,buildFullCacheKey: function(c,state) {
		if(state == "normal") state = null;
		var key = this.buildCacheKey(c,state);
		var p = c.get_parent();
		while(p != null) {
			key += ">" + this.buildCacheKey(p,null);
			p = p.get_parent();
		}
		return key;
	}
	,dump: function() {
		var $it0 = this.stylesBuiltFor.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			haxe_Log.trace("> " + key + " = " + this.stylesBuiltFor.get(key),{ fileName : "StyleManager.hx", lineNumber : 343, className : "haxe.ui.toolkit.style.StyleManager", methodName : "dump"});
		}
		haxe_Log.trace(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",{ fileName : "StyleManager.hx", lineNumber : 345, className : "haxe.ui.toolkit.style.StyleManager", methodName : "dump"});
	}
	,get_hasStyles: function() {
		if(this._styles == null) return false;
		return this._styles.keys().hasNext();
	}
	,__class__: haxe_ui_toolkit_style_StyleManager
	,__properties__: {set_useCache:"set_useCache",get_useCache:"get_useCache",get_hasStyles:"get_hasStyles"}
};
var haxe_ui_toolkit_style__$StyleManager_StyleRule = function(rule,style) {
	this.style = style;
	this.ruleParts = [];
	var ruleArr = rule.split(" ");
	ruleArr.reverse();
	var _g = 0;
	while(_g < ruleArr.length) {
		var rulePart = ruleArr[_g];
		++_g;
		this.ruleParts.push(new haxe_ui_toolkit_style__$StyleManager_StyleRulePart(rulePart));
	}
};
$hxClasses["haxe.ui.toolkit.style._StyleManager.StyleRule"] = haxe_ui_toolkit_style__$StyleManager_StyleRule;
haxe_ui_toolkit_style__$StyleManager_StyleRule.__name__ = ["haxe","ui","toolkit","style","_StyleManager","StyleRule"];
haxe_ui_toolkit_style__$StyleManager_StyleRule.prototype = {
	containsClassName: function(className) {
		var found = false;
		var _g = 0;
		var _g1 = this.ruleParts;
		while(_g < _g1.length) {
			var rulePart = _g1[_g];
			++_g;
			if(rulePart.className != null && rulePart.className == className) {
				found = true;
				break;
			}
		}
		return found;
	}
	,isRelevant: function(id,className,state,styleName) {
		var relevant = false;
		var _g = 0;
		var _g1 = this.ruleParts;
		while(_g < _g1.length) {
			var rulePart = _g1[_g];
			++_g;
			if(rulePart.id != null && rulePart.id == id) {
				relevant = true;
				break;
			}
			if(rulePart.className != null && rulePart.className == className) {
				relevant = true;
				break;
			}
			if(rulePart.state != null && rulePart.state == state) {
				relevant = true;
				break;
			}
			if(rulePart.styleName != null && rulePart.styleName == styleName) {
				relevant = true;
				break;
			}
		}
		return relevant;
	}
	,__class__: haxe_ui_toolkit_style__$StyleManager_StyleRule
};
var haxe_ui_toolkit_style__$StyleManager_StyleRulePart = function(rulePart) {
	var n = rulePart.indexOf(":");
	if(n != -1) {
		this.state = HxOverrides.substr(rulePart,n + 1,rulePart.length);
		rulePart = HxOverrides.substr(rulePart,0,n);
	}
	if(StringTools.startsWith(rulePart,"#")) {
		this.id = HxOverrides.substr(rulePart,1,rulePart.length);
		n = this.id.indexOf(".");
		if(n != -1) {
			this.styleName = HxOverrides.substr(this.id,n + 1,this.id.length);
			this.id = HxOverrides.substr(this.id,0,n);
		}
	} else {
		this.className = rulePart;
		n = this.className.indexOf(".");
		if(n != -1) {
			this.styleName = HxOverrides.substr(this.className,n + 1,this.className.length);
			this.className = HxOverrides.substr(this.className,0,n);
			if(this.className.length == 0) this.className = null;
		}
	}
	if(this.styleName != null && this.styleName.length == 0) this.styleName = null;
};
$hxClasses["haxe.ui.toolkit.style._StyleManager.StyleRulePart"] = haxe_ui_toolkit_style__$StyleManager_StyleRulePart;
haxe_ui_toolkit_style__$StyleManager_StyleRulePart.__name__ = ["haxe","ui","toolkit","style","_StyleManager","StyleRulePart"];
haxe_ui_toolkit_style__$StyleManager_StyleRulePart.prototype = {
	__class__: haxe_ui_toolkit_style__$StyleManager_StyleRulePart
};
var haxe_ui_toolkit_style_StyleParser = function() { };
$hxClasses["haxe.ui.toolkit.style.StyleParser"] = haxe_ui_toolkit_style_StyleParser;
haxe_ui_toolkit_style_StyleParser.__name__ = ["haxe","ui","toolkit","style","StyleParser"];
haxe_ui_toolkit_style_StyleParser.fromString = function(styleString,storeRaw) {
	if(storeRaw == null) storeRaw = false;
	if(styleString == null || styleString.length == 0) return new haxe_ui_toolkit_style_Styles();
	var n1 = styleString.indexOf("/*");
	while(n1 != -1) {
		var n21 = styleString.indexOf("*/",n1);
		if(n21 == -1) break;
		var before = styleString.substring(0,n1);
		var after = styleString.substring(n21 + 2,styleString.length);
		styleString = before + after;
		n1 = styleString.indexOf("/*");
	}
	var styles = new haxe_ui_toolkit_style_Styles();
	var n11 = -1;
	var n2 = styleString.indexOf("{",0);
	while(n2 > -1) {
		var n3 = styleString.indexOf("}",n2);
		var styleName = StringTools.trim(HxOverrides.substr(styleString,n11 + 1,n2 - n11 - 1));
		var styleData = HxOverrides.substr(styleString,n2 + 1,n3 - n2 - 1);
		var style = new haxe_ui_toolkit_style_Style();
		var props = styleData.split(";");
		var _g = 0;
		while(_g < props.length) {
			var prop = props[_g];
			++_g;
			prop = StringTools.trim(prop);
			if(prop.length == 0 || StringTools.startsWith(prop,"//")) continue;
			if(storeRaw == true) style.addRawProperty(prop);
			if(prop != null && prop.length > 0) {
				var temp = prop.split(":");
				var propName = StringTools.trim(temp[0]);
				propName = haxe_ui_toolkit_util_StringUtil.capitalizeHyphens(propName);
				if(Reflect.field(style,"set_" + propName) == null) {
					haxe_Log.trace("Warning: " + propName + " not found",{ fileName : "StyleParser.hx", lineNumber : 53, className : "haxe.ui.toolkit.style.StyleParser", methodName : "fromString"});
					continue;
				}
				var propValue = StringTools.trim(temp[1]);
				if(temp.length == 3) propValue += ":" + StringTools.trim(temp[2]);
				propValue = StringTools.replace(propValue,"\"","");
				propValue = StringTools.replace(propValue,"'","");
				if(haxe_ui_toolkit_hscript_ScriptUtils.isScript(propValue) && !haxe_ui_toolkit_hscript_ScriptUtils.isCssException(propName)) {
					style.addDynamicValue(propName,propValue);
					continue;
				}
				if(propName == "width" && propValue.indexOf("%") != -1) {
					propName = "percentWidth";
					propValue = HxOverrides.substr(propValue,0,propValue.length - 1);
				} else if(propName == "height" && propValue.indexOf("%") != -1) {
					propName = "percentHeight";
					propValue = HxOverrides.substr(propValue,0,propValue.length - 1);
				} else if(propName == "filter") {
					style.set_filter(haxe_ui_toolkit_util_FilterParser.parseFilter(propValue));
					continue;
				} else if(propName == "backgroundImageScale9") {
					var coords = propValue.split(",");
					var x1 = Std.parseInt(coords[0]);
					var y1 = Std.parseInt(coords[1]);
					var x2 = Std.parseInt(coords[2]);
					var y2 = Std.parseInt(coords[3]);
					var scale9 = new openfl_geom_Rectangle();
					scale9.set_left(x1);
					scale9.set_top(y1);
					scale9.set_right(x2);
					scale9.set_bottom(y2);
					style.set_backgroundImageScale9(scale9);
					continue;
				} else if(propName == "backgroundImageRect") {
					var arr = propValue.split(",");
					style.set_backgroundImageRect(new openfl_geom_Rectangle(Std.parseInt(arr[0]),Std.parseInt(arr[1]),Std.parseInt(arr[2]),Std.parseInt(arr[3])));
					continue;
				}
				if(propValue.indexOf(",") != -1 || !StringTools.startsWith(propValue,"#") && Std.string(parseFloat(propValue)) == Std.string(NaN)) {
					if(propValue == "true" || propValue == "false") Reflect.setProperty(style,propName,propValue == "true"); else Reflect.setProperty(style,propName,propValue);
				} else {
					if(StringTools.startsWith(propValue,"#")) propValue = "0x" + HxOverrides.substr(propValue,1,propValue.length - 1);
					if(StringTools.startsWith(propValue,"0x")) Reflect.setProperty(style,propName,Std.parseInt(propValue)); else Reflect.setProperty(style,propName,parseFloat(propValue));
				}
			}
		}
		if(styleName.indexOf(",") == -1) styles.addStyle(styleName,style); else {
			var arr1 = styleName.split(",");
			var _g1 = 0;
			while(_g1 < arr1.length) {
				var s = arr1[_g1];
				++_g1;
				s = StringTools.trim(s);
				styles.addStyle(s,style.clone());
			}
		}
		n11 = n3;
		n2 = styleString.indexOf("{",n11);
	}
	return styles;
};
var haxe_ui_toolkit_text_ITextDisplay = function() { };
$hxClasses["haxe.ui.toolkit.text.ITextDisplay"] = haxe_ui_toolkit_text_ITextDisplay;
haxe_ui_toolkit_text_ITextDisplay.__name__ = ["haxe","ui","toolkit","text","ITextDisplay"];
haxe_ui_toolkit_text_ITextDisplay.prototype = {
	__class__: haxe_ui_toolkit_text_ITextDisplay
	,__properties__: {set_restrictChars:"set_restrictChars",get_restrictChars:"get_restrictChars",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",set_textAlign:"set_textAlign",get_textAlign:"get_textAlign",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_selectable:"set_selectable",get_selectable:"get_selectable",set_visible:"set_visible",get_visible:"get_visible",set_displayAsPassword:"set_displayAsPassword",get_displayAsPassword:"get_displayAsPassword",set_wrapLines:"set_wrapLines",get_wrapLines:"get_wrapLines",set_multiline:"set_multiline",get_multiline:"get_multiline",set_interactive:"set_interactive",get_interactive:"get_interactive",get_display:"get_display",set_style:"set_style",get_style:"get_style",set_text:"set_text",get_text:"get_text"}
};
var haxe_ui_toolkit_text_TextDisplay = function() {
	this._autoSize = true;
	this._tf = new openfl_text_TextField();
	this._tf.set_type(openfl_text_TextFieldType.DYNAMIC);
	this._tf.set_selectable(false);
	this._tf.set_multiline(false);
	this._tf.mouseEnabled = false;
	this._tf.set_wordWrap(false);
	this._tf.set_autoSize(openfl_text_TextFieldAutoSize.LEFT);
	this._tf.set_text("");
};
$hxClasses["haxe.ui.toolkit.text.TextDisplay"] = haxe_ui_toolkit_text_TextDisplay;
haxe_ui_toolkit_text_TextDisplay.__name__ = ["haxe","ui","toolkit","text","TextDisplay"];
haxe_ui_toolkit_text_TextDisplay.__interfaces__ = [haxe_ui_toolkit_text_ITextDisplay];
haxe_ui_toolkit_text_TextDisplay.prototype = {
	get_text: function() {
		return this._tf.get_text();
	}
	,set_text: function(value) {
		if(value != null) this._tf.set_text(StringTools.replace(value,"\\n","\n"));
		this.set_style(this._style);
		if(this._tf.get_height() - 2 != this._tf.get_textHeight()) this._tf.set_height(this._tf.get_textHeight() - 2);
		return value;
	}
	,get_style: function() {
		return this._style;
	}
	,set_style: function(value) {
		if(value == null) return value;
		this._style = value;
		var format = this._tf.getTextFormat();
		var fontName = this._style.get_fontName();
		if(fontName != null) {
			if(fontName == "_sans") fontName = "Tahoma";
			this._tf.set_embedFonts(this._style.get_fontEmbedded());
			format.font = fontName;
		}
		if(this._style.get_fontSize() != -1) format.size = this._style.get_fontSize();
		if(this._style.get_color() != -1) format.color = this._style.get_color();
		format.bold = this._style.get_fontBold();
		format.italic = this._style.get_fontItalic();
		format.underline = this._style.get_fontUnderline();
		this._tf.set_defaultTextFormat(format);
		this._tf.setTextFormat(format);
		if(this._style.get_textAlign() != null) this.set_textAlign(this._style.get_textAlign());
		return value;
	}
	,get_display: function() {
		return this._tf;
	}
	,get_interactive: function() {
		return this._tf.get_type() == openfl_text_TextFieldType.INPUT;
	}
	,set_interactive: function(value) {
		if(value == true) {
			this._tf.set_type(openfl_text_TextFieldType.INPUT);
			this._tf.set_selectable(true);
			this._tf.mouseEnabled = true;
		} else {
			this._tf.set_type(openfl_text_TextFieldType.DYNAMIC);
			this._tf.set_selectable(false);
			this._tf.mouseEnabled = false;
		}
		return value;
	}
	,get_multiline: function() {
		return this._tf.get_multiline();
	}
	,set_multiline: function(value) {
		this._tf.set_multiline(value);
		return value;
	}
	,get_wrapLines: function() {
		return this._tf.get_wordWrap();
	}
	,set_wrapLines: function(value) {
		this._tf.set_wordWrap(value);
		return value;
	}
	,get_displayAsPassword: function() {
		return this._tf.get_displayAsPassword();
	}
	,set_displayAsPassword: function(value) {
		this._tf.set_displayAsPassword(value);
		return value;
	}
	,get_visible: function() {
		return this._tf.get_visible();
	}
	,set_visible: function(value) {
		this._tf.set_visible(value);
		return value;
	}
	,get_selectable: function() {
		return this._tf.get_selectable();
	}
	,set_selectable: function(value) {
		this._tf.mouseEnabled = value;
		return this._tf.set_selectable(value);
	}
	,get_autoSize: function() {
		return this._tf.get_autoSize() != openfl_text_TextFieldAutoSize.NONE;
	}
	,set_autoSize: function(value) {
		if(value == true) this._tf.set_autoSize(openfl_text_TextFieldAutoSize.LEFT); else this._tf.set_autoSize(openfl_text_TextFieldAutoSize.NONE);
		return value;
	}
	,get_textAlign: function() {
		var format = this._tf.getTextFormat();
		var align = "left";
		var _g = format.align;
		switch(_g[1]) {
		case 0:
			align = "left";
			break;
		case 3:
			align = "center";
			break;
		case 1:
			align = "right";
			break;
		default:
			align = "left";
		}
		return align;
	}
	,set_textAlign: function(value) {
		var format = this._tf.getTextFormat();
		switch(value) {
		case "left":
			format.align = openfl_text_TextFormatAlign.LEFT;
			break;
		case "center":
			format.align = openfl_text_TextFormatAlign.CENTER;
			break;
		case "right":
			format.align = openfl_text_TextFormatAlign.RIGHT;
			break;
		default:
			format.align = openfl_text_TextFormatAlign.LEFT;
		}
		this._tf.set_defaultTextFormat(format);
		this._tf.setTextFormat(format);
		return value;
	}
	,get_maxChars: function() {
		return this._tf.get_maxChars();
	}
	,set_maxChars: function(value) {
		return this._tf.set_maxChars(value);
	}
	,get_restrictChars: function() {
		return null;
	}
	,set_restrictChars: function(value) {
		return value;
	}
	,__class__: haxe_ui_toolkit_text_TextDisplay
	,__properties__: {set_restrictChars:"set_restrictChars",get_restrictChars:"get_restrictChars",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",set_textAlign:"set_textAlign",get_textAlign:"get_textAlign",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_selectable:"set_selectable",get_selectable:"get_selectable",set_visible:"set_visible",get_visible:"get_visible",set_displayAsPassword:"set_displayAsPassword",get_displayAsPassword:"get_displayAsPassword",set_wrapLines:"set_wrapLines",get_wrapLines:"get_wrapLines",set_multiline:"set_multiline",get_multiline:"get_multiline",set_interactive:"set_interactive",get_interactive:"get_interactive",get_display:"get_display",set_style:"set_style",get_style:"get_style",set_text:"set_text",get_text:"get_text"}
};
var haxe_ui_toolkit_themes_Theme = function() {
};
$hxClasses["haxe.ui.toolkit.themes.Theme"] = haxe_ui_toolkit_themes_Theme;
haxe_ui_toolkit_themes_Theme.__name__ = ["haxe","ui","toolkit","themes","Theme"];
haxe_ui_toolkit_themes_Theme.addPublicAsset = function(asset) {
	haxe_ui_toolkit_themes_Theme.addAsset("__PUBLIC__",asset);
};
haxe_ui_toolkit_themes_Theme.addAsset = function(t,asset) {
	var list = haxe_ui_toolkit_themes_Theme.assets.get(t);
	if(list == null) {
		list = [];
		haxe_ui_toolkit_themes_Theme.assets.set(t,list);
	}
	list.push(asset);
};
haxe_ui_toolkit_themes_Theme.prototype = {
	apply: function() {
		this.applyAssetList(this.name);
		this.applyAssetList("__PUBLIC__");
	}
	,applyAssetList: function(n) {
		var list = haxe_ui_toolkit_themes_Theme.assets.get(n);
		if(list == null) return;
		var _g = 0;
		while(_g < list.length) {
			var asset = list[_g];
			++_g;
			this.applyAsset(asset);
		}
	}
	,applyAsset: function(asset) {
		if(typeof(asset) == "string") {
			if(StringTools.endsWith(asset,".css")) haxe_ui_toolkit_style_StyleManager.get_instance().addStyles(haxe_ui_toolkit_style_StyleParser.fromString(haxe_ui_toolkit_resources_ResourceManager.get_instance().getText(asset)));
		} else if(js_Boot.__instanceof(asset,Class)) {
			var styles = Type.createInstance(asset,[]);
			if(styles != null) haxe_ui_toolkit_style_StyleManager.get_instance().addStyles(styles);
		}
	}
	,__class__: haxe_ui_toolkit_themes_Theme
};
var haxe_ui_toolkit_themes_DefaultTheme = function() {
	haxe_ui_toolkit_themes_Theme.call(this);
	this.name = "default";
};
$hxClasses["haxe.ui.toolkit.themes.DefaultTheme"] = haxe_ui_toolkit_themes_DefaultTheme;
haxe_ui_toolkit_themes_DefaultTheme.__name__ = ["haxe","ui","toolkit","themes","DefaultTheme"];
haxe_ui_toolkit_themes_DefaultTheme.__super__ = haxe_ui_toolkit_themes_Theme;
haxe_ui_toolkit_themes_DefaultTheme.prototype = $extend(haxe_ui_toolkit_themes_Theme.prototype,{
	__class__: haxe_ui_toolkit_themes_DefaultTheme
});
var haxe_ui_toolkit_util_ByteConverter = function() { };
$hxClasses["haxe.ui.toolkit.util.ByteConverter"] = haxe_ui_toolkit_util_ByteConverter;
haxe_ui_toolkit_util_ByteConverter.__name__ = ["haxe","ui","toolkit","util","ByteConverter"];
haxe_ui_toolkit_util_ByteConverter.fromHaxeBytes = function(bytes) {
	var ba = new openfl_utils_ByteArrayData(0);
	var _g1 = 0;
	var _g = bytes.length;
	while(_g1 < _g) {
		var a = _g1++;
		ba.writeByte(bytes.b.bufferValue.bytes[a]);
	}
	return ba;
};
haxe_ui_toolkit_util_ByteConverter.toHaxeBytes = function(ba) {
	var bytes = haxe_io_Bytes.alloc(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(ba));
	var _g1 = 0;
	var _g = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(ba);
	while(_g1 < _g) {
		var a = _g1++;
		bytes.set(a,ba.readByte());
	}
	return bytes;
};
var haxe_ui_toolkit_util_CallStackHelper = function() { };
$hxClasses["haxe.ui.toolkit.util.CallStackHelper"] = haxe_ui_toolkit_util_CallStackHelper;
haxe_ui_toolkit_util_CallStackHelper.__name__ = ["haxe","ui","toolkit","util","CallStackHelper"];
haxe_ui_toolkit_util_CallStackHelper.traceCallStack = function() {
	var arr = haxe_CallStack.callStack();
	if(arr == null) {
		haxe_Log.trace("Callstack is null!",{ fileName : "CallStackHelper.hx", lineNumber : 9, className : "haxe.ui.toolkit.util.CallStackHelper", methodName : "traceCallStack"});
		return;
	}
	haxe_Log.trace(haxe_CallStack.toString(arr),{ fileName : "CallStackHelper.hx", lineNumber : 12, className : "haxe.ui.toolkit.util.CallStackHelper", methodName : "traceCallStack"});
	haxe_Log.trace(">>>>>>>>>>>>>>>>>>>>>>>>>>>> END >>>>>>>>>>>>>>>>>>>>>>>>>>>>",{ fileName : "CallStackHelper.hx", lineNumber : 13, className : "haxe.ui.toolkit.util.CallStackHelper", methodName : "traceCallStack"});
};
var haxe_ui_toolkit_util_FilterParser = function() { };
$hxClasses["haxe.ui.toolkit.util.FilterParser"] = haxe_ui_toolkit_util_FilterParser;
haxe_ui_toolkit_util_FilterParser.__name__ = ["haxe","ui","toolkit","util","FilterParser"];
haxe_ui_toolkit_util_FilterParser.parseFilter = function(filterString) {
	return null;
	var filter = null;
	var filterName = null;
	var filterParams = null;
	var n1 = filterString.indexOf("(");
	var n2 = filterString.indexOf(")");
	if(n1 != -1 && n2 != -1) {
		filterName = HxOverrides.substr(filterString,0,n1);
		filterParams = HxOverrides.substr(filterString,n1 + 1,n2 - n1 - 1);
	} else filterName = filterString;
	if(filterName != null) {
		filterName = StringTools.trim(filterName);
		filter = haxe_ui_toolkit_util_FilterParser.createFilter(filterName,filterParams);
	}
	return filter;
};
haxe_ui_toolkit_util_FilterParser.createFilter = function(filterName,filterParams) {
	var filter = null;
	var params = null;
	if(filterParams != null) params = filterParams.split(",");
	params = haxe_ui_toolkit_util_FilterParser.copyFilterDefaults(filterName,params);
	if(filterName == "blur") filter = haxe_ui_toolkit_util_FilterParser.createBlurFilter(params); else if(filterName == "dropShadow") filter = haxe_ui_toolkit_util_FilterParser.createDropShadowFilter(params); else if(filterName == "glow") filter = haxe_ui_toolkit_util_FilterParser.createGlowFilter(params);
	return filter;
};
haxe_ui_toolkit_util_FilterParser.createBlurFilter = function(params) {
	var filter = new openfl_filters_BlurFilter(haxe_ui_toolkit_util_TypeParser.parseFloat(params[0]),haxe_ui_toolkit_util_TypeParser.parseFloat(params[1]),haxe_ui_toolkit_util_TypeParser.parseInt(params[2]));
	return filter;
};
haxe_ui_toolkit_util_FilterParser.createDropShadowFilter = function(params) {
	var filter = new openfl_filters_DropShadowFilter(haxe_ui_toolkit_util_TypeParser.parseFloat(params[0]),haxe_ui_toolkit_util_TypeParser.parseFloat(params[1]),haxe_ui_toolkit_util_TypeParser.parseInt(params[2]),haxe_ui_toolkit_util_TypeParser.parseFloat(params[3]),haxe_ui_toolkit_util_TypeParser.parseFloat(params[4]),haxe_ui_toolkit_util_TypeParser.parseFloat(params[5]),haxe_ui_toolkit_util_TypeParser.parseFloat(params[6]),haxe_ui_toolkit_util_TypeParser.parseInt(params[7]),haxe_ui_toolkit_util_TypeParser.parseBool(params[8]),haxe_ui_toolkit_util_TypeParser.parseBool(params[9]),haxe_ui_toolkit_util_TypeParser.parseBool(params[10]));
	return filter;
};
haxe_ui_toolkit_util_FilterParser.createGlowFilter = function(params) {
	var filter = new openfl_filters_GlowFilter(haxe_ui_toolkit_util_TypeParser.parseInt(params[0]),haxe_ui_toolkit_util_TypeParser.parseFloat(params[1]),haxe_ui_toolkit_util_TypeParser.parseFloat(params[2]),haxe_ui_toolkit_util_TypeParser.parseFloat(params[3]),haxe_ui_toolkit_util_TypeParser.parseFloat(params[4]),haxe_ui_toolkit_util_TypeParser.parseInt(params[5]),haxe_ui_toolkit_util_TypeParser.parseBool(params[6]),haxe_ui_toolkit_util_TypeParser.parseBool(params[7]));
	return filter;
};
haxe_ui_toolkit_util_FilterParser.copyFilterDefaults = function(filterName,params) {
	var copy = [];
	var defaultParams = Reflect.field(haxe_ui_toolkit_util_FilterParser.filterParamDefaults,filterName);
	if(defaultParams != null) {
		var _g = 0;
		while(_g < defaultParams.length) {
			var p = defaultParams[_g];
			++_g;
			copy.push(p);
		}
	}
	if(params != null) {
		var n = 0;
		var _g1 = 0;
		while(_g1 < params.length) {
			var p1 = params[_g1];
			++_g1;
			copy[n] = p1;
			n++;
		}
	}
	return copy;
};
haxe_ui_toolkit_util_FilterParser.changeFilterQuality = function(filter,quality) {
	if(filter == null) return null;
	if(js_Boot.__instanceof(filter,openfl_filters_BlurFilter)) (js_Boot.__cast(filter , openfl_filters_BlurFilter)).set_quality(quality); else if(js_Boot.__instanceof(filter,openfl_filters_DropShadowFilter)) (js_Boot.__cast(filter , openfl_filters_DropShadowFilter)).set_quality(quality); else if(js_Boot.__instanceof(filter,openfl_filters_GlowFilter)) (js_Boot.__cast(filter , openfl_filters_GlowFilter)).set_quality(quality);
	return filter;
};
var haxe_ui_toolkit_util_Identifier = function() { };
$hxClasses["haxe.ui.toolkit.util.Identifier"] = haxe_ui_toolkit_util_Identifier;
haxe_ui_toolkit_util_Identifier.__name__ = ["haxe","ui","toolkit","util","Identifier"];
haxe_ui_toolkit_util_Identifier.createObjectId = function(instance) {
	return haxe_ui_toolkit_util_Identifier.createClassId(Type.getClass(instance));
};
haxe_ui_toolkit_util_Identifier.createClassId = function(type) {
	var className = Type.getClassName(type);
	var c = haxe_ui_toolkit_util_Identifier._objectCount.get(className);
	if(haxe_ui_toolkit_util_Identifier._objectCount.exists(className) == false) {
		haxe_ui_toolkit_util_Identifier._objectCount.set(className,-1);
		c = -1;
	}
	c++;
	haxe_ui_toolkit_util_Identifier._objectCount.set(className,c);
	var id = className + c;
	return id;
};
haxe_ui_toolkit_util_Identifier.guid = function() {
	return haxe_ui_toolkit_util_Identifier.S4() + haxe_ui_toolkit_util_Identifier.S4() + "-" + haxe_ui_toolkit_util_Identifier.S4() + "-" + haxe_ui_toolkit_util_Identifier.S4() + "-" + haxe_ui_toolkit_util_Identifier.S4() + "-" + haxe_ui_toolkit_util_Identifier.S4() + haxe_ui_toolkit_util_Identifier.S4() + haxe_ui_toolkit_util_Identifier.S4();
};
haxe_ui_toolkit_util_Identifier.S4 = function() {
	var n = (1 + Std.random(65536)) * 65536 | 0;
	var _this = StringTools.hex(n,4);
	return HxOverrides.substr(_this,0,4);
};
var haxe_ui_toolkit_util_StringUtil = function() { };
$hxClasses["haxe.ui.toolkit.util.StringUtil"] = haxe_ui_toolkit_util_StringUtil;
haxe_ui_toolkit_util_StringUtil.__name__ = ["haxe","ui","toolkit","util","StringUtil"];
haxe_ui_toolkit_util_StringUtil.capitalizeFirstLetter = function(s) {
	s = HxOverrides.substr(s,0,1).toUpperCase() + HxOverrides.substr(s,1,s.length);
	return s;
};
haxe_ui_toolkit_util_StringUtil.capitalizeHyphens = function(s) {
	var r = s;
	var n = r.indexOf("-");
	while(n != -1) {
		var before = HxOverrides.substr(r,0,n);
		var after = HxOverrides.substr(r,n + 1,r.length);
		r = before + haxe_ui_toolkit_util_StringUtil.capitalizeFirstLetter(after);
		n = r.indexOf("-",n + 1);
	}
	return r;
};
var haxe_ui_toolkit_util_TypeParser = function() { };
$hxClasses["haxe.ui.toolkit.util.TypeParser"] = haxe_ui_toolkit_util_TypeParser;
haxe_ui_toolkit_util_TypeParser.__name__ = ["haxe","ui","toolkit","util","TypeParser"];
haxe_ui_toolkit_util_TypeParser.parseInt = function(s) {
	var i = 0;
	if(s != null) {
		s = StringTools.trim(s);
		i = Std.parseInt(s);
	}
	return i;
};
haxe_ui_toolkit_util_TypeParser.parseFloat = function(s) {
	var f = 0;
	if(s != null) {
		s = StringTools.trim(s);
		f = parseFloat(s);
	}
	return f;
};
haxe_ui_toolkit_util_TypeParser.parseBool = function(s) {
	var b = false;
	if(s != null) {
		s = StringTools.trim(s);
		s = s.toLowerCase();
		if(s == "true" || s == "yes" || s == "1") b = true;
	}
	return b;
};
haxe_ui_toolkit_util_TypeParser.parseColor = function(s) {
	var c = 0;
	if(s != null) {
		s = StringTools.trim(s);
		if(StringTools.startsWith(s,"#")) s = "0x" + HxOverrides.substr(s,1,s.length - 1);
		c = Std.parseInt(s);
	}
	return c;
};
var haxe_ui_toolkit_util_Types = function() { };
$hxClasses["haxe.ui.toolkit.util.Types"] = haxe_ui_toolkit_util_Types;
haxe_ui_toolkit_util_Types.__name__ = ["haxe","ui","toolkit","util","Types"];
haxe_ui_toolkit_util_Types.resolveClass = function(className) {
	var clazz = Type.resolveClass(className);
	if(clazz == null) throw new js__$Boot_HaxeError("Cannot find class with name [" + className + "]");
	return clazz;
};
var haxe_ui_toolkit_util_XmlUtil = function() { };
$hxClasses["haxe.ui.toolkit.util.XmlUtil"] = haxe_ui_toolkit_util_XmlUtil;
haxe_ui_toolkit_util_XmlUtil.__name__ = ["haxe","ui","toolkit","util","XmlUtil"];
haxe_ui_toolkit_util_XmlUtil.getPathValues = function(xml,path) {
	var values = [];
	var parts = path.split("/");
	var _g = 0;
	while(_g < parts.length) {
		var p = parts[_g];
		++_g;
		if(p.length == 0) HxOverrides.remove(parts,p);
	}
	var matchToFind = parts[0];
	HxOverrides.remove(parts,matchToFind);
	if((function($this) {
		var $r;
		if(xml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
		$r = xml.nodeName;
		return $r;
	}(this)) == matchToFind) {
		if(parts.length > 1) {
			var $it0 = xml.elements();
			while( $it0.hasNext() ) {
				var child = $it0.next();
				values = values.concat(haxe_ui_toolkit_util_XmlUtil.getPathValues(child,parts.join("/")));
			}
		} else {
			matchToFind = parts.pop();
			if(StringTools.startsWith(matchToFind,"@")) {
				var attrName = HxOverrides.substr(matchToFind,1,matchToFind.length);
				var attrValue = xml.get(attrName);
				if(attrValue != null) values.push(attrValue);
			} else if(matchToFind == "text()") {
				var nodeValue = ((function($this) {
					var $r;
					if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + xml.nodeType);
					$r = xml.children[0];
					return $r;
				}(this))).get_nodeValue();
				if(nodeValue != null) values.push(nodeValue);
			}
		}
	}
	return values;
};
var haxe_ui_toolkit_util_pseudothreads_AsyncThreadCaller = function(runnable) {
	this._cancel = false;
	this._runs = 0;
	openfl_events_EventDispatcher.call(this);
	this._runnableWorker = runnable;
	this._runnableWorker.set_needToExit($bind(this,this.needToExit));
};
$hxClasses["haxe.ui.toolkit.util.pseudothreads.AsyncThreadCaller"] = haxe_ui_toolkit_util_pseudothreads_AsyncThreadCaller;
haxe_ui_toolkit_util_pseudothreads_AsyncThreadCaller.__name__ = ["haxe","ui","toolkit","util","pseudothreads","AsyncThreadCaller"];
haxe_ui_toolkit_util_pseudothreads_AsyncThreadCaller.__super__ = openfl_events_EventDispatcher;
haxe_ui_toolkit_util_pseudothreads_AsyncThreadCaller.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	start: function() {
		this._startTime = openfl_Lib.getTimer();
		openfl_Lib.current.stage.addEventListener(openfl_events_Event.ENTER_FRAME,$bind(this,this.run),false,100);
		this.run(null);
	}
	,cancel: function() {
		this._cancel = true;
	}
	,needToExit: function() {
		return this._cancel || openfl_Lib.getTimer() >= this._workerExitTime;
	}
	,run: function(event) {
		var frameRate = Math.floor(1000 / openfl_Lib.current.stage.get_frameRate());
		this._workerExitTime = openfl_Lib.getTimer() + frameRate * this._runnableWorker.get_runningTimeShare();
		this._runnableWorker.run();
		this._runs++;
		if(this._cancel == true) {
			this._endTime = openfl_Lib.getTimer();
			this.dispose();
			this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CANCEL));
		} else if(this._runnableWorker.get_isComplete()) {
			this._data = this._runnableWorker.get_data();
			this._endTime = openfl_Lib.getTimer();
			this.dispose();
			this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
		} else this.dispatchEvent(new openfl_events_ProgressEvent(openfl_events_ProgressEvent.PROGRESS,false,false,this._runnableWorker.get_progress(),this._runnableWorker.get_total()));
	}
	,dispose: function() {
		openfl_Lib.current.stage.removeEventListener(openfl_events_Event.ENTER_FRAME,$bind(this,this.run));
		this._runnableWorker = null;
	}
	,get_data: function() {
		return this._data;
	}
	,get_runs: function() {
		return this._runs;
	}
	,get_executionTime: function() {
		return this._endTime - this._startTime;
	}
	,get_worker: function() {
		return this._runnableWorker;
	}
	,__class__: haxe_ui_toolkit_util_pseudothreads_AsyncThreadCaller
	,__properties__: {get_worker:"get_worker",get_executionTime:"get_executionTime",get_runs:"get_runs",get_data:"get_data"}
});
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) strict = false;
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) p = 0;
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(!(c != c)) {
		switch(state) {
		case 0:
			switch(c) {
			case 10:case 13:case 9:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			switch(c) {
			case 60:
				state = 0;
				next = 2;
				break;
			default:
				start = p;
				state = 13;
				continue;
			}
			break;
		case 13:
			if(c == 60) {
				buf.addSub(str,start,p - start);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				nsubs++;
				state = 0;
				next = 2;
			} else if(c == 38) {
				buf.addSub(str,start,p - start);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				nsubs++;
				p += 2;
				state = 1;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") throw new js__$Boot_HaxeError("Expected <![CDATA[");
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") throw new js__$Boot_HaxeError("Expected <!DOCTYPE");
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) throw new js__$Boot_HaxeError("Expected <!--"); else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 63:
				state = 14;
				start = p;
				break;
			case 47:
				if(parent == null) throw new js__$Boot_HaxeError("Expected node name");
				start = p + 1;
				state = 0;
				next = 10;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) throw new js__$Boot_HaxeError("Expected node name");
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				nsubs++;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) throw new js__$Boot_HaxeError("Expected attribute name");
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) throw new js__$Boot_HaxeError("Duplicate attribute");
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			switch(c) {
			case 61:
				state = 0;
				next = 7;
				break;
			default:
				throw new js__$Boot_HaxeError("Expected =");
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError("Expected \"");
			}
			break;
		case 8:
			switch(c) {
			case 38:
				buf.addSub(str,start,p - start);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 62:
				if(strict) throw new js__$Boot_HaxeError("Invalid unescaped " + String.fromCharCode(c) + " in attribute value"); else if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			case 60:
				if(strict) throw new js__$Boot_HaxeError("Invalid unescaped " + String.fromCharCode(c) + " in attribute value"); else if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val2 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val2);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 11:
			switch(c) {
			case 62:
				state = 1;
				break;
			default:
				throw new js__$Boot_HaxeError("Expected >");
			}
			break;
		case 12:
			switch(c) {
			case 62:
				if(nsubs == 0) parent.addChild(Xml.createPCData(""));
				return p;
			default:
				throw new js__$Boot_HaxeError("Expected >");
			}
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) throw new js__$Boot_HaxeError("Expected node name");
				var v = HxOverrides.substr(str,start,p - start);
				if(v != (function($this) {
					var $r;
					if(parent.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					$r = parent.nodeName;
					return $r;
				}(this))) throw new js__$Boot_HaxeError("Expected </" + (function($this) {
					var $r;
					if(parent.nodeType != Xml.Element) throw "Bad node type, expected Element but found " + parent.nodeType;
					$r = parent.nodeName;
					return $r;
				}(this)) + ">");
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				var xml1 = Xml.createComment(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml1);
				nsubs++;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) nbrackets++; else if(c == 93) nbrackets--; else if(c == 62 && nbrackets == 0) {
				var xml2 = Xml.createDocType(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml2);
				nsubs++;
				state = 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				p++;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				var xml3 = Xml.createProcessingInstruction(str1);
				parent.addChild(xml3);
				nsubs++;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1;
					if(s.charCodeAt(1) == 120) c1 = Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)); else c1 = Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCharCode(c1);
				} else if(!haxe_xml_Parser.escapes.exists(s)) {
					if(strict) throw new js__$Boot_HaxeError("Undefined entity: " + s);
					buf.b += Std.string("&" + s + ";");
				} else buf.add(haxe_xml_Parser.escapes.get(s));
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) throw new js__$Boot_HaxeError("Invalid character in entity: " + String.fromCharCode(c));
				buf.b += "&";
				buf.addSub(str,start,p - start);
				p--;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = StringTools.fastCodeAt(str,++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			buf.addSub(str,start,p - start);
			var xml4 = Xml.createPCData(buf.b);
			parent.addChild(xml4);
			nsubs++;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		buf.addSub(str,start,p - start);
		var xml5 = Xml.createPCData(buf.b);
		parent.addChild(xml5);
		nsubs++;
		return p;
	}
	throw new js__$Boot_HaxeError("Unexpected end");
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = ["haxe","xml","Printer"];
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) pretty = false;
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		var _g = value.nodeType;
		switch(_g) {
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			this.write(StringTools.trim((function($this) {
				var $r;
				if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
				$r = value.nodeValue;
				return $r;
			}(this))));
			this.output.b += "]]>";
			if(this.pretty) this.output.b += "";
			break;
		case 3:
			var commentContent;
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			commentContent = value.nodeValue;
			commentContent = new EReg("[\n\r\t]+","g").replace(commentContent,"");
			commentContent = "<!--" + commentContent + "-->";
			if(tabs == null) this.output.b += "null"; else this.output.b += "" + tabs;
			this.write(StringTools.trim(commentContent));
			if(this.pretty) this.output.b += "";
			break;
		case 6:
			var $it0 = (function($this) {
				var $r;
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
				$r = HxOverrides.iter(value.children);
				return $r;
			}(this));
			while( $it0.hasNext() ) {
				var child = $it0.next();
				this.writeNode(child,tabs);
			}
			break;
		case 0:
			this.output.b += Std.string(tabs + "<");
			this.write((function($this) {
				var $r;
				if(value.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
				$r = value.nodeName;
				return $r;
			}(this)));
			var $it1 = value.attributes();
			while( $it1.hasNext() ) {
				var attribute = $it1.next();
				this.output.b += Std.string(" " + attribute + "=\"");
				this.write(StringTools.htmlEscape(value.get(attribute),true));
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) this.output.b += "";
				var $it2 = (function($this) {
					var $r;
					if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
					$r = HxOverrides.iter(value.children);
					return $r;
				}(this));
				while( $it2.hasNext() ) {
					var child1 = $it2.next();
					this.writeNode(child1,this.pretty?tabs + "\t":tabs);
				}
				this.output.b += Std.string(tabs + "</");
				this.write((function($this) {
					var $r;
					if(value.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
					$r = value.nodeName;
					return $r;
				}(this)));
				this.output.b += ">";
				if(this.pretty) this.output.b += "";
			} else {
				this.output.b += "/>";
				if(this.pretty) this.output.b += "";
			}
			break;
		case 1:
			var nodeValue;
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				this.write(tabs + StringTools.htmlEscape(nodeValue));
				if(this.pretty) this.output.b += "";
			}
			break;
		case 5:
			this.write("<?" + (function($this) {
				var $r;
				if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
				$r = value.nodeValue;
				return $r;
			}(this)) + "?>");
			break;
		case 4:
			this.write("<!DOCTYPE " + (function($this) {
				var $r;
				if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
				$r = value.nodeValue;
				return $r;
			}(this)) + ">");
			break;
		}
	}
	,write: function(input) {
		if(input == null) this.output.b += "null"; else this.output.b += "" + input;
	}
	,hasChildren: function(value) {
		var $it0 = (function($this) {
			var $r;
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
			$r = HxOverrides.iter(value.children);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var child = $it0.next();
			var _g = child.nodeType;
			switch(_g) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(StringTools.ltrim((function($this) {
					var $r;
					if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + child.nodeType);
					$r = child.nodeValue;
					return $r;
				}(this))).length != 0) return true;
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var hscript_Const = $hxClasses["hscript.Const"] = { __ename__ : true, __constructs__ : ["CInt","CFloat","CString"] };
hscript_Const.CInt = function(v) { var $x = ["CInt",0,v]; $x.__enum__ = hscript_Const; $x.toString = $estr; return $x; };
hscript_Const.CFloat = function(f) { var $x = ["CFloat",1,f]; $x.__enum__ = hscript_Const; $x.toString = $estr; return $x; };
hscript_Const.CString = function(s) { var $x = ["CString",2,s]; $x.__enum__ = hscript_Const; $x.toString = $estr; return $x; };
var hscript_Expr = $hxClasses["hscript.Expr"] = { __ename__ : true, __constructs__ : ["EConst","EIdent","EVar","EParent","EBlock","EField","EBinop","EUnop","ECall","EIf","EWhile","EFor","EBreak","EContinue","EFunction","EReturn","EArray","EArrayDecl","ENew","EThrow","ETry","EObject","ETernary","ESwitch"] };
hscript_Expr.EConst = function(c) { var $x = ["EConst",0,c]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EIdent = function(v) { var $x = ["EIdent",1,v]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EVar = function(n,t,e) { var $x = ["EVar",2,n,t,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EParent = function(e) { var $x = ["EParent",3,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EBlock = function(e) { var $x = ["EBlock",4,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EField = function(e,f) { var $x = ["EField",5,e,f]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EBinop = function(op,e1,e2) { var $x = ["EBinop",6,op,e1,e2]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EUnop = function(op,prefix,e) { var $x = ["EUnop",7,op,prefix,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.ECall = function(e,params) { var $x = ["ECall",8,e,params]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EIf = function(cond,e1,e2) { var $x = ["EIf",9,cond,e1,e2]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EWhile = function(cond,e) { var $x = ["EWhile",10,cond,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EFor = function(v,it,e) { var $x = ["EFor",11,v,it,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EBreak = ["EBreak",12];
hscript_Expr.EBreak.toString = $estr;
hscript_Expr.EBreak.__enum__ = hscript_Expr;
hscript_Expr.EContinue = ["EContinue",13];
hscript_Expr.EContinue.toString = $estr;
hscript_Expr.EContinue.__enum__ = hscript_Expr;
hscript_Expr.EFunction = function(args,e,name,ret) { var $x = ["EFunction",14,args,e,name,ret]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EReturn = function(e) { var $x = ["EReturn",15,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EArray = function(e,index) { var $x = ["EArray",16,e,index]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EArrayDecl = function(e) { var $x = ["EArrayDecl",17,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.ENew = function(cl,params) { var $x = ["ENew",18,cl,params]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EThrow = function(e) { var $x = ["EThrow",19,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.ETry = function(e,v,t,ecatch) { var $x = ["ETry",20,e,v,t,ecatch]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EObject = function(fl) { var $x = ["EObject",21,fl]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.ETernary = function(cond,e1,e2) { var $x = ["ETernary",22,cond,e1,e2]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.ESwitch = function(e,cases,defaultExpr) { var $x = ["ESwitch",23,e,cases,defaultExpr]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
var hscript_CType = $hxClasses["hscript.CType"] = { __ename__ : true, __constructs__ : ["CTPath","CTFun","CTAnon","CTParent"] };
hscript_CType.CTPath = function(path,params) { var $x = ["CTPath",0,path,params]; $x.__enum__ = hscript_CType; $x.toString = $estr; return $x; };
hscript_CType.CTFun = function(args,ret) { var $x = ["CTFun",1,args,ret]; $x.__enum__ = hscript_CType; $x.toString = $estr; return $x; };
hscript_CType.CTAnon = function(fields) { var $x = ["CTAnon",2,fields]; $x.__enum__ = hscript_CType; $x.toString = $estr; return $x; };
hscript_CType.CTParent = function(t) { var $x = ["CTParent",3,t]; $x.__enum__ = hscript_CType; $x.toString = $estr; return $x; };
var hscript_Error = $hxClasses["hscript.Error"] = { __ename__ : true, __constructs__ : ["EInvalidChar","EUnexpected","EUnterminatedString","EUnterminatedComment","EUnknownVariable","EInvalidIterator","EInvalidOp","EInvalidAccess"] };
hscript_Error.EInvalidChar = function(c) { var $x = ["EInvalidChar",0,c]; $x.__enum__ = hscript_Error; $x.toString = $estr; return $x; };
hscript_Error.EUnexpected = function(s) { var $x = ["EUnexpected",1,s]; $x.__enum__ = hscript_Error; $x.toString = $estr; return $x; };
hscript_Error.EUnterminatedString = ["EUnterminatedString",2];
hscript_Error.EUnterminatedString.toString = $estr;
hscript_Error.EUnterminatedString.__enum__ = hscript_Error;
hscript_Error.EUnterminatedComment = ["EUnterminatedComment",3];
hscript_Error.EUnterminatedComment.toString = $estr;
hscript_Error.EUnterminatedComment.__enum__ = hscript_Error;
hscript_Error.EUnknownVariable = function(v) { var $x = ["EUnknownVariable",4,v]; $x.__enum__ = hscript_Error; $x.toString = $estr; return $x; };
hscript_Error.EInvalidIterator = function(v) { var $x = ["EInvalidIterator",5,v]; $x.__enum__ = hscript_Error; $x.toString = $estr; return $x; };
hscript_Error.EInvalidOp = function(op) { var $x = ["EInvalidOp",6,op]; $x.__enum__ = hscript_Error; $x.toString = $estr; return $x; };
hscript_Error.EInvalidAccess = function(f) { var $x = ["EInvalidAccess",7,f]; $x.__enum__ = hscript_Error; $x.toString = $estr; return $x; };
var hscript__$Interp_Stop = $hxClasses["hscript._Interp.Stop"] = { __ename__ : true, __constructs__ : ["SBreak","SContinue","SReturn"] };
hscript__$Interp_Stop.SBreak = ["SBreak",0];
hscript__$Interp_Stop.SBreak.toString = $estr;
hscript__$Interp_Stop.SBreak.__enum__ = hscript__$Interp_Stop;
hscript__$Interp_Stop.SContinue = ["SContinue",1];
hscript__$Interp_Stop.SContinue.toString = $estr;
hscript__$Interp_Stop.SContinue.__enum__ = hscript__$Interp_Stop;
hscript__$Interp_Stop.SReturn = function(v) { var $x = ["SReturn",2,v]; $x.__enum__ = hscript__$Interp_Stop; $x.toString = $estr; return $x; };
var hscript_Token = $hxClasses["hscript.Token"] = { __ename__ : true, __constructs__ : ["TEof","TConst","TId","TOp","TPOpen","TPClose","TBrOpen","TBrClose","TDot","TComma","TSemicolon","TBkOpen","TBkClose","TQuestion","TDoubleDot"] };
hscript_Token.TEof = ["TEof",0];
hscript_Token.TEof.toString = $estr;
hscript_Token.TEof.__enum__ = hscript_Token;
hscript_Token.TConst = function(c) { var $x = ["TConst",1,c]; $x.__enum__ = hscript_Token; $x.toString = $estr; return $x; };
hscript_Token.TId = function(s) { var $x = ["TId",2,s]; $x.__enum__ = hscript_Token; $x.toString = $estr; return $x; };
hscript_Token.TOp = function(s) { var $x = ["TOp",3,s]; $x.__enum__ = hscript_Token; $x.toString = $estr; return $x; };
hscript_Token.TPOpen = ["TPOpen",4];
hscript_Token.TPOpen.toString = $estr;
hscript_Token.TPOpen.__enum__ = hscript_Token;
hscript_Token.TPClose = ["TPClose",5];
hscript_Token.TPClose.toString = $estr;
hscript_Token.TPClose.__enum__ = hscript_Token;
hscript_Token.TBrOpen = ["TBrOpen",6];
hscript_Token.TBrOpen.toString = $estr;
hscript_Token.TBrOpen.__enum__ = hscript_Token;
hscript_Token.TBrClose = ["TBrClose",7];
hscript_Token.TBrClose.toString = $estr;
hscript_Token.TBrClose.__enum__ = hscript_Token;
hscript_Token.TDot = ["TDot",8];
hscript_Token.TDot.toString = $estr;
hscript_Token.TDot.__enum__ = hscript_Token;
hscript_Token.TComma = ["TComma",9];
hscript_Token.TComma.toString = $estr;
hscript_Token.TComma.__enum__ = hscript_Token;
hscript_Token.TSemicolon = ["TSemicolon",10];
hscript_Token.TSemicolon.toString = $estr;
hscript_Token.TSemicolon.__enum__ = hscript_Token;
hscript_Token.TBkOpen = ["TBkOpen",11];
hscript_Token.TBkOpen.toString = $estr;
hscript_Token.TBkOpen.__enum__ = hscript_Token;
hscript_Token.TBkClose = ["TBkClose",12];
hscript_Token.TBkClose.toString = $estr;
hscript_Token.TBkClose.__enum__ = hscript_Token;
hscript_Token.TQuestion = ["TQuestion",13];
hscript_Token.TQuestion.toString = $estr;
hscript_Token.TQuestion.__enum__ = hscript_Token;
hscript_Token.TDoubleDot = ["TDoubleDot",14];
hscript_Token.TDoubleDot.toString = $estr;
hscript_Token.TDoubleDot.__enum__ = hscript_Token;
var hscript_Parser = function() {
	this.uid = 0;
	this.line = 1;
	this.opChars = "+*/-=!><&|^%~";
	this.identChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";
	var priorities = [["%"],["*","/"],["+","-"],["<<",">>",">>>"],["|","&","^"],["==","!=",">","<",">=","<="],["..."],["&&"],["||"],["=","+=","-=","*=","/=","%=","<<=",">>=",">>>=","|=","&=","^="]];
	this.opPriority = new haxe_ds_StringMap();
	this.opRightAssoc = new haxe_ds_StringMap();
	this.unops = new haxe_ds_StringMap();
	var _g1 = 0;
	var _g = priorities.length;
	while(_g1 < _g) {
		var i = _g1++;
		var _g2 = 0;
		var _g3 = priorities[i];
		while(_g2 < _g3.length) {
			var x = _g3[_g2];
			++_g2;
			this.opPriority.set(x,i);
			if(i == 9) this.opRightAssoc.set(x,true);
		}
	}
	var _g4 = 0;
	var _g11 = ["!","++","--","-","~"];
	while(_g4 < _g11.length) {
		var x1 = _g11[_g4];
		++_g4;
		this.unops.set(x1,x1 == "++" || x1 == "--");
	}
};
$hxClasses["hscript.Parser"] = hscript_Parser;
hscript_Parser.__name__ = ["hscript","Parser"];
hscript_Parser.prototype = {
	error: function(err,pmin,pmax) {
		throw new js__$Boot_HaxeError(err);
	}
	,invalidChar: function(c) {
		this.error(hscript_Error.EInvalidChar(c),0,0);
	}
	,parseString: function(s) {
		this.line = 1;
		this.uid = 0;
		return this.parse(new haxe_io_StringInput(s));
	}
	,parse: function(s) {
		this.tokens = new haxe_ds_GenericStack();
		this["char"] = -1;
		this.input = s;
		this.ops = [];
		this.idents = [];
		var _g1 = 0;
		var _g = this.opChars.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.ops[HxOverrides.cca(this.opChars,i)] = true;
		}
		var _g11 = 0;
		var _g2 = this.identChars.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.idents[HxOverrides.cca(this.identChars,i1)] = true;
		}
		var a = [];
		while(true) {
			var tk = this.token();
			if(tk == hscript_Token.TEof) break;
			this.tokens.add(tk);
			a.push(this.parseFullExpr());
		}
		if(a.length == 1) return a[0]; else return this.mk(hscript_Expr.EBlock(a),0,null);
	}
	,unexpected: function(tk) {
		this.error(hscript_Error.EUnexpected(this.tokenString(tk)),0,0);
		return null;
	}
	,push: function(tk) {
		this.tokens.add(tk);
	}
	,ensure: function(tk) {
		var t = this.token();
		if(t != tk) this.unexpected(t);
	}
	,expr: function(e) {
		return e;
	}
	,pmin: function(e) {
		return 0;
	}
	,pmax: function(e) {
		return 0;
	}
	,mk: function(e,pmin,pmax) {
		return e;
	}
	,isBlock: function(e) {
		switch(e[1]) {
		case 4:case 21:case 23:
			return true;
		case 14:
			var e1 = e[3];
			return this.isBlock(e1);
		case 2:
			var e2 = e[4];
			return e2 != null && this.isBlock(e2);
		case 9:
			var e21 = e[4];
			var e11 = e[3];
			if(e21 != null) return this.isBlock(e21); else return this.isBlock(e11);
			break;
		case 6:
			var e3 = e[4];
			return this.isBlock(e3);
		case 7:
			var e4 = e[4];
			var prefix = e[3];
			return !prefix && this.isBlock(e4);
		case 10:
			var e5 = e[3];
			return this.isBlock(e5);
		case 11:
			var e6 = e[4];
			return this.isBlock(e6);
		case 15:
			var e7 = e[2];
			return e7 != null && this.isBlock(e7);
		case 20:
			var e8 = e[5];
			return this.isBlock(e8);
		default:
			return false;
		}
	}
	,parseFullExpr: function() {
		var e = this.parseExpr();
		var tk = this.token();
		if(tk != hscript_Token.TSemicolon && tk != hscript_Token.TEof) {
			if(this.isBlock(e)) this.tokens.add(tk); else this.unexpected(tk);
		}
		return e;
	}
	,parseObject: function(p1) {
		var fl = [];
		try {
			while(true) {
				var tk = this.token();
				var id = null;
				switch(tk[1]) {
				case 2:
					var i = tk[2];
					id = i;
					break;
				case 1:
					var c = tk[2];
					if(!this.allowJSON) this.unexpected(tk);
					switch(c[1]) {
					case 2:
						var s = c[2];
						id = s;
						break;
					default:
						this.unexpected(tk);
					}
					break;
				case 7:
					throw "__break__";
					break;
				default:
					this.unexpected(tk);
				}
				this.ensure(hscript_Token.TDoubleDot);
				fl.push({ name : id, e : this.parseExpr()});
				tk = this.token();
				switch(tk[1]) {
				case 7:
					throw "__break__";
					break;
				case 9:
					break;
				default:
					this.unexpected(tk);
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		return this.parseExprNext(this.mk(hscript_Expr.EObject(fl),p1,null));
	}
	,parseExpr: function() {
		var tk = this.token();
		switch(tk[1]) {
		case 2:
			var id = tk[2];
			var e = this.parseStructure(id);
			if(e == null) e = this.mk(hscript_Expr.EIdent(id),null,null);
			return this.parseExprNext(e);
		case 1:
			var c = tk[2];
			return this.parseExprNext(this.mk(hscript_Expr.EConst(c),null,null));
		case 4:
			var e1 = this.parseExpr();
			this.ensure(hscript_Token.TPClose);
			return this.parseExprNext(this.mk(hscript_Expr.EParent(e1),0,0));
		case 6:
			tk = this.token();
			switch(tk[1]) {
			case 7:
				return this.parseExprNext(this.mk(hscript_Expr.EObject([]),0,null));
			case 2:
				var tk2 = this.token();
				this.tokens.add(tk2);
				this.tokens.add(tk);
				switch(tk2[1]) {
				case 14:
					return this.parseExprNext(this.parseObject(0));
				default:
				}
				break;
			case 1:
				var c1 = tk[2];
				if(this.allowJSON) switch(c1[1]) {
				case 2:
					var tk21 = this.token();
					this.tokens.add(tk21);
					this.tokens.add(tk);
					switch(tk21[1]) {
					case 14:
						return this.parseExprNext(this.parseObject(0));
					default:
					}
					break;
				default:
					this.tokens.add(tk);
				} else this.tokens.add(tk);
				break;
			default:
				this.tokens.add(tk);
			}
			var a = [];
			while(true) {
				a.push(this.parseFullExpr());
				tk = this.token();
				if(tk == hscript_Token.TBrClose) break;
				this.tokens.add(tk);
			}
			return this.mk(hscript_Expr.EBlock(a),0,null);
		case 3:
			var op = tk[2];
			if(this.unops.exists(op)) return this.makeUnop(op,this.parseExpr());
			return this.unexpected(tk);
		case 11:
			var a1 = [];
			tk = this.token();
			while(tk != hscript_Token.TBkClose) {
				this.tokens.add(tk);
				a1.push(this.parseExpr());
				tk = this.token();
				if(tk == hscript_Token.TComma) tk = this.token();
			}
			if(a1.length == 1) {
				var _g = a1[0];
				switch(_g[1]) {
				case 11:case 10:
					var tmp = "__a_" + this.uid++;
					var e2 = this.mk(hscript_Expr.EBlock([this.mk(hscript_Expr.EVar(tmp,null,this.mk(hscript_Expr.EArrayDecl([]),0,null)),0,null),this.mapCompr(tmp,a1[0]),this.mk(hscript_Expr.EIdent(tmp),0,null)]),0,null);
					return this.parseExprNext(e2);
				default:
				}
			}
			return this.parseExprNext(this.mk(hscript_Expr.EArrayDecl(a1),0,null));
		default:
			return this.unexpected(tk);
		}
	}
	,mapCompr: function(tmp,e) {
		var edef;
		switch(e[1]) {
		case 11:
			var e2 = e[4];
			var it = e[3];
			var v = e[2];
			edef = hscript_Expr.EFor(v,it,this.mapCompr(tmp,e2));
			break;
		case 10:
			var e21 = e[3];
			var cond = e[2];
			edef = hscript_Expr.EWhile(cond,this.mapCompr(tmp,e21));
			break;
		case 9:
			var e22 = e[4];
			var e1 = e[3];
			var cond1 = e[2];
			if(e22 == null) edef = hscript_Expr.EIf(cond1,this.mapCompr(tmp,e1),null); else edef = hscript_Expr.ECall(this.mk(hscript_Expr.EField(this.mk(hscript_Expr.EIdent(tmp),0,0),"push"),0,0),[e]);
			break;
		case 4:
			switch(e[2].length) {
			case 1:
				var e3 = e[2][0];
				edef = hscript_Expr.EBlock([this.mapCompr(tmp,e3)]);
				break;
			default:
				edef = hscript_Expr.ECall(this.mk(hscript_Expr.EField(this.mk(hscript_Expr.EIdent(tmp),0,0),"push"),0,0),[e]);
			}
			break;
		case 3:
			var e23 = e[2];
			edef = hscript_Expr.EParent(this.mapCompr(tmp,e23));
			break;
		default:
			edef = hscript_Expr.ECall(this.mk(hscript_Expr.EField(this.mk(hscript_Expr.EIdent(tmp),0,0),"push"),0,0),[e]);
		}
		return edef;
	}
	,makeUnop: function(op,e) {
		switch(e[1]) {
		case 6:
			var e2 = e[4];
			var e1 = e[3];
			var bop = e[2];
			return this.mk(hscript_Expr.EBinop(bop,this.makeUnop(op,e1),e2),0,0);
		case 22:
			var e3 = e[4];
			var e21 = e[3];
			var e11 = e[2];
			return this.mk(hscript_Expr.ETernary(this.makeUnop(op,e11),e21,e3),0,0);
		default:
			return this.mk(hscript_Expr.EUnop(op,true,e),0,0);
		}
	}
	,makeBinop: function(op,e1,e) {
		switch(e[1]) {
		case 6:
			var e3 = e[4];
			var e2 = e[3];
			var op2 = e[2];
			if(this.opPriority.get(op) <= this.opPriority.get(op2) && !this.opRightAssoc.exists(op)) return this.mk(hscript_Expr.EBinop(op2,this.makeBinop(op,e1,e2),e3),0,0); else return this.mk(hscript_Expr.EBinop(op,e1,e),0,0);
			break;
		case 22:
			var e4 = e[4];
			var e31 = e[3];
			var e21 = e[2];
			if(this.opRightAssoc.exists(op)) return this.mk(hscript_Expr.EBinop(op,e1,e),0,0); else return this.mk(hscript_Expr.ETernary(this.makeBinop(op,e1,e21),e31,e4),0,0);
			break;
		default:
			return this.mk(hscript_Expr.EBinop(op,e1,e),0,0);
		}
	}
	,parseStructure: function(id) {
		switch(id) {
		case "if":
			this.ensure(hscript_Token.TPOpen);
			var cond = this.parseExpr();
			this.ensure(hscript_Token.TPClose);
			var e1 = this.parseExpr();
			var e2 = null;
			var semic = false;
			var tk = this.token();
			if(tk == hscript_Token.TSemicolon) {
				semic = true;
				tk = this.token();
			}
			if(Type.enumEq(tk,hscript_Token.TId("else"))) e2 = this.parseExpr(); else {
				this.tokens.add(tk);
				if(semic) this.tokens.add(hscript_Token.TSemicolon);
			}
			return this.mk(hscript_Expr.EIf(cond,e1,e2),0,e2 == null?0:0);
		case "var":
			var tk1 = this.token();
			var ident = null;
			switch(tk1[1]) {
			case 2:
				var id1 = tk1[2];
				ident = id1;
				break;
			default:
				this.unexpected(tk1);
			}
			tk1 = this.token();
			var t = null;
			if(tk1 == hscript_Token.TDoubleDot && this.allowTypes) {
				t = this.parseType();
				tk1 = this.token();
			}
			var e = null;
			if(Type.enumEq(tk1,hscript_Token.TOp("="))) e = this.parseExpr(); else this.tokens.add(tk1);
			return this.mk(hscript_Expr.EVar(ident,t,e),0,e == null?0:0);
		case "while":
			var econd = this.parseExpr();
			var e3 = this.parseExpr();
			return this.mk(hscript_Expr.EWhile(econd,e3),0,0);
		case "for":
			this.ensure(hscript_Token.TPOpen);
			var tk2 = this.token();
			var vname = null;
			switch(tk2[1]) {
			case 2:
				var id2 = tk2[2];
				vname = id2;
				break;
			default:
				this.unexpected(tk2);
			}
			tk2 = this.token();
			if(!Type.enumEq(tk2,hscript_Token.TId("in"))) this.unexpected(tk2);
			var eiter = this.parseExpr();
			this.ensure(hscript_Token.TPClose);
			var e4 = this.parseExpr();
			return this.mk(hscript_Expr.EFor(vname,eiter,e4),0,0);
		case "break":
			return hscript_Expr.EBreak;
		case "continue":
			return hscript_Expr.EContinue;
		case "else":
			return this.unexpected(hscript_Token.TId(id));
		case "function":
			var tk3 = this.token();
			var name = null;
			switch(tk3[1]) {
			case 2:
				var id3 = tk3[2];
				name = id3;
				break;
			default:
				this.tokens.add(tk3);
			}
			this.ensure(hscript_Token.TPOpen);
			var args = [];
			tk3 = this.token();
			if(tk3 != hscript_Token.TPClose) {
				var done = false;
				while(!done) {
					var name1 = null;
					var opt = false;
					switch(tk3[1]) {
					case 13:
						opt = true;
						tk3 = this.token();
						break;
					default:
					}
					switch(tk3[1]) {
					case 2:
						var id4 = tk3[2];
						name1 = id4;
						break;
					default:
						this.unexpected(tk3);
					}
					tk3 = this.token();
					var arg = { name : name1};
					args.push(arg);
					if(opt) arg.opt = true;
					if(tk3 == hscript_Token.TDoubleDot && this.allowTypes) {
						arg.t = this.parseType();
						tk3 = this.token();
					}
					switch(tk3[1]) {
					case 9:
						tk3 = this.token();
						break;
					case 5:
						done = true;
						break;
					default:
						this.unexpected(tk3);
					}
				}
			}
			var ret = null;
			if(this.allowTypes) {
				tk3 = this.token();
				if(tk3 != hscript_Token.TDoubleDot) this.tokens.add(tk3); else ret = this.parseType();
			}
			var body = this.parseExpr();
			return this.mk(hscript_Expr.EFunction(args,body,name,ret),0,0);
		case "return":
			var tk4 = this.token();
			this.tokens.add(tk4);
			var e5;
			if(tk4 == hscript_Token.TSemicolon) e5 = null; else e5 = this.parseExpr();
			return this.mk(hscript_Expr.EReturn(e5),0,e5 == null?0:0);
		case "new":
			var a = [];
			var tk5 = this.token();
			switch(tk5[1]) {
			case 2:
				var id5 = tk5[2];
				a.push(id5);
				break;
			default:
				this.unexpected(tk5);
			}
			var next = true;
			while(next) {
				tk5 = this.token();
				switch(tk5[1]) {
				case 8:
					tk5 = this.token();
					switch(tk5[1]) {
					case 2:
						var id6 = tk5[2];
						a.push(id6);
						break;
					default:
						this.unexpected(tk5);
					}
					break;
				case 4:
					next = false;
					break;
				default:
					this.unexpected(tk5);
				}
			}
			var args1 = this.parseExprList(hscript_Token.TPClose);
			return this.mk(hscript_Expr.ENew(a.join("."),args1),0,null);
		case "throw":
			var e6 = this.parseExpr();
			return this.mk(hscript_Expr.EThrow(e6),0,0);
		case "try":
			var e7 = this.parseExpr();
			var tk6 = this.token();
			if(!Type.enumEq(tk6,hscript_Token.TId("catch"))) this.unexpected(tk6);
			this.ensure(hscript_Token.TPOpen);
			tk6 = this.token();
			var vname1;
			switch(tk6[1]) {
			case 2:
				var id7 = tk6[2];
				vname1 = id7;
				break;
			default:
				vname1 = this.unexpected(tk6);
			}
			this.ensure(hscript_Token.TDoubleDot);
			var t1 = null;
			if(this.allowTypes) t1 = this.parseType(); else {
				tk6 = this.token();
				if(!Type.enumEq(tk6,hscript_Token.TId("Dynamic"))) this.unexpected(tk6);
			}
			this.ensure(hscript_Token.TPClose);
			var ec = this.parseExpr();
			return this.mk(hscript_Expr.ETry(e7,vname1,t1,ec),0,0);
		case "switch":
			var e8 = this.parseExpr();
			var def = null;
			var cases = [];
			this.ensure(hscript_Token.TBrOpen);
			try {
				while(true) {
					var tk7 = this.token();
					switch(tk7[1]) {
					case 2:
						switch(tk7[2]) {
						case "case":
							var c = { values : [], expr : null};
							cases.push(c);
							try {
								while(true) {
									var e9 = this.parseExpr();
									c.values.push(e9);
									tk7 = this.token();
									switch(tk7[1]) {
									case 9:
										break;
									case 14:
										throw "__break__";
										break;
									default:
										this.unexpected(tk7);
									}
								}
							} catch( e ) { if( e != "__break__" ) throw e; }
							var exprs = [];
							try {
								while(true) {
									tk7 = this.token();
									this.tokens.add(tk7);
									switch(tk7[1]) {
									case 2:
										switch(tk7[2]) {
										case "case":case "default":
											throw "__break__";
											break;
										default:
											exprs.push(this.parseFullExpr());
										}
										break;
									case 7:
										throw "__break__";
										break;
									default:
										exprs.push(this.parseFullExpr());
									}
								}
							} catch( e ) { if( e != "__break__" ) throw e; }
							if(exprs.length == 1) c.expr = exprs[0]; else if(exprs.length == 0) c.expr = this.mk(hscript_Expr.EBlock([]),0,0); else c.expr = this.mk(hscript_Expr.EBlock(exprs),0,0);
							break;
						case "default":
							if(def != null) this.unexpected(tk7);
							this.ensure(hscript_Token.TDoubleDot);
							var exprs1 = [];
							try {
								while(true) {
									tk7 = this.token();
									this.tokens.add(tk7);
									switch(tk7[1]) {
									case 2:
										switch(tk7[2]) {
										case "case":case "default":
											throw "__break__";
											break;
										default:
											exprs1.push(this.parseFullExpr());
										}
										break;
									case 7:
										throw "__break__";
										break;
									default:
										exprs1.push(this.parseFullExpr());
									}
								}
							} catch( e ) { if( e != "__break__" ) throw e; }
							if(exprs1.length == 1) def = exprs1[0]; else if(exprs1.length == 0) def = this.mk(hscript_Expr.EBlock([]),0,0); else def = this.mk(hscript_Expr.EBlock(exprs1),0,0);
							break;
						default:
							this.unexpected(tk7);
						}
						break;
					case 7:
						throw "__break__";
						break;
					default:
						this.unexpected(tk7);
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			return this.mk(hscript_Expr.ESwitch(e8,cases,def),0,0);
		default:
			return null;
		}
	}
	,parseExprNext: function(e1) {
		var tk = this.token();
		switch(tk[1]) {
		case 3:
			var op = tk[2];
			if(this.unops.get(op)) {
				if(this.isBlock(e1) || (function($this) {
					var $r;
					switch(e1[1]) {
					case 3:
						$r = true;
						break;
					default:
						$r = false;
					}
					return $r;
				}(this))) {
					this.tokens.add(tk);
					return e1;
				}
				return this.parseExprNext(this.mk(hscript_Expr.EUnop(op,false,e1),0,null));
			}
			return this.makeBinop(op,e1,this.parseExpr());
		case 8:
			tk = this.token();
			var field = null;
			switch(tk[1]) {
			case 2:
				var id = tk[2];
				field = id;
				break;
			default:
				this.unexpected(tk);
			}
			return this.parseExprNext(this.mk(hscript_Expr.EField(e1,field),0,null));
		case 4:
			return this.parseExprNext(this.mk(hscript_Expr.ECall(e1,this.parseExprList(hscript_Token.TPClose)),0,null));
		case 11:
			var e2 = this.parseExpr();
			this.ensure(hscript_Token.TBkClose);
			return this.parseExprNext(this.mk(hscript_Expr.EArray(e1,e2),0,null));
		case 13:
			var e21 = this.parseExpr();
			this.ensure(hscript_Token.TDoubleDot);
			var e3 = this.parseExpr();
			return this.mk(hscript_Expr.ETernary(e1,e21,e3),0,0);
		default:
			this.tokens.add(tk);
			return e1;
		}
	}
	,parseType: function() {
		var t = this.token();
		switch(t[1]) {
		case 2:
			var v = t[2];
			var path = [v];
			while(true) {
				t = this.token();
				if(t != hscript_Token.TDot) break;
				t = this.token();
				switch(t[1]) {
				case 2:
					var v1 = t[2];
					path.push(v1);
					break;
				default:
					this.unexpected(t);
				}
			}
			var params = null;
			switch(t[1]) {
			case 3:
				var op = t[2];
				if(op == "<") {
					params = [];
					try {
						while(true) {
							params.push(this.parseType());
							t = this.token();
							switch(t[1]) {
							case 9:
								continue;
								break;
							case 3:
								var op1 = t[2];
								if(op1 == ">") throw "__break__";
								break;
							default:
							}
							this.unexpected(t);
						}
					} catch( e ) { if( e != "__break__" ) throw e; }
				} else this.tokens.add(t);
				break;
			default:
				this.tokens.add(t);
			}
			return this.parseTypeNext(hscript_CType.CTPath(path,params));
		case 4:
			var t1 = this.parseType();
			this.ensure(hscript_Token.TPClose);
			return this.parseTypeNext(hscript_CType.CTParent(t1));
		case 6:
			var fields = [];
			try {
				while(true) {
					t = this.token();
					switch(t[1]) {
					case 7:
						throw "__break__";
						break;
					case 2:
						var name = t[2];
						this.ensure(hscript_Token.TDoubleDot);
						fields.push({ name : name, t : this.parseType()});
						t = this.token();
						switch(t[1]) {
						case 9:
							break;
						case 7:
							throw "__break__";
							break;
						default:
							this.unexpected(t);
						}
						break;
					default:
						this.unexpected(t);
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			return this.parseTypeNext(hscript_CType.CTAnon(fields));
		default:
			return this.unexpected(t);
		}
	}
	,parseTypeNext: function(t) {
		var tk = this.token();
		switch(tk[1]) {
		case 3:
			var op = tk[2];
			if(op != "->") {
				this.tokens.add(tk);
				return t;
			}
			break;
		default:
			this.tokens.add(tk);
			return t;
		}
		var t2 = this.parseType();
		switch(t2[1]) {
		case 1:
			var args = t2[2];
			args.unshift(t);
			return t2;
		default:
			return hscript_CType.CTFun([t],t2);
		}
	}
	,parseExprList: function(etk) {
		var args = [];
		var tk = this.token();
		if(tk == etk) return args;
		this.tokens.add(tk);
		try {
			while(true) {
				args.push(this.parseExpr());
				tk = this.token();
				switch(tk[1]) {
				case 9:
					break;
				default:
					if(tk == etk) throw "__break__";
					this.unexpected(tk);
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		return args;
	}
	,incPos: function() {
	}
	,readChar: function() {
		try {
			return this.input.readByte();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return 0;
		}
	}
	,readString: function(until) {
		var c = 0;
		var b = new haxe_io_BytesOutput();
		var esc = false;
		var old = this.line;
		var s = this.input;
		while(true) {
			try {
				c = s.readByte();
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				this.line = old;
				throw new js__$Boot_HaxeError(hscript_Error.EUnterminatedString);
			}
			if(esc) {
				esc = false;
				switch(c) {
				case 110:
					b.writeByte(10);
					break;
				case 114:
					b.writeByte(13);
					break;
				case 116:
					b.writeByte(9);
					break;
				case 39:case 34:case 92:
					b.writeByte(c);
					break;
				case 47:
					if(this.allowJSON) b.writeByte(c); else this.invalidChar(c);
					break;
				case 117:
					if(!this.allowJSON) throw new js__$Boot_HaxeError(this.invalidChar(c));
					var code = null;
					try {
						code = s.readString(4);
					} catch( e1 ) {
						haxe_CallStack.lastException = e1;
						if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
						this.line = old;
						throw new js__$Boot_HaxeError(hscript_Error.EUnterminatedString);
					}
					var k = 0;
					var _g = 0;
					while(_g < 4) {
						var i = _g++;
						k <<= 4;
						var $char = HxOverrides.cca(code,i);
						if($char != null) switch($char) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							k += $char - 48;
							break;
						case 65:case 66:case 67:case 68:case 69:case 70:
							k += $char - 55;
							break;
						case 97:case 98:case 99:case 100:case 101:case 102:
							k += $char - 87;
							break;
						default:
							this.invalidChar($char);
						} else this.invalidChar($char);
					}
					if(k <= 127) b.writeByte(k); else if(k <= 2047) {
						b.writeByte(192 | k >> 6);
						b.writeByte(128 | k & 63);
					} else {
						b.writeByte(224 | k >> 12);
						b.writeByte(128 | k >> 6 & 63);
						b.writeByte(128 | k & 63);
					}
					break;
				default:
					this.invalidChar(c);
				}
			} else if(c == 92) esc = true; else if(c == until) break; else {
				if(c == 10) this.line++;
				b.writeByte(c);
			}
		}
		return b.getBytes().toString();
	}
	,token: function() {
		if(!(this.tokens.head == null)) return this.tokens.pop();
		var $char;
		if(this["char"] < 0) $char = this.readChar(); else {
			$char = this["char"];
			this["char"] = -1;
		}
		while(true) {
			switch($char) {
			case 0:
				return hscript_Token.TEof;
			case 32:case 9:case 13:
				break;
			case 10:
				this.line++;
				break;
			case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				var n = ($char - 48) * 1.0;
				var exp = 0.;
				while(true) {
					$char = this.readChar();
					exp *= 10;
					switch($char) {
					case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						n = n * 10 + ($char - 48);
						break;
					case 46:
						if(exp > 0) {
							if(exp == 10 && this.readChar() == 46) {
								this.push(hscript_Token.TOp("..."));
								var i = n | 0;
								return hscript_Token.TConst(i == n?hscript_Const.CInt(i):hscript_Const.CFloat(n));
							}
							this.invalidChar($char);
						}
						exp = 1.;
						break;
					case 120:
						if(n > 0 || exp > 0) this.invalidChar($char);
						var n1 = 0;
						while(true) {
							$char = this.readChar();
							switch($char) {
							case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
								n1 = (n1 << 4) + $char - 48;
								break;
							case 65:case 66:case 67:case 68:case 69:case 70:
								n1 = (n1 << 4) + ($char - 55);
								break;
							case 97:case 98:case 99:case 100:case 101:case 102:
								n1 = (n1 << 4) + ($char - 87);
								break;
							default:
								this["char"] = $char;
								return hscript_Token.TConst(hscript_Const.CInt(n1));
							}
						}
						break;
					default:
						this["char"] = $char;
						var i1 = n | 0;
						return hscript_Token.TConst(exp > 0?hscript_Const.CFloat(n * 10 / exp):i1 == n?hscript_Const.CInt(i1):hscript_Const.CFloat(n));
					}
				}
				break;
			case 59:
				return hscript_Token.TSemicolon;
			case 40:
				return hscript_Token.TPOpen;
			case 41:
				return hscript_Token.TPClose;
			case 44:
				return hscript_Token.TComma;
			case 46:
				$char = this.readChar();
				switch($char) {
				case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
					var n2 = $char - 48;
					var exp1 = 1;
					while(true) {
						$char = this.readChar();
						exp1 *= 10;
						switch($char) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							n2 = n2 * 10 + ($char - 48);
							break;
						default:
							this["char"] = $char;
							return hscript_Token.TConst(hscript_Const.CFloat(n2 / exp1));
						}
					}
					break;
				case 46:
					$char = this.readChar();
					if($char != 46) this.invalidChar($char);
					return hscript_Token.TOp("...");
				default:
					this["char"] = $char;
					return hscript_Token.TDot;
				}
				break;
			case 123:
				return hscript_Token.TBrOpen;
			case 125:
				return hscript_Token.TBrClose;
			case 91:
				return hscript_Token.TBkOpen;
			case 93:
				return hscript_Token.TBkClose;
			case 39:
				return hscript_Token.TConst(hscript_Const.CString(this.readString(39)));
			case 34:
				return hscript_Token.TConst(hscript_Const.CString(this.readString(34)));
			case 63:
				return hscript_Token.TQuestion;
			case 58:
				return hscript_Token.TDoubleDot;
			default:
				if(this.ops[$char]) {
					var op = String.fromCharCode($char);
					while(true) {
						$char = this.readChar();
						if(!this.ops[$char]) {
							if(HxOverrides.cca(op,0) == 47) return this.tokenComment(op,$char);
							this["char"] = $char;
							return hscript_Token.TOp(op);
						}
						op += String.fromCharCode($char);
					}
				}
				if(this.idents[$char]) {
					var id = String.fromCharCode($char);
					while(true) {
						$char = this.readChar();
						if(!this.idents[$char]) {
							this["char"] = $char;
							return hscript_Token.TId(id);
						}
						id += String.fromCharCode($char);
					}
				}
				this.invalidChar($char);
			}
			$char = this.readChar();
		}
		return null;
	}
	,tokenComment: function(op,$char) {
		var c = HxOverrides.cca(op,1);
		var s = this.input;
		if(c == 47) {
			try {
				while($char != 10 && $char != 13) $char = s.readByte();
				this["char"] = $char;
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
			}
			return this.token();
		}
		if(c == 42) {
			var old = this.line;
			try {
				while(true) {
					while($char != 42) {
						if($char == 10) this.line++;
						$char = s.readByte();
					}
					$char = s.readByte();
					if($char == 47) break;
				}
			} catch( e1 ) {
				haxe_CallStack.lastException = e1;
				if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
				this.line = old;
				throw new js__$Boot_HaxeError(hscript_Error.EUnterminatedComment);
			}
			return this.token();
		}
		this["char"] = $char;
		return hscript_Token.TOp(op);
	}
	,constString: function(c) {
		switch(c[1]) {
		case 0:
			var v = c[2];
			if(v == null) return "null"; else return "" + v;
			break;
		case 1:
			var f = c[2];
			if(f == null) return "null"; else return "" + f;
			break;
		case 2:
			var s = c[2];
			return s;
		}
	}
	,tokenString: function(t) {
		switch(t[1]) {
		case 0:
			return "<eof>";
		case 1:
			var c = t[2];
			return this.constString(c);
		case 2:
			var s = t[2];
			return s;
		case 3:
			var s1 = t[2];
			return s1;
		case 4:
			return "(";
		case 5:
			return ")";
		case 6:
			return "{";
		case 7:
			return "}";
		case 8:
			return ".";
		case 9:
			return ",";
		case 10:
			return ";";
		case 11:
			return "[";
		case 12:
			return "]";
		case 13:
			return "?";
		case 14:
			return ":";
		}
	}
	,__class__: hscript_Parser
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) Error.captureStackTrace(this,js__$Boot_HaxeError);
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg;
	if(i != null) msg = i.fileName + ":" + i.lineNumber + ": "; else msg = "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	if(typeof(document) != "undefined" && (d = document.getElementById("haxe:trace")) != null) d.innerHTML += js_Boot.__unhtml(msg) + "<br/>"; else if(typeof console != "undefined" && console.log != null) console.log(msg);
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else {
		var cl = o.__class__;
		if(cl != null) return cl;
		var name = js_Boot.__nativeClassName(o);
		if(name != null) return js_Boot.__resolveNativeClass(name);
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str2 = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i1 = _g1++;
					if(i1 != 2) str2 += "," + js_Boot.__string_rec(o[i1],s); else str2 += js_Boot.__string_rec(o[i1],s);
				}
				return str2 + ")";
			}
			var l = o.length;
			var i;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) str += ", \n";
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) return true;
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) return o; else throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") return null;
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return (Function("return typeof " + name + " != \"undefined\" ? " + name + " : null"))();
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = ["js","Browser"];
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null?null:end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	if(byteOffset == null) this.offset = 0; else this.offset = byteOffset;
	if(byteLength == null) this.length = buffer.byteLength - this.offset; else this.length = byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) return v - 256; else return v;
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) return v - 65536; else return v;
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8; else return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) return a | b << 8 | c << 16 | d << 24; else return d | c << 8 | b << 16 | a << 24;
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) return v + 4294967296.; else return v;
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian?a:b,littleEndian?b:a);
	}
	,setInt8: function(byteOffset,value) {
		if(value < 0) this.buf.a[byteOffset + this.offset] = value + 128 & 255; else this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0?value + 65536:value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g = 0;
		while(_g < arg1) {
			var i = _g++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) offset = 0;
		if(length == null) length = buffer.byteLength - offset;
		if(offset == 0) arr = buffer.a; else arr = buffer.a.slice(offset,offset + length);
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	var t = this;
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			t[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			t[i1 + offset] = a1[i1];
		}
	} else throw new js__$Boot_HaxeError("TODO");
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var t = this;
	var a = js_html_compat_Uint8Array._new(t.slice(start,end));
	a.byteOffset = start;
	return a;
};
var lime_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
	this.version = Std["int"](Math.random() * 1000000);
};
$hxClasses["lime.AssetCache"] = lime_AssetCache;
lime_AssetCache.__name__ = ["lime","AssetCache"];
lime_AssetCache.prototype = {
	clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = this.audio.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.audio.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.image.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.image.remove(key2);
			}
		}
	}
	,__class__: lime_AssetCache
};
var lime_app_Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Void_Void"] = lime_app_Event_$Void_$Void;
lime_app_Event_$Void_$Void.__name__ = ["lime","app","Event_Void_Void"];
lime_app_Event_$Void_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Void_$Void
};
var lime_Assets = function() { };
$hxClasses["lime.Assets"] = lime_Assets;
lime_Assets.__name__ = ["lime","Assets"];
lime_Assets.exists = function(id,type) {
	lime_Assets.initialize();
	if(type == null) type = "BINARY";
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) return library.exists(symbolName,type);
	return false;
};
lime_Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.audio.exists(id)) {
		var audio = lime_Assets.cache.audio.get(id);
		if(lime_Assets.isValidAudio(audio)) return audio;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			if(library.isLocal(symbolName,"SOUND")) {
				var audio1 = library.getAudioBuffer(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.audio.set(id,audio1);
				return audio1;
			} else haxe_Log.trace("[Assets] Audio asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 122, className : "lime.Assets", methodName : "getAudioBuffer"});
		} else haxe_Log.trace("[Assets] There is no audio asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 128, className : "lime.Assets", methodName : "getAudioBuffer"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 134, className : "lime.Assets", methodName : "getAudioBuffer"});
	return null;
};
lime_Assets.getBytes = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			if(library.isLocal(symbolName,"BINARY")) return library.getBytes(symbolName); else haxe_Log.trace("[Assets] String or Bytes asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 171, className : "lime.Assets", methodName : "getBytes"});
		} else haxe_Log.trace("[Assets] There is no String or Bytes asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 177, className : "lime.Assets", methodName : "getBytes"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 183, className : "lime.Assets", methodName : "getBytes"});
	return null;
};
lime_Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.font.exists(id)) return lime_Assets.cache.font.get(id);
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			if(library.isLocal(symbolName,"FONT")) {
				var font = library.getFont(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.font.set(id,font);
				return font;
			} else haxe_Log.trace("[Assets] Font asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 234, className : "lime.Assets", methodName : "getFont"});
		} else haxe_Log.trace("[Assets] There is no Font asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 240, className : "lime.Assets", methodName : "getFont"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 246, className : "lime.Assets", methodName : "getFont"});
	return null;
};
lime_Assets.getImage = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.image.exists(id)) {
		var image = lime_Assets.cache.image.get(id);
		if(lime_Assets.isValidImage(image)) return image;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(library.isLocal(symbolName,"IMAGE")) {
				var image1 = library.getImage(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.image.set(id,image1);
				return image1;
			} else haxe_Log.trace("[Assets] Image asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 304, className : "lime.Assets", methodName : "getImage"});
		} else haxe_Log.trace("[Assets] There is no Image asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 310, className : "lime.Assets", methodName : "getImage"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 316, className : "lime.Assets", methodName : "getImage"});
	return null;
};
lime_Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return lime_Assets.libraries.get(name);
};
lime_Assets.getPath = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,null)) return library.getPath(symbolName); else haxe_Log.trace("[Assets] There is no asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 364, className : "lime.Assets", methodName : "getPath"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 370, className : "lime.Assets", methodName : "getPath"});
	return null;
};
lime_Assets.getText = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			if(library.isLocal(symbolName,"TEXT")) return library.getText(symbolName); else haxe_Log.trace("[Assets] String asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 407, className : "lime.Assets", methodName : "getText"});
		} else haxe_Log.trace("[Assets] There is no String asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 413, className : "lime.Assets", methodName : "getText"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 419, className : "lime.Assets", methodName : "getText"});
	return null;
};
lime_Assets.initialize = function() {
	if(!lime_Assets.initialized) {
		lime_Assets.registerLibrary("default",new DefaultAssetLibrary());
		lime_Assets.initialized = true;
	}
};
lime_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled) {
		if(type == "IMAGE" || type == null) {
			if(lime_Assets.cache.image.exists(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(lime_Assets.cache.font.exists(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(lime_Assets.cache.audio.exists(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
lime_Assets.isValidAudio = function(buffer) {
	return buffer != null;
};
lime_Assets.isValidImage = function(buffer) {
	return true;
};
lime_Assets.list = function(type) {
	lime_Assets.initialize();
	var items = [];
	var $it0 = lime_Assets.libraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var libraryItems = library.list(type);
		if(libraryItems != null) items = items.concat(libraryItems);
	}
	return items;
};
lime_Assets.loadAudioBuffer = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.audio.exists(id)) {
		var audio = lime_Assets.cache.audio.get(id);
		if(lime_Assets.isValidAudio(audio)) {
			promise.complete(audio);
			return promise.future;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			var future = library.loadAudioBuffer(symbolName);
			if(useCache && lime_Assets.cache.enabled) future.onComplete(function(audio1) {
				lime_Assets.cache.audio.set(id,audio1);
			});
			promise.completeWith(future);
		} else promise.error("[Assets] There is no audio asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
lime_Assets.loadBytes = function(id) {
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) promise.completeWith(library.loadBytes(symbolName)); else promise.error("[Assets] There is no String or Bytes asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
lime_Assets.loadFont = function(id) {
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) promise.completeWith(library.loadFont(symbolName)); else promise.error("[Assets] There is no Font asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
lime_Assets.loadImage = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.image.exists(id)) {
		var image = lime_Assets.cache.image.get(id);
		if(lime_Assets.isValidImage(image)) {
			promise.complete(image);
			return promise.future;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			var future = library.loadImage(symbolName);
			if(useCache && lime_Assets.cache.enabled) future.onComplete(function(image1) {
				lime_Assets.cache.image.set(id,image1);
			});
			promise.completeWith(future);
		} else promise.error("[Assets] There is no Image asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
lime_Assets.loadLibrary = function(name) {
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var data = lime_Assets.getText("libraries/" + name + ".json");
	if(data != null && data != "") {
		var info = JSON.parse(data);
		var library = Type.createInstance(Type.resolveClass(info.type),info.args);
		lime_Assets.libraries.set(name,library);
		library.onChange.add(($_=lime_Assets.onChange,$bind($_,$_.dispatch)));
		promise.completeWith(library.load());
	} else promise.error("[Assets] There is no asset library named \"" + name + "\"");
	return promise.future;
};
lime_Assets.loadText = function(id) {
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) promise.completeWith(library.loadText(symbolName)); else promise.error("[Assets] There is no String asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
lime_Assets.registerLibrary = function(name,library) {
	if(lime_Assets.libraries.exists(name)) {
		if(lime_Assets.libraries.get(name) == library) return; else lime_Assets.unloadLibrary(name);
	}
	if(library != null) library.onChange.add(lime_Assets.library_onChange);
	lime_Assets.libraries.set(name,library);
};
lime_Assets.unloadLibrary = function(name) {
	lime_Assets.initialize();
	var library = lime_Assets.libraries.get(name);
	if(library != null) {
		lime_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_Assets.library_onChange);
		library.unload();
	}
	lime_Assets.libraries.remove(name);
};
lime_Assets.library_onChange = function() {
	lime_Assets.cache.clear();
	lime_Assets.onChange.dispatch();
};
var lime__$backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_audio_AudioManager.init();
};
$hxClasses["lime._backend.html5.HTML5Application"] = lime__$backend_html5_HTML5Application;
lime__$backend_html5_HTML5Application.__name__ = ["lime","_backend","html5","HTML5Application"];
lime__$backend_html5_HTML5Application.prototype = {
	convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) return keyCode + 32;
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 144:
			return 1073741907;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 36:
			return 1073741898;
		case 35:
			return 1073741901;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		return keyCode;
	}
	,create: function(config) {
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		
			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}
			
			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};
			
			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};
			
			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,getFrameRate: function() {
		if(this.framePeriod < 0) return 60; else if(this.framePeriod == 1000) return 0; else return 1000 / this.framePeriod;
	}
	,handleApplicationEvent: function(__) {
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			this.parent.onUpdate.dispatch(this.deltaTime | 0);
			if(this.parent.renderers[0] != null) {
				this.parent.renderers[0].onRender.dispatch();
				this.parent.renderers[0].flip();
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
				this.nextUpdate = this.currentUpdate;
			} else this.nextUpdate = this.currentUpdate + this.framePeriod;
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null?event.keyCode:event.which);
			var modifier;
			modifier = (event.shiftKey?3:0) | (event.ctrlKey?192:0) | (event.altKey?768:0) | (event.metaKey?3072:0);
			if(event.type == "keydown") this.parent.windows[0].onKeyDown.dispatch(keyCode,modifier); else this.parent.windows[0].onKeyUp.dispatch(keyCode,modifier);
		}
	}
	,handleWindowEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var _g = event.type;
			switch(_g) {
			case "focus":
				this.parent.windows[0].onFocusIn.dispatch();
				this.parent.windows[0].onActivate.dispatch();
				break;
			case "blur":
				this.parent.windows[0].onFocusOut.dispatch();
				this.parent.windows[0].onDeactivate.dispatch();
				break;
			case "resize":
				var cacheWidth = this.parent.windows[0].__width;
				var cacheHeight = this.parent.windows[0].__height;
				this.parent.windows[0].backend.handleResize();
				if(this.parent.windows[0].__width != cacheWidth || this.parent.windows[0].__height != cacheHeight) this.parent.windows[0].onResize.dispatch(this.parent.windows[0].__width,this.parent.windows[0].__height);
				break;
			case "beforeunload":
				this.parent.windows[0].onClose.dispatch();
				break;
			}
		}
	}
	,setFrameRate: function(value) {
		if(value >= 60) this.framePeriod = -1; else if(value > 0) this.framePeriod = 1000 / value; else this.framePeriod = 1000;
		return value;
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) return;
		var id;
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g1 = 0;
		var _g = devices.length;
		while(_g1 < _g) {
			var i = _g1++;
			id = i;
			data = devices[id];
			if(data == null) continue;
			if(!this.gameDeviceCache.h.hasOwnProperty(id)) {
				cache = new lime__$backend_html5_GameDeviceData();
				cache.id = id;
				cache.connected = data.connected;
				var _g3 = 0;
				var _g2 = data.buttons.length;
				while(_g3 < _g2) {
					var i1 = _g3++;
					cache.buttons.push(data.buttons[i1].value);
				}
				var _g31 = 0;
				var _g21 = data.axes.length;
				while(_g31 < _g21) {
					var i2 = _g31++;
					cache.axes.push(data.axes[i2]);
				}
				if(data.mapping == "standard") cache.isGamepad = true;
				this.gameDeviceCache.h[id] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(id);
					if(cache.isGamepad) lime_ui_Gamepad.__connect(id);
				}
			}
			cache = this.gameDeviceCache.h[id];
			joystick = lime_ui_Joystick.devices.h[id];
			gamepad = lime_ui_Gamepad.devices.h[id];
			if(data.connected) {
				var button;
				var value;
				var _g32 = 0;
				var _g22 = data.buttons.length;
				while(_g32 < _g22) {
					var i3 = _g32++;
					value = data.buttons[i3].value;
					if(value != cache.buttons[i3]) {
						if(i3 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) gamepad.onAxisMove.dispatch(4,value);
						} else if(i3 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) gamepad.onAxisMove.dispatch(5,value);
						} else {
							if(value > 0) joystick.onButtonDown.dispatch(i3); else joystick.onButtonUp.dispatch(i3);
							if(gamepad != null) {
								switch(i3) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) gamepad.onButtonDown.dispatch(button); else gamepad.onButtonUp.dispatch(button);
							}
						}
						cache.buttons[i3] = value;
					}
				}
				var _g33 = 0;
				var _g23 = data.axes.length;
				while(_g33 < _g23) {
					var i4 = _g33++;
					if(data.axes[i4] != cache.axes[i4]) {
						joystick.onAxisMove.dispatch(i4,data.axes[i4]);
						if(gamepad != null) gamepad.onAxisMove.dispatch(i4,data.axes[i4]);
						cache.axes[i4] = data.axes[i4];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(id);
				lime_ui_Gamepad.__disconnect(id);
			}
		}
	}
	,__class__: lime__$backend_html5_HTML5Application
};
var lime__$backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._backend.html5.GameDeviceData"] = lime__$backend_html5_GameDeviceData;
lime__$backend_html5_GameDeviceData.__name__ = ["lime","_backend","html5","GameDeviceData"];
lime__$backend_html5_GameDeviceData.prototype = {
	__class__: lime__$backend_html5_GameDeviceData
};
var lime__$backend_html5_HTML5Mouse = function() { };
$hxClasses["lime._backend.html5.HTML5Mouse"] = lime__$backend_html5_HTML5Mouse;
lime__$backend_html5_HTML5Mouse.__name__ = ["lime","_backend","html5","HTML5Mouse"];
lime__$backend_html5_HTML5Mouse.__cursor = null;
lime__$backend_html5_HTML5Mouse.__hidden = null;
lime__$backend_html5_HTML5Mouse.hide = function() {
	if(!lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = true;
		var _g = 0;
		var _g1 = lime_app_Application.current.windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.backend.element.style.cursor = "none";
		}
	}
};
lime__$backend_html5_HTML5Mouse.show = function() {
	if(lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = false;
		var cacheValue = lime__$backend_html5_HTML5Mouse.__cursor;
		lime__$backend_html5_HTML5Mouse.__cursor = null;
		lime__$backend_html5_HTML5Mouse.set_cursor(cacheValue);
	}
};
lime__$backend_html5_HTML5Mouse.warp = function(x,y,window) {
};
lime__$backend_html5_HTML5Mouse.get_cursor = function() {
	if(lime__$backend_html5_HTML5Mouse.__cursor == null) return lime_ui_MouseCursor.DEFAULT;
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.set_cursor = function(value) {
	if(lime__$backend_html5_HTML5Mouse.__cursor != value) {
		if(!lime__$backend_html5_HTML5Mouse.__hidden) {
			var _g = 0;
			var _g1 = lime_app_Application.current.windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				switch(value[1]) {
				case 0:
					$window.backend.element.style.cursor = "default";
					break;
				case 1:
					$window.backend.element.style.cursor = "crosshair";
					break;
				case 3:
					$window.backend.element.style.cursor = "move";
					break;
				case 4:
					$window.backend.element.style.cursor = "pointer";
					break;
				case 5:
					$window.backend.element.style.cursor = "nesw-resize";
					break;
				case 6:
					$window.backend.element.style.cursor = "ns-resize";
					break;
				case 7:
					$window.backend.element.style.cursor = "nwse-resize";
					break;
				case 8:
					$window.backend.element.style.cursor = "ew-resize";
					break;
				case 9:
					$window.backend.element.style.cursor = "text";
					break;
				case 10:
					$window.backend.element.style.cursor = "wait";
					break;
				case 11:
					$window.backend.element.style.cursor = "wait";
					break;
				default:
					$window.backend.element.style.cursor = "auto";
				}
			}
		}
		lime__$backend_html5_HTML5Mouse.__cursor = value;
	}
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.get_lock = function() {
	return false;
};
lime__$backend_html5_HTML5Mouse.set_lock = function(value) {
	return value;
};
var lime__$backend_html5_HTML5Renderer = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Renderer"] = lime__$backend_html5_HTML5Renderer;
lime__$backend_html5_HTML5Renderer.__name__ = ["lime","_backend","html5","HTML5Renderer"];
lime__$backend_html5_HTML5Renderer.prototype = {
	create: function() {
		this.createContext();
		{
			var _g = this.parent.context;
			switch(_g[1]) {
			case 0:
				this.parent.window.backend.canvas.addEventListener("webglcontextlost",$bind(this,this.handleEvent),false);
				this.parent.window.backend.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleEvent),false);
				break;
			default:
			}
		}
	}
	,createContext: function() {
		if(this.parent.window.backend.div != null) {
			this.parent.context = lime_graphics_RenderContext.DOM(this.parent.window.backend.div);
			this.parent.type = lime_graphics_RendererType.DOM;
		} else if(this.parent.window.backend.canvas != null) {
			var webgl = null;
			if(webgl == null) {
				this.parent.context = lime_graphics_RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d"));
				this.parent.type = lime_graphics_RendererType.CANVAS;
			} else {
				lime_graphics_opengl_GL.context = webgl;
				this.parent.context = lime_graphics_RenderContext.OPENGL(lime_graphics_opengl_GL.context);
				this.parent.type = lime_graphics_RendererType.OPENGL;
			}
		}
	}
	,flip: function() {
	}
	,handleEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "webglcontextlost":
			event.preventDefault();
			this.parent.context = null;
			this.parent.onContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,render: function() {
	}
	,__class__: lime__$backend_html5_HTML5Renderer
};
var lime__$backend_html5_HTML5Window = function(parent) {
	this.unusedTouchesPool = new List();
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"element")) this.element = parent.config.element;
};
$hxClasses["lime._backend.html5.HTML5Window"] = lime__$backend_html5_HTML5Window;
lime__$backend_html5_HTML5Window.__name__ = ["lime","_backend","html5","HTML5Window"];
lime__$backend_html5_HTML5Window.textInput = null;
lime__$backend_html5_HTML5Window.prototype = {
	alert: function(message,title) {
		if(message != null) js_Browser.alert(message);
	}
	,close: function() {
		this.parent.application.removeWindow(this.parent);
	}
	,create: function(application) {
		this.setWidth = this.parent.__width;
		this.setHeight = this.parent.__height;
		this.parent.id = lime__$backend_html5_HTML5Window.windowID++;
		if(js_Boot.__instanceof(this.element,HTMLCanvasElement)) this.canvas = this.element; else this.canvas = window.document.createElement("canvas");
		if(this.canvas != null) {
			var style = this.canvas.style;
			style.setProperty("-webkit-transform","translateZ(0)",null);
			style.setProperty("transform","translateZ(0)",null);
		} else if(this.div != null) {
			var style1 = this.div.style;
			style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
			style1.setProperty("transform","translate3D(0,0,0)",null);
			style1.position = "relative";
			style1.overflow = "hidden";
			style1.setProperty("-webkit-user-select","none",null);
			style1.setProperty("-moz-user-select","none",null);
			style1.setProperty("-ms-user-select","none",null);
			style1.setProperty("-o-user-select","none",null);
		}
		if(this.parent.__width == 0 && this.parent.__height == 0) {
			if(this.element != null) {
				this.parent.set_width(this.element.clientWidth);
				this.parent.set_height(this.element.clientHeight);
			} else {
				this.parent.set_width(window.innerWidth);
				this.parent.set_height(window.innerHeight);
			}
			this.parent.set_fullscreen(true);
		}
		if(this.canvas != null) {
			this.canvas.width = this.parent.__width;
			this.canvas.height = this.parent.__height;
		} else {
			this.div.style.width = this.parent.__width + "px";
			this.div.style.height = this.parent.__height + "px";
		}
		this.handleResize();
		if(this.element != null) {
			if(this.canvas != null) {
				if(this.element != this.canvas) this.element.appendChild(this.canvas);
			} else this.element.appendChild(this.div);
			var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				this.element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			window.document.addEventListener("dragstart",function(e) {
				if(e.target.nodeName.toLowerCase() == "img") {
					e.preventDefault();
					return false;
				}
				return true;
			},false);
			this.element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
			this.element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
		}
	}
	,focus: function() {
	}
	,getDisplay: function() {
		return lime_system_System.getDisplay(0);
	}
	,getEnableTextEvents: function() {
		return this.enableTextEvents;
	}
	,handleFocusEvent: function(event) {
		if(this.enableTextEvents) haxe_Timer.delay(function() {
			lime__$backend_html5_HTML5Window.textInput.focus();
		},20);
	}
	,handleGamepadEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") lime_ui_Gamepad.__connect(event.gamepad.index);
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleInputEvent: function(event) {
		if(lime__$backend_html5_HTML5Window.textInput.value != "") {
			this.parent.onTextInput.dispatch(lime__$backend_html5_HTML5Window.textInput.value);
			lime__$backend_html5_HTML5Window.textInput.value = "";
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				this.parent.onMouseDown.dispatch(x,y,event.button);
				break;
			case "mouseenter":
				this.parent.onEnter.dispatch();
				break;
			case "mouseleave":
				this.parent.onLeave.dispatch();
				break;
			case "mouseup":
				this.parent.onMouseUp.dispatch(x,y,event.button);
				break;
			case "mousemove":
				this.parent.onMouseMove.dispatch(x,y);
				break;
			default:
			}
		} else this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY);
	}
	,handleResize: function() {
		var stretch = this.parent.__fullscreen || this.setWidth == 0 && this.setHeight == 0;
		if(this.element != null && (this.div == null || this.div != null && stretch)) {
			if(stretch) {
				if(this.parent.__width != this.element.clientWidth || this.parent.__height != this.element.clientHeight) {
					this.parent.set_width(this.element.clientWidth);
					this.parent.set_height(this.element.clientHeight);
					if(this.canvas != null) {
						if(this.element != this.canvas) {
							this.canvas.width = this.element.clientWidth;
							this.canvas.height = this.element.clientHeight;
						}
					} else {
						this.div.style.width = this.element.clientWidth + "px";
						this.div.style.height = this.element.clientHeight + "px";
					}
				}
			} else {
				var scaleX = this.element.clientWidth / this.setWidth;
				var scaleY = this.element.clientHeight / this.setHeight;
				var currentRatio = scaleX / scaleY;
				var targetRatio = Math.min(scaleX,scaleY);
				if(this.canvas != null) {
					if(this.element != this.canvas) {
						this.canvas.style.width = this.setWidth * targetRatio + "px";
						this.canvas.style.height = this.setHeight * targetRatio + "px";
						this.canvas.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
						this.canvas.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
					}
				} else {
					this.div.style.width = this.setWidth * targetRatio + "px";
					this.div.style.height = this.setHeight * targetRatio + "px";
					this.div.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
					this.div.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
				}
			}
		}
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var rect = null;
		if(this.element != null) {
			if(this.canvas != null) rect = this.canvas.getBoundingClientRect(); else if(this.div != null) rect = this.div.getBoundingClientRect(); else rect = this.element.getBoundingClientRect();
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			var x = 0.0;
			var y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			var _g2 = event.type;
			switch(_g2) {
			case "touchstart":
				var touch = this.unusedTouchesPool.pop();
				if(touch == null) touch = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id); else {
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.id = data.identifier;
					touch.dx = 0;
					touch.dy = 0;
					touch.pressure = data.force;
					touch.device = this.parent.id;
				}
				this.currentTouches.h[data.identifier] = touch;
				lime_ui_Touch.onStart.dispatch(touch);
				if(this.primaryTouch == null) this.primaryTouch = touch;
				if(touch == this.primaryTouch) this.parent.onMouseDown.dispatch(x,y,0);
				break;
			case "touchend":
				var touch1 = this.currentTouches.h[data.identifier];
				if(touch1 != null) {
					var cacheX = touch1.x;
					var cacheY = touch1.y;
					touch1.x = x / windowWidth;
					touch1.y = y / windowHeight;
					touch1.dx = touch1.x - cacheX;
					touch1.dy = touch1.y - cacheY;
					touch1.pressure = data.force;
					lime_ui_Touch.onEnd.dispatch(touch1);
					this.currentTouches.remove(data.identifier);
					this.unusedTouchesPool.add(touch1);
					if(touch1 == this.primaryTouch) {
						this.parent.onMouseUp.dispatch(x,y,0);
						this.primaryTouch = null;
					}
				}
				break;
			case "touchmove":
				var touch2 = this.currentTouches.h[data.identifier];
				if(touch2 != null) {
					var cacheX1 = touch2.x;
					var cacheY1 = touch2.y;
					touch2.x = x / windowWidth;
					touch2.y = y / windowHeight;
					touch2.dx = touch2.x - cacheX1;
					touch2.dy = touch2.y - cacheY1;
					touch2.pressure = data.force;
					lime_ui_Touch.onMove.dispatch(touch2);
					if(touch2 == this.primaryTouch) this.parent.onMouseMove.dispatch(x,y);
				}
				break;
			default:
			}
		}
	}
	,move: function(x,y) {
	}
	,resize: function(width,height) {
	}
	,setEnableTextEvents: function(value) {
		if(value) {
			if(lime__$backend_html5_HTML5Window.textInput == null) {
				lime__$backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$backend_html5_HTML5Window.textInput.type = "text";
				lime__$backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$backend_html5_HTML5Window.textInput.value = "";
				lime__$backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
				window.document.body.appendChild(lime__$backend_html5_HTML5Window.textInput);
			}
			if(!this.enableTextEvents) {
				lime__$backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
			}
			lime__$backend_html5_HTML5Window.textInput.focus();
		} else if(lime__$backend_html5_HTML5Window.textInput != null) {
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$backend_html5_HTML5Window.textInput.blur();
		}
		return this.enableTextEvents = value;
	}
	,setFullscreen: function(value) {
		return false;
	}
	,setIcon: function(image) {
	}
	,setMinimized: function(value) {
		return false;
	}
	,setTitle: function(value) {
		return value;
	}
	,__class__: lime__$backend_html5_HTML5Window
};
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = ["lime","app","IModule"];
lime_app_IModule.prototype = {
	__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app_Event_$Int_$Void();
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = ["lime","app","Module"];
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
		haxe_Log.trace("onGamepadConnect (module)",{ fileName : "Module.hx", lineNumber : 64, className : "lime.app.Module", methodName : "onGamepadConnect"});
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
	}
	,onKeyUp: function(window,keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(window,x,y,button) {
	}
	,onMouseMove: function(window,x,y) {
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function(window) {
	}
	,onWindowClose: function(window) {
	}
	,onWindowCreate: function(window) {
	}
	,onWindowDeactivate: function(window) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
	}
	,onWindowFocusOut: function(window) {
	}
	,onWindowFullscreen: function(window) {
	}
	,onWindowLeave: function(window) {
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowMinimize: function(window) {
	}
	,onWindowResize: function(window,width,height) {
	}
	,onWindowRestore: function(window) {
	}
	,render: function(renderer) {
	}
	,update: function(deltaTime) {
	}
	,__class__: lime_app_Module
};
var lime_app_Application = function() {
	this.onUpdate = new lime_app_Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) lime_app_Application.current = this;
	this.modules = [];
	this.renderers = [];
	this.windows = [];
	this.windowByID = new haxe_ds_IntMap();
	this.backend = new lime__$backend_html5_HTML5Application(this);
	this.onExit.add($bind(this,this.onModuleExit));
	this.onUpdate.add($bind(this,this.update));
	lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
	lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
	lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
	lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
	lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = ["lime","app","Application"];
lime_app_Application.current = null;
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	addModule: function(module) {
		this.modules.push(module);
		if(this.windows.length > 0) {
			var _g = 0;
			var _g1 = this.windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				module.onWindowCreate($window);
			}
			if(this.preloader == null || this.preloader.complete) module.onPreloadComplete();
		}
	}
	,addRenderer: function(renderer) {
		renderer.onRender.add((function(f,a1) {
			return function() {
				f(a1);
			};
		})($bind(this,this.render),renderer));
		renderer.onContextLost.add((function(f1,a11) {
			return function() {
				f1(a11);
			};
		})($bind(this,this.onRenderContextLost),renderer));
		renderer.onContextRestored.add((function(f2,a12) {
			return function(a2) {
				f2(a12,a2);
			};
		})($bind(this,this.onRenderContextRestored),renderer));
		this.renderers.push(renderer);
	}
	,create: function(config) {
		this.config = config;
		this.backend.create(config);
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) this.backend.setFrameRate(config.fps);
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g = 0;
				var _g1 = config.windows;
				while(_g < _g1.length) {
					var windowConfig = _g1[_g];
					++_g;
					var $window = new lime_ui_Window(windowConfig);
					this.createWindow($window);
					break;
				}
			}
			if(this.preloader == null || this.preloader.complete) this.onPreloadComplete();
		}
	}
	,createWindow: function(window) {
		window.onActivate.add((function(f,a1) {
			return function() {
				f(a1);
			};
		})($bind(this,this.onWindowActivate),window));
		window.onClose.add((function(f1,a11) {
			return function() {
				f1(a11);
			};
		})($bind(this,this.onWindowClose),window));
		window.onCreate.add((function(f2,a12) {
			return function() {
				f2(a12);
			};
		})($bind(this,this.onWindowCreate),window));
		window.onDeactivate.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onWindowDeactivate),window));
		window.onEnter.add((function(f4,a14) {
			return function() {
				f4(a14);
			};
		})($bind(this,this.onWindowEnter),window));
		window.onFocusIn.add((function(f5,a15) {
			return function() {
				f5(a15);
			};
		})($bind(this,this.onWindowFocusIn),window));
		window.onFocusOut.add((function(f6,a16) {
			return function() {
				f6(a16);
			};
		})($bind(this,this.onWindowFocusOut),window));
		window.onFullscreen.add((function(f7,a17) {
			return function() {
				f7(a17);
			};
		})($bind(this,this.onWindowFullscreen),window));
		window.onKeyDown.add((function(f8,a18) {
			return function(a2,a3) {
				f8(a18,a2,a3);
			};
		})($bind(this,this.onKeyDown),window));
		window.onKeyUp.add((function(f9,a19) {
			return function(a21,a31) {
				f9(a19,a21,a31);
			};
		})($bind(this,this.onKeyUp),window));
		window.onLeave.add((function(f10,a110) {
			return function() {
				f10(a110);
			};
		})($bind(this,this.onWindowLeave),window));
		window.onMinimize.add((function(f11,a111) {
			return function() {
				f11(a111);
			};
		})($bind(this,this.onWindowMinimize),window));
		window.onMouseDown.add((function(f12,a112) {
			return function(x,y,a22) {
				f12(a112,x,y,a22);
			};
		})($bind(this,this.onMouseDown),window));
		window.onMouseMove.add((function(f13,a113) {
			return function(x1,y1) {
				f13(a113,x1,y1);
			};
		})($bind(this,this.onMouseMove),window));
		window.onMouseMoveRelative.add((function(f14,a114) {
			return function(x2,y2) {
				f14(a114,x2,y2);
			};
		})($bind(this,this.onMouseMoveRelative),window));
		window.onMouseUp.add((function(f15,a115) {
			return function(x3,y3,a23) {
				f15(a115,x3,y3,a23);
			};
		})($bind(this,this.onMouseUp),window));
		window.onMouseWheel.add((function(f16,a116) {
			return function(a24,a32) {
				f16(a116,a24,a32);
			};
		})($bind(this,this.onMouseWheel),window));
		window.onMove.add((function(f17,a117) {
			return function(x4,y4) {
				f17(a117,x4,y4);
			};
		})($bind(this,this.onWindowMove),window));
		window.onResize.add((function(f18,a118) {
			return function(a25,a33) {
				f18(a118,a25,a33);
			};
		})($bind(this,this.onWindowResize),window));
		window.onRestore.add((function(f19,a119) {
			return function() {
				f19(a119);
			};
		})($bind(this,this.onWindowRestore),window));
		window.onTextEdit.add((function(f20,a120) {
			return function(a26,a34,a4) {
				f20(a120,a26,a34,a4);
			};
		})($bind(this,this.onTextEdit),window));
		window.onTextInput.add((function(f21,a121) {
			return function(a27) {
				f21(a121,a27);
			};
		})($bind(this,this.onTextInput),window));
		if(window.renderer == null) {
			var renderer = new lime_graphics_Renderer(window);
			this.addRenderer(renderer);
		}
		window.create(this);
		this.windows.push(window);
		this.windowByID.h[window.id] = window;
		window.onCreate.dispatch();
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.backend.exec();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadAxisMove(gamepad,axis,value);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonDown(gamepad,button);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonUp(gamepad,button);
		}
	}
	,onGamepadConnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadConnect(gamepad);
		}
	}
	,onGamepadDisconnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadDisconnect(gamepad);
		}
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickAxisMove(joystick,axis,value);
		}
	}
	,onJoystickButtonDown: function(joystick,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickButtonDown(joystick,button);
		}
	}
	,onJoystickButtonUp: function(joystick,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickButtonUp(joystick,button);
		}
	}
	,onJoystickConnect: function(joystick) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickConnect(joystick);
		}
	}
	,onJoystickDisconnect: function(joystick) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickDisconnect(joystick);
		}
	}
	,onJoystickHatMove: function(joystick,hat,position) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickHatMove(joystick,hat,position);
		}
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickTrackballMove(joystick,trackball,value);
		}
	}
	,onKeyDown: function(window,keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyDown(window,keyCode,modifier);
		}
	}
	,onKeyUp: function(window,keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyUp(window,keyCode,modifier);
		}
	}
	,onModuleExit: function(code) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onModuleExit(code);
		}
		this.backend.exit();
	}
	,onMouseDown: function(window,x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseDown(window,x,y,button);
		}
	}
	,onMouseMove: function(window,x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMove(window,x,y);
		}
	}
	,onMouseMoveRelative: function(window,x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMoveRelative(window,x,y);
		}
	}
	,onMouseUp: function(window,x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseUp(window,x,y,button);
		}
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseWheel(window,deltaX,deltaY);
		}
	}
	,onPreloadComplete: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onPreloadComplete();
		}
	}
	,onPreloadProgress: function(loaded,total) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onPreloadProgress(loaded,total);
		}
	}
	,onRenderContextLost: function(renderer) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextLost(renderer);
		}
	}
	,onRenderContextRestored: function(renderer,context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextRestored(renderer,context);
		}
	}
	,onTextEdit: function(window,text,start,length) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextEdit(window,text,start,length);
		}
	}
	,onTextInput: function(window,text) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextInput(window,text);
		}
	}
	,onTouchEnd: function(touch) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchEnd(touch);
		}
	}
	,onTouchMove: function(touch) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchMove(touch);
		}
	}
	,onTouchStart: function(touch) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchStart(touch);
		}
	}
	,onWindowActivate: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowActivate(window);
		}
	}
	,onWindowClose: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowClose(window);
		}
		this.removeWindow(window);
	}
	,onWindowCreate: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowCreate(window);
		}
	}
	,onWindowDeactivate: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowDeactivate(window);
		}
	}
	,onWindowEnter: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowEnter(window);
		}
	}
	,onWindowFocusIn: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusIn(window);
		}
	}
	,onWindowFocusOut: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusOut(window);
		}
	}
	,onWindowFullscreen: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFullscreen(window);
		}
	}
	,onWindowLeave: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowLeave(window);
		}
	}
	,onWindowMinimize: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMinimize(window);
		}
	}
	,onWindowMove: function(window,x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMove(window,x,y);
		}
	}
	,onWindowResize: function(window,width,height) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowResize(window,width,height);
		}
	}
	,onWindowRestore: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowRestore(window);
		}
	}
	,removeModule: function(module) {
		if(module != null) {
			module.onModuleExit(0);
			HxOverrides.remove(this.modules,module);
		}
	}
	,removeRenderer: function(renderer) {
		if(renderer != null && HxOverrides.indexOf(this.renderers,renderer,0) > -1) HxOverrides.remove(this.renderers,renderer);
	}
	,removeWindow: function(window) {
		if(window != null && this.windowByID.h.hasOwnProperty(window.id)) {
			HxOverrides.remove(this.windows,window);
			this.windowByID.remove(window.id);
			window.close();
			if(this.windows[0] == window) this.window = null;
		}
	}
	,render: function(renderer) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.render(renderer);
		}
	}
	,setPreloader: function(preloader) {
		if(this.preloader != null) {
			this.preloader.onProgress.remove($bind(this,this.onPreloadProgress));
			this.preloader.onComplete.remove($bind(this,this.onPreloadComplete));
		}
		this.preloader = preloader;
		if(preloader.complete) this.onPreloadComplete(); else {
			preloader.onProgress.add($bind(this,this.onPreloadProgress));
			preloader.onComplete.add($bind(this,this.onPreloadComplete));
		}
	}
	,update: function(deltaTime) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.update(deltaTime);
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		gamepad.onAxisMove.add((function(f,a1) {
			return function(a2,a3) {
				f(a1,a2,a3);
			};
		})($bind(this,this.onGamepadAxisMove),gamepad));
		gamepad.onButtonDown.add((function(f1,a11) {
			return function(a21) {
				f1(a11,a21);
			};
		})($bind(this,this.onGamepadButtonDown),gamepad));
		gamepad.onButtonUp.add((function(f2,a12) {
			return function(a22) {
				f2(a12,a22);
			};
		})($bind(this,this.onGamepadButtonUp),gamepad));
		gamepad.onDisconnect.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onGamepadDisconnect),gamepad));
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		joystick.onAxisMove.add((function(f,a1) {
			return function(a2,a3) {
				f(a1,a2,a3);
			};
		})($bind(this,this.onJoystickAxisMove),joystick));
		joystick.onButtonDown.add((function(f1,a11) {
			return function(a21) {
				f1(a11,a21);
			};
		})($bind(this,this.onJoystickButtonDown),joystick));
		joystick.onButtonUp.add((function(f2,a12) {
			return function(a22) {
				f2(a12,a22);
			};
		})($bind(this,this.onJoystickButtonUp),joystick));
		joystick.onDisconnect.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onJoystickDisconnect),joystick));
		joystick.onHatMove.add((function(f4,a14) {
			return function(a23,a31) {
				f4(a14,a23,a31);
			};
		})($bind(this,this.onJoystickHatMove),joystick));
		joystick.onTrackballMove.add((function(f5,a15) {
			return function(a24,a32) {
				f5(a15,a24,a32);
			};
		})($bind(this,this.onJoystickTrackballMove),joystick));
	}
	,get_frameRate: function() {
		return this.backend.getFrameRate();
	}
	,set_frameRate: function(value) {
		return this.backend.setFrameRate(value);
	}
	,get_renderer: function() {
		return this.renderers[0];
	}
	,get_window: function() {
		return this.windows[0];
	}
	,__class__: lime_app_Application
	,__properties__: {get_window:"get_window",get_renderer:"get_renderer",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate"}
});
var lime_app_Event = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event"] = lime_app_Event;
lime_app_Event.__name__ = ["lime","app","Event"];
lime_app_Event.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__class__: lime_app_Event
};
var lime_app_Event_$Dynamic_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Dynamic_Void"] = lime_app_Event_$Dynamic_$Void;
lime_app_Event_$Dynamic_$Void.__name__ = ["lime","app","Event_Dynamic_Void"];
lime_app_Event_$Dynamic_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Dynamic_$Void
};
var lime_app_Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Float_Float_Int_Void"] = lime_app_Event_$Float_$Float_$Int_$Void;
lime_app_Event_$Float_$Float_$Int_$Void.__name__ = ["lime","app","Event_Float_Float_Int_Void"];
lime_app_Event_$Float_$Float_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Float_$Float_$Int_$Void
};
var lime_app_Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Float_Float_Void"] = lime_app_Event_$Float_$Float_$Void;
lime_app_Event_$Float_$Float_$Void.__name__ = ["lime","app","Event_Float_Float_Void"];
lime_app_Event_$Float_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Float_$Float_$Void
};
var lime_app_Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Int_Float_Void"] = lime_app_Event_$Int_$Float_$Void;
lime_app_Event_$Int_$Float_$Void.__name__ = ["lime","app","Event_Int_Float_Void"];
lime_app_Event_$Int_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Int_$Float_$Void
};
var lime_app_Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Int_Int_Void"] = lime_app_Event_$Int_$Int_$Void;
lime_app_Event_$Int_$Int_$Void.__name__ = ["lime","app","Event_Int_Int_Void"];
lime_app_Event_$Int_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Int_$Int_$Void
};
var lime_app_Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Int_Void"] = lime_app_Event_$Int_$Void;
lime_app_Event_$Int_$Void.__name__ = ["lime","app","Event_Int_Void"];
lime_app_Event_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Int_$Void
};
var lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = ["lime","app","Event_Int_lime_ui_JoystickHatPosition_Void"];
lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app_Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_String_Int_Int_Void"] = lime_app_Event_$String_$Int_$Int_$Void;
lime_app_Event_$String_$Int_$Int_$Void.__name__ = ["lime","app","Event_String_Int_Int_Void"];
lime_app_Event_$String_$Int_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$String_$Int_$Int_$Void
};
var lime_app_Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_String_Void"] = lime_app_Event_$String_$Void;
lime_app_Event_$String_$Void.__name__ = ["lime","app","Event_String_Void"];
lime_app_Event_$String_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$String_$Void
};
var lime_app_Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_graphics_RenderContext_Void"] = lime_app_Event_$lime_$graphics_$RenderContext_$Void;
lime_app_Event_$lime_$graphics_$RenderContext_$Void.__name__ = ["lime","app","Event_lime_graphics_RenderContext_Void"];
lime_app_Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_GamepadAxis_Float_Void"] = lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = ["lime","app","Event_lime_ui_GamepadAxis_Float_Void"];
lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app_Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_GamepadButton_Void"] = lime_app_Event_$lime_$ui_$GamepadButton_$Void;
lime_app_Event_$lime_$ui_$GamepadButton_$Void.__name__ = ["lime","app","Event_lime_ui_GamepadButton_Void"];
lime_app_Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app_Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_Gamepad_Void"] = lime_app_Event_$lime_$ui_$Gamepad_$Void;
lime_app_Event_$lime_$ui_$Gamepad_$Void.__name__ = ["lime","app","Event_lime_ui_Gamepad_Void"];
lime_app_Event_$lime_$ui_$Gamepad_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$Gamepad_$Void
};
var lime_app_Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_Joystick_Void"] = lime_app_Event_$lime_$ui_$Joystick_$Void;
lime_app_Event_$lime_$ui_$Joystick_$Void.__name__ = ["lime","app","Event_lime_ui_Joystick_Void"];
lime_app_Event_$lime_$ui_$Joystick_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$Joystick_$Void
};
var lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = ["lime","app","Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"];
lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app_Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_Touch_Void"] = lime_app_Event_$lime_$ui_$Touch_$Void;
lime_app_Event_$lime_$ui_$Touch_$Void.__name__ = ["lime","app","Event_lime_ui_Touch_Void"];
lime_app_Event_$lime_$ui_$Touch_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$Touch_$Void
};
var lime_app_Future = function(work) {
	if(work != null) {
		if(lime_app_Future.__threadPool == null) {
			lime_app_Future.__threadPool = new lime_system_ThreadPool();
			lime_app_Future.__threadPool.doWork.add(lime_app_Future.threadPool_doWork);
			lime_app_Future.__threadPool.onComplete.add(lime_app_Future.threadPool_onComplete);
			lime_app_Future.__threadPool.onError.add(lime_app_Future.threadPool_onError);
		}
		var promise = new lime_app_Promise();
		promise.future = this;
		lime_app_Future.__threadPool.queue({ promise : promise, work : work});
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = ["lime","app","Future"];
lime_app_Future.__threadPool = null;
lime_app_Future.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app_Future.__threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		lime_app_Future.__threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app_Future.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app_Future.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
lime_app_Future.prototype = {
	onComplete: function(listener) {
		if(listener != null) {
			if(this.__completed) listener(this.value); else if(!this.__errored) {
				if(this.__completeListeners == null) this.__completeListeners = [];
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.__errored) listener(this.__errorMessage); else if(!this.__completed) {
				if(this.__errorListeners == null) this.__errorListeners = [];
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) this.__progressListeners = [];
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,then: function(next) {
		if(this.__completed) return next(this.value); else if(this.__errored) {
			var future = new lime_app_Future();
			future.onError(this.__errorMessage);
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future1 = next(val);
				future1.onError($bind(promise,promise.error));
				future1.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,get_isCompleted: function() {
		return this.__completed || this.__errored;
	}
	,__class__: lime_app_Future
	,__properties__: {get_isCompleted:"get_isCompleted"}
};
var lime_app_Preloader = function() {
	this.total = 0;
	this.loaded = 0;
	this.onProgress = new lime_app_Event_$Int_$Int_$Void();
	this.onComplete = new lime_app_Event_$Void_$Void();
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.app.Preloader"] = lime_app_Preloader;
lime_app_Preloader.__name__ = ["lime","app","Preloader"];
lime_app_Preloader.prototype = {
	create: function(config) {
	}
	,load: function(urls,types) {
		var url = null;
		var cacheVersion = lime_Assets.cache.version;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "IMAGE":
				if(!lime_app_Preloader.images.exists(url)) {
					var image = new Image();
					lime_app_Preloader.images.set(url,image);
					image.onload = $bind(this,this.image_onLoad);
					image.src = url + "?" + cacheVersion;
					this.total++;
				}
				break;
			case "BINARY":
				if(!lime_app_Preloader.loaders.exists(url)) {
					var loader = new lime_net_HTTPRequest();
					lime_app_Preloader.loaders.set(url,loader);
					this.total++;
				}
				break;
			case "TEXT":
				if(!lime_app_Preloader.loaders.exists(url)) {
					var loader1 = new lime_net_HTTPRequest();
					lime_app_Preloader.loaders.set(url,loader1);
					this.total++;
				}
				break;
			case "FONT":
				this.total++;
				this.loadFont(url);
				break;
			default:
			}
		}
		var $it0 = lime_app_Preloader.loaders.keys();
		while( $it0.hasNext() ) {
			var url1 = $it0.next();
			var loader2 = lime_app_Preloader.loaders.get(url1);
			var future = loader2.load(url1 + "?" + cacheVersion);
			future.onComplete($bind(this,this.loader_onComplete));
		}
		if(this.total == 0) this.start();
	}
	,loadFont: function(font) {
		var _g = this;
		if(window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load))) window.document.fonts.load("1em '" + font + "'").then(function(_) {
			_g.loaded++;
			_g.onProgress.dispatch(_g.loaded,_g.total);
			if(_g.loaded == _g.total) _g.start();
		}); else {
			var node = window.document.createElement("span");
			node.innerHTML = "giItT1WQy@!-/#";
			var style = node.style;
			style.position = "absolute";
			style.left = "-10000px";
			style.top = "-10000px";
			style.fontSize = "300px";
			style.fontFamily = "sans-serif";
			style.fontVariant = "normal";
			style.fontStyle = "normal";
			style.fontWeight = "normal";
			style.letterSpacing = "0";
			window.document.body.appendChild(node);
			var width = node.offsetWidth;
			style.fontFamily = "'" + font + "', sans-serif";
			var interval = null;
			var found = false;
			var checkFont = function() {
				if(node.offsetWidth != width) {
					if(!found) {
						found = true;
						return false;
					}
					_g.loaded++;
					if(interval != null) window.clearInterval(interval);
					node.parentNode.removeChild(node);
					node = null;
					_g.onProgress.dispatch(_g.loaded,_g.total);
					if(_g.loaded == _g.total) _g.start();
					return true;
				}
				return false;
			};
			if(!checkFont()) interval = window.setInterval(checkFont,50);
		}
	}
	,start: function() {
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,image_onLoad: function(_) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,loader_onComplete: function(_) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: lime_app_Preloader
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = ["lime","app","Promise"];
lime_app_Promise.prototype = {
	complete: function(data) {
		if(!this.future.__errored) {
			this.future.__completed = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.__completed) {
			this.future.__errored = true;
			this.future.__errorMessage = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress) {
		if(!this.future.__errored && !this.future.__completed) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress);
				}
			}
		}
		return this;
	}
	,get_isCompleted: function() {
		return this.future.get_isCompleted();
	}
	,__class__: lime_app_Promise
	,__properties__: {get_isCompleted:"get_isCompleted"}
};
var lime_audio_ALAudioContext = function() {
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.audio.ALAudioContext"] = lime_audio_ALAudioContext;
lime_audio_ALAudioContext.__name__ = ["lime","audio","ALAudioContext"];
lime_audio_ALAudioContext.prototype = {
	bufferData: function(buffer,format,data,size,freq) {
		lime_audio_openal_AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime_audio_openal_AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime_audio_openal_AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime_audio_openal_AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime_audio_openal_AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime_audio_openal_AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime_audio_openal_AL.bufferiv(buffer,param,values);
	}
	,deleteBuffer: function(buffer) {
		lime_audio_openal_AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime_audio_openal_AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime_audio_openal_AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime_audio_openal_AL.deleteSources(sources);
	}
	,disable: function(capability) {
		lime_audio_openal_AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime_audio_openal_AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime_audio_openal_AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime_audio_openal_AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime_audio_openal_AL.enable(capability);
	}
	,genSource: function() {
		return lime_audio_openal_AL.genSource();
	}
	,genSources: function(n) {
		return lime_audio_openal_AL.genSources(n);
	}
	,genBuffer: function() {
		return lime_audio_openal_AL.genBuffer();
	}
	,genBuffers: function(n) {
		return lime_audio_openal_AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime_audio_openal_AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime_audio_openal_AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime_audio_openal_AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBufferiv(buffer,param,count);
	}
	,getDouble: function(param) {
		return lime_audio_openal_AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime_audio_openal_AL.getEnumValue(ename);
	}
	,getError: function() {
		return lime_audio_openal_AL.getError();
	}
	,getErrorString: function() {
		return lime_audio_openal_AL.getErrorString();
	}
	,getFloat: function(param) {
		return lime_audio_openal_AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime_audio_openal_AL.getInteger(param);
	}
	,getIntegerv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getIntegerv(param,count);
	}
	,getListener3f: function(param) {
		return lime_audio_openal_AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime_audio_openal_AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime_audio_openal_AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime_audio_openal_AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime_audio_openal_AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime_audio_openal_AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime_audio_openal_AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime_audio_openal_AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime_audio_openal_AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getSourceiv(source,param,count);
	}
	,getString: function(param) {
		return lime_audio_openal_AL.getString(param);
	}
	,isBuffer: function(buffer) {
		return lime_audio_openal_AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime_audio_openal_AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime_audio_openal_AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime_audio_openal_AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime_audio_openal_AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime_audio_openal_AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime_audio_openal_AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime_audio_openal_AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime_audio_openal_AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime_audio_openal_AL.listeneriv(param,values);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime_audio_openal_AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime_audio_openal_AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime_audio_openal_AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime_audio_openal_AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime_audio_openal_AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime_audio_openal_AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime_audio_openal_AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime_audio_openal_AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime_audio_openal_AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime_audio_openal_AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime_audio_openal_AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime_audio_openal_AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime_audio_openal_AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime_audio_openal_AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime_audio_openal_AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime_audio_openal_AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime_audio_openal_AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime_audio_openal_AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime_audio_openal_AL.speedOfSound(value);
	}
	,__class__: lime_audio_ALAudioContext
};
var lime_audio_ALCAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.EXTENSIONS = 4102;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_VALUE = 40964;
	this.INVALID_ENUM = 40963;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.NO_ERROR = 0;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.FREQUENCY = 4103;
	this.TRUE = 1;
	this.FALSE = 0;
};
$hxClasses["lime.audio.ALCAudioContext"] = lime_audio_ALCAudioContext;
lime_audio_ALCAudioContext.__name__ = ["lime","audio","ALCAudioContext"];
lime_audio_ALCAudioContext.prototype = {
	closeDevice: function(device) {
		return lime_audio_openal_ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime_audio_openal_ALC.createContext(device,attrlist);
	}
	,destroyContext: function(context) {
		lime_audio_openal_ALC.destroyContext(context);
	}
	,getContextsDevice: function(context) {
		return lime_audio_openal_ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime_audio_openal_ALC.getCurrentContext();
	}
	,getError: function(device) {
		return lime_audio_openal_ALC.getError(device);
	}
	,getErrorString: function(device) {
		return lime_audio_openal_ALC.getErrorString(device);
	}
	,getIntegerv: function(device,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_ALC.getIntegerv(device,param,count);
	}
	,getString: function(device,param) {
		return lime_audio_openal_ALC.getString(device,param);
	}
	,makeContextCurrent: function(context) {
		return lime_audio_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_audio_openal_ALC.openDevice(deviceName);
	}
	,processContext: function(context) {
		lime_audio_openal_ALC.processContext(context);
	}
	,suspendContext: function(context) {
		lime_audio_openal_ALC.suspendContext(context);
	}
	,__class__: lime_audio_ALCAudioContext
};
var lime_audio_AudioBuffer = function() {
	this.id = 0;
};
$hxClasses["lime.audio.AudioBuffer"] = lime_audio_AudioBuffer;
lime_audio_AudioBuffer.__name__ = ["lime","audio","AudioBuffer"];
lime_audio_AudioBuffer.fromBytes = function(bytes) {
	return null;
};
lime_audio_AudioBuffer.fromFile = function(path) {
	return null;
};
lime_audio_AudioBuffer.fromURL = function(url,handler) {
	if(url != null && url.indexOf("http://") == -1 && url.indexOf("https://") == -1) handler(lime_audio_AudioBuffer.fromFile(url)); else {
	}
};
lime_audio_AudioBuffer.prototype = {
	dispose: function() {
	}
	,__class__: lime_audio_AudioBuffer
};
var lime_audio_AudioContext = $hxClasses["lime.audio.AudioContext"] = { __ename__ : true, __constructs__ : ["OPENAL","HTML5","WEB","FLASH","CUSTOM"] };
lime_audio_AudioContext.OPENAL = function(alc,al) { var $x = ["OPENAL",0,alc,al]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.HTML5 = function(context) { var $x = ["HTML5",1,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.WEB = function(context) { var $x = ["WEB",2,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.FLASH = function(context) { var $x = ["FLASH",3,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.CUSTOM = function(data) { var $x = ["CUSTOM",4,data]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
var lime_audio_AudioManager = function() { };
$hxClasses["lime.audio.AudioManager"] = lime_audio_AudioManager;
lime_audio_AudioManager.__name__ = ["lime","audio","AudioManager"];
lime_audio_AudioManager.context = null;
lime_audio_AudioManager.init = function(context) {
	if(lime_audio_AudioManager.context == null) {
		if(context == null) try {
			window.AudioContext = window.AudioContext || window.webkitAudioContext;;
			lime_audio_AudioManager.context = lime_audio_AudioContext.WEB(new AudioContext ());
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			lime_audio_AudioManager.context = lime_audio_AudioContext.HTML5(new lime_audio_HTML5AudioContext());
		} else lime_audio_AudioManager.context = context;
	}
};
lime_audio_AudioManager.resume = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.processContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
lime_audio_AudioManager.shutdown = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				var device = alc.getContextsDevice(currentContext);
				alc.makeContextCurrent(null);
				alc.destroyContext(currentContext);
				alc.closeDevice(device);
			}
			break;
		default:
		}
	}
};
lime_audio_AudioManager.suspend = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.suspendContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
var lime_audio_AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) loops = 0;
	if(offset == null) offset = 0;
	this.onComplete = new lime_app_Event_$Void_$Void();
	this.buffer = buffer;
	this.offset = offset;
	if(length != null && length != 0) this.set_length(length);
	this.set_loops(loops);
	this.id = 0;
	if(buffer != null) this.init();
};
$hxClasses["lime.audio.AudioSource"] = lime_audio_AudioSource;
lime_audio_AudioSource.__name__ = ["lime","audio","AudioSource"];
lime_audio_AudioSource.prototype = {
	dispose: function() {
		{
			var _g = lime_audio_AudioManager.context;
			switch(_g[1]) {
			case 0:
				var al = _g[3];
				var alc = _g[2];
				if(this.id != 0) al.deleteSource(this.id);
				break;
			default:
			}
		}
	}
	,init: function() {
		{
			var _g = lime_audio_AudioManager.context;
			switch(_g[1]) {
			case 0:
				var al = _g[3];
				var alc = _g[2];
				if(this.buffer.id == 0) {
					this.buffer.id = al.genBuffer();
					var format = 0;
					if(this.buffer.channels == 1) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_MONO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_MONO16;
					} else if(this.buffer.channels == 2) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_STEREO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_STEREO16;
					}
					al.bufferData(this.buffer.id,format,this.buffer.data,this.buffer.data.length,this.buffer.sampleRate);
				}
				this.id = al.genSource();
				al.sourcei(this.id,al.BUFFER,this.buffer.id);
				break;
			default:
			}
		}
	}
	,play: function() {
	}
	,pause: function() {
	}
	,stop: function() {
	}
	,timer_onRun: function() {
	}
	,get_currentTime: function() {
		return 0;
	}
	,set_currentTime: function(value) {
		return this.pauseTime = value;
	}
	,get_gain: function() {
		return 1;
	}
	,set_gain: function(value) {
		return 1;
	}
	,get_length: function() {
		if(this.__length != null) return this.__length;
		return 0;
	}
	,set_length: function(value) {
		return this.__length = value;
	}
	,get_loops: function() {
		return this.__loops;
	}
	,set_loops: function(loops) {
		return this.__loops = loops;
	}
	,__class__: lime_audio_AudioSource
	,__properties__: {set_loops:"set_loops",get_loops:"get_loops",set_length:"set_length",get_length:"get_length",set_gain:"set_gain",get_gain:"get_gain",set_currentTime:"set_currentTime",get_currentTime:"get_currentTime"}
};
var lime_audio_FlashAudioContext = function() {
};
$hxClasses["lime.audio.FlashAudioContext"] = lime_audio_FlashAudioContext;
lime_audio_FlashAudioContext.__name__ = ["lime","audio","FlashAudioContext"];
lime_audio_FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) startPosition = -1;
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0;
		return null;
	}
	,__class__: lime_audio_FlashAudioContext
};
var lime_audio_HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.audio.HTML5AudioContext"] = lime_audio_HTML5AudioContext;
lime_audio_HTML5AudioContext.__name__ = ["lime","audio","HTML5AudioContext"];
lime_audio_HTML5AudioContext.prototype = {
	canPlayType: function(buffer,type) {
		if(buffer.src != null) return buffer.src.canPlayType(type);
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime_audio_AudioBuffer();
		buffer.src = new Audio();
		buffer.src.src = urlString;
		return buffer;
	}
	,getAutoplay: function(buffer) {
		if(buffer.src != null) return buffer.src.autoplay;
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.src != null) return buffer.src.buffered;
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.currentSrc;
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.src != null) return buffer.src.currentTime;
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.defaultPlaybackRate;
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.src != null) return buffer.src.duration;
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.src != null) return buffer.src.ended;
		return false;
	}
	,getError: function(buffer) {
		if(buffer.src != null) return buffer.src.error;
		return null;
	}
	,getLoop: function(buffer) {
		if(buffer.src != null) return buffer.src.loop;
		return false;
	}
	,getMuted: function(buffer) {
		if(buffer.src != null) return buffer.src.muted;
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.src != null) return buffer.src.networkState;
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.src != null) return buffer.src.paused;
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.src != null) return buffer.src.played;
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.src != null) return buffer.src.preload;
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.src != null) return buffer.src.readyState;
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.src != null) return buffer.src.seekable;
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.src != null) return buffer.src.seeking;
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.src;
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.src != null) return buffer.src.volume;
		return 1;
	}
	,load: function(buffer) {
		if(buffer.src != null) return buffer.src.load();
	}
	,pause: function(buffer) {
		if(buffer.src != null) return buffer.src.pause();
	}
	,play: function(buffer) {
		if(buffer.src != null) return buffer.src.play();
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.src != null) buffer.src.autoplay = value;
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.src != null) buffer.src.currentTime = value;
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.defaultPlaybackRate = value;
	}
	,setLoop: function(buffer,value) {
		if(buffer.src != null) buffer.src.loop = value;
	}
	,setMuted: function(buffer,value) {
		if(buffer.src != null) buffer.src.muted = value;
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.playbackRate = value;
	}
	,setPreload: function(buffer,value) {
		if(buffer.src != null) buffer.src.preload = value;
	}
	,setSrc: function(buffer,value) {
		if(buffer.src != null) buffer.src.src = value;
	}
	,setVolume: function(buffer,value) {
		if(buffer.src != null) buffer.src.volume = value;
	}
	,__class__: lime_audio_HTML5AudioContext
};
var lime_audio_openal_AL = function() { };
$hxClasses["lime.audio.openal.AL"] = lime_audio_openal_AL;
lime_audio_openal_AL.__name__ = ["lime","audio","openal","AL"];
lime_audio_openal_AL.bufferData = function(buffer,format,data,size,freq) {
};
lime_audio_openal_AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.bufferf = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferfv = function(buffer,param,values) {
};
lime_audio_openal_AL.bufferi = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferiv = function(buffer,param,values) {
};
lime_audio_openal_AL.deleteBuffer = function(buffer) {
};
lime_audio_openal_AL.deleteBuffers = function(buffers) {
};
lime_audio_openal_AL.deleteSource = function(source) {
};
lime_audio_openal_AL.deleteSources = function(sources) {
};
lime_audio_openal_AL.disable = function(capability) {
};
lime_audio_openal_AL.distanceModel = function(distanceModel) {
};
lime_audio_openal_AL.dopplerFactor = function(value) {
};
lime_audio_openal_AL.dopplerVelocity = function(value) {
};
lime_audio_openal_AL.enable = function(capability) {
};
lime_audio_openal_AL.genSource = function() {
	return 0;
};
lime_audio_openal_AL.genSources = function(n) {
	return null;
};
lime_audio_openal_AL.genBuffer = function() {
	return 0;
};
lime_audio_openal_AL.genBuffers = function(n) {
	return null;
};
lime_audio_openal_AL.getBoolean = function(param) {
	return false;
};
lime_audio_openal_AL.getBooleanv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBufferf = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferfv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getBufferi = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferiv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getDouble = function(param) {
	return 0;
};
lime_audio_openal_AL.getDoublev = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getEnumValue = function(ename) {
	return 0;
};
lime_audio_openal_AL.getError = function() {
	return 0;
};
lime_audio_openal_AL.getErrorString = function() {
	var _g = lime_audio_openal_AL.getError();
	switch(_g) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_AL.getFloat = function(param) {
	return 0;
};
lime_audio_openal_AL.getFloatv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getInteger = function(param) {
	return 0;
};
lime_audio_openal_AL.getIntegerv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getListener3f = function(param) {
	return null;
};
lime_audio_openal_AL.getListener3i = function(param) {
	return null;
};
lime_audio_openal_AL.getListenerf = function(param) {
	return 0;
};
lime_audio_openal_AL.getListenerfv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getListeneri = function(param) {
	return 0;
};
lime_audio_openal_AL.getListeneriv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getProcAddress = function(fname) {
	return null;
};
lime_audio_openal_AL.getSource3f = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcef = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSource3i = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcefv = function(source,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getSourcei = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSourceiv = function(source,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getString = function(param) {
	return null;
};
lime_audio_openal_AL.isBuffer = function(buffer) {
	return false;
};
lime_audio_openal_AL.isEnabled = function(capability) {
	return false;
};
lime_audio_openal_AL.isExtensionPresent = function(extname) {
	return false;
};
lime_audio_openal_AL.isSource = function(source) {
	return false;
};
lime_audio_openal_AL.listener3f = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listener3i = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listenerf = function(param,value) {
};
lime_audio_openal_AL.listenerfv = function(param,values) {
};
lime_audio_openal_AL.listeneri = function(param,value) {
};
lime_audio_openal_AL.listeneriv = function(param,values) {
};
lime_audio_openal_AL.source3f = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.source3i = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.sourcef = function(source,param,value) {
};
lime_audio_openal_AL.sourcefv = function(source,param,values) {
};
lime_audio_openal_AL.sourcei = function(source,param,value) {
};
lime_audio_openal_AL.sourceiv = function(source,param,values) {
};
lime_audio_openal_AL.sourcePlay = function(source) {
};
lime_audio_openal_AL.sourcePlayv = function(sources) {
};
lime_audio_openal_AL.sourceStop = function(source) {
};
lime_audio_openal_AL.sourceStopv = function(sources) {
};
lime_audio_openal_AL.sourceRewind = function(source) {
};
lime_audio_openal_AL.sourceRewindv = function(sources) {
};
lime_audio_openal_AL.sourcePause = function(source) {
};
lime_audio_openal_AL.sourcePausev = function(sources) {
};
lime_audio_openal_AL.sourceQueueBuffer = function(source,buffer) {
};
lime_audio_openal_AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime_audio_openal_AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime_audio_openal_AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime_audio_openal_AL.speedOfSound = function(value) {
};
var lime_audio_openal_ALC = function() { };
$hxClasses["lime.audio.openal.ALC"] = lime_audio_openal_ALC;
lime_audio_openal_ALC.__name__ = ["lime","audio","openal","ALC"];
lime_audio_openal_ALC.closeDevice = function(device) {
	return false;
};
lime_audio_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_audio_openal_ALC.destroyContext = function(context) {
};
lime_audio_openal_ALC.getContextsDevice = function(context) {
	return null;
};
lime_audio_openal_ALC.getCurrentContext = function() {
	return null;
};
lime_audio_openal_ALC.getError = function(device) {
	return 0;
};
lime_audio_openal_ALC.getErrorString = function(device) {
	var _g = lime_audio_openal_ALC.getError(device);
	switch(_g) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime_audio_openal_ALC.getString = function(device,param) {
	return null;
};
lime_audio_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_audio_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_audio_openal_ALC.processContext = function(context) {
};
lime_audio_openal_ALC.suspendContext = function(context) {
};
var lime_audio_openal__$ALContext_ALContext_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALContext.ALContext_Impl_"] = lime_audio_openal__$ALContext_ALContext_$Impl_$;
lime_audio_openal__$ALContext_ALContext_$Impl_$.__name__ = ["lime","audio","openal","_ALContext","ALContext_Impl_"];
lime_audio_openal__$ALContext_ALContext_$Impl_$._new = function(handle) {
	return handle;
};
var lime_audio_openal__$ALDevice_ALDevice_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALDevice.ALDevice_Impl_"] = lime_audio_openal__$ALDevice_ALDevice_$Impl_$;
lime_audio_openal__$ALDevice_ALDevice_$Impl_$.__name__ = ["lime","audio","openal","_ALDevice","ALDevice_Impl_"];
lime_audio_openal__$ALDevice_ALDevice_$Impl_$._new = function(handle) {
	return handle;
};
var lime_graphics_ConsoleRenderContext = function() {
};
$hxClasses["lime.graphics.ConsoleRenderContext"] = lime_graphics_ConsoleRenderContext;
lime_graphics_ConsoleRenderContext.__name__ = ["lime","graphics","ConsoleRenderContext"];
lime_graphics_ConsoleRenderContext.prototype = {
	createIndexBuffer: function(indices,count) {
		return new lime_graphics_console_IndexBuffer();
	}
	,createVertexBuffer: function(decl,count) {
		return new lime_graphics_console_VertexBuffer();
	}
	,lookupShader: function(name) {
		return new lime_graphics_console_Shader();
	}
	,clear: function(r,g,b,a,depth,stencil) {
		if(stencil == null) stencil = 0;
		if(depth == null) depth = 1.0;
	}
	,bindShader: function(shader) {
	}
	,setViewport: function(x,y,width,height,nearPlane,farPlane) {
		if(farPlane == null) farPlane = 1.0;
		if(nearPlane == null) nearPlane = 0.0;
	}
	,setVertexShaderConstantF: function(startRegister,vec4,vec4count) {
	}
	,setVertexSource: function(vb) {
	}
	,setIndexSource: function(ib) {
	}
	,draw: function(primitive,startVertex,primitiveCount) {
	}
	,drawIndexed: function(primitive,vertexCount,startIndex,primitiveCount) {
	}
	,get_width: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,__class__: lime_graphics_ConsoleRenderContext
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var lime_graphics_FlashRenderContext = function() {
};
$hxClasses["lime.graphics.FlashRenderContext"] = lime_graphics_FlashRenderContext;
lime_graphics_FlashRenderContext.__name__ = ["lime","graphics","FlashRenderContext"];
lime_graphics_FlashRenderContext.prototype = {
	addChild: function(child) {
		return null;
	}
	,addChildAt: function(child,index) {
		return null;
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		return false;
	}
	,dispatchEvent: function(event) {
		return false;
	}
	,getBounds: function(targetCoordinateSpace) {
		return null;
	}
	,getChildAt: function(index) {
		return null;
	}
	,getChildByName: function(name) {
		return null;
	}
	,getChildIndex: function(child) {
		return 0;
	}
	,getObjectsUnderPoint: function(point) {
		return null;
	}
	,getRect: function(targetCoordinateSpace) {
		return null;
	}
	,globalToLocal: function(point) {
		return null;
	}
	,globalToLocal3D: function(point) {
		return null;
	}
	,hasEventListener: function(type) {
		return false;
	}
	,hitTestObject: function(obj) {
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		return false;
	}
	,local3DToGlobal: function(point3d) {
		return null;
	}
	,localToGlobal: function(point) {
		return null;
	}
	,removeChild: function(child) {
		return null;
	}
	,removeChildAt: function(index) {
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
	}
	,requestSoftKeyboard: function() {
		return false;
	}
	,setChildIndex: function(child,index) {
	}
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,startTouchDrag: function(touchPointID,lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,stopAllMovieClips: function() {
	}
	,stopDrag: function() {
	}
	,stopTouchDrag: function(touchPointID) {
	}
	,swapChildren: function(child1,child2) {
	}
	,swapChildrenAt: function(index1,index2) {
	}
	,toString: function() {
		return null;
	}
	,willTrigger: function(type) {
		return false;
	}
	,__class__: lime_graphics_FlashRenderContext
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) height = -1;
	if(width == null) width = -1;
	if(offsetY == null) offsetY = 0;
	if(offsetX == null) offsetX = 0;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	if(type == null) {
		if(lime_app_Application.current != null && lime_app_Application.current.renderers[0] != null) {
			var _g = lime_app_Application.current.renderers[0].context;
			switch(_g[1]) {
			case 2:case 1:
				this.type = lime_graphics_ImageType.CANVAS;
				break;
			case 3:
				this.type = lime_graphics_ImageType.FLASH;
				break;
			default:
				this.type = lime_graphics_ImageType.DATA;
			}
		} else this.type = lime_graphics_ImageType.DATA;
	} else this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime_graphics_utils_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null) this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				break;
			case 1:
				this.buffer = new lime_graphics_ImageBuffer((function($this) {
					var $r;
					var elements = width * height * 4;
					var this1;
					if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
					$r = this1;
					return $r;
				}(this)),width,height);
				if(color != null) this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				break;
			case 2:
				break;
			default:
			}
		}
	} else this.__fromImageBuffer(buffer);
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = ["lime","graphics","Image"];
lime_graphics_Image.__base64Encoder = null;
lime_graphics_Image.fromBase64 = function(base64,type,onload) {
	if(base64 == null) return null;
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type,onload);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) return null;
	return bitmapData.image;
};
lime_graphics_Image.fromBytes = function(bytes,onload) {
	if(bytes == null) return null;
	var image = new lime_graphics_Image();
	image.__fromBytes(bytes,onload);
	return image;
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.fromFile = function(path,onload,onerror) {
	var image = new lime_graphics_Image();
	image.__fromFile(path,onload,onerror);
	return image;
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.__base64Encode = function(bytes) {
	var extension;
	var _g = bytes.length % 3;
	switch(_g) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime_graphics_Image.__base64Encoder == null) lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars));
	return lime_graphics_Image.__base64Encoder.encodeBytes(bytes).toString() + extension;
};
lime_graphics_Image.__isJPG = function(bytes) {
	return bytes.b[0] == 255 && bytes.b[1] == 216;
};
lime_graphics_Image.__isPNG = function(bytes) {
	return bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26 && bytes.b[7] == 10;
};
lime_graphics_Image.__isGIF = function(bytes) {
	if(bytes.b[0] == 71 && bytes.b[1] == 73 && bytes.b[2] == 70 && bytes.b[3] == 56) {
		var b = bytes.b[4];
		return (b == 55 || b == 57) && bytes.b[5] == 97;
	}
	return false;
};
lime_graphics_Image.prototype = {
	clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS && this.buffer.__srcImage == null) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
				lime_graphics_utils_ImageCanvasUtil.sync(this,true);
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.dirty = this.dirty;
			return image;
		} else return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) return;
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel[1]) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel[1]) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(this.buffer == null || sourceImage == null) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(this.width <= 0 || this.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) sourceRect.width = this.width - destPoint.x;
		if(destPoint.y + sourceRect.height > this.height) sourceRect.height = this.height - destPoint.y;
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x = -destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y = -destPoint.y;
			destPoint.y = 0;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null?alphaImage.buffer.get_src():null,alphaPoint != null?alphaPoint.__toFlashPoint():null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) quality = 90;
		if(format == null) format = "png";
		switch(format) {
		case "png":
			return lime_graphics_format_PNG.encode(this);
		case "jpg":case "jpeg":
			return lime_graphics_format_JPEG.encode(this,quality);
		case "bmp":
			return lime_graphics_format_BMP.encode(this);
		default:
		}
		return null;
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) return;
			lime_graphics_utils_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color,format) {
		if(this.buffer == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.floodFill(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.floodFill(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,getColorBoundsRect: function(mask,color,findColor,format) {
		if(findColor == null) findColor = true;
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 1:
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 2:
			var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask,color,findColor);
			return new lime_math_Rectangle(rect.x,rect.y,rect.width,rect.height);
		default:
			return null;
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format != null) switch(format) {
			case 1:
				return color;
			case 2:
				var bgra;
				{
					var bgra1 = 0;
					bgra1 = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
					bgra = bgra1;
				}
				return bgra;
			default:
				var rgba;
				{
					var rgba1 = 0;
					rgba1 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba = rgba1;
				}
				return rgba;
			} else {
				var rgba2;
				{
					var rgba3 = 0;
					rgba3 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba2 = rgba3;
				}
				return rgba2;
			}
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format != null) switch(format) {
			case 1:
				return color;
			case 2:
				var bgra;
				{
					var bgra1 = 0;
					bgra1 = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
					bgra = bgra1;
				}
				return bgra;
			default:
				var rgba;
				{
					var rgba1 = 0;
					rgba1 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba = rgba1;
				}
				return rgba;
			} else {
				var rgba2;
				{
					var rgba3 = 0;
					rgba3 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba2 = rgba3;
				}
				return rgba2;
			}
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixels(this,rect,format);
		case 2:
			return null;
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return null;
		}
	}
	,resize: function(newWidth,newHeight) {
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime_graphics_utils_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,scroll: function(x,y) {
		if(this.buffer == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.scroll(this,x,y);
			break;
		case 1:
			this.copyPixels(this,this.get_rect(),new lime_math_Vector2(x,y));
			break;
		case 2:
			this.buffer.__srcBitmapData.scroll(x + this.offsetX,y + this.offsetX);
			break;
		default:
		}
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,argb);
			break;
		default:
		}
	}
	,threshold: function(sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) copySource = false;
		if(mask == null) mask = -1;
		if(color == null) color = 0;
		return lime_graphics_utils_ImageDataUtil.threshold(this,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource);
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,setPixels: function(rect,bytes,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixels(this,rect,bytes,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixels(this,rect,bytes,format);
			break;
		case 2:
			break;
		default:
		}
	}
	,__clipRect: function(r) {
		if(r == null) return null;
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) return null;
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) return null;
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) return null;
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) return null;
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		var image = new Image();
		image.crossOrigin = "Anonymous";
		var image_onLoaded = function(event) {
			_g.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.offsetX = 0;
			_g.offsetY = 0;
			_g.width = _g.buffer.width;
			_g.height = _g.buffer.height;
			if(onload != null) onload(_g);
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) type = "image/png"; else if(lime_graphics_Image.__isJPG(bytes)) type = "image/jpeg"; else if(lime_graphics_Image.__isGIF(bytes)) type = "image/gif"; else throw new js__$Boot_HaxeError("Image tried to read PNG/JPG Bytes, but found an invalid header.");
		this.__fromBase64(lime_graphics_Image.__base64Encode(bytes),type,onload);
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		var image = new Image();
		image.crossOrigin = "Anonymous";
		image.onload = function(_) {
			_g.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.width = image.width;
			_g.height = image.height;
			if(onload != null) onload(_g);
		};
		image.onerror = function(_1) {
			if(onerror != null) onerror();
		};
		image.src = path;
		if(image.complete) {
		}
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) this.width = buffer.width;
			if(this.height == -1) this.height = buffer.height;
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.sync(this,false);
			lime_graphics_utils_ImageCanvasUtil.createImageData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime_graphics_utils_ImageDataUtil.setFormat(this,value);
				break;
			default:
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		return this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width && (this.buffer.height != 0 && (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height);
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			var _g = this.type;
			switch(_g[1]) {
			case 0:
				break;
			case 1:
				lime_graphics_utils_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.unmultiplyAlpha(this);
				break;
			default:
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null) lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		if(this.buffer == null) return false;
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) return false;
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",set_src:"set_src",get_src:"get_src",get_rect:"get_rect",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_powerOfTwo:"set_powerOfTwo",get_powerOfTwo:"get_powerOfTwo",set_format:"set_format",get_format:"get_format",set_data:"set_data",get_data:"get_data"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) bitsPerPixel = 32;
	if(height == null) height = 0;
	if(width == null) width = 0;
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	if(format == null) this.format = 0; else this.format = format;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = ["lime","graphics","ImageBuffer"];
lime_graphics_ImageBuffer.prototype = {
	clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			var this1;
			if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
			buffer.data = this1;
			var copy;
			var view = this.data;
			var this2;
			if(view != null) this2 = new Uint8Array(view); else this2 = null;
			copy = this2;
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy1);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else buffer.__srcImage = this.__srcImage;
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) return this.__srcImage;
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js_Boot.__instanceof(value,Image)) this.__srcImage = value; else if(js_Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * 4;
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {get_stride:"get_stride",set_src:"set_src",get_src:"get_src"}
};
var lime_graphics_ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : true, __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime_graphics_ImageChannel.RED = ["RED",0];
lime_graphics_ImageChannel.RED.toString = $estr;
lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.GREEN = ["GREEN",1];
lime_graphics_ImageChannel.GREEN.toString = $estr;
lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.BLUE = ["BLUE",2];
lime_graphics_ImageChannel.BLUE.toString = $estr;
lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.ALPHA = ["ALPHA",3];
lime_graphics_ImageChannel.ALPHA.toString = $estr;
lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : true, __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime_graphics_ImageType.CANVAS = ["CANVAS",0];
lime_graphics_ImageType.CANVAS.toString = $estr;
lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.DATA = ["DATA",1];
lime_graphics_ImageType.DATA.toString = $estr;
lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.FLASH = ["FLASH",2];
lime_graphics_ImageType.FLASH.toString = $estr;
lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.CUSTOM = ["CUSTOM",3];
lime_graphics_ImageType.CUSTOM.toString = $estr;
lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
var lime_graphics_RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__ : true, __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM","NONE"] };
lime_graphics_RenderContext.OPENGL = function(gl) { var $x = ["OPENGL",0,gl]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CANVAS = function(context) { var $x = ["CANVAS",1,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.DOM = function(element) { var $x = ["DOM",2,element]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.FLASH = function(stage) { var $x = ["FLASH",3,stage]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CAIRO = function(cairo) { var $x = ["CAIRO",4,cairo]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CONSOLE = function(context) { var $x = ["CONSOLE",5,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CUSTOM = function(data) { var $x = ["CUSTOM",6,data]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.NONE = ["NONE",7];
lime_graphics_RenderContext.NONE.toString = $estr;
lime_graphics_RenderContext.NONE.__enum__ = lime_graphics_RenderContext;
var lime_graphics_Renderer = function(window) {
	this.onRender = new lime_app_Event_$Void_$Void();
	this.onContextRestored = new lime_app_Event_$lime_$graphics_$RenderContext_$Void();
	this.onContextLost = new lime_app_Event_$Void_$Void();
	this.window = window;
	this.backend = new lime__$backend_html5_HTML5Renderer(this);
	this.window.renderer = this;
};
$hxClasses["lime.graphics.Renderer"] = lime_graphics_Renderer;
lime_graphics_Renderer.__name__ = ["lime","graphics","Renderer"];
lime_graphics_Renderer.prototype = {
	create: function() {
		this.backend.create();
	}
	,flip: function() {
		this.backend.flip();
	}
	,render: function() {
		this.backend.render();
	}
	,__class__: lime_graphics_Renderer
};
var lime_graphics_RendererType = $hxClasses["lime.graphics.RendererType"] = { __ename__ : true, __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM"] };
lime_graphics_RendererType.OPENGL = ["OPENGL",0];
lime_graphics_RendererType.OPENGL.toString = $estr;
lime_graphics_RendererType.OPENGL.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CANVAS = ["CANVAS",1];
lime_graphics_RendererType.CANVAS.toString = $estr;
lime_graphics_RendererType.CANVAS.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.DOM = ["DOM",2];
lime_graphics_RendererType.DOM.toString = $estr;
lime_graphics_RendererType.DOM.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.FLASH = ["FLASH",3];
lime_graphics_RendererType.FLASH.toString = $estr;
lime_graphics_RendererType.FLASH.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CAIRO = ["CAIRO",4];
lime_graphics_RendererType.CAIRO.toString = $estr;
lime_graphics_RendererType.CAIRO.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CONSOLE = ["CONSOLE",5];
lime_graphics_RendererType.CONSOLE.toString = $estr;
lime_graphics_RendererType.CONSOLE.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CUSTOM = ["CUSTOM",6];
lime_graphics_RendererType.CUSTOM.toString = $estr;
lime_graphics_RendererType.CUSTOM.__enum__ = lime_graphics_RendererType;
var lime_graphics_cairo_Cairo = function(surface) {
	if(surface != null) {
	}
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = ["lime","graphics","cairo","Cairo"];
lime_graphics_cairo_Cairo.__properties__ = {get_versionString:"get_versionString",get_version:"get_version"}
lime_graphics_cairo_Cairo.version = null;
lime_graphics_cairo_Cairo.versionString = null;
lime_graphics_cairo_Cairo.get_version = function() {
	return 0;
};
lime_graphics_cairo_Cairo.get_versionString = function() {
	return "";
};
lime_graphics_cairo_Cairo.prototype = {
	arc: function(xc,yc,radius,angle1,angle2) {
	}
	,arcNegative: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,clipExtents: function(x1,y1,x2,y2) {
	}
	,clipPreserve: function() {
	}
	,closePath: function() {
	}
	,copyPage: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,fill: function() {
	}
	,fillExtents: function(x1,y1,x2,y2) {
	}
	,fillPreserve: function() {
	}
	,identityMatrix: function() {
	}
	,inClip: function(x,y) {
		return false;
	}
	,inFill: function(x,y) {
		return false;
	}
	,inStroke: function(x,y) {
		return false;
	}
	,lineTo: function(x,y) {
	}
	,moveTo: function(x,y) {
	}
	,mask: function(pattern) {
	}
	,maskSurface: function(surface,x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroup: function() {
		return null;
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,pushGroupWithContent: function(content) {
	}
	,recreate: function(surface) {
	}
	,rectangle: function(x,y,width,height) {
	}
	,relCurveTo: function(dx1,dy1,dx2,dy2,dx3,dy3) {
	}
	,relLineTo: function(dx,dy) {
	}
	,relMoveTo: function(dx,dy) {
	}
	,resetClip: function() {
	}
	,restore: function() {
	}
	,save: function() {
	}
	,setFontSize: function(size) {
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceRGBA: function(r,g,b,a) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,showPage: function() {
	}
	,showText: function(utf8) {
	}
	,status: function() {
		return 0;
	}
	,stroke: function() {
	}
	,strokeExtents: function(x1,y1,x2,y2) {
	}
	,strokePreserve: function() {
	}
	,transform: function(matrix) {
	}
	,rotate: function(amount) {
	}
	,scale: function(x,y) {
	}
	,translate: function(x,y) {
	}
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_dash: function() {
		return [];
	}
	,set_dash: function(value) {
		return value;
	}
	,get_dashCount: function() {
		return 0;
	}
	,get_fillRule: function() {
		return 0;
	}
	,set_fillRule: function(value) {
		return value;
	}
	,get_fontFace: function() {
		return 0;
	}
	,set_fontFace: function(value) {
		return value;
	}
	,get_fontOptions: function() {
		return null;
	}
	,set_fontOptions: function(value) {
		return value;
	}
	,get_groupTarget: function() {
		return 0;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,get_lineCap: function() {
		return 0;
	}
	,set_lineCap: function(value) {
		return value;
	}
	,get_lineJoin: function() {
		return 0;
	}
	,set_lineJoin: function(value) {
		return value;
	}
	,get_lineWidth: function() {
		return 0;
	}
	,set_lineWidth: function(value) {
		return value;
	}
	,get_matrix: function() {
		return null;
	}
	,set_matrix: function(value) {
		return value;
	}
	,get_miterLimit: function() {
		return 0;
	}
	,set_miterLimit: function(value) {
		return value;
	}
	,get_operator: function() {
		return 0;
	}
	,set_operator: function(value) {
		return value;
	}
	,get_source: function() {
		return 0;
	}
	,set_source: function(value) {
		return value;
	}
	,get_target: function() {
		return 0;
	}
	,get_tolerance: function() {
		return 0;
	}
	,set_tolerance: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
	,__properties__: {set_tolerance:"set_tolerance",get_tolerance:"get_tolerance",get_target:"get_target",set_source:"set_source",get_source:"get_source",set_operator:"set_operator",get_operator:"get_operator",set_miterLimit:"set_miterLimit",get_miterLimit:"get_miterLimit",set_matrix:"set_matrix",get_matrix:"get_matrix",set_lineWidth:"set_lineWidth",get_lineWidth:"get_lineWidth",set_lineJoin:"set_lineJoin",get_lineJoin:"get_lineJoin",set_lineCap:"set_lineCap",get_lineCap:"get_lineCap",get_hasCurrentPoint:"get_hasCurrentPoint",get_groupTarget:"get_groupTarget",set_fontOptions:"set_fontOptions",get_fontOptions:"get_fontOptions",set_fontFace:"set_fontFace",get_fontFace:"get_fontFace",set_fillRule:"set_fillRule",get_fillRule:"get_fillRule",get_dashCount:"get_dashCount",set_dash:"set_dash",get_dash:"get_dash",get_currentPoint:"get_currentPoint",set_antialias:"set_antialias",get_antialias:"get_antialias"}
};
var lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFTFontFace.CairoFTFontFace_Impl_"] = lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$;
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFTFontFace","CairoFTFontFace_Impl_"];
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$._new = function() {
	return 0;
};
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.create = function(face,loadFlags) {
	return 0;
};
var lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontFace.CairoFontFace_Impl_"] = lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$;
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFontFace","CairoFontFace_Impl_"];
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$._new = function() {
	return null;
};
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.status = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontOptions.CairoFontOptions_Impl_"] = lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$;
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFontOptions","CairoFontOptions_Impl_"];
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__properties__ = {set_subpixelOrder:"set_subpixelOrder",get_subpixelOrder:"get_subpixelOrder",set_hintStyle:"set_hintStyle",get_hintStyle:"get_hintStyle",set_hintMetrics:"set_hintMetrics",get_hintMetrics:"get_hintMetrics",set_antialias:"set_antialias",get_antialias:"get_antialias"}
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$._new = function() {
	return null;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_antialias = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_antialias = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintMetrics = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintMetrics = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintStyle = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintStyle = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_subpixelOrder = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_subpixelOrder = function(this1,value) {
	return value;
};
var lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoImageSurface.CairoImageSurface_Impl_"] = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$;
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoImageSurface","CairoImageSurface_Impl_"];
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__properties__ = {get_width:"get_width",get_stride:"get_stride",get_height:"get_height",get_format:"get_format",get_data:"get_data"}
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$._new = function(format,width,height) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.create = function(data,format,width,height,stride) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage = function(image) {
	return null;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_data = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_format = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_height = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_stride = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_width = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoPattern.CairoPattern_Impl_"] = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$;
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoPattern","CairoPattern_Impl_"];
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__properties__ = {set_matrix:"set_matrix",get_matrix:"get_matrix",set_filter:"set_filter",get_filter:"get_filter",set_extend:"set_extend",get_extend:"get_extend",get_colorStopCount:"get_colorStopCount"}
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$._new = function(handle) {
	return handle;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGB = function(this1,offset,r,g,b) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface = function(surface) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB = function(r,g,b) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA = function(r,g,b,a) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_colorStopCount = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_extend = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_filter = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix = function(this1,value) {
	return value;
};
var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoSurface","CairoSurface_Impl_"];
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush = function(this1) {
};
var lime_graphics_console_IndexBuffer = function() {
};
$hxClasses["lime.graphics.console.IndexBuffer"] = lime_graphics_console_IndexBuffer;
lime_graphics_console_IndexBuffer.__name__ = ["lime","graphics","console","IndexBuffer"];
lime_graphics_console_IndexBuffer.prototype = {
	__class__: lime_graphics_console_IndexBuffer
};
var lime_graphics_console_Primitive = $hxClasses["lime.graphics.console.Primitive"] = { __ename__ : true, __constructs__ : ["Point","Line","LineStrip","Triangle","TriangleStrip"] };
lime_graphics_console_Primitive.Point = ["Point",0];
lime_graphics_console_Primitive.Point.toString = $estr;
lime_graphics_console_Primitive.Point.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Line = ["Line",1];
lime_graphics_console_Primitive.Line.toString = $estr;
lime_graphics_console_Primitive.Line.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.LineStrip = ["LineStrip",2];
lime_graphics_console_Primitive.LineStrip.toString = $estr;
lime_graphics_console_Primitive.LineStrip.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Triangle = ["Triangle",3];
lime_graphics_console_Primitive.Triangle.toString = $estr;
lime_graphics_console_Primitive.Triangle.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.TriangleStrip = ["TriangleStrip",4];
lime_graphics_console_Primitive.TriangleStrip.toString = $estr;
lime_graphics_console_Primitive.TriangleStrip.__enum__ = lime_graphics_console_Primitive;
var lime_graphics_console_Shader = function() {
};
$hxClasses["lime.graphics.console.Shader"] = lime_graphics_console_Shader;
lime_graphics_console_Shader.__name__ = ["lime","graphics","console","Shader"];
lime_graphics_console_Shader.prototype = {
	__class__: lime_graphics_console_Shader
};
var lime_graphics_console_VertexBuffer = function() {
};
$hxClasses["lime.graphics.console.VertexBuffer"] = lime_graphics_console_VertexBuffer;
lime_graphics_console_VertexBuffer.__name__ = ["lime","graphics","console","VertexBuffer"];
lime_graphics_console_VertexBuffer.prototype = {
	lock: function() {
		return new lime_graphics_console_VertexOutput();
	}
	,unlock: function() {
	}
	,__class__: lime_graphics_console_VertexBuffer
};
var lime_graphics_console_VertexOutput = function() {
};
$hxClasses["lime.graphics.console.VertexOutput"] = lime_graphics_console_VertexOutput;
lime_graphics_console_VertexOutput.__name__ = ["lime","graphics","console","VertexOutput"];
lime_graphics_console_VertexOutput.prototype = {
	vec2: function(x,y) {
	}
	,vec3: function(x,y,z) {
	}
	,color: function(r,g,b,a) {
	}
	,__class__: lime_graphics_console_VertexOutput
};
var lime_graphics_format_BMP = function() { };
$hxClasses["lime.graphics.format.BMP"] = lime_graphics_format_BMP;
lime_graphics_format_BMP.__name__ = ["lime","graphics","format","BMP"];
lime_graphics_format_BMP.encode = function(image,type) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	if(type == null) type = lime_graphics_format_BMPType.RGB;
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	if(type != null) switch(type[1]) {
	case 1:
		infoHeaderLength = 108;
		break;
	case 2:
		fileHeaderLength = 0;
		pixelValuesLength += image.width * image.height;
		break;
	case 0:
		pixelValuesLength = image.width * 3 + image.width * 3 % 4 + image.height * 3 + image.height * 3;
		break;
	default:
	} else {
	}
	var data = haxe_io_Bytes.alloc(fileHeaderLength + infoHeaderLength + pixelValuesLength);
	var position = 0;
	if(fileHeaderLength > 0) {
		data.set(position++,66);
		data.set(position++,77);
		data.setInt32(position,data.length);
		position += 4;
		data.setUInt16(position,0);
		position += 2;
		data.setUInt16(position,0);
		position += 2;
		data.setInt32(position,fileHeaderLength + infoHeaderLength);
		position += 4;
	}
	data.setInt32(position,infoHeaderLength);
	position += 4;
	data.setInt32(position,image.width);
	position += 4;
	data.setInt32(position,type == lime_graphics_format_BMPType.ICO?image.height * 2:image.height);
	position += 4;
	data.setUInt16(position,1);
	position += 2;
	data.setUInt16(position,type == lime_graphics_format_BMPType.RGB?24:32);
	position += 2;
	data.setInt32(position,type == lime_graphics_format_BMPType.BITFIELD?3:0);
	position += 4;
	data.setInt32(position,pixelValuesLength);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	if(type == lime_graphics_format_BMPType.BITFIELD) {
		data.setInt32(position,16711680);
		position += 4;
		data.setInt32(position,65280);
		position += 4;
		data.setInt32(position,255);
		position += 4;
		data.setInt32(position,-16777216);
		position += 4;
		data.set(position++,32);
		data.set(position++,110);
		data.set(position++,105);
		data.set(position++,87);
		var _g = 0;
		while(_g < 48) {
			var i = _g++;
			data.set(position++,0);
		}
	}
	var pixels = image.getPixels(new lime_math_Rectangle(0,0,image.width,image.height),1);
	var readPosition = 0;
	var a;
	var r;
	var g;
	var b;
	if(type != null) switch(type[1]) {
	case 1:
		var _g1 = 0;
		var _g2 = image.height;
		while(_g1 < _g2) {
			var y = _g1++;
			readPosition = (image.height - 1 - y) * 4 * image.width;
			var _g3 = 0;
			var _g21 = image.width;
			while(_g3 < _g21) {
				var x = _g3++;
				a = pixels.get(readPosition++);
				r = pixels.get(readPosition++);
				g = pixels.get(readPosition++);
				b = pixels.get(readPosition++);
				data.set(position++,b);
				data.set(position++,g);
				data.set(position++,r);
				data.set(position++,a);
			}
		}
		break;
	case 2:
		var andMask = haxe_io_Bytes.alloc(image.width * image.height);
		var maskPosition = 0;
		var _g11 = 0;
		var _g4 = image.height;
		while(_g11 < _g4) {
			var y1 = _g11++;
			readPosition = (image.height - 1 - y1) * 4 * image.width;
			var _g31 = 0;
			var _g22 = image.width;
			while(_g31 < _g22) {
				var x1 = _g31++;
				a = pixels.get(readPosition++);
				r = pixels.get(readPosition++);
				g = pixels.get(readPosition++);
				b = pixels.get(readPosition++);
				data.set(position++,b);
				data.set(position++,g);
				data.set(position++,r);
				data.set(position++,a);
				andMask.set(maskPosition++,0);
			}
		}
		data.blit(position,andMask,0,image.width * image.height);
		break;
	case 0:
		var _g12 = 0;
		var _g5 = image.height;
		while(_g12 < _g5) {
			var y2 = _g12++;
			readPosition = (image.height - 1 - y2) * 4 * image.width;
			var _g32 = 0;
			var _g23 = image.width;
			while(_g32 < _g23) {
				var x2 = _g32++;
				a = pixels.get(readPosition++);
				r = pixels.get(readPosition++);
				g = pixels.get(readPosition++);
				b = pixels.get(readPosition++);
				data.set(position++,b);
				data.set(position++,g);
				data.set(position++,r);
			}
			var _g33 = 0;
			var _g24 = image.width * 3 % 4;
			while(_g33 < _g24) {
				var i1 = _g33++;
				data.set(position++,0);
			}
		}
		break;
	default:
	} else {
	}
	return data;
};
var lime_graphics_format_BMPType = $hxClasses["lime.graphics.format.BMPType"] = { __ename__ : true, __constructs__ : ["RGB","BITFIELD","ICO"] };
lime_graphics_format_BMPType.RGB = ["RGB",0];
lime_graphics_format_BMPType.RGB.toString = $estr;
lime_graphics_format_BMPType.RGB.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.BITFIELD = ["BITFIELD",1];
lime_graphics_format_BMPType.BITFIELD.toString = $estr;
lime_graphics_format_BMPType.BITFIELD.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.ICO = ["ICO",2];
lime_graphics_format_BMPType.ICO.toString = $estr;
lime_graphics_format_BMPType.ICO.__enum__ = lime_graphics_format_BMPType;
var lime_graphics_format_JPEG = function() { };
$hxClasses["lime.graphics.format.JPEG"] = lime_graphics_format_JPEG;
lime_graphics_format_JPEG.__name__ = ["lime","graphics","format","JPEG"];
lime_graphics_format_JPEG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_JPEG.decodeFile = function(path,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_JPEG.encode = function(image,quality) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/jpeg",quality / 100);
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = haxe_io_Bytes.alloc(buffer.length);
		var _g1 = 0;
		var _g = buffer.length;
		while(_g1 < _g) {
			var i = _g1++;
			bytes.set(i,HxOverrides.cca(buffer,i));
		}
		return bytes;
	}
	return null;
};
var lime_graphics_format_PNG = function() { };
$hxClasses["lime.graphics.format.PNG"] = lime_graphics_format_PNG;
lime_graphics_format_PNG.__name__ = ["lime","graphics","format","PNG"];
lime_graphics_format_PNG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_PNG.decodeFile = function(path,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_PNG.encode = function(image) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	return null;
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = ["lime","graphics","opengl","GL"];
lime_graphics_opengl_GL.__properties__ = {get_version:"get_version"}
lime_graphics_opengl_GL.version = null;
lime_graphics_opengl_GL.context = null;
lime_graphics_opengl_GL.activeTexture = function(texture) {
	lime_graphics_opengl_GL.context.activeTexture(texture);
};
lime_graphics_opengl_GL.attachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.attachShader(program,shader);
};
lime_graphics_opengl_GL.bindAttribLocation = function(program,index,name) {
	lime_graphics_opengl_GL.context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl_GL.bindBuffer = function(target,buffer) {
	lime_graphics_opengl_GL.context.bindBuffer(target,buffer);
};
lime_graphics_opengl_GL.bindFramebuffer = function(target,framebuffer) {
	lime_graphics_opengl_GL.context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl_GL.bindRenderbuffer = function(target,renderbuffer) {
	lime_graphics_opengl_GL.context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl_GL.bindTexture = function(target,texture) {
	lime_graphics_opengl_GL.context.bindTexture(target,texture);
};
lime_graphics_opengl_GL.blendColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.blendEquation = function(mode) {
	lime_graphics_opengl_GL.context.blendEquation(mode);
};
lime_graphics_opengl_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime_graphics_opengl_GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl_GL.blendFunc = function(sfactor,dfactor) {
	lime_graphics_opengl_GL.context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime_graphics_opengl_GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl_GL.bufferData = function(target,data,usage) {
	lime_graphics_opengl_GL.context.bufferData(target,data,usage);
};
lime_graphics_opengl_GL.bufferSubData = function(target,offset,data) {
	lime_graphics_opengl_GL.context.bufferSubData(target,offset,data);
};
lime_graphics_opengl_GL.checkFramebufferStatus = function(target) {
	return lime_graphics_opengl_GL.context.checkFramebufferStatus(target);
};
lime_graphics_opengl_GL.clear = function(mask) {
	lime_graphics_opengl_GL.context.clear(mask);
};
lime_graphics_opengl_GL.clearColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.clearDepth = function(depth) {
	lime_graphics_opengl_GL.context.clearDepth(depth);
};
lime_graphics_opengl_GL.clearStencil = function(s) {
	lime_graphics_opengl_GL.context.clearStencil(s);
};
lime_graphics_opengl_GL.colorMask = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl_GL.compileShader = function(shader) {
	lime_graphics_opengl_GL.context.compileShader(shader);
};
lime_graphics_opengl_GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,data) {
	lime_graphics_opengl_GL.context.compressedTexImage2D(target,level,internalformat,width,height,border,data);
};
lime_graphics_opengl_GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,data) {
	lime_graphics_opengl_GL.context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data);
};
lime_graphics_opengl_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime_graphics_opengl_GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl_GL.createBuffer = function() {
	return lime_graphics_opengl_GL.context.createBuffer();
};
lime_graphics_opengl_GL.createFramebuffer = function() {
	return lime_graphics_opengl_GL.context.createFramebuffer();
};
lime_graphics_opengl_GL.createProgram = function() {
	return lime_graphics_opengl_GL.context.createProgram();
};
lime_graphics_opengl_GL.createRenderbuffer = function() {
	return lime_graphics_opengl_GL.context.createRenderbuffer();
};
lime_graphics_opengl_GL.createShader = function(type) {
	return lime_graphics_opengl_GL.context.createShader(type);
};
lime_graphics_opengl_GL.createTexture = function() {
	return lime_graphics_opengl_GL.context.createTexture();
};
lime_graphics_opengl_GL.cullFace = function(mode) {
	lime_graphics_opengl_GL.context.cullFace(mode);
};
lime_graphics_opengl_GL.deleteBuffer = function(buffer) {
	lime_graphics_opengl_GL.context.deleteBuffer(buffer);
};
lime_graphics_opengl_GL.deleteFramebuffer = function(framebuffer) {
	lime_graphics_opengl_GL.context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.deleteProgram = function(program) {
	lime_graphics_opengl_GL.context.deleteProgram(program);
};
lime_graphics_opengl_GL.deleteRenderbuffer = function(renderbuffer) {
	lime_graphics_opengl_GL.context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.deleteShader = function(shader) {
	lime_graphics_opengl_GL.context.deleteShader(shader);
};
lime_graphics_opengl_GL.deleteTexture = function(texture) {
	lime_graphics_opengl_GL.context.deleteTexture(texture);
};
lime_graphics_opengl_GL.depthFunc = function(func) {
	lime_graphics_opengl_GL.context.depthFunc(func);
};
lime_graphics_opengl_GL.depthMask = function(flag) {
	lime_graphics_opengl_GL.context.depthMask(flag);
};
lime_graphics_opengl_GL.depthRange = function(zNear,zFar) {
	lime_graphics_opengl_GL.context.depthRange(zNear,zFar);
};
lime_graphics_opengl_GL.detachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.detachShader(program,shader);
};
lime_graphics_opengl_GL.disable = function(cap) {
	lime_graphics_opengl_GL.context.disable(cap);
};
lime_graphics_opengl_GL.disableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
};
lime_graphics_opengl_GL.drawArrays = function(mode,first,count) {
	lime_graphics_opengl_GL.context.drawArrays(mode,first,count);
};
lime_graphics_opengl_GL.drawElements = function(mode,count,type,offset) {
	lime_graphics_opengl_GL.context.drawElements(mode,count,type,offset);
};
lime_graphics_opengl_GL.enable = function(cap) {
	lime_graphics_opengl_GL.context.enable(cap);
};
lime_graphics_opengl_GL.enableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
};
lime_graphics_opengl_GL.finish = function() {
	lime_graphics_opengl_GL.context.finish();
};
lime_graphics_opengl_GL.flush = function() {
	lime_graphics_opengl_GL.context.flush();
};
lime_graphics_opengl_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime_graphics_opengl_GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime_graphics_opengl_GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl_GL.frontFace = function(mode) {
	lime_graphics_opengl_GL.context.frontFace(mode);
};
lime_graphics_opengl_GL.generateMipmap = function(target) {
	lime_graphics_opengl_GL.context.generateMipmap(target);
};
lime_graphics_opengl_GL.getActiveAttrib = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveAttrib(program,index);
};
lime_graphics_opengl_GL.getActiveUniform = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveUniform(program,index);
};
lime_graphics_opengl_GL.getAttachedShaders = function(program) {
	return lime_graphics_opengl_GL.context.getAttachedShaders(program);
};
lime_graphics_opengl_GL.getAttribLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getAttribLocation(program,name);
};
lime_graphics_opengl_GL.getBufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getBufferParameter(target,pname);
};
lime_graphics_opengl_GL.getContextAttributes = function() {
	return lime_graphics_opengl_GL.context.getContextAttributes();
};
lime_graphics_opengl_GL.getError = function() {
	return lime_graphics_opengl_GL.context.getError();
};
lime_graphics_opengl_GL.getExtension = function(name) {
	return lime_graphics_opengl_GL.context.getExtension(name);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime_graphics_opengl_GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl_GL.getParameter = function(pname) {
	return lime_graphics_opengl_GL.context.getParameter(pname);
};
lime_graphics_opengl_GL.getProgramInfoLog = function(program) {
	return lime_graphics_opengl_GL.context.getProgramInfoLog(program);
};
lime_graphics_opengl_GL.getProgramParameter = function(program,pname) {
	return lime_graphics_opengl_GL.context.getProgramParameter(program,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl_GL.getShaderInfoLog = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
};
lime_graphics_opengl_GL.getShaderParameter = function(shader,pname) {
	return lime_graphics_opengl_GL.context.getShaderParameter(shader,pname);
};
lime_graphics_opengl_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime_graphics_opengl_GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl_GL.getShaderSource = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderSource(shader);
};
lime_graphics_opengl_GL.getSupportedExtensions = function() {
	return lime_graphics_opengl_GL.context.getSupportedExtensions();
};
lime_graphics_opengl_GL.getTexParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getUniform = function(program,location) {
	return lime_graphics_opengl_GL.context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getUniformLocation(program,name);
};
lime_graphics_opengl_GL.getVertexAttrib = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttrib(index,pname);
};
lime_graphics_opengl_GL.getVertexAttribOffset = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttribOffset(index,pname);
};
lime_graphics_opengl_GL.hint = function(target,mode) {
	lime_graphics_opengl_GL.context.hint(target,mode);
};
lime_graphics_opengl_GL.isBuffer = function(buffer) {
	return lime_graphics_opengl_GL.context.isBuffer(buffer);
};
lime_graphics_opengl_GL.isContextLost = function() {
	return lime_graphics_opengl_GL.context.isContextLost();
};
lime_graphics_opengl_GL.isEnabled = function(cap) {
	return lime_graphics_opengl_GL.context.isEnabled(cap);
};
lime_graphics_opengl_GL.isFramebuffer = function(framebuffer) {
	return lime_graphics_opengl_GL.context.isFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.isProgram = function(program) {
	return lime_graphics_opengl_GL.context.isProgram(program);
};
lime_graphics_opengl_GL.isRenderbuffer = function(renderbuffer) {
	return lime_graphics_opengl_GL.context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.isShader = function(shader) {
	return lime_graphics_opengl_GL.context.isShader(shader);
};
lime_graphics_opengl_GL.isTexture = function(texture) {
	return lime_graphics_opengl_GL.context.isTexture(texture);
};
lime_graphics_opengl_GL.lineWidth = function(width) {
	lime_graphics_opengl_GL.context.lineWidth(width);
};
lime_graphics_opengl_GL.linkProgram = function(program) {
	lime_graphics_opengl_GL.context.linkProgram(program);
};
lime_graphics_opengl_GL.pixelStorei = function(pname,param) {
	lime_graphics_opengl_GL.context.pixelStorei(pname,param);
};
lime_graphics_opengl_GL.polygonOffset = function(factor,units) {
	lime_graphics_opengl_GL.context.polygonOffset(factor,units);
};
lime_graphics_opengl_GL.readPixels = function(x,y,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.readPixels(x,y,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl_GL.sampleCoverage = function(value,invert) {
	lime_graphics_opengl_GL.context.sampleCoverage(value,invert);
};
lime_graphics_opengl_GL.scissor = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.scissor(x,y,width,height);
};
lime_graphics_opengl_GL.shaderSource = function(shader,source) {
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
};
lime_graphics_opengl_GL.stencilFunc = function(func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl_GL.stencilMask = function(mask) {
	lime_graphics_opengl_GL.context.stencilMask(mask);
};
lime_graphics_opengl_GL.stencilMaskSeparate = function(face,mask) {
	lime_graphics_opengl_GL.context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl_GL.stencilOp = function(fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl_GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,pixels) {
	lime_graphics_opengl_GL.context.texImage2D(target,level,internalformat,width,height,border,format,type,pixels);
};
lime_graphics_opengl_GL.texParameterf = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameterf(target,pname,param);
};
lime_graphics_opengl_GL.texParameteri = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameteri(target,pname,param);
};
lime_graphics_opengl_GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.uniform1f = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1f(location,x);
};
lime_graphics_opengl_GL.uniform1fv = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1fv(location,x);
};
lime_graphics_opengl_GL.uniform1i = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1i(location,x);
};
lime_graphics_opengl_GL.uniform1iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform1iv(location,v);
};
lime_graphics_opengl_GL.uniform2f = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2f(location,x,y);
};
lime_graphics_opengl_GL.uniform2fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2fv(location,v);
};
lime_graphics_opengl_GL.uniform2i = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2i(location,x,y);
};
lime_graphics_opengl_GL.uniform2iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2iv(location,v);
};
lime_graphics_opengl_GL.uniform3f = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3f(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3fv(location,v);
};
lime_graphics_opengl_GL.uniform3i = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3i(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3iv(location,v);
};
lime_graphics_opengl_GL.uniform4f = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4f(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4fv(location,v);
};
lime_graphics_opengl_GL.uniform4i = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4i(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4iv(location,v);
};
lime_graphics_opengl_GL.uniformMatrix2fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix2fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix3fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix3fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix4fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix4fv(location,transpose,v);
};
lime_graphics_opengl_GL.useProgram = function(program) {
	lime_graphics_opengl_GL.context.useProgram(program);
};
lime_graphics_opengl_GL.validateProgram = function(program) {
	lime_graphics_opengl_GL.context.validateProgram(program);
};
lime_graphics_opengl_GL.vertexAttrib1f = function(indx,x) {
	lime_graphics_opengl_GL.context.vertexAttrib1f(indx,x);
};
lime_graphics_opengl_GL.vertexAttrib1fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib2f = function(indx,x,y) {
	lime_graphics_opengl_GL.context.vertexAttrib2f(indx,x,y);
};
lime_graphics_opengl_GL.vertexAttrib2fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib3f = function(indx,x,y,z) {
	lime_graphics_opengl_GL.context.vertexAttrib3f(indx,x,y,z);
};
lime_graphics_opengl_GL.vertexAttrib3fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib4f = function(indx,x,y,z,w) {
	lime_graphics_opengl_GL.context.vertexAttrib4f(indx,x,y,z,w);
};
lime_graphics_opengl_GL.vertexAttrib4fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttribPointer = function(indx,size,type,normalized,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
lime_graphics_opengl_GL.viewport = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.viewport(x,y,width,height);
};
lime_graphics_opengl_GL.get_version = function() {
	return 2;
};
var lime_graphics_utils_ImageCanvasUtil = function() { };
$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime_graphics_utils_ImageCanvasUtil;
lime_graphics_utils_ImageCanvasUtil.__name__ = ["lime","graphics","utils","ImageCanvasUtil"];
lime_graphics_utils_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime_graphics_utils_ImageCanvasUtil.convertToCanvas = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.data != null && buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	} else if(buffer.data == null && buffer.__srcImageData != null) buffer.data = buffer.__srcImageData.data;
};
lime_graphics_utils_ImageCanvasUtil.convertToData = function(image) {
	if(image.buffer.data == null) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		lime_graphics_utils_ImageCanvasUtil.sync(image,false);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
};
lime_graphics_utils_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.createImageData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime_graphics_utils_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) return;
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) alphaPoint = new lime_math_Vector2();
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,true);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(sourceImage,false);
	if(sourceImage.buffer.get_src() != null) image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
};
lime_graphics_utils_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) buffer.__srcCanvas.setAttribute("moz-opaque","true");
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		buffer.__srcContext.mozImageSmoothingEnabled = false;
		buffer.__srcContext.msImageSmoothingEnabled = false;
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime_graphics_utils_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height); else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		buffer.data = this1;
	}
};
lime_graphics_utils_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.sync(image,true);
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && (color & 255) == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) a = color >> 24 & 255; else a = 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) a = color & 255; else a = 255;
	}
	image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
	image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
};
lime_graphics_utils_ImageCanvasUtil.floodFill = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.floodFill(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel32(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixels(image,rect,format);
};
lime_graphics_utils_ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.createImageData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime_graphics_utils_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime_graphics_utils_ImageCanvasUtil.sync(image,true);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
};
lime_graphics_utils_ImageCanvasUtil.scroll = function(image,x,y) {
	if(x % image.width == 0 && y % image.height == 0) return;
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.sync(image,true);
	image.buffer.__srcContext.clearRect(x,y,image.width,image.height);
	image.buffer.__srcContext.drawImage(image.buffer.__srcCanvas,x,y);
};
lime_graphics_utils_ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixel(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixels = function(image,rect,bytes,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixels(image,rect,bytes,format);
};
lime_graphics_utils_ImageCanvasUtil.sync = function(image,clear) {
	if(image.dirty && image.buffer.__srcImageData != null && image.type != lime_graphics_ImageType.DATA) {
		image.buffer.__srcContext.putImageData(image.buffer.__srcImageData,0,0);
		image.buffer.data = null;
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcImageData = null;
		image.buffer.data = null;
	}
};
var lime_graphics_utils_ImageDataUtil = function() { };
$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime_graphics_utils_ImageDataUtil;
lime_graphics_utils_ImageDataUtil.__name__ = ["lime","graphics","utils","ImageDataUtil"];
lime_graphics_utils_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) return;
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
	var redTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
	var greenTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
	var blueTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			offset = row + x * 4;
			switch(format) {
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					var r;
					var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >> 24 & 255] & 255) << 24 | (greenTable[pixel >> 16 & 255] & 255) << 16 | (blueTable[pixel >> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) pixel = 0;
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 2:
				data[offset] = pixel >> 8 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 0:
				data[offset] = pixel >> 24 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >> 24 & 255;
				data[offset + 2] = pixel >> 16 & 255;
				data[offset + 3] = pixel >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel[1]) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel[1]) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) return;
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var value = 0;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.offset + srcView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(srcFormat) {
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					var r;
					var idx = Math.round((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					srcPixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					var r1;
					var idx3 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					destPixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >> 24 & 255;
				break;
			case 1:
				value = srcPixel >> 16 & 255;
				break;
			case 2:
				value = srcPixel >> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 1:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 2:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 3:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value & 255;
				value;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) destPixel = 0;
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destData[destPosition] = destPixel >> 8 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 0:
				destData[destPosition] = destPixel >> 24 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >> 24 & 255;
				destData[destPosition + 2] = destPixel >> 16 & 255;
				destData[destPosition + 3] = destPixel >> 8 & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(sourceData == null || destData == null) return;
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	if(!mergeAlpha || !sourceImage.get_transparent()) {
		var _g1 = 0;
		var _g = destView.height;
		while(_g1 < _g) {
			var y = _g1++;
			sourcePosition = sourceView.offset + sourceView.stride * y;
			destPosition = destView.offset + destView.stride * y;
			var _g3 = 0;
			var _g2 = destView.width;
			while(_g3 < _g2) {
				var x = _g3++;
				switch(sourceFormat) {
				case 2:
					sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				case 0:
					sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
					break;
				}
				if(sourcePremultiplied) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
						var r;
						var idx = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
						var g;
						var idx1 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
						var b;
						var idx2 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
						sourcePixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				if(destPremultiplied) {
					if((sourcePixel & 255) == 0) {
						if(sourcePixel != 0) sourcePixel = 0;
					} else if((sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
						sourcePixel = ((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 2:
					destData[destPosition] = sourcePixel >> 8 & 255;
					destData[destPosition + 1] = sourcePixel >> 16 & 255;
					destData[destPosition + 2] = sourcePixel >> 24 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				case 0:
					destData[destPosition] = sourcePixel >> 24 & 255;
					destData[destPosition + 1] = sourcePixel >> 16 & 255;
					destData[destPosition + 2] = sourcePixel >> 8 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				case 1:
					destData[destPosition] = sourcePixel & 255;
					destData[destPosition + 1] = sourcePixel >> 24 & 255;
					destData[destPosition + 2] = sourcePixel >> 16 & 255;
					destData[destPosition + 3] = sourcePixel >> 8 & 255;
					break;
				}
				sourcePosition += 4;
				destPosition += 4;
			}
		}
	} else {
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var destPixel;
		if(alphaImage == null) {
			var _g11 = 0;
			var _g4 = destView.height;
			while(_g11 < _g4) {
				var y1 = _g11++;
				sourcePosition = sourceView.offset + sourceView.stride * y1;
				destPosition = destView.offset + destView.stride * y1;
				var _g31 = 0;
				var _g21 = destView.width;
				while(_g31 < _g21) {
					var x1 = _g31++;
					switch(sourceFormat) {
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							var r1;
							var idx3 = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
							var g1;
							var idx4 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
							var b1;
							var idx5 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
							sourcePixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							var r2;
							var idx6 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx6];
							var g2;
							var idx7 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx7];
							var b2;
							var idx8 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx8];
							destPixel = (r2 & 255) << 24 | (g2 & 255) << 16 | (b2 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					sourceAlpha = (sourcePixel & 255) / 255.0;
					destAlpha = (destPixel & 255) / 255.0;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) destPixel = 0; else {
						var value;
						var idx9 = Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx9];
						destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value;
						var value1;
						var idx10 = Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx10];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value1;
						var value2;
						var idx11 = Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx11];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
						value2;
						var value3;
						var idx12 = Math.round(blendAlpha * 255.0);
						value3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx12];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
						value3;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) destPixel = 0;
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destData[destPosition] = destPixel >> 8 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 0:
						destData[destPosition] = destPixel >> 24 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >> 24 & 255;
						destData[destPosition + 2] = destPixel >> 16 & 255;
						destData[destPosition + 3] = destPixel >> 8 & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		} else {
			if(alphaPoint == null) alphaPoint = new lime_math_Vector2();
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPremultiplied = alphaImage.buffer.premultiplied;
			var alphaView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,destView.width,destView.height));
			var alphaPosition;
			var alphaPixel;
			var _g12 = 0;
			var _g5 = alphaView.height;
			while(_g12 < _g5) {
				var y2 = _g12++;
				sourcePosition = sourceView.offset + sourceView.stride * y2;
				destPosition = destView.offset + destView.stride * y2;
				alphaPosition = alphaView.offset + alphaView.stride * y2;
				var _g32 = 0;
				var _g22 = alphaView.width;
				while(_g32 < _g22) {
					var x2 = _g32++;
					switch(sourceFormat) {
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							var r3;
							var idx13 = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx13];
							var g3;
							var idx14 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx14];
							var b3;
							var idx15 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx15];
							sourcePixel = (r3 & 255) << 24 | (g3 & 255) << 16 | (b3 & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							var r4;
							var idx16 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx16];
							var g4;
							var idx17 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx17];
							var b4;
							var idx18 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx18];
							destPixel = (r4 & 255) << 24 | (g4 & 255) << 16 | (b4 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(alphaFormat) {
					case 2:
						alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					case 0:
						alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					case 1:
						alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
						break;
					}
					if(alphaPremultiplied) {
						if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (alphaPixel & 255);
							var r5;
							var idx19 = Math.round((alphaPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx19];
							var g5;
							var idx20 = Math.round((alphaPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx20];
							var b5;
							var idx21 = Math.round((alphaPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx21];
							alphaPixel = (r5 & 255) << 24 | (g5 & 255) << 16 | (b5 & 255) << 8 | alphaPixel & 255 & 255;
						}
					}
					sourceAlpha = (alphaPixel & 255) / 255;
					destAlpha = (destPixel & 255) / 255;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) destPixel = 0; else {
						var value4;
						var idx22 = Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx22];
						destPixel = (value4 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value4;
						var value5;
						var idx23 = Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx23];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value5 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value5;
						var value6;
						var idx24 = Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value6 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx24];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value6 & 255) << 8 | destPixel & 255 & 255;
						value6;
						var value7;
						var idx25 = Math.round(blendAlpha * 255.0);
						value7 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx25];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value7 & 255;
						value7;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) destPixel = 0;
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destData[destPosition] = destPixel >> 8 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 0:
						destData[destPosition] = destPixel >> 24 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >> 24 & 255;
						destData[destPosition + 2] = destPixel >> 16 & 255;
						destData[destPosition + 3] = destPixel >> 8 & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			fillColor = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			fillColor = rgba1;
		}
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var data = image.buffer.data;
	if(data == null) return;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			var offset = row + x * 4;
			if(premultiplied) {
				if((fillColor & 255) == 0) {
					if(fillColor != 0) fillColor = 0;
				} else if((fillColor & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
					fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
				}
			}
			switch(format1) {
			case 2:
				data[offset] = fillColor >> 8 & 255;
				data[offset + 1] = fillColor >> 16 & 255;
				data[offset + 2] = fillColor >> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 0:
				data[offset] = fillColor >> 24 & 255;
				data[offset + 1] = fillColor >> 16 & 255;
				data[offset + 2] = fillColor >> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >> 24 & 255;
				data[offset + 2] = fillColor >> 16 & 255;
				data[offset + 3] = fillColor >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.floodFill = function(image,x,y,color,format) {
	var data = image.buffer.data;
	if(data == null) return;
	if(format == 1) color = (color & 16777215) << 8 | color >> 24 & 255;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var fillColor = color;
	var hitColor;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	switch(format1) {
	case 2:
		hitColor = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		hitColor = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((hitColor & 255) != 0 && (hitColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (hitColor & 255);
			var r;
			var idx = Math.round((hitColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((hitColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((hitColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			hitColor = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | hitColor & 255 & 255;
		}
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
		255;
		hitColor = (hitColor >> 24 & 255 & 255) << 24 | (hitColor >> 16 & 255 & 255) << 16 | (hitColor >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	if(fillColor == hitColor) return;
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = [];
	queue.push(x);
	queue.push(y);
	var curPointX;
	var curPointY;
	var nextPointX;
	var nextPointY;
	var nextPointOffset;
	var readColor;
	while(queue.length > 0) {
		curPointY = queue.pop();
		curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			nextPointX = curPointX + dx[i];
			nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) continue;
			nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			switch(format1) {
			case 2:
				readColor = (data[nextPointOffset + 2] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 0:
				readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 1:
				readColor = (data[nextPointOffset + 1] & 255) << 24 | (data[nextPointOffset + 2] & 255) << 16 | (data[nextPointOffset + 3] & 255) << 8 | data[nextPointOffset] & 255;
				break;
			}
			if(premultiplied) {
				if((readColor & 255) != 0 && (readColor & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (readColor & 255);
					var r1;
					var idx3 = Math.round((readColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((readColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((readColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					readColor = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | readColor & 255 & 255;
				}
			}
			if(readColor == hitColor) {
				if(premultiplied) {
					if((fillColor & 255) == 0) {
						if(fillColor != 0) fillColor = 0;
					} else if((fillColor & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
						fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
					}
				}
				switch(format1) {
				case 2:
					data[nextPointOffset] = fillColor >> 8 & 255;
					data[nextPointOffset + 1] = fillColor >> 16 & 255;
					data[nextPointOffset + 2] = fillColor >> 24 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 0:
					data[nextPointOffset] = fillColor >> 24 & 255;
					data[nextPointOffset + 1] = fillColor >> 16 & 255;
					data[nextPointOffset + 2] = fillColor >> 8 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 1:
					data[nextPointOffset] = fillColor & 255;
					data[nextPointOffset + 1] = fillColor >> 24 & 255;
					data[nextPointOffset + 2] = fillColor >> 16 & 255;
					data[nextPointOffset + 3] = fillColor >> 8 & 255;
					break;
				}
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.getColorBoundsRect = function(image,mask,color,findColor,format) {
	if(findColor == null) findColor = true;
	var left = image.width + 1;
	var right = 0;
	var top = image.height + 1;
	var bottom = 0;
	var _color;
	var _mask;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			_color = rgba;
		}
		{
			var argb1 = mask;
			var rgba1 = 0;
			rgba1 = (argb1 >> 16 & 255 & 255) << 24 | (argb1 >> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >> 24 & 255 & 255;
			_mask = rgba1;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba2 = 0;
			rgba2 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			_color = rgba2;
		}
		{
			var bgra1 = mask;
			var rgba3 = 0;
			rgba3 = (bgra1 >> 8 & 255 & 255) << 24 | (bgra1 >> 16 & 255 & 255) << 16 | (bgra1 >> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
			_mask = rgba3;
		}
		break;
	default:
		_color = color;
		_mask = mask;
	}
	if(!image.get_transparent()) {
		_color = (_color >> 24 & 255 & 255) << 24 | (_color >> 16 & 255 & 255) << 16 | (_color >> 8 & 255 & 255) << 8 | 255;
		255;
		_mask = (_mask >> 24 & 255 & 255) << 24 | (_mask >> 16 & 255 & 255) << 16 | (_mask >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var pixel;
	var hit;
	var _g1 = 0;
	var _g = image.width;
	while(_g1 < _g) {
		var x = _g1++;
		hit = false;
		var _g3 = 0;
		var _g2 = image.height;
		while(_g3 < _g2) {
			var y = _g3++;
			pixel = image.getPixel32(x,y,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(x < left) left = x;
				break;
			}
		}
		if(hit) break;
	}
	var ix;
	var _g11 = 0;
	var _g4 = image.width;
	while(_g11 < _g4) {
		var x1 = _g11++;
		ix = image.width - 1 - x1;
		hit = false;
		var _g31 = 0;
		var _g21 = image.height;
		while(_g31 < _g21) {
			var y1 = _g31++;
			pixel = image.getPixel32(ix,y1,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(ix > right) right = ix;
				break;
			}
		}
		if(hit) break;
	}
	var _g12 = 0;
	var _g5 = image.height;
	while(_g12 < _g5) {
		var y2 = _g12++;
		hit = false;
		var _g32 = 0;
		var _g22 = image.width;
		while(_g32 < _g22) {
			var x2 = _g32++;
			pixel = image.getPixel32(x2,y2,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(y2 < top) top = y2;
				break;
			}
		}
		if(hit) break;
	}
	var iy;
	var _g13 = 0;
	var _g6 = image.height;
	while(_g13 < _g6) {
		var y3 = _g13++;
		iy = image.height - 1 - y3;
		hit = false;
		var _g33 = 0;
		var _g23 = image.width;
		while(_g33 < _g23) {
			var x3 = _g33++;
			pixel = image.getPixel32(x3,iy,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(iy > bottom) bottom = iy;
				break;
			}
		}
		if(hit) break;
	}
	var w = right - left;
	var h = bottom - top;
	if(w > 0) w++;
	if(h > 0) h++;
	if(w < 0) w = 0;
	if(h < 0) h = 0;
	if(left == right) w = 1;
	if(top == bottom) h = 1;
	if(left > image.width) left = 0;
	if(top > image.height) top = 0;
	return new lime_math_Rectangle(left,top,w,h);
};
lime_graphics_utils_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	switch(image.buffer.format) {
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(image.buffer.premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 0;
	0;
	switch(format) {
	case 1:
		return (function($this) {
			var $r;
			var argb = 0;
			argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
			$r = argb;
			return $r;
		}(this));
	case 2:
		return (function($this) {
			var $r;
			var bgra = 0;
			bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
			$r = bgra;
			return $r;
		}(this));
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	switch(image.buffer.format) {
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(image.buffer.premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 1:
		return (function($this) {
			var $r;
			var argb = 0;
			argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
			$r = argb;
			return $r;
		}(this));
	case 2:
		return (function($this) {
			var $r;
			var bgra = 0;
			bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
			$r = bgra;
			return $r;
		}(this));
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) return null;
	var length = rect.width * rect.height | 0;
	var bytes = haxe_io_Bytes.alloc(length * 4);
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var position;
	var argb;
	var bgra;
	var pixel;
	var destPosition = 0;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		position = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(sourceFormat) {
			case 2:
				pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
				break;
			case 0:
				pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
				break;
			case 1:
				pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					var r;
					var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 1:
				{
					var argb1 = 0;
					argb1 = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
					argb = argb1;
				}
				pixel = argb;
				break;
			case 2:
				{
					var bgra1 = 0;
					bgra1 = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
					bgra = bgra1;
				}
				pixel = bgra;
				break;
			default:
			}
			bytes.set(destPosition++,pixel >> 24 & 255);
			bytes.set(destPosition++,pixel >> 16 & 255);
			bytes.set(destPosition++,pixel >> 8 & 255);
			bytes.set(destPosition++,pixel & 255);
			position += 4;
		}
	}
	return bytes;
};
lime_graphics_utils_ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.buffer.data == null || sourceImage.buffer.data == null) return;
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	var destPixel;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		sourcePosition = sourceView.offset + sourceView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(sourceFormat) {
			case 2:
				sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 0:
				sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 1:
				sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
				break;
			}
			if(sourcePremultiplied) {
				if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
					var r;
					var idx = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					sourcePixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					var r1;
					var idx3 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					destPixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			var value = ((sourcePixel >> 24 & 255) * redMultiplier + (destPixel >> 24 & 255) * (256 - redMultiplier)) / 256 | 0;
			destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			value;
			var value1 = ((sourcePixel >> 16 & 255) * greenMultiplier + (destPixel >> 16 & 255) * (256 - greenMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			value1;
			var value2 = ((sourcePixel >> 8 & 255) * blueMultiplier + (destPixel >> 8 & 255) * (256 - blueMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
			value2;
			var value3 = ((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
			value3;
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) destPixel = 0;
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destData[destPosition] = destPixel >> 8 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 0:
				destData[destPosition] = destPixel >> 24 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >> 24 & 255;
				destData[destPosition + 2] = destPixel >> 16 & 255;
				destData[destPosition + 3] = destPixel >> 8 & 255;
				break;
			}
			sourcePosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) return;
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		var offset = i * 4;
		switch(format) {
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		}
		var offset1 = i * 4;
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
		switch(format) {
		case 2:
			data[offset1] = pixel >> 8 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 0:
			data[offset1] = pixel >> 24 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >> 24 & 255;
			data[offset1 + 2] = pixel >> 16 & 255;
			data[offset1 + 3] = pixel >> 8 & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) return;
	var newBuffer = new lime_graphics_ImageBuffer((function($this) {
		var $r;
		var elements = newWidth * newHeight * 4;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		$r = this1;
		return $r;
	}(this)),newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g = 0;
	while(_g < newHeight) {
		var y = _g++;
		var _g1 = 0;
		while(_g1 < newWidth) {
			var x = _g1++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			if(sourceX < imageWidth - 1) sourceIndexX = sourceIndex + 4; else sourceIndexX = sourceIndex;
			if(sourceY < imageHeight - 1) sourceIndexY = sourceIndex + imageWidth * 4; else sourceIndexY = sourceIndex;
			if(sourceIndexX != sourceIndex) sourceIndexXY = sourceIndexY + 4; else sourceIndexXY = sourceIndexY;
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			var val = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY]) * uRatio) * vRatio);
			newData[index] = val;
			var val1 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio);
			newData[index + 1] = val1;
			var val2 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio);
			newData[index + 2] = val2;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) newData[index + 3] = 0; else newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var newData;
	var elements = newWidth * newHeight * 4;
	var this1;
	if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
	newData = this1;
	var sourceIndex;
	var index;
	var _g1 = 0;
	var _g = buffer.height;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = buffer.width;
		while(_g3 < _g2) {
			var x = _g3++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) return;
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	var _g = image.get_format();
	switch(_g) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		index = i * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			pixel = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			pixel = rgba1;
		}
		break;
	default:
		pixel = color;
	}
	var source = 0;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	switch(image.buffer.format) {
	case 2:
		source = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		source = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		source = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(image.buffer.premultiplied) {
		if((source & 255) != 0 && (source & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (source & 255);
			var r;
			var idx = Math.round((source >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((source >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((source >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			source = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | source & 255 & 255;
		}
	}
	var value = source & 255;
	pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | value & 255;
	value;
	var data1 = image.buffer.data;
	var offset1 = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 2:
		data1[offset1] = pixel >> 8 & 255;
		data1[offset1 + 1] = pixel >> 16 & 255;
		data1[offset1 + 2] = pixel >> 24 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	case 0:
		data1[offset1] = pixel >> 24 & 255;
		data1[offset1 + 1] = pixel >> 16 & 255;
		data1[offset1 + 2] = pixel >> 8 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	case 1:
		data1[offset1] = pixel & 255;
		data1[offset1 + 1] = pixel >> 24 & 255;
		data1[offset1 + 2] = pixel >> 16 & 255;
		data1[offset1 + 3] = pixel >> 8 & 255;
		break;
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			pixel = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			pixel = rgba1;
		}
		break;
	default:
		pixel = color;
	}
	if(!image.get_transparent()) {
		pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 2:
		data[offset] = pixel >> 8 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 0:
		data[offset] = pixel >> 24 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >> 24 & 255;
		data[offset + 2] = pixel >> 16 & 255;
		data[offset + 3] = pixel >> 8 & 255;
		break;
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixels = function(image,rect,bytes,format) {
	if(image.buffer.data == null) return;
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var color;
	var pixel;
	var transparent = image.get_transparent();
	var dataPosition = 0;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			color = bytes.b[dataPosition + 3] | bytes.b[dataPosition + 2] << 8 | bytes.b[dataPosition + 1] << 16 | bytes.b[dataPosition] << 24;
			dataPosition += 4;
			switch(format) {
			case 1:
				{
					var argb = color;
					var rgba = 0;
					rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
					pixel = rgba;
				}
				break;
			case 2:
				{
					var bgra = color;
					var rgba1 = 0;
					rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
					pixel = rgba1;
				}
				break;
			default:
				pixel = color;
			}
			if(!transparent) {
				pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
				255;
			}
			var offset = row + x * 4;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) pixel = 0;
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(sourceFormat) {
			case 2:
				data[offset] = pixel >> 8 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 0:
				data[offset] = pixel >> 24 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >> 24 & 255;
				data[offset + 2] = pixel >> 16 & 255;
				data[offset + 3] = pixel >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.threshold = function(destImage,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
	if(copySource == null) copySource = false;
	if(mask == null) mask = -1;
	if(color == null) color = 0;
	var thresholdMask = threshold & mask;
	var a = thresholdMask >> 24 & 255;
	var r = thresholdMask >> 16 & 255;
	var g = thresholdMask >> 8 & 255;
	var b = thresholdMask & 255;
	var thresholdRGBA;
	var rgba = 0;
	rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	thresholdRGBA = rgba;
	a = color >> 24 & 255;
	r = color >> 16 & 255;
	g = color >> 8 & 255;
	b = color & 255;
	var colorRGBA;
	var rgba1 = 0;
	rgba1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	colorRGBA = rgba1;
	var operationEnum;
	switch(operation) {
	case "==":
		operationEnum = 0;
		break;
	case "<":
		operationEnum = 1;
		break;
	case ">":
		operationEnum = 2;
		break;
	case "<=":
		operationEnum = 3;
		break;
	case ">=":
		operationEnum = 4;
		break;
	case "!=":
		operationEnum = 5;
		break;
	default:
		operationEnum = 0;
	}
	var hits = 0;
	if(sourceImage == destImage && sourceRect.equals(destImage.get_rect()) && destPoint.x == 0 && destPoint.y == 0) {
		var pixelMask;
		var i;
		var test;
		hits = lime_graphics_utils_ImageDataUtil.__threshold_inner_loop(destImage,sourceImage,sourceRect,mask,thresholdRGBA,operationEnum,colorRGBA,0,0,sourceRect.width | 0,sourceRect.height | 0);
	} else {
		var destData = destImage.buffer.data;
		var destFormat = destImage.buffer.format;
		var destPremultiplied = destImage.buffer.premultiplied;
		sourceRect = sourceRect.clone();
		if(sourceRect.get_right() > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.get_bottom() > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		var targetRect = sourceRect.clone();
		targetRect.offsetPoint(destPoint);
		if(targetRect.get_right() > destImage.width) targetRect.width = destImage.width - targetRect.x;
		if(targetRect.get_bottom() > destImage.height) targetRect.height = destImage.height - targetRect.y;
		sourceRect.width = Math.min(sourceRect.width,targetRect.width);
		sourceRect.height = Math.min(sourceRect.height,targetRect.height);
		var sx = sourceRect.x | 0;
		var sy = sourceRect.y | 0;
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var dx = destPoint.x | 0;
		var dy = destPoint.y | 0;
		var bw = destImage.width - sw - dx;
		var bh = destImage.height - sh - dy;
		var dw;
		if(bw < 0) dw = sw + (destImage.width - sw - dx); else dw = sw;
		var dh;
		if(bw < 0) dh = sh + (destImage.height - sh - dy); else dh = sh;
		if(copySource) destImage.copyPixels(sourceImage,sourceRect,destPoint);
		var pixelMask1;
		var i1;
		var test1;
		hits = lime_graphics_utils_ImageDataUtil.__threshold_inner_loop(destImage,sourceImage,sourceRect,mask,thresholdRGBA,operationEnum,colorRGBA,sx,sy,dw,dh);
		return hits;
	}
	return 0;
};
lime_graphics_utils_ImageDataUtil.__threshold_inner_loop = function(image,sourceImage,sourceRect,mask,threshold,operation,color,startX,startY,destWidth,destHeight) {
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var srcPixel = 0;
	var srcPosition = 0;
	var srcFormat = sourceImage.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var srcData = sourceImage.buffer.data;
	var colorRGBA = color;
	var pixelMask = 0;
	var i = 0;
	var test = false;
	var hits = 0;
	var _g = 0;
	while(_g < destHeight) {
		var yy = _g++;
		srcPosition = srcView.offset + srcView.stride * (yy + startY);
		srcPosition += 4 * startX;
		var _g1 = 0;
		while(_g1 < destWidth) {
			var xx = _g1++;
			switch(srcFormat) {
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					var r;
					var idx = Math.round((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					srcPixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			pixelMask = srcPixel & mask;
			i = lime_graphics_utils_ImageDataUtil.__ucompare(pixelMask,threshold);
			switch(operation) {
			case 0:
				test = i == 0;
				break;
			case 1:
				test = i == -1;
				break;
			case 2:
				test = i == 1;
				break;
			case 5:
				test = i != 0;
				break;
			case 3:
				test = i == 0 || i == -1;
				break;
			case 4:
				test = i == 0 || i == 1;
				break;
			default:
				test = false;
			}
			if(test) {
				if(srcPremultiplied) {
					if((colorRGBA & 255) == 0) {
						if(colorRGBA != 0) colorRGBA = 0;
					} else if((colorRGBA & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[colorRGBA & 255];
						colorRGBA = ((colorRGBA >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((colorRGBA >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((colorRGBA >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | colorRGBA & 255 & 255;
					}
				}
				switch(srcFormat) {
				case 2:
					srcData[srcPosition] = colorRGBA >> 8 & 255;
					srcData[srcPosition + 1] = colorRGBA >> 16 & 255;
					srcData[srcPosition + 2] = colorRGBA >> 24 & 255;
					srcData[srcPosition + 3] = colorRGBA & 255;
					break;
				case 0:
					srcData[srcPosition] = colorRGBA >> 24 & 255;
					srcData[srcPosition + 1] = colorRGBA >> 16 & 255;
					srcData[srcPosition + 2] = colorRGBA >> 8 & 255;
					srcData[srcPosition + 3] = colorRGBA & 255;
					break;
				case 1:
					srcData[srcPosition] = colorRGBA & 255;
					srcData[srcPosition + 1] = colorRGBA >> 24 & 255;
					srcData[srcPosition + 2] = colorRGBA >> 16 & 255;
					srcData[srcPosition + 3] = colorRGBA >> 8 & 255;
					break;
				}
				hits++;
			}
			srcPosition += 4;
		}
	}
	return hits;
};
lime_graphics_utils_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) return;
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		var offset = i * 4;
		switch(format) {
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		}
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
		var offset1 = i * 4;
		switch(format) {
		case 2:
			data[offset1] = pixel >> 8 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 0:
			data[offset1] = pixel >> 24 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >> 24 & 255;
			data[offset1 + 2] = pixel >> 16 & 255;
			data[offset1 + 3] = pixel >> 8 & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.__ucompare = function(n1,n2) {
	var tmp1;
	var tmp2;
	tmp1 = n1 >> 24 & 255;
	tmp2 = n2 >> 24 & 255;
	if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
		tmp1 = n1 >> 16 & 255;
		tmp2 = n2 >> 16 & 255;
		if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
			tmp1 = n1 >> 8 & 255;
			tmp2 = n2 >> 8 & 255;
			if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else return 0;
			}
		}
	}
};
var lime_graphics_utils__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) this.rect = image.get_rect(); else {
		if(rect.x < 0) rect.x = 0;
		if(rect.y < 0) rect.y = 0;
		if(rect.x + rect.width > image.width) rect.width = image.width - rect.x;
		if(rect.y + rect.height > image.height) rect.height = image.height - rect.y;
		if(rect.width < 0) rect.width = 0;
		if(rect.height < 0) rect.height = 0;
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.x = Math.ceil(this.rect.x);
	this.y = Math.ceil(this.rect.y);
	this.width = Math.floor(this.rect.width);
	this.height = Math.floor(this.rect.height);
	this.offset = this.stride * (this.y + image.offsetY) + (this.x + image.offsetX) * 4;
};
$hxClasses["lime.graphics.utils._ImageDataUtil.ImageDataView"] = lime_graphics_utils__$ImageDataUtil_ImageDataView;
lime_graphics_utils__$ImageDataUtil_ImageDataView.__name__ = ["lime","graphics","utils","_ImageDataUtil","ImageDataView"];
lime_graphics_utils__$ImageDataUtil_ImageDataView.prototype = {
	clip: function(x,y,width,height) {
		this.rect.__contract(x,y,width,height);
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.offset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,row: function(y) {
		return this.offset + this.stride * y;
	}
	,__class__: lime_graphics_utils__$ImageDataUtil_ImageDataView
};
var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = ["lime","math","_ColorMatrix","ColorMatrix_Impl_"];
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__properties__ = {set_redOffset:"set_redOffset",get_redOffset:"get_redOffset",set_redMultiplier:"set_redMultiplier",get_redMultiplier:"get_redMultiplier",set_greenOffset:"set_greenOffset",get_greenOffset:"get_greenOffset",set_greenMultiplier:"set_greenMultiplier",get_greenMultiplier:"get_greenMultiplier",set_color:"set_color",get_color:"get_color",set_blueOffset:"set_blueOffset",get_blueOffset:"get_blueOffset",set_blueMultiplier:"set_blueMultiplier",get_blueMultiplier:"get_blueMultiplier",set_alphaOffset:"set_alphaOffset",get_alphaOffset:"get_alphaOffset",set_alphaMultiplier:"set_alphaMultiplier",get_alphaMultiplier:"get_alphaMultiplier"}
lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 20) this1 = data; else {
		var array = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity;
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		this1 = this2;
	}
	return this1;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.clone = function(this1) {
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new((function($this) {
		var $r;
		var this2;
		if(this1 != null) this2 = new Float32Array(this1); else this2 = null;
		$r = this2;
		return $r;
	}(this)));
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.concat = function(this1,second) {
	var _g = this1;
	_g[0] = _g[0] + second[0];
	var _g1 = this1;
	_g1[6] = _g1[6] + second[6];
	var _g2 = this1;
	_g2[12] = _g2[12] + second[12];
	var _g3 = this1;
	_g3[18] = _g3[18] + second[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[18];
	var offset = this1[19] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[12];
	var offset = this1[14] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[6];
	var offset = this1[9] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[0];
	var offset = this1[4] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform = function(this1) {
	return null;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaMultiplier = function(this1,value) {
	return this1[18] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaOffset = function(this1,value) {
	return this1[19] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueMultiplier = function(this1,value) {
	return this1[12] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueOffset = function(this1,value) {
	return this1[14] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_color = function(this1,value) {
	this1[4] = (value >> 16 & 255) / 255;
	this1[9] = (value >> 8 & 255) / 255;
	this1[14] = (value & 255) / 255;
	this1[0] = 0;
	this1[6] = 0;
	this1[12] = 0;
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color(this1);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenMultiplier = function(this1,value) {
	return this1[6] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenOffset = function(this1,value) {
	return this1[9] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redMultiplier = function(this1) {
	return this1[0];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redMultiplier = function(this1,value) {
	return this1[0] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redOffset = function(this1,value) {
	return this1[4] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = ["lime","math","Matrix3"];
lime_math_Matrix3.prototype = {
	clone: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(column == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = scaleX;
		this.d = scaleY;
		this.b = rotation;
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(Matrix3) {
		return Matrix3 != null && this.tx == Matrix3.tx && this.ty == Matrix3.ty && this.a == Matrix3.a && this.b == Matrix3.b && this.c == Matrix3.c && this.d == Matrix3.d;
	}
	,deltaTransformVector2: function(Vector2) {
		return new lime_math_Vector2(Vector2.x * this.a + Vector2.y * this.c,Vector2.x * this.b + Vector2.y * this.d);
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
		result.concat(m);
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformVector2: function(pos) {
		return new lime_math_Vector2(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: lime_math_Matrix3
};
var lime_math__$Matrix4_Matrix4_$Impl_$ = {};
$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime_math__$Matrix4_Matrix4_$Impl_$;
lime_math__$Matrix4_Matrix4_$Impl_$.__name__ = ["lime","math","_Matrix4","Matrix4_Impl_"];
lime_math__$Matrix4_Matrix4_$Impl_$.__properties__ = {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
lime_math__$Matrix4_Matrix4_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 16) this1 = data; else {
		var array = lime_math__$Matrix4_Matrix4_$Impl_$.__identity;
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		this1 = this2;
	}
	return this1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,0);
	var m221 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,4);
	var m231 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,8);
	var m241 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,12);
	var m212 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,1);
	var m222 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,5);
	var m232 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,9);
	var m242 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,13);
	var m213 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,2);
	var m223 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,6);
	var m233 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,10);
	var m243 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,14);
	var m214 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,3);
	var m224 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,7);
	var m234 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,11);
	var m244 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendScale = function(this1,xScale,yScale,zScale) {
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		$r = this2;
		return $r;
	}(this))));
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation = function(this1,x,y,z) {
	this1[12] = this1[12] + x;
	this1[13] = this1[13] + y;
	this1[14] = this1[14] + z;
};
lime_math__$Matrix4_Matrix4_$Impl_$.clone = function(this1) {
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var this2;
		if(this1 != null) this2 = new Float32Array(this1); else this2 = null;
		$r = this2;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisFrom = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	var l = array.length - index;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		this1[c] = array[c + index];
	}
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisTo = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	var l = this1.length;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		array[c + index] = this1[c];
	}
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Row " + Std.string(_$UInt_UInt_$Impl_$.toFloat(row)) + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.createABCD = function(a,b,c,d,tx,ty) {
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Row " + row + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyToMatrix4 = function(this1,other) {
	(js_Boot.__cast(other , Float32Array)).set(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.deltaTransformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[3],x * this1[1] + y * this1[5] + z * this1[9] + this1[7],x * this1[2] + y * this1[6] + z * this1[10] + this1[11],0);
};
lime_math__$Matrix4_Matrix4_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolate = function(thisMat,toMat,percent) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime_math__$Matrix4_Matrix4_$Impl_$.set(m,i,lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i) + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i)) * percent);
	}
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var val = this1[i] + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - this1[i]) * percent;
		this1[i] = val;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.invert = function(this1) {
	var d = lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime_math__$Matrix4_Matrix4_$Impl_$.pointAt = function(this1,pos,at,up) {
	if(at == null) at = new lime_math_Vector4(0,0,-1);
	if(up == null) up = new lime_math_Vector4(0,-1,0);
	var dir = new lime_math_Vector4(at.x - pos.x,at.y - pos.y,at.z - pos.z);
	var vup = new lime_math_Vector4(up.x,up.y,up.z,up.w);
	var right;
	dir.normalize();
	vup.normalize();
	var dir2 = new lime_math_Vector4(dir.x,dir.y,dir.z,dir.w);
	dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
	vup = new lime_math_Vector4(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if(dir.x != 0) vup = new lime_math_Vector4(-dir.y,dir.x,0); else vup = new lime_math_Vector4(1,0,0);
	right = new lime_math_Vector4(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
	right.normalize();
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prepend = function(this1,rhs) {
	var m111 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,0);
	var m121 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,4);
	var m131 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,8);
	var m141 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,12);
	var m112 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,1);
	var m122 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,5);
	var m132 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,9);
	var m142 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,13);
	var m113 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,2);
	var m123 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,6);
	var m133 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,10);
	var m143 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,14);
	var m114 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,3);
	var m124 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,7);
	var m134 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,11);
	var m144 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependScale = function(this1,xScale,yScale,zScale) {
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		$r = this2;
		return $r;
	}(this))));
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependTranslation = function(this1,x,y,z) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	lime_math__$Matrix4_Matrix4_$Impl_$.set_position(m,new lime_math_Vector4(x,y,z));
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[12],x * this1[1] + y * this1[5] + z * this1[9] + this1[13],x * this1[2] + y * this1[6] + z * this1[10] + this1[14],x * this1[3] + y * this1[7] + z * this1[11] + this1[15]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVectors = function(this1,ain,aout) {
	var i = 0;
	while(i + 3 <= ain.length) {
		var x = ain[i];
		var y = ain[i + 1];
		var z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.transpose = function(this1) {
	var othis;
	var this2;
	if(this1 != null) this2 = new Float32Array(this1); else this2 = null;
	othis = this2;
	this1[1] = othis[4];
	this1[2] = othis[8];
	this1[3] = othis[12];
	this1[4] = othis[1];
	this1[6] = othis[9];
	this1[7] = othis[13];
	this1[8] = othis[2];
	this1[9] = othis[6];
	this1[11] = othis[14];
	this1[12] = othis[3];
	this1[13] = othis[7];
	this1[14] = othis[11];
};
lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation = function(x,y,z,degrees) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var a1 = new lime_math_Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,0,c + a1.x * a1.x * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,5,c + a1.y * a1.y * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,4,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,8,tmp1 - tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,9,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,6,tmp1 - tmp2);
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_position = function(this1) {
	return new lime_math_Vector4(this1[12],this1[13],this1[14]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$Matrix4_Matrix4_$Impl_$.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = ["lime","math","Rectangle"];
lime_math_Rectangle.prototype = {
	clone: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new lime_math_Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new lime_math_Rectangle();
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new lime_math_Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) this.x = x;
		if(this.y > y) this.y = y;
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime_math_Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime_math_Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime_math_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = ["lime","math","Vector2"];
lime_math_Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime_math_Vector2.interpolate = function(pt1,pt2,f) {
	return new lime_math_Vector2(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
lime_math_Vector2.polar = function(len,angle) {
	return new lime_math_Vector2(len * Math.cos(angle),len * Math.sin(angle));
};
lime_math_Vector2.prototype = {
	add: function(v) {
		return new lime_math_Vector2(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new lime_math_Vector2(this.x - v.x,this.y - v.y);
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: lime_math_Vector2
	,__properties__: {get_length:"get_length"}
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) w = 0.;
	if(z == null) z = 0.;
	if(y == null) y = 0.;
	if(x == null) x = 0.;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = ["lime","math","Vector4"];
lime_math_Vector4.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
lime_math_Vector4.X_AXIS = null;
lime_math_Vector4.Y_AXIS = null;
lime_math_Vector4.Z_AXIS = null;
lime_math_Vector4.angleBetween = function(a,b) {
	var a0 = new lime_math_Vector4(a.x,a.y,a.z,a.w);
	a0.normalize();
	var b0 = new lime_math_Vector4(b.x,b.y,b.z,b.w);
	b0.normalize();
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime_math_Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime_math_Vector4.get_X_AXIS = function() {
	return new lime_math_Vector4(1,0,0);
};
lime_math_Vector4.get_Y_AXIS = function() {
	return new lime_math_Vector4(0,1,0);
};
lime_math_Vector4.get_Z_AXIS = function() {
	return new lime_math_Vector4(0,0,1);
};
lime_math_Vector4.prototype = {
	add: function(a) {
		return new lime_math_Vector4(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new lime_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a) {
		return new lime_math_Vector4(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new lime_math_Vector4(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime_math_Vector4
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var lime_math_color__$ARGB_ARGB_$Impl_$ = {};
$hxClasses["lime.math.color._ARGB.ARGB_Impl_"] = lime_math_color__$ARGB_ARGB_$Impl_$;
lime_math_color__$ARGB_ARGB_$Impl_$.__name__ = ["lime","math","color","_ARGB","ARGB_Impl_"];
lime_math_color__$ARGB_ARGB_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$ARGB_ARGB_$Impl_$.a16 = null;
lime_math_color__$ARGB_ARGB_$Impl_$.unmult = null;
lime_math_color__$ARGB_ARGB_$Impl_$._new = function(argb) {
	if(argb == null) argb = 0;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.create = function(a,r,g,b) {
	var argb = 0;
	argb = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 >> 24 & 255) == 0) this1 = 0; else if((this1 >> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
		this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset + 2] & 255;
		break;
	case 0:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 1:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 3] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 1] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >> 24 & 255);
			var r;
			var idx = Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (this1 >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
		}
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.set = function(this1,a,r,g,b) {
	this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >> 24 & 255);
		var r;
		var idx = Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var b;
		var idx2 = Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (this1 >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 >> 24 & 255) == 0) this1 = 0; else if((this1 >> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
			this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	case 0:
		data[offset] = this1 >> 16 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	case 1:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromBGRA = function(bgra) {
	var argb = 0;
	argb = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromRGBA = function(rgba) {
	var argb = 0;
	argb = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_a = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_a = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_b = function(this1) {
	return this1 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_g = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_r = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$BGRA_BGRA_$Impl_$ = {};
$hxClasses["lime.math.color._BGRA.BGRA_Impl_"] = lime_math_color__$BGRA_BGRA_$Impl_$;
lime_math_color__$BGRA_BGRA_$Impl_$.__name__ = ["lime","math","color","_BGRA","BGRA_Impl_"];
lime_math_color__$BGRA_BGRA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$BGRA_BGRA_$Impl_$.a16 = null;
lime_math_color__$BGRA_BGRA_$Impl_$.unmult = null;
lime_math_color__$BGRA_BGRA_$Impl_$._new = function(bgra) {
	if(bgra == null) bgra = 0;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.create = function(b,g,r,a) {
	var bgra = 0;
	bgra = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) this1 = 0; else if((this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 3] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 1] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
			var b;
			var idx = Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var r;
			var idx2 = Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.set = function(this1,b,g,r,a) {
	this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
		var b;
		var idx = Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var r;
		var idx2 = Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 & 255) == 0) this1 = 0; else if((this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 0:
		data[offset] = this1 >> 8 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromARGB = function(argb) {
	var bgra = 0;
	bgra = (argb & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb >> 16 & 255 & 255) << 8 | argb >> 24 & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromRGBA = function(rgba) {
	var bgra = 0;
	bgra = (rgba >> 8 & 255 & 255) << 24 | (rgba >> 16 & 255 & 255) << 16 | (rgba >> 24 & 255 & 255) << 8 | rgba & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_b = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_b = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_g = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_r = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$RGBA_RGBA_$Impl_$ = {};
$hxClasses["lime.math.color._RGBA.RGBA_Impl_"] = lime_math_color__$RGBA_RGBA_$Impl_$;
lime_math_color__$RGBA_RGBA_$Impl_$.__name__ = ["lime","math","color","_RGBA","RGBA_Impl_"];
lime_math_color__$RGBA_RGBA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = null;
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = null;
lime_math_color__$RGBA_RGBA_$Impl_$.a16 = null;
lime_math_color__$RGBA_RGBA_$Impl_$.unmult = null;
lime_math_color__$RGBA_RGBA_$Impl_$._new = function(rgba) {
	if(rgba == null) rgba = 0;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.create = function(r,g,b,a) {
	var rgba = 0;
	rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		if(this1 != 0) this1 = 0;
	} else if((this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
			var r;
			var idx = Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.set = function(this1,r,g,b,a) {
	this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
		var r;
		var idx = Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var b;
		var idx2 = Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 & 255) == 0) {
			if(this1 != 0) this1 = 0;
		} else if((this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 >> 8 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 0:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 24 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 8 & 255;
		break;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromARGB = function(argb) {
	var rgba = 0;
	rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromBGRA = function(bgra) {
	var rgba = 0;
	rgba = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_b = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_g = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_r = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_r = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_net_HTTPRequest = function() {
	this.promise = new lime_app_Promise();
};
$hxClasses["lime.net.HTTPRequest"] = lime_net_HTTPRequest;
lime_net_HTTPRequest.__name__ = ["lime","net","HTTPRequest"];
lime_net_HTTPRequest.prototype = {
	load: function(url) {
		var _g = this;
		this.bytesLoaded = 0;
		this.bytesTotal = 0;
		var request = new XMLHttpRequest();
		request.addEventListener("progress",$bind(this,this.request_onProgress),false);
		request.onreadystatechange = function() {
			if(request.readyState != 4) return;
			if(request.status != null && request.status >= 200 && request.status <= 400) {
				_g.bytes = lime_utils_Bytes.ofData(request.response);
				_g.promise.complete(_g.bytes);
			} else _g.promise.error(request.status);
		};
		request.open("GET",url,true);
		request.responseType = "arraybuffer";
		request.send("");
		return this.promise.future;
	}
	,curl_onProgress: function(dltotal,dlnow,uptotal,upnow) {
		if(upnow > this.bytesLoaded || dlnow > this.bytesLoaded || uptotal > this.bytesTotal || dltotal > this.bytesTotal) {
			if(upnow > this.bytesLoaded) this.bytesLoaded = upnow | 0;
			if(dlnow > this.bytesLoaded) this.bytesLoaded = dlnow | 0;
			if(uptotal > this.bytesTotal) this.bytesTotal = uptotal | 0;
			if(dltotal > this.bytesTotal) this.bytesTotal = dltotal | 0;
			this.promise.progress(this.bytesLoaded / this.bytesTotal);
		}
		return 0;
	}
	,curl_onWrite: function(output,size,nmemb) {
		var cacheBytes = this.bytes;
		this.bytes = lime_utils_Bytes.alloc(this.bytes.length + output.length);
		this.bytes.blit(0,cacheBytes,0,cacheBytes.length);
		this.bytes.blit(cacheBytes.length,output,0,output.length);
		return size * nmemb;
	}
	,request_onProgress: function(event) {
		this.promise.progress(event.loaded / event.total);
	}
	,__class__: lime_net_HTTPRequest
};
var lime_net_curl__$CURL_CURL_$Impl_$ = {};
$hxClasses["lime.net.curl._CURL.CURL_Impl_"] = lime_net_curl__$CURL_CURL_$Impl_$;
lime_net_curl__$CURL_CURL_$Impl_$.__name__ = ["lime","net","curl","_CURL","CURL_Impl_"];
lime_net_curl__$CURL_CURL_$Impl_$.getDate = function(date,now) {
	return 0;
};
lime_net_curl__$CURL_CURL_$Impl_$.globalCleanup = function() {
};
lime_net_curl__$CURL_CURL_$Impl_$.globalInit = function(flags) {
	return 0;
};
lime_net_curl__$CURL_CURL_$Impl_$.version = function() {
	return null;
};
lime_net_curl__$CURL_CURL_$Impl_$.versionInfo = function(type) {
	return null;
};
lime_net_curl__$CURL_CURL_$Impl_$.intGt = function(a,b) {
	return a > b;
};
var lime_net_curl_CURLEasy = function() { };
$hxClasses["lime.net.curl.CURLEasy"] = lime_net_curl_CURLEasy;
lime_net_curl_CURLEasy.__name__ = ["lime","net","curl","CURLEasy"];
lime_net_curl_CURLEasy.cleanup = function(handle) {
};
lime_net_curl_CURLEasy.duphandle = function(handle) {
	return 0;
};
lime_net_curl_CURLEasy.escape = function(handle,url,length) {
	return null;
};
lime_net_curl_CURLEasy.getinfo = function(handle,info) {
	return null;
};
lime_net_curl_CURLEasy.init = function() {
	return 0;
};
lime_net_curl_CURLEasy.pause = function(handle,bitMask) {
	return 0;
};
lime_net_curl_CURLEasy.perform = function(handle) {
	return 0;
};
lime_net_curl_CURLEasy.reset = function(handle) {
};
lime_net_curl_CURLEasy.setopt = function(handle,option,parameter) {
	return 0;
};
lime_net_curl_CURLEasy.strerror = function(code) {
	return null;
};
lime_net_curl_CURLEasy.unescape = function(handle,url,inLength,outLength) {
	return null;
};
lime_net_curl_CURLEasy.__writeCallback = function(callback,output,size,nmemb) {
	return 0;
};
var lime_system_BackgroundWorker = function() {
	this.onProgress = new lime_app_Event_$Dynamic_$Void();
	this.onError = new lime_app_Event_$Dynamic_$Void();
	this.onComplete = new lime_app_Event_$Dynamic_$Void();
	this.doWork = new lime_app_Event_$Dynamic_$Void();
};
$hxClasses["lime.system.BackgroundWorker"] = lime_system_BackgroundWorker;
lime_system_BackgroundWorker.__name__ = ["lime","system","BackgroundWorker"];
lime_system_BackgroundWorker.prototype = {
	cancel: function() {
		this.canceled = true;
	}
	,run: function(message) {
		this.canceled = false;
		this.__runMessage = message;
		this.__doWork();
	}
	,sendComplete: function(message) {
		if(!this.canceled) {
			this.canceled = true;
			this.onComplete.dispatch(message);
		}
	}
	,sendError: function(message) {
		if(!this.canceled) {
			this.canceled = true;
			this.onError.dispatch(message);
		}
	}
	,sendProgress: function(message) {
		if(!this.canceled) this.onProgress.dispatch(message);
	}
	,__doWork: function() {
		this.doWork.dispatch(this.__runMessage);
	}
	,__update: function(deltaTime) {
	}
	,__class__: lime_system_BackgroundWorker
};
var lime_system_CFFI = function() { };
$hxClasses["lime.system.CFFI"] = lime_system_CFFI;
lime_system_CFFI.__name__ = ["lime","system","CFFI"];
lime_system_CFFI.available = null;
lime_system_CFFI.enabled = null;
lime_system_CFFI.load = function(library,method,args,lazy) {
	if(lazy == null) lazy = false;
	if(args == null) args = 0;
	if(!lime_system_CFFI.enabled) return Reflect.makeVarArgs(function(__) {
		return { };
	});
	var result = null;
	return result;
};
lime_system_CFFI.__findHaxelib = function(library) {
	return "";
};
lime_system_CFFI.__loaderTrace = function(message) {
};
lime_system_CFFI.__sysName = function() {
	return null;
};
lime_system_CFFI.__tryLoad = function(name,library,func,args) {
	return null;
};
var lime_system__$CFFIPointer_CFFIPointer_$Impl_$ = {};
$hxClasses["lime.system._CFFIPointer.CFFIPointer_Impl_"] = lime_system__$CFFIPointer_CFFIPointer_$Impl_$;
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.__name__ = ["lime","system","_CFFIPointer","CFFIPointer_Impl_"];
lime_system__$CFFIPointer_CFFIPointer_$Impl_$._new = function(handle) {
	return handle;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get = function(this1) {
	if(this1 != null) {
	}
	return 0;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equalsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEquals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEqualsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
var lime_system_Clipboard = function() { };
$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
lime_system_Clipboard.__name__ = ["lime","system","Clipboard"];
lime_system_Clipboard.__properties__ = {set_text:"set_text",get_text:"get_text"}
lime_system_Clipboard.get_text = function() {
	return null;
};
lime_system_Clipboard.set_text = function(value) {
	return null;
};
var lime_system_Display = function() {
};
$hxClasses["lime.system.Display"] = lime_system_Display;
lime_system_Display.__name__ = ["lime","system","Display"];
lime_system_Display.prototype = {
	__class__: lime_system_Display
};
var lime_system_DisplayMode = function(width,height,refreshRate,pixelFormat) {
	this.width = width;
	this.height = height;
	this.refreshRate = refreshRate;
	this.pixelFormat = pixelFormat;
};
$hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
lime_system_DisplayMode.__name__ = ["lime","system","DisplayMode"];
lime_system_DisplayMode.prototype = {
	__class__: lime_system_DisplayMode
};
var lime_system_Endian = $hxClasses["lime.system.Endian"] = { __ename__ : true, __constructs__ : ["LITTLE_ENDIAN","BIG_ENDIAN"] };
lime_system_Endian.LITTLE_ENDIAN = ["LITTLE_ENDIAN",0];
lime_system_Endian.LITTLE_ENDIAN.toString = $estr;
lime_system_Endian.LITTLE_ENDIAN.__enum__ = lime_system_Endian;
lime_system_Endian.BIG_ENDIAN = ["BIG_ENDIAN",1];
lime_system_Endian.BIG_ENDIAN.toString = $estr;
lime_system_Endian.BIG_ENDIAN.__enum__ = lime_system_Endian;
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = ["lime","system","System"];
lime_system_System.__properties__ = {get_userDirectory:"get_userDirectory",get_numDisplays:"get_numDisplays",get_fontsDirectory:"get_fontsDirectory",get_endianness:"get_endianness",get_documentsDirectory:"get_documentsDirectory",get_desktopDirectory:"get_desktopDirectory",get_applicationStorageDirectory:"get_applicationStorageDirectory",get_applicationDirectory:"get_applicationDirectory",set_allowScreenTimeout:"set_allowScreenTimeout",get_allowScreenTimeout:"get_allowScreenTimeout"}
lime_system_System.applicationDirectory = null;
lime_system_System.applicationStorageDirectory = null;
lime_system_System.desktopDirectory = null;
lime_system_System.disableCFFI = null;
lime_system_System.documentsDirectory = null;
lime_system_System.endianness = null;
lime_system_System.fontsDirectory = null;
lime_system_System.numDisplays = null;
lime_system_System.userDirectory = null;
lime_system_System.embed = $hx_exports.lime.embed = function(element,width,height,background,assetsPrefix) {
	var htmlElement = null;
	if(typeof(element) == "string") htmlElement = window.document.getElementById(js_Boot.__cast(element , String)); else if(element == null) htmlElement = window.document.createElement("div"); else htmlElement = element;
	var color = null;
	if(background != null) {
		background = StringTools.replace(background,"#","");
		if(background.indexOf("0x") > -1) color = Std.parseInt(background); else color = Std.parseInt("0x" + background);
	}
	if(width == null) width = 0;
	if(height == null) height = 0;
	ApplicationMain.config.windows[0].background = color;
	ApplicationMain.config.windows[0].element = htmlElement;
	ApplicationMain.config.windows[0].width = width;
	ApplicationMain.config.windows[0].height = height;
	ApplicationMain.config.assetsPrefix = assetsPrefix;
	ApplicationMain.create();
};
lime_system_System.exit = function(code) {
};
lime_system_System.getDisplay = function(id) {
	if(id == 0) {
		var display = new lime_system_Display();
		display.id = 0;
		display.name = "Generic Display";
		display.currentMode = new lime_system_DisplayMode(window.screen.width,window.screen.height,60,1);
		display.supportedModes = [display.currentMode];
		display.bounds = new lime_math_Rectangle(0,0,display.currentMode.width,display.currentMode.height);
		return display;
	}
	return null;
};
lime_system_System.getTimer = function() {
	return new Date().getTime();
};
lime_system_System.load = function(library,method,args,lazy) {
	if(lazy == null) lazy = false;
	if(args == null) args = 0;
	return lime_system_CFFI.load(library,method,args,lazy);
};
lime_system_System.get_allowScreenTimeout = function() {
	return true;
};
lime_system_System.set_allowScreenTimeout = function(value) {
	return true;
};
lime_system_System.get_applicationDirectory = function() {
	return null;
};
lime_system_System.get_applicationStorageDirectory = function() {
	var company = "MyCompany";
	var file = "MyApplication";
	if(lime_app_Application.current != null && lime_app_Application.current.config != null) {
		if(lime_app_Application.current.config.company != null) company = lime_app_Application.current.config.company;
		if(lime_app_Application.current.config.file != null) file = lime_app_Application.current.config.file;
	}
	return null;
};
lime_system_System.get_desktopDirectory = function() {
	return null;
};
lime_system_System.get_documentsDirectory = function() {
	return null;
};
lime_system_System.get_fontsDirectory = function() {
	return null;
};
lime_system_System.get_numDisplays = function() {
	return 1;
};
lime_system_System.get_userDirectory = function() {
	return null;
};
lime_system_System.get_endianness = function() {
	return lime_system_Endian.LITTLE_ENDIAN;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) maxThreads = 1;
	if(minThreads == null) minThreads = 0;
	this.onProgress = new lime_app_Event_$Dynamic_$Void();
	this.onError = new lime_app_Event_$Dynamic_$Void();
	this.onComplete = new lime_app_Event_$Dynamic_$Void();
	this.doWork = new lime_app_Event_$Dynamic_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = ["lime","system","ThreadPool"];
lime_system_ThreadPool.prototype = {
	queue: function(state) {
		this.doWork.dispatch(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,sendProgress: function(state) {
		this.onProgress.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_system__$ThreadPool_ThreadPoolMessageType = $hxClasses["lime.system._ThreadPool.ThreadPoolMessageType"] = { __ename__ : true, __constructs__ : ["COMPLETE","ERROR","EXIT","PROGRESS","WORK"] };
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE = ["COMPLETE",0];
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR = ["ERROR",1];
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT = ["EXIT",2];
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS = ["PROGRESS",3];
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK = ["WORK",4];
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
var lime_system__$ThreadPool_ThreadPoolMessage = function(type,state) {
	this.type = type;
	this.state = state;
};
$hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] = lime_system__$ThreadPool_ThreadPoolMessage;
lime_system__$ThreadPool_ThreadPoolMessage.__name__ = ["lime","system","_ThreadPool","ThreadPoolMessage"];
lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
	__class__: lime_system__$ThreadPool_ThreadPoolMessage
};
var lime_text__$Glyph_Glyph_$Impl_$ = {};
$hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime_text__$Glyph_Glyph_$Impl_$;
lime_text__$Glyph_Glyph_$Impl_$.__name__ = ["lime","text","_Glyph","Glyph_Impl_"];
lime_text__$Glyph_Glyph_$Impl_$._new = function(i) {
	return i;
};
var lime_text_GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
lime_text_GlyphMetrics.__name__ = ["lime","text","GlyphMetrics"];
lime_text_GlyphMetrics.prototype = {
	__class__: lime_text_GlyphMetrics
};
var lime_text_GlyphPosition = function(glyph,advance,offset) {
	this.glyph = glyph;
	this.advance = advance;
	if(offset != null) this.offset = offset; else this.offset = new lime_math_Vector2();
};
$hxClasses["lime.text.GlyphPosition"] = lime_text_GlyphPosition;
lime_text_GlyphPosition.__name__ = ["lime","text","GlyphPosition"];
lime_text_GlyphPosition.prototype = {
	__class__: lime_text_GlyphPosition
};
var lime_text__$TextDirection_TextDirection_$Impl_$ = {};
$hxClasses["lime.text._TextDirection.TextDirection_Impl_"] = lime_text__$TextDirection_TextDirection_$Impl_$;
lime_text__$TextDirection_TextDirection_$Impl_$.__name__ = ["lime","text","_TextDirection","TextDirection_Impl_"];
lime_text__$TextDirection_TextDirection_$Impl_$.__properties__ = {get_vertical:"get_vertical",get_horizontal:"get_horizontal",get_forward:"get_forward",get_backward:"get_backward"}
lime_text__$TextDirection_TextDirection_$Impl_$.reverse = function(this1) {
	this1 = this1 ^ 1;
};
lime_text__$TextDirection_TextDirection_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 4:
		return "leftToRight";
	case 5:
		return "rightToLeft";
	case 6:
		return "topToBottom";
	case 7:
		return "bottomToTop";
	default:
		return "";
	}
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_backward = function(this1) {
	return (this1 & -3) == 5;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_forward = function(this1) {
	return (this1 & -3) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_horizontal = function(this1) {
	return (this1 & -2) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_vertical = function(this1) {
	return (this1 & -2) == 6;
};
var lime_text_TextLayout = function(text,font,size,direction,script,language) {
	if(language == null) language = "en";
	if(script == null) script = "Zyyy";
	if(direction == null) direction = 4;
	if(size == null) size = 12;
	if(text == null) text = "";
	this.set_text(text);
	this.set_font(font);
	this.set_size(size);
	this.__direction = direction;
	this.__script = script;
	this.__language = language;
	this.positions = [];
	this.__dirty = true;
};
$hxClasses["lime.text.TextLayout"] = lime_text_TextLayout;
lime_text_TextLayout.__name__ = ["lime","text","TextLayout"];
lime_text_TextLayout.prototype = {
	__position: function() {
		this.positions = [];
	}
	,get_positions: function() {
		if(this.__dirty) {
			this.__dirty = false;
			this.__position();
		}
		return this.positions;
	}
	,get_direction: function() {
		return this.__direction;
	}
	,set_direction: function(value) {
		if(value == this.__direction) return value;
		this.__direction = value;
		this.__dirty = true;
		return value;
	}
	,set_font: function(value) {
		if(value == this.font) return value;
		this.font = value;
		this.__dirty = true;
		return value;
	}
	,get_glyphs: function() {
		var glyphs = [];
		var _g = 0;
		var _g1 = this.get_positions();
		while(_g < _g1.length) {
			var position = _g1[_g];
			++_g;
			glyphs.push(position.glyph);
		}
		return glyphs;
	}
	,get_language: function() {
		return this.__language;
	}
	,set_language: function(value) {
		if(value == this.__language) return value;
		this.__language = value;
		this.__dirty = true;
		return value;
	}
	,get_script: function() {
		return this.__script;
	}
	,set_script: function(value) {
		if(value == this.__script) return value;
		this.__script = value;
		this.__dirty = true;
		return value;
	}
	,set_size: function(value) {
		if(value == this.size) return value;
		this.size = value;
		this.__dirty = true;
		return value;
	}
	,set_text: function(value) {
		if(value == this.text) return value;
		this.text = value;
		this.__dirty = true;
		return value;
	}
	,__class__: lime_text_TextLayout
	,__properties__: {set_text:"set_text",set_size:"set_size",set_script:"set_script",get_script:"get_script",get_positions:"get_positions",set_language:"set_language",get_language:"get_language",get_glyphs:"get_glyphs",set_font:"set_font",set_direction:"set_direction",get_direction:"get_direction"}
};
var lime_text__$TextScript_TextScript_$Impl_$ = {};
$hxClasses["lime.text._TextScript.TextScript_Impl_"] = lime_text__$TextScript_TextScript_$Impl_$;
lime_text__$TextScript_TextScript_$Impl_$.__name__ = ["lime","text","_TextScript","TextScript_Impl_"];
lime_text__$TextScript_TextScript_$Impl_$.__properties__ = {get_rightToLeft:"get_rightToLeft"}
lime_text__$TextScript_TextScript_$Impl_$.get_rightToLeft = function(this1) {
	switch(this1) {
	case "Hebr":case "Arab":case "Syrc":case "Thaa":case "Nkoo":case "Samr":case "Mand":case "Armi":case "Phnx":case "Lydi":case "Cprt":case "Khar":case "Sarb":case "Avst":case "Phli":case "Phlp":case "Orkh":
		return true;
	default:
		return false;
	}
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app_Event_$Void_$Void();
	this.onButtonUp = new lime_app_Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app_Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = ["lime","ui","Gamepad"];
lime_ui_Gamepad.addMappings = function(mappings) {
};
lime_ui_Gamepad.__connect = function(id) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
		var gamepad = new lime_ui_Gamepad(id);
		lime_ui_Gamepad.devices.h[id] = gamepad;
		lime_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
lime_ui_Gamepad.__disconnect = function(id) {
	var gamepad = lime_ui_Gamepad.devices.h[id];
	if(gamepad != null) gamepad.connected = false;
	lime_ui_Gamepad.devices.remove(id);
	if(gamepad != null) gamepad.onDisconnect.dispatch();
};
lime_ui_Gamepad.prototype = {
	get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,__class__: lime_ui_Gamepad
	,__properties__: {get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$GamepadAxis_GamepadAxis_$Impl_$ = {};
$hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] = lime_ui__$GamepadAxis_GamepadAxis_$Impl_$;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.__name__ = ["lime","ui","_GamepadAxis","GamepadAxis_Impl_"];
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui__$GamepadButton_GamepadButton_$Impl_$ = {};
$hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] = lime_ui__$GamepadButton_GamepadButton_$Impl_$;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.__name__ = ["lime","ui","_GamepadButton","GamepadButton_Impl_"];
lime_ui__$GamepadButton_GamepadButton_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app_Event_$Int_$Float_$Void();
	this.onHatMove = new lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app_Event_$Void_$Void();
	this.onButtonUp = new lime_app_Event_$Int_$Void();
	this.onButtonDown = new lime_app_Event_$Int_$Void();
	this.onAxisMove = new lime_app_Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = ["lime","ui","Joystick"];
lime_ui_Joystick.__connect = function(id) {
	if(!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
		var joystick = new lime_ui_Joystick(id);
		lime_ui_Joystick.devices.h[id] = joystick;
		lime_ui_Joystick.onConnect.dispatch(joystick);
	}
};
lime_ui_Joystick.__disconnect = function(id) {
	var joystick = lime_ui_Joystick.devices.h[id];
	if(joystick != null) joystick.connected = false;
	lime_ui_Joystick.devices.remove(id);
	if(joystick != null) joystick.onDisconnect.dispatch();
};
lime_ui_Joystick.__getDeviceData = function() {
	if(navigator.getGamepads) return navigator.getGamepads(); else if(navigator.webkitGetGamepads) return navigator.webkitGetGamepads(); else return null;
};
lime_ui_Joystick.prototype = {
	get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_numAxes: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].axes.length;
	}
	,get_numButtons: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].buttons.length;
	}
	,get_numHats: function() {
		return 0;
	}
	,get_numTrackballs: function() {
		return 0;
	}
	,__class__: lime_ui_Joystick
	,__properties__: {get_numTrackballs:"get_numTrackballs",get_numHats:"get_numHats",get_numButtons:"get_numButtons",get_numAxes:"get_numAxes",get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$ = {};
$hxClasses["lime.ui._JoystickHatPosition.JoystickHatPosition_Impl_"] = lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__name__ = ["lime","ui","_JoystickHatPosition","JoystickHatPosition_Impl_"];
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__properties__ = {set_up:"set_up",get_up:"get_up",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_down:"set_down",get_down:"get_down",set_center:"set_center",get_center:"get_center"}
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$._new = function(value) {
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_center = function(this1) {
	return this1 == 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_center = function(this1,value) {
	if(value) this1 = 0;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_down = function(this1) {
	return (this1 & 4) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_down = function(this1,value) {
	if(value) this1 |= 4; else this1 &= 268435455 - 4;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_left = function(this1) {
	return (this1 & 8) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_left = function(this1,value) {
	if(value) this1 |= 8; else this1 &= 268435455 - 8;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_right = function(this1) {
	return (this1 & 2) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_right = function(this1,value) {
	if(value) this1 |= 2; else this1 &= 268435455 - 2;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_up = function(this1) {
	return (this1 & 1) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_up = function(this1,value) {
	if(value) this1 |= 1; else this1 &= 268435455 - 1;
	return value;
};
var lime_ui__$KeyCode_KeyCode_$Impl_$ = {};
$hxClasses["lime.ui._KeyCode.KeyCode_Impl_"] = lime_ui__$KeyCode_KeyCode_$Impl_$;
lime_ui__$KeyCode_KeyCode_$Impl_$.__name__ = ["lime","ui","_KeyCode","KeyCode_Impl_"];
lime_ui__$KeyCode_KeyCode_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lte = function(a,b) {
	return a <= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.plus = function(a,b) {
	return a + b;
};
var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = ["lime","ui","_KeyModifier","KeyModifier_Impl_"];
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__properties__ = {set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_numLock:"set_numLock",get_numLock:"get_numLock",set_metaKey:"set_metaKey",get_metaKey:"get_metaKey",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_capsLock:"set_capsLock",get_capsLock:"get_capsLock",set_altKey:"set_altKey",get_altKey:"get_altKey"}
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
	return (this1 & 256) > 0 || (this1 & 512) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_altKey = function(this1,value) {
	if(value) this1 |= 768; else this1 &= 268435455 - 768;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_capsLock = function(this1) {
	return (this1 & 8192) > 0 || (this1 & 8192) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_capsLock = function(this1,value) {
	if(value) this1 |= 8192; else this1 &= 268435455 - 8192;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
	return (this1 & 64) > 0 || (this1 & 128) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_ctrlKey = function(this1,value) {
	if(value) this1 |= 192; else this1 &= 268435455 - 192;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
	return (this1 & 1024) > 0 || (this1 & 2048) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_metaKey = function(this1,value) {
	if(value) this1 |= 3072; else this1 &= 268435455 - 3072;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_numLock = function(this1) {
	return (this1 & 4096) > 0 || (this1 & 4096) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_numLock = function(this1,value) {
	if(value) this1 |= 4096; else this1 &= 268435455 - 4096;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
	return (this1 & 1) > 0 || (this1 & 2) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_shiftKey = function(this1,value) {
	if(value) this1 |= 3; else this1 &= 268435455 - 3;
	return value;
};
var lime_ui_Mouse = function() { };
$hxClasses["lime.ui.Mouse"] = lime_ui_Mouse;
lime_ui_Mouse.__name__ = ["lime","ui","Mouse"];
lime_ui_Mouse.__properties__ = {set_lock:"set_lock",get_lock:"get_lock",set_cursor:"set_cursor",get_cursor:"get_cursor"}
lime_ui_Mouse.hide = function() {
	lime__$backend_html5_HTML5Mouse.hide();
};
lime_ui_Mouse.show = function() {
	lime__$backend_html5_HTML5Mouse.show();
};
lime_ui_Mouse.warp = function(x,y,window) {
	lime__$backend_html5_HTML5Mouse.warp(x,y,window);
};
lime_ui_Mouse.get_cursor = function() {
	return lime__$backend_html5_HTML5Mouse.get_cursor();
};
lime_ui_Mouse.set_cursor = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_cursor(value);
};
lime_ui_Mouse.get_lock = function() {
	return lime__$backend_html5_HTML5Mouse.get_lock();
};
lime_ui_Mouse.set_lock = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_lock(value);
};
var lime_ui_MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : true, __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime_ui_MouseCursor.ARROW = ["ARROW",0];
lime_ui_MouseCursor.ARROW.toString = $estr;
lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.DEFAULT = ["DEFAULT",2];
lime_ui_MouseCursor.DEFAULT.toString = $estr;
lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.MOVE = ["MOVE",3];
lime_ui_MouseCursor.MOVE.toString = $estr;
lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.POINTER = ["POINTER",4];
lime_ui_MouseCursor.POINTER.toString = $estr;
lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.TEXT = ["TEXT",9];
lime_ui_MouseCursor.TEXT.toString = $estr;
lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT = ["WAIT",10];
lime_ui_MouseCursor.WAIT.toString = $estr;
lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CUSTOM = ["CUSTOM",12];
lime_ui_MouseCursor.CUSTOM.toString = $estr;
lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = ["lime","ui","Touch"];
lime_ui_Touch.prototype = {
	__class__: lime_ui_Touch
};
var lime_ui_Window = function(config) {
	this.onTextInput = new lime_app_Event_$String_$Void();
	this.onTextEdit = new lime_app_Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app_Event_$Void_$Void();
	this.onResize = new lime_app_Event_$Int_$Int_$Void();
	this.onMove = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseUp = new lime_app_Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app_Event_$Float_$Float_$Int_$Void();
	this.onMinimize = new lime_app_Event_$Void_$Void();
	this.onLeave = new lime_app_Event_$Void_$Void();
	this.onKeyUp = new lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app_Event_$Void_$Void();
	this.onFocusOut = new lime_app_Event_$Void_$Void();
	this.onFocusIn = new lime_app_Event_$Void_$Void();
	this.onEnter = new lime_app_Event_$Void_$Void();
	this.onDeactivate = new lime_app_Event_$Void_$Void();
	this.onCreate = new lime_app_Event_$Void_$Void();
	this.onClose = new lime_app_Event_$Void_$Void();
	this.onActivate = new lime_app_Event_$Void_$Void();
	this.config = config;
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	if(config != null) {
		if(Object.prototype.hasOwnProperty.call(config,"width")) this.__width = config.width;
		if(Object.prototype.hasOwnProperty.call(config,"height")) this.__height = config.height;
		if(Object.prototype.hasOwnProperty.call(config,"x")) this.__x = config.x;
		if(Object.prototype.hasOwnProperty.call(config,"y")) this.__y = config.y;
		if(Object.prototype.hasOwnProperty.call(config,"fullscreen")) this.__fullscreen = config.fullscreen;
		if(Object.prototype.hasOwnProperty.call(config,"title")) this.__title = config.title;
	}
	this.backend = new lime__$backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = ["lime","ui","Window"];
lime_ui_Window.prototype = {
	alert: function(message,title) {
		this.backend.alert(message,title);
	}
	,close: function() {
		this.backend.close();
	}
	,create: function(application) {
		this.application = application;
		this.backend.create(application);
		if(this.renderer != null) this.renderer.create();
	}
	,focus: function() {
		this.backend.focus();
	}
	,move: function(x,y) {
		this.backend.move(x,y);
		this.__x = x;
		this.__y = y;
	}
	,resize: function(width,height) {
		this.backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,setIcon: function(image) {
		if(image == null) return;
		this.backend.setIcon(image);
	}
	,toString: function() {
		return "[object Window]";
	}
	,get_display: function() {
		return this.backend.getDisplay();
	}
	,get_enableTextEvents: function() {
		return this.backend.getEnableTextEvents();
	}
	,set_enableTextEvents: function(value) {
		return this.backend.setEnableTextEvents(value);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		return this.__minimized = this.backend.setMinimized(value);
	}
	,get_scale: function() {
		return this.__scale;
	}
	,get_title: function() {
		return this.__title;
	}
	,set_title: function(value) {
		return this.__title = this.backend.setTitle(this.__title);
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime_ui_Window
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_title:"set_title",get_title:"get_title",get_scale:"get_scale",set_minimized:"set_minimized",get_minimized:"get_minimized",set_height:"set_height",get_height:"get_height",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_enableTextEvents:"set_enableTextEvents",get_enableTextEvents:"get_enableTextEvents",get_display:"get_display"}
};
var lime_utils_TAError = $hxClasses["lime.utils.TAError"] = { __ename__ : true, __constructs__ : ["RangeError"] };
lime_utils_TAError.RangeError = ["RangeError",0];
lime_utils_TAError.RangeError.toString = $estr;
lime_utils_TAError.RangeError.__enum__ = lime_utils_TAError;
var lime_utils_Bytes = function(length,bytesData) {
	haxe_io_Bytes.call(this,bytesData);
};
$hxClasses["lime.utils.Bytes"] = lime_utils_Bytes;
lime_utils_Bytes.__name__ = ["lime","utils","Bytes"];
lime_utils_Bytes.alloc = function(length) {
	var bytes = haxe_io_Bytes.alloc(length);
	return new lime_utils_Bytes(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
lime_utils_Bytes.ofData = function(b) {
	var bytes = haxe_io_Bytes.ofData(b);
	return new lime_utils_Bytes(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.ofString = function(s) {
	var bytes = haxe_io_Bytes.ofString(s);
	return new lime_utils_Bytes(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.readFile = function(path) {
	return null;
};
lime_utils_Bytes.lime_bytes_from_data_pointer = function(data,length) {
	return lime_utils_Bytes.cffi_lime_bytes_from_data_pointer(data,length);
};
lime_utils_Bytes.lime_bytes_get_data_pointer = function(data) {
	return lime_utils_Bytes.cffi_lime_bytes_get_data_pointer(data);
};
lime_utils_Bytes.lime_bytes_read_file = function(path) {
	return lime_utils_Bytes.cffi_lime_bytes_read_file(path);
};
lime_utils_Bytes.__super__ = haxe_io_Bytes;
lime_utils_Bytes.prototype = $extend(haxe_io_Bytes.prototype,{
	__class__: lime_utils_Bytes
});
var lime_utils__$Float32Array_Float32Array_$Impl_$ = {};
$hxClasses["lime.utils._Float32Array.Float32Array_Impl_"] = lime_utils__$Float32Array_Float32Array_$Impl_$;
lime_utils__$Float32Array_Float32Array_$Impl_$.__name__ = ["lime","utils","_Float32Array","Float32Array_Impl_"];
lime_utils__$Float32Array_Float32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$Float32Array_Float32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$Float32Array_Float32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Float32Array(bytes.b.bufferValue);
	if(len == null) return new Float32Array(bytes.b.bufferValue,byteOffset);
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils_GLUtils = function() { };
$hxClasses["lime.utils.GLUtils"] = lime_utils_GLUtils;
lime_utils_GLUtils.__name__ = ["lime","utils","GLUtils"];
lime_utils_GLUtils.compileShader = function(source,type) {
	var shader = lime_graphics_opengl_GL.context.createShader(type);
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
	lime_graphics_opengl_GL.context.compileShader(shader);
	if(lime_graphics_opengl_GL.context.getShaderParameter(shader,35713) == 0) switch(type) {
	case 35633:
		throw new js__$Boot_HaxeError("Error compiling vertex shader");
		break;
	case 35632:
		throw new js__$Boot_HaxeError("Error compiling fragment shader");
		break;
	default:
		throw new js__$Boot_HaxeError("Error compiling unknown shader type");
	}
	return shader;
};
lime_utils_GLUtils.createProgram = function(vertexSource,fragmentSource) {
	var vertexShader = lime_utils_GLUtils.compileShader(vertexSource,35633);
	var fragmentShader = lime_utils_GLUtils.compileShader(fragmentSource,35632);
	var program = lime_graphics_opengl_GL.context.createProgram();
	lime_graphics_opengl_GL.context.attachShader(program,vertexShader);
	lime_graphics_opengl_GL.context.attachShader(program,fragmentShader);
	lime_graphics_opengl_GL.context.linkProgram(program);
	if(lime_graphics_opengl_GL.context.getProgramParameter(program,35714) == 0) throw new js__$Boot_HaxeError("Unable to initialize the shader program.");
	return program;
};
var lime_utils__$Int16Array_Int16Array_$Impl_$ = {};
$hxClasses["lime.utils._Int16Array.Int16Array_Impl_"] = lime_utils__$Int16Array_Int16Array_$Impl_$;
lime_utils__$Int16Array_Int16Array_$Impl_$.__name__ = ["lime","utils","_Int16Array","Int16Array_Impl_"];
lime_utils__$Int16Array_Int16Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$Int16Array_Int16Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$Int16Array_Int16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Int16Array(bytes.b.bufferValue);
	if(len == null) return new Int16Array(bytes.b.bufferValue,byteOffset);
	return new Int16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Int16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$Int32Array_Int32Array_$Impl_$ = {};
$hxClasses["lime.utils._Int32Array.Int32Array_Impl_"] = lime_utils__$Int32Array_Int32Array_$Impl_$;
lime_utils__$Int32Array_Int32Array_$Impl_$.__name__ = ["lime","utils","_Int32Array","Int32Array_Impl_"];
lime_utils__$Int32Array_Int32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$Int32Array_Int32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$Int32Array_Int32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Int32Array(bytes.b.bufferValue);
	if(len == null) return new Int32Array(bytes.b.bufferValue,byteOffset);
	return new Int32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils_LZMA = function() { };
$hxClasses["lime.utils.LZMA"] = lime_utils_LZMA;
lime_utils_LZMA.__name__ = ["lime","utils","LZMA"];
lime_utils_LZMA.decode = function(bytes) {
	return null;
};
lime_utils_LZMA.encode = function(bytes) {
	return null;
};
var lime_utils__$UInt16Array_UInt16Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt16Array.UInt16Array_Impl_"] = lime_utils__$UInt16Array_UInt16Array_$Impl_$;
lime_utils__$UInt16Array_UInt16Array_$Impl_$.__name__ = ["lime","utils","_UInt16Array","UInt16Array_Impl_"];
lime_utils__$UInt16Array_UInt16Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Uint16Array(bytes.b.bufferValue);
	if(len == null) return new Uint16Array(bytes.b.bufferValue,byteOffset);
	return new Uint16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "UInt16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$UInt32Array_UInt32Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt32Array.UInt32Array_Impl_"] = lime_utils__$UInt32Array_UInt32Array_$Impl_$;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__name__ = ["lime","utils","_UInt32Array","UInt32Array_Impl_"];
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Uint32Array(bytes.b.bufferValue);
	if(len == null) return new Uint32Array(bytes.b.bufferValue,byteOffset);
	return new Uint32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "UInt32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$UInt8Array_UInt8Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt8Array.UInt8Array_Impl_"] = lime_utils__$UInt8Array_UInt8Array_$Impl_$;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__name__ = ["lime","utils","_UInt8Array","UInt8Array_Impl_"];
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) return new Uint8Array(bytes.b.bufferValue);
	if(len == null) return new Uint8Array(bytes.b.bufferValue,byteOffset);
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "UInt8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var motion_actuators_IGenericActuator = function() { };
$hxClasses["motion.actuators.IGenericActuator"] = motion_actuators_IGenericActuator;
motion_actuators_IGenericActuator.__name__ = ["motion","actuators","IGenericActuator"];
motion_actuators_IGenericActuator.prototype = {
	__class__: motion_actuators_IGenericActuator
};
var motion_actuators_GenericActuator = function(target,duration,properties) {
	this._autoVisible = true;
	this._delay = 0;
	this._reflect = false;
	this._repeat = 0;
	this._reverse = false;
	this._smartRotation = false;
	this._snapping = false;
	this.special = false;
	this.target = target;
	this.properties = properties;
	this.duration = duration;
	this._ease = motion_Actuate.defaultEase;
};
$hxClasses["motion.actuators.GenericActuator"] = motion_actuators_GenericActuator;
motion_actuators_GenericActuator.__name__ = ["motion","actuators","GenericActuator"];
motion_actuators_GenericActuator.__interfaces__ = [motion_actuators_IGenericActuator];
motion_actuators_GenericActuator.prototype = {
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,i)) Reflect.setField(this.target,i,Reflect.field(this.properties,i)); else Reflect.setProperty(this.target,i,Reflect.field(this.properties,i));
		}
	}
	,autoVisible: function(value) {
		if(value == null) value = true;
		this._autoVisible = value;
		return this;
	}
	,callMethod: function(method,params) {
		if(params == null) params = [];
		return Reflect.callMethod(method,method,params);
	}
	,change: function() {
		if(this._onUpdate != null) this.callMethod(this._onUpdate,this._onUpdateParams);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) sendEvent = true;
		if(sendEvent) {
			this.change();
			if(this._onComplete != null) this.callMethod(this._onComplete,this._onCompleteParams);
		}
		motion_Actuate.unload(this);
	}
	,delay: function(duration) {
		this._delay = duration;
		return this;
	}
	,ease: function(easing) {
		this._ease = easing;
		return this;
	}
	,move: function() {
	}
	,onComplete: function(handler,parameters) {
		this._onComplete = handler;
		if(parameters == null) this._onCompleteParams = []; else this._onCompleteParams = parameters;
		if(this.duration == 0) this.complete();
		return this;
	}
	,onRepeat: function(handler,parameters) {
		this._onRepeat = handler;
		if(parameters == null) this._onRepeatParams = []; else this._onRepeatParams = parameters;
		return this;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) this._onUpdateParams = []; else this._onUpdateParams = parameters;
		return this;
	}
	,onPause: function(handler,parameters) {
		this._onPause = handler;
		if(parameters == null) this._onPauseParams = []; else this._onPauseParams = parameters;
		return this;
	}
	,onResume: function(handler,parameters) {
		this._onResume = handler;
		if(parameters == null) this._onResumeParams = []; else this._onResumeParams = parameters;
		return this;
	}
	,pause: function() {
		if(this._onPause != null) this.callMethod(this._onPause,this._onPauseParams);
	}
	,reflect: function(value) {
		if(value == null) value = true;
		this._reflect = value;
		this.special = true;
		return this;
	}
	,repeat: function(times) {
		if(times == null) times = -1;
		this._repeat = times;
		return this;
	}
	,resume: function() {
		if(this._onResume != null) this.callMethod(this._onResume,this._onResumeParams);
	}
	,reverse: function(value) {
		if(value == null) value = true;
		this._reverse = value;
		this.special = true;
		return this;
	}
	,smartRotation: function(value) {
		if(value == null) value = true;
		this._smartRotation = value;
		this.special = true;
		return this;
	}
	,snapping: function(value) {
		if(value == null) value = true;
		this._snapping = value;
		this.special = true;
		return this;
	}
	,stop: function(properties,complete,sendEvent) {
	}
	,__class__: motion_actuators_GenericActuator
};
var motion_actuators_SimpleActuator = function(target,duration,properties) {
	this.active = true;
	this.propertyDetails = [];
	this.sendChange = false;
	this.paused = false;
	this.cacheVisible = false;
	this.initialized = false;
	this.setVisible = false;
	this.toggleVisible = false;
	this.startTime = openfl_Lib.getTimer() / 1000;
	motion_actuators_GenericActuator.call(this,target,duration,properties);
	if(!motion_actuators_SimpleActuator.addedEvent) {
		motion_actuators_SimpleActuator.addedEvent = true;
		openfl_Lib.current.stage.addEventListener(openfl_events_Event.ENTER_FRAME,motion_actuators_SimpleActuator.stage_onEnterFrame);
	}
};
$hxClasses["motion.actuators.SimpleActuator"] = motion_actuators_SimpleActuator;
motion_actuators_SimpleActuator.__name__ = ["motion","actuators","SimpleActuator"];
motion_actuators_SimpleActuator.stage_onEnterFrame = function(event) {
	var currentTime = openfl_Lib.getTimer() / 1000;
	var actuator;
	var j = 0;
	var cleanup = false;
	var _g1 = 0;
	var _g = motion_actuators_SimpleActuator.actuatorsLength;
	while(_g1 < _g) {
		var i = _g1++;
		actuator = motion_actuators_SimpleActuator.actuators[j];
		if(actuator != null && actuator.active) {
			if(currentTime >= actuator.timeOffset) actuator.update(currentTime);
			j++;
		} else {
			motion_actuators_SimpleActuator.actuators.splice(j,1);
			--motion_actuators_SimpleActuator.actuatorsLength;
		}
	}
};
motion_actuators_SimpleActuator.__super__ = motion_actuators_GenericActuator;
motion_actuators_SimpleActuator.prototype = $extend(motion_actuators_GenericActuator.prototype,{
	setField_openfl_geom_Transform: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_motion_actuators_TransformActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_motion_actuators_MotionPathActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_openfl_display_DisplayObject: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_motion_actuators_SimpleActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,autoVisible: function(value) {
		if(value == null) value = true;
		this._autoVisible = value;
		if(!value) {
			this.toggleVisible = false;
			if(this.setVisible) this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",this.cacheVisible);
		}
		return this;
	}
	,delay: function(duration) {
		this._delay = duration;
		this.timeOffset = this.startTime + duration;
		return this;
	}
	,getField: function(target,propertyName) {
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) value = Reflect.field(target,propertyName); else value = Reflect.getProperty(target,propertyName);
		return value;
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var isField = true;
			if(Object.prototype.hasOwnProperty.call(this.target,i) && !(this.target.__properties__ && this.target.__properties__["set_" + i])) start = Reflect.field(this.target,i); else {
				isField = false;
				start = Reflect.getProperty(this.target,i);
			}
			if(typeof(start) == "number") {
				var value = this.getField(this.properties,i);
				if(start == null) start = 0;
				if(value == null) value = 0;
				details = new motion_actuators_PropertyDetails(this.target,i,start,value - start,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,move: function() {
		this.toggleVisible = Object.prototype.hasOwnProperty.call(this.properties,"alpha") && js_Boot.__instanceof(this.target,openfl_display_DisplayObject);
		if(this.toggleVisible && this.properties.alpha != 0 && !this.getField(this.target,"visible")) {
			this.setVisible = true;
			this.cacheVisible = this.getField(this.target,"visible");
			this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",true);
		}
		this.timeOffset = this.startTime;
		motion_actuators_SimpleActuator.actuators.push(this);
		++motion_actuators_SimpleActuator.actuatorsLength;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) this._onUpdateParams = []; else this._onUpdateParams = parameters;
		this.sendChange = true;
		return this;
	}
	,pause: function() {
		if(!this.paused) {
			this.paused = true;
			motion_actuators_GenericActuator.prototype.pause.call(this);
			this.pauseTime = openfl_Lib.getTimer();
		}
	}
	,resume: function() {
		if(this.paused) {
			this.paused = false;
			this.timeOffset += (openfl_Lib.getTimer() - this.pauseTime) / 1000;
			motion_actuators_GenericActuator.prototype.resume.call(this);
		}
	}
	,setProperty: function(details,value) {
		if(details.isField) details.target[details.propertyName] = value; else Reflect.setProperty(details.target,details.propertyName,value);
	}
	,stop: function(properties,complete,sendEvent) {
		if(this.active) {
			if(properties == null) {
				this.active = false;
				if(complete) this.apply();
				this.complete(sendEvent);
				return;
			}
			var _g = 0;
			var _g1 = Reflect.fields(properties);
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(this.properties,i)) {
					this.active = false;
					if(complete) this.apply();
					this.complete(sendEvent);
					return;
				}
			}
		}
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var i;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) tweenPosition = 1;
			if(!this.initialized) this.initialize();
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g1 = 0;
				var _g = this.detailsLength;
				while(_g1 < _g) {
					var i1 = _g1++;
					details = this.propertyDetails[i1];
					this.setProperty(details,details.start + details.change * easing);
				}
			} else {
				if(!this._reverse) easing = this._ease.calculate(tweenPosition); else easing = this._ease.calculate(1 - tweenPosition);
				var endValue;
				var _g11 = 0;
				var _g2 = this.detailsLength;
				while(_g11 < _g2) {
					var i2 = _g11++;
					details = this.propertyDetails[i2];
					if(this._smartRotation && (details.propertyName == "rotation" || details.propertyName == "rotationX" || details.propertyName == "rotationY" || details.propertyName == "rotationZ")) {
						var rotation = details.change % 360;
						if(rotation > 180) rotation -= 360; else if(rotation < -180) rotation += 360;
						endValue = details.start + rotation * easing;
					} else endValue = details.start + details.change * easing;
					if(!this._snapping) {
						if(details.isField) details.target[details.propertyName] = endValue; else Reflect.setProperty(details.target,details.propertyName,endValue);
					} else this.setProperty(details,Math.round(endValue));
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					if(this.toggleVisible && this.getField(this.target,"alpha") == 0) this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",false);
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) this.callMethod(this._onRepeat,this._onRepeatParams);
					if(this._reflect) this._reverse = !this._reverse;
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) this._repeat--;
				}
			}
			if(this.sendChange) this.change();
		}
	}
	,__class__: motion_actuators_SimpleActuator
});
var motion_easing_Expo = function() { };
$hxClasses["motion.easing.Expo"] = motion_easing_Expo;
motion_easing_Expo.__name__ = ["motion","easing","Expo"];
motion_easing_Expo.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion_easing_Expo.get_easeIn = function() {
	return new motion_easing_ExpoEaseIn();
};
motion_easing_Expo.get_easeInOut = function() {
	return new motion_easing_ExpoEaseInOut();
};
motion_easing_Expo.get_easeOut = function() {
	return new motion_easing_ExpoEaseOut();
};
var motion_easing_IEasing = function() { };
$hxClasses["motion.easing.IEasing"] = motion_easing_IEasing;
motion_easing_IEasing.__name__ = ["motion","easing","IEasing"];
motion_easing_IEasing.prototype = {
	__class__: motion_easing_IEasing
};
var motion_easing_ExpoEaseOut = function() {
};
$hxClasses["motion.easing.ExpoEaseOut"] = motion_easing_ExpoEaseOut;
motion_easing_ExpoEaseOut.__name__ = ["motion","easing","ExpoEaseOut"];
motion_easing_ExpoEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseOut.prototype = {
	calculate: function(k) {
		if(k == 1) return 1; else return 1 - Math.pow(2,-10 * k);
	}
	,ease: function(t,b,c,d) {
		if(t == d) return b + c; else return c * (1 - Math.pow(2,-10 * t / d)) + b;
	}
	,__class__: motion_easing_ExpoEaseOut
};
var motion_Actuate = function() { };
$hxClasses["motion.Actuate"] = motion_Actuate;
motion_Actuate.__name__ = ["motion","Actuate"];
motion_Actuate.apply = function(target,properties,customActuator) {
	motion_Actuate.stop(target,properties);
	if(customActuator == null) customActuator = motion_Actuate.defaultActuator;
	var actuator = Type.createInstance(customActuator,[target,0,properties]);
	actuator.apply();
	return actuator;
};
motion_Actuate.effects = function(target,duration,overwrite) {
	if(overwrite == null) overwrite = true;
	return new motion__$Actuate_EffectsOptions(target,duration,overwrite);
};
motion_Actuate.getLibrary = function(target,allowCreation) {
	if(allowCreation == null) allowCreation = true;
	if(!(motion_Actuate.targetLibraries.h.__keys__[target.__id__] != null) && allowCreation) motion_Actuate.targetLibraries.set(target,[]);
	return motion_Actuate.targetLibraries.h[target.__id__];
};
motion_Actuate.isActive = function() {
	var result = false;
	var $it0 = motion_Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		result = true;
		break;
	}
	return result;
};
motion_Actuate.motionPath = function(target,duration,properties,overwrite) {
	if(overwrite == null) overwrite = true;
	return motion_Actuate.tween(target,duration,properties,overwrite,motion_actuators_MotionPathActuator);
};
motion_Actuate.pause = function(target) {
	if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
		var actuator = target;
		actuator.pause();
	} else {
		var library = motion_Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator1 = library[_g];
				++_g;
				actuator1.pause();
			}
		}
	}
};
motion_Actuate.pauseAll = function() {
	var $it0 = motion_Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var _g = 0;
		while(_g < library.length) {
			var actuator = library[_g];
			++_g;
			actuator.pause();
		}
	}
};
motion_Actuate.reset = function() {
	var $it0 = motion_Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var i = library.length - 1;
		while(i >= 0) {
			library[i].stop(null,false,false);
			i--;
		}
	}
	motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
};
motion_Actuate.resume = function(target) {
	if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
		var actuator = target;
		actuator.resume();
	} else {
		var library = motion_Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator1 = library[_g];
				++_g;
				actuator1.resume();
			}
		}
	}
};
motion_Actuate.resumeAll = function() {
	var $it0 = motion_Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var _g = 0;
		while(_g < library.length) {
			var actuator = library[_g];
			++_g;
			actuator.resume();
		}
	}
};
motion_Actuate.stop = function(target,properties,complete,sendEvent) {
	if(sendEvent == null) sendEvent = true;
	if(complete == null) complete = false;
	if(target != null) {
		if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
			var actuator = target;
			actuator.stop(null,complete,sendEvent);
		} else {
			var library = motion_Actuate.getLibrary(target,false);
			if(library != null) {
				if(typeof(properties) == "string") {
					var temp = { };
					Reflect.setField(temp,properties,null);
					properties = temp;
				} else if((properties instanceof Array) && properties.__enum__ == null) {
					var temp1 = { };
					var _g = 0;
					var _g1;
					_g1 = js_Boot.__cast(properties , Array);
					while(_g < _g1.length) {
						var property = _g1[_g];
						++_g;
						Reflect.setField(temp1,property,null);
					}
					properties = temp1;
				}
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(properties,complete,sendEvent);
					i--;
				}
			}
		}
	}
};
motion_Actuate.timer = function(duration,customActuator) {
	return motion_Actuate.tween(new motion__$Actuate_TweenTimer(0),duration,new motion__$Actuate_TweenTimer(1),false,customActuator);
};
motion_Actuate.transform = function(target,duration,overwrite) {
	if(overwrite == null) overwrite = true;
	if(duration == null) duration = 0;
	return new motion__$Actuate_TransformOptions(target,duration,overwrite);
};
motion_Actuate.tween = function(target,duration,properties,overwrite,customActuator) {
	if(overwrite == null) overwrite = true;
	if(target != null) {
		if(duration > 0) {
			if(customActuator == null) customActuator = motion_Actuate.defaultActuator;
			var actuator = Type.createInstance(customActuator,[target,duration,properties]);
			var library = motion_Actuate.getLibrary(actuator.target);
			if(overwrite) {
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(actuator.properties,false,false);
					i--;
				}
				library = motion_Actuate.getLibrary(actuator.target);
			}
			library.push(actuator);
			actuator.move();
			return actuator;
		} else return motion_Actuate.apply(target,properties,customActuator);
	}
	return null;
};
motion_Actuate.unload = function(actuator) {
	var target = actuator.target;
	if(motion_Actuate.targetLibraries.h.__keys__[target.__id__] != null) {
		HxOverrides.remove(motion_Actuate.targetLibraries.h[target.__id__],actuator);
		if(motion_Actuate.targetLibraries.h[target.__id__].length == 0) motion_Actuate.targetLibraries.remove(target);
	}
};
motion_Actuate.update = function(target,duration,start,end,overwrite) {
	if(overwrite == null) overwrite = true;
	var properties = { start : start, end : end};
	return motion_Actuate.tween(target,duration,properties,overwrite,motion_actuators_MethodActuator);
};
var motion__$Actuate_EffectsOptions = function(target,duration,overwrite) {
	this.target = target;
	this.duration = duration;
	this.overwrite = overwrite;
};
$hxClasses["motion._Actuate.EffectsOptions"] = motion__$Actuate_EffectsOptions;
motion__$Actuate_EffectsOptions.__name__ = ["motion","_Actuate","EffectsOptions"];
motion__$Actuate_EffectsOptions.prototype = {
	filter: function(reference,properties) {
		properties.filter = reference;
		return motion_Actuate.tween(this.target,this.duration,properties,this.overwrite,motion_actuators_FilterActuator);
	}
	,__class__: motion__$Actuate_EffectsOptions
};
var motion__$Actuate_TransformOptions = function(target,duration,overwrite) {
	this.target = target;
	this.duration = duration;
	this.overwrite = overwrite;
};
$hxClasses["motion._Actuate.TransformOptions"] = motion__$Actuate_TransformOptions;
motion__$Actuate_TransformOptions.__name__ = ["motion","_Actuate","TransformOptions"];
motion__$Actuate_TransformOptions.prototype = {
	color: function(value,strength,alpha) {
		if(strength == null) strength = 1;
		if(value == null) value = 0;
		var properties = { colorValue : value, colorStrength : strength};
		if(alpha != null) properties.colorAlpha = alpha;
		return motion_Actuate.tween(this.target,this.duration,properties,this.overwrite,motion_actuators_TransformActuator);
	}
	,sound: function(volume,pan) {
		var properties = { };
		if(volume != null) properties.soundVolume = volume;
		if(pan != null) properties.soundPan = pan;
		return motion_Actuate.tween(this.target,this.duration,properties,this.overwrite,motion_actuators_TransformActuator);
	}
	,__class__: motion__$Actuate_TransformOptions
};
var motion__$Actuate_TweenTimer = function(progress) {
	this.progress = progress;
};
$hxClasses["motion._Actuate.TweenTimer"] = motion__$Actuate_TweenTimer;
motion__$Actuate_TweenTimer.__name__ = ["motion","_Actuate","TweenTimer"];
motion__$Actuate_TweenTimer.prototype = {
	__class__: motion__$Actuate_TweenTimer
};
var motion_MotionPath = function() {
	this._x = new motion_ComponentPath();
	this._y = new motion_ComponentPath();
	this._rotation = null;
};
$hxClasses["motion.MotionPath"] = motion_MotionPath;
motion_MotionPath.__name__ = ["motion","MotionPath"];
motion_MotionPath.prototype = {
	bezier: function(x,y,controlX,controlY,strength) {
		if(strength == null) strength = 1;
		this._x.addPath(new motion_BezierPath(x,controlX,strength));
		this._y.addPath(new motion_BezierPath(y,controlY,strength));
		return this;
	}
	,line: function(x,y,strength) {
		if(strength == null) strength = 1;
		this._x.addPath(new motion_LinearPath(x,strength));
		this._y.addPath(new motion_LinearPath(y,strength));
		return this;
	}
	,get_rotation: function() {
		if(this._rotation == null) this._rotation = new motion_RotationPath(this._x,this._y);
		return this._rotation;
	}
	,get_x: function() {
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,__class__: motion_MotionPath
	,__properties__: {get_y:"get_y",get_x:"get_x",get_rotation:"get_rotation"}
};
var motion_IComponentPath = function() { };
$hxClasses["motion.IComponentPath"] = motion_IComponentPath;
motion_IComponentPath.__name__ = ["motion","IComponentPath"];
motion_IComponentPath.prototype = {
	__class__: motion_IComponentPath
	,__properties__: {get_end:"get_end"}
};
var motion_ComponentPath = function() {
	this.paths = [];
	this.start = 0;
	this.totalStrength = 0;
};
$hxClasses["motion.ComponentPath"] = motion_ComponentPath;
motion_ComponentPath.__name__ = ["motion","ComponentPath"];
motion_ComponentPath.__interfaces__ = [motion_IComponentPath];
motion_ComponentPath.prototype = {
	addPath: function(path) {
		this.paths.push(path);
		this.totalStrength += path.strength;
	}
	,calculate: function(k) {
		if(this.paths.length == 1) return this.paths[0].calculate(this.start,k); else {
			var ratio = k * this.totalStrength;
			var lastEnd = this.start;
			var _g = 0;
			var _g1 = this.paths;
			while(_g < _g1.length) {
				var path = _g1[_g];
				++_g;
				if(ratio > path.strength) {
					ratio -= path.strength;
					lastEnd = path.end;
				} else return path.calculate(lastEnd,ratio / path.strength);
			}
		}
		return 0;
	}
	,get_end: function() {
		if(this.paths.length > 0) {
			var path = this.paths[this.paths.length - 1];
			return path.end;
		} else return this.start;
	}
	,__class__: motion_ComponentPath
	,__properties__: {get_end:"get_end"}
};
var motion_BezierPath = function(end,control,strength) {
	this.end = end;
	this.control = control;
	this.strength = strength;
};
$hxClasses["motion.BezierPath"] = motion_BezierPath;
motion_BezierPath.__name__ = ["motion","BezierPath"];
motion_BezierPath.prototype = {
	calculate: function(start,k) {
		return (1 - k) * (1 - k) * start + 2 * (1 - k) * k * this.control + k * k * this.end;
	}
	,__class__: motion_BezierPath
};
var motion_LinearPath = function(end,strength) {
	motion_BezierPath.call(this,end,0,strength);
};
$hxClasses["motion.LinearPath"] = motion_LinearPath;
motion_LinearPath.__name__ = ["motion","LinearPath"];
motion_LinearPath.__super__ = motion_BezierPath;
motion_LinearPath.prototype = $extend(motion_BezierPath.prototype,{
	calculate: function(start,k) {
		return start + k * (this.end - start);
	}
	,__class__: motion_LinearPath
});
var motion_RotationPath = function(x,y) {
	this.step = 0.01;
	this._x = x;
	this._y = y;
	this.offset = 0;
	this.start = this.calculate(0.0);
};
$hxClasses["motion.RotationPath"] = motion_RotationPath;
motion_RotationPath.__name__ = ["motion","RotationPath"];
motion_RotationPath.__interfaces__ = [motion_IComponentPath];
motion_RotationPath.prototype = {
	calculate: function(k) {
		var dX = this._x.calculate(k) - this._x.calculate(k + this.step);
		var dY = this._y.calculate(k) - this._y.calculate(k + this.step);
		var angle = Math.atan2(dY,dX) * (180 / Math.PI);
		angle = (angle + this.offset) % 360;
		return angle;
	}
	,get_end: function() {
		return this.calculate(1.0);
	}
	,__class__: motion_RotationPath
	,__properties__: {get_end:"get_end"}
};
var motion_actuators_FilterActuator = function(target,duration,properties) {
	this.filterIndex = -1;
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(js_Boot.__instanceof(properties.filter,Class)) {
		this.filterClass = properties.filter;
		if(target.get_filters().length == 0) target.set_filters([Type.createInstance(this.filterClass,[])]);
		var _g = 0;
		var _g1 = target.get_filters();
		while(_g < _g1.length) {
			var filter = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(filter,this.filterClass)) this.filter = filter;
		}
	} else {
		this.filterIndex = properties.filter;
		this.filter = target.get_filters()[this.filterIndex];
	}
};
$hxClasses["motion.actuators.FilterActuator"] = motion_actuators_FilterActuator;
motion_actuators_FilterActuator.__name__ = ["motion","actuators","FilterActuator"];
motion_actuators_FilterActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_FilterActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") Reflect.setField(this.filter,propertyName,Reflect.field(this.properties,propertyName));
		}
		var filters = this.getField(this.target,"filters");
		Reflect.setField(filters,this.properties.filter,this.filter);
		this.setField_openfl_display_DisplayObject(this.target,"filters",filters);
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") {
				start = this.getField(this.filter,propertyName);
				details = new motion_actuators_PropertyDetails(this.filter,propertyName,start,Reflect.field(this.properties,propertyName) - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		var filters = this.target.get_filters();
		if(this.filterIndex > -1) Reflect.setField(filters,this.properties.filter,this.filter); else {
			var _g1 = 0;
			var _g = filters.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(js_Boot.__instanceof(filters[i],this.filterClass)) filters[i] = this.filter;
			}
		}
		this.setField_openfl_display_DisplayObject(this.target,"filters",filters);
	}
	,__class__: motion_actuators_FilterActuator
});
var motion_actuators_MethodActuator = function(target,duration,properties) {
	this.currentParameters = [];
	this.tweenProperties = { };
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(!Object.prototype.hasOwnProperty.call(properties,"start")) this.properties.start = [];
	if(!Object.prototype.hasOwnProperty.call(properties,"end")) this.properties.end = this.properties.start;
	var _g1 = 0;
	var _g = this.properties.start.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.currentParameters.push(this.properties.start[i]);
	}
};
$hxClasses["motion.actuators.MethodActuator"] = motion_actuators_MethodActuator;
motion_actuators_MethodActuator.__name__ = ["motion","actuators","MethodActuator"];
motion_actuators_MethodActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MethodActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		this.callMethod(this.target,this.properties.end);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) sendEvent = true;
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
		}
		this.callMethod(this.target,this.currentParameters);
		motion_actuators_SimpleActuator.prototype.complete.call(this,sendEvent);
	}
	,initialize: function() {
		var details;
		var propertyName;
		var start;
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			propertyName = "param" + i;
			start = this.properties.start[i];
			this.tweenProperties[propertyName] = start;
			if(typeof(start) == "number" || ((start | 0) === start)) {
				details = new motion_actuators_PropertyDetails(this.tweenProperties,propertyName,start,this.properties.end[i] - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.active && !this.paused) {
			var _g1 = 0;
			var _g = this.properties.start.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
			}
			this.callMethod(this.target,this.currentParameters);
		}
	}
	,__class__: motion_actuators_MethodActuator
});
var motion_actuators_MotionPathActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.MotionPathActuator"] = motion_actuators_MotionPathActuator;
motion_actuators_MotionPathActuator.__name__ = ["motion","actuators","MotionPathActuator"];
motion_actuators_MotionPathActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MotionPathActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) Reflect.setField(this.target,propertyName,(js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end()); else Reflect.setProperty(this.target,propertyName,(js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end());
		}
	}
	,initialize: function() {
		var details;
		var path;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			path = js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath);
			if(path != null) {
				var isField = true;
				if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) path.start = Reflect.field(this.target,propertyName); else {
					isField = false;
					path.start = Reflect.getProperty(this.target,propertyName);
				}
				details = new motion_actuators_PropertyPathDetails(this.target,propertyName,path,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) tweenPosition = 1;
			if(!this.initialized) this.initialize();
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g = 0;
				var _g1 = this.propertyDetails;
				while(_g < _g1.length) {
					var details1 = _g1[_g];
					++_g;
					if(details1.isField) Reflect.setField(details1.target,details1.propertyName,(js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing)); else Reflect.setProperty(details1.target,details1.propertyName,(js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
				}
			} else {
				if(!this._reverse) easing = this._ease.calculate(tweenPosition); else easing = this._ease.calculate(1 - tweenPosition);
				var endValue;
				var _g2 = 0;
				var _g11 = this.propertyDetails;
				while(_g2 < _g11.length) {
					var details2 = _g11[_g2];
					++_g2;
					if(!this._snapping) {
						if(details2.isField) Reflect.setField(details2.target,details2.propertyName,(js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing)); else Reflect.setProperty(details2.target,details2.propertyName,(js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
					} else if(details2.isField) Reflect.setField(details2.target,details2.propertyName,Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing))); else Reflect.setProperty(details2.target,details2.propertyName,Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing)));
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					if(this.toggleVisible && this.getField(this.target,"alpha") == 0) this.setField_motion_actuators_MotionPathActuator_T(this.target,"visible",false);
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) this.callMethod(this._onRepeat,this._onRepeatParams);
					if(this._reflect) this._reverse = !this._reverse;
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) this._repeat--;
				}
			}
			if(this.sendChange) this.change();
		}
	}
	,__class__: motion_actuators_MotionPathActuator
});
var motion_actuators_PropertyDetails = function(target,propertyName,start,change,isField) {
	if(isField == null) isField = true;
	this.target = target;
	this.propertyName = propertyName;
	this.start = start;
	this.change = change;
	this.isField = isField;
};
$hxClasses["motion.actuators.PropertyDetails"] = motion_actuators_PropertyDetails;
motion_actuators_PropertyDetails.__name__ = ["motion","actuators","PropertyDetails"];
motion_actuators_PropertyDetails.prototype = {
	__class__: motion_actuators_PropertyDetails
};
var motion_actuators_PropertyPathDetails = function(target,propertyName,path,isField) {
	if(isField == null) isField = true;
	motion_actuators_PropertyDetails.call(this,target,propertyName,0,0,isField);
	this.path = path;
};
$hxClasses["motion.actuators.PropertyPathDetails"] = motion_actuators_PropertyPathDetails;
motion_actuators_PropertyPathDetails.__name__ = ["motion","actuators","PropertyPathDetails"];
motion_actuators_PropertyPathDetails.__super__ = motion_actuators_PropertyDetails;
motion_actuators_PropertyPathDetails.prototype = $extend(motion_actuators_PropertyDetails.prototype,{
	__class__: motion_actuators_PropertyPathDetails
});
var motion_actuators_TransformActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.TransformActuator"] = motion_actuators_TransformActuator;
motion_actuators_TransformActuator.__name__ = ["motion","actuators","TransformActuator"];
motion_actuators_TransformActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_TransformActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		this.initialize();
		if(this.endColorTransform != null) {
			var transform = this.getField(this.target,"transform");
			this.setField_openfl_geom_Transform(transform,"colorTransform",this.endColorTransform);
		}
		if(this.endSoundTransform != null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",this.endSoundTransform);
	}
	,initialize: function() {
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorValue") && js_Boot.__instanceof(this.target,openfl_display_DisplayObject)) this.initializeColor();
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume") || Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) this.initializeSound();
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,initializeColor: function() {
		this.endColorTransform = new openfl_geom_ColorTransform();
		var color = this.properties.colorValue;
		var strength = this.properties.colorStrength;
		if(strength < 1) {
			var multiplier;
			var offset;
			if(strength < 0.5) {
				multiplier = 1;
				offset = strength * 2;
			} else {
				multiplier = 1 - (strength - 0.5) * 2;
				offset = 1;
			}
			this.endColorTransform.redMultiplier = multiplier;
			this.endColorTransform.greenMultiplier = multiplier;
			this.endColorTransform.blueMultiplier = multiplier;
			this.endColorTransform.redOffset = offset * (color >> 16 & 255);
			this.endColorTransform.greenOffset = offset * (color >> 8 & 255);
			this.endColorTransform.blueOffset = offset * (color & 255);
		} else {
			this.endColorTransform.redMultiplier = 0;
			this.endColorTransform.greenMultiplier = 0;
			this.endColorTransform.blueMultiplier = 0;
			this.endColorTransform.redOffset = color >> 16 & 255;
			this.endColorTransform.greenOffset = color >> 8 & 255;
			this.endColorTransform.blueOffset = color & 255;
		}
		var propertyNames = ["redMultiplier","greenMultiplier","blueMultiplier","redOffset","greenOffset","blueOffset"];
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorAlpha")) {
			this.endColorTransform.alphaMultiplier = this.properties.colorAlpha;
			propertyNames.push("alphaMultiplier");
		} else this.endColorTransform.alphaMultiplier = this.getField(this.target,"alpha");
		var transform = this.getField(this.target,"transform");
		var begin = this.getField(transform,"colorTransform");
		this.tweenColorTransform = new openfl_geom_ColorTransform();
		var details;
		var start;
		var _g = 0;
		while(_g < propertyNames.length) {
			var propertyName = propertyNames[_g];
			++_g;
			start = this.getField(begin,propertyName);
			details = new motion_actuators_PropertyDetails(this.tweenColorTransform,propertyName,start,this.getField(this.endColorTransform,propertyName) - start);
			this.propertyDetails.push(details);
		}
	}
	,initializeSound: function() {
		if(this.getField(this.target,"soundTransform") == null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",new openfl_media_SoundTransform());
		var start = this.getField(this.target,"soundTransform");
		this.endSoundTransform = this.getField(this.target,"soundTransform");
		this.tweenSoundTransform = new openfl_media_SoundTransform();
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume")) {
			this.endSoundTransform.volume = this.properties.soundVolume;
			this.propertyDetails.push(new motion_actuators_PropertyDetails(this.tweenSoundTransform,"volume",start.volume,this.endSoundTransform.volume - start.volume));
		}
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) {
			this.endSoundTransform.pan = this.properties.soundPan;
			this.propertyDetails.push(new motion_actuators_PropertyDetails(this.tweenSoundTransform,"pan",start.pan,this.endSoundTransform.pan - start.pan));
		}
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.endColorTransform != null) {
			var transform = this.getField(this.target,"transform");
			this.setField_openfl_geom_Transform(transform,"colorTransform",this.tweenColorTransform);
		}
		if(this.endSoundTransform != null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",this.tweenSoundTransform);
	}
	,__class__: motion_actuators_TransformActuator
});
var motion_easing_ExpoEaseIn = function() {
};
$hxClasses["motion.easing.ExpoEaseIn"] = motion_easing_ExpoEaseIn;
motion_easing_ExpoEaseIn.__name__ = ["motion","easing","ExpoEaseIn"];
motion_easing_ExpoEaseIn.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseIn.prototype = {
	calculate: function(k) {
		if(k == 0) return 0; else return Math.pow(2,10 * (k - 1));
	}
	,ease: function(t,b,c,d) {
		if(t == 0) return b; else return c * Math.pow(2,10 * (t / d - 1)) + b;
	}
	,__class__: motion_easing_ExpoEaseIn
};
var motion_easing_ExpoEaseInOut = function() {
};
$hxClasses["motion.easing.ExpoEaseInOut"] = motion_easing_ExpoEaseInOut;
motion_easing_ExpoEaseInOut.__name__ = ["motion","easing","ExpoEaseInOut"];
motion_easing_ExpoEaseInOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseInOut.prototype = {
	calculate: function(k) {
		if(k == 0) return 0;
		if(k == 1) return 1;
		if((k /= 0.5) < 1.0) return 0.5 * Math.pow(2,10 * (k - 1));
		return 0.5 * (2 - Math.pow(2,-10 * --k));
	}
	,ease: function(t,b,c,d) {
		if(t == 0) return b;
		if(t == d) return b + c;
		if((t /= d / 2.0) < 1.0) return c / 2 * Math.pow(2,10 * (t - 1)) + b;
		return c / 2 * (2 - Math.pow(2,-10 * --t)) + b;
	}
	,__class__: motion_easing_ExpoEaseInOut
};
var motion_easing_Linear = function() { };
$hxClasses["motion.easing.Linear"] = motion_easing_Linear;
motion_easing_Linear.__name__ = ["motion","easing","Linear"];
motion_easing_Linear.__properties__ = {get_easeNone:"get_easeNone"}
motion_easing_Linear.get_easeNone = function() {
	return new motion_easing_LinearEaseNone();
};
var motion_easing_LinearEaseNone = function() {
};
$hxClasses["motion.easing.LinearEaseNone"] = motion_easing_LinearEaseNone;
motion_easing_LinearEaseNone.__name__ = ["motion","easing","LinearEaseNone"];
motion_easing_LinearEaseNone.__interfaces__ = [motion_easing_IEasing];
motion_easing_LinearEaseNone.prototype = {
	calculate: function(k) {
		return k;
	}
	,ease: function(t,b,c,d) {
		return c * t / d + b;
	}
	,__class__: motion_easing_LinearEaseNone
};
var motion_easing_Quart = function() { };
$hxClasses["motion.easing.Quart"] = motion_easing_Quart;
motion_easing_Quart.__name__ = ["motion","easing","Quart"];
motion_easing_Quart.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion_easing_Quart.get_easeIn = function() {
	return new motion_easing_QuartEaseIn();
};
motion_easing_Quart.get_easeInOut = function() {
	return new motion_easing_QuartEaseInOut();
};
motion_easing_Quart.get_easeOut = function() {
	return new motion_easing_QuartEaseOut();
};
var motion_easing_QuartEaseIn = function() {
};
$hxClasses["motion.easing.QuartEaseIn"] = motion_easing_QuartEaseIn;
motion_easing_QuartEaseIn.__name__ = ["motion","easing","QuartEaseIn"];
motion_easing_QuartEaseIn.__interfaces__ = [motion_easing_IEasing];
motion_easing_QuartEaseIn.prototype = {
	calculate: function(k) {
		return k * k * k * k;
	}
	,ease: function(t,b,c,d) {
		return c * (t /= d) * t * t * t + b;
	}
	,__class__: motion_easing_QuartEaseIn
};
var motion_easing_QuartEaseInOut = function() {
};
$hxClasses["motion.easing.QuartEaseInOut"] = motion_easing_QuartEaseInOut;
motion_easing_QuartEaseInOut.__name__ = ["motion","easing","QuartEaseInOut"];
motion_easing_QuartEaseInOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_QuartEaseInOut.prototype = {
	calculate: function(k) {
		if((k *= 2) < 1) return 0.5 * k * k * k * k;
		return -0.5 * ((k -= 2) * k * k * k - 2);
	}
	,ease: function(t,b,c,d) {
		if((t /= d / 2) < 1) return c / 2 * t * t * t * t + b;
		return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
	}
	,__class__: motion_easing_QuartEaseInOut
};
var motion_easing_QuartEaseOut = function() {
};
$hxClasses["motion.easing.QuartEaseOut"] = motion_easing_QuartEaseOut;
motion_easing_QuartEaseOut.__name__ = ["motion","easing","QuartEaseOut"];
motion_easing_QuartEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_QuartEaseOut.prototype = {
	calculate: function(k) {
		return -(--k * k * k * k - 1);
	}
	,ease: function(t,b,c,d) {
		return -c * ((t = t / d - 1) * t * t * t - 1) + b;
	}
	,__class__: motion_easing_QuartEaseOut
};
var openfl_IAssetCache = function() { };
$hxClasses["openfl.IAssetCache"] = openfl_IAssetCache;
openfl_IAssetCache.__name__ = ["openfl","IAssetCache"];
openfl_IAssetCache.prototype = {
	__class__: openfl_IAssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.sound = new haxe_ds_StringMap();
};
$hxClasses["openfl.AssetCache"] = openfl_AssetCache;
openfl_AssetCache.__name__ = ["openfl","AssetCache"];
openfl_AssetCache.__interfaces__ = [openfl_IAssetCache];
openfl_AssetCache.prototype = {
	clear: function(prefix) {
		if(prefix == null) {
			this.bitmapData = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.sound = new haxe_ds_StringMap();
		} else {
			var keys = this.bitmapData.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.bitmapData.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.sound.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.sound.remove(key2);
			}
		}
	}
	,getBitmapData: function(id) {
		return this.bitmapData.get(id);
	}
	,getFont: function(id) {
		return this.font.get(id);
	}
	,getSound: function(id) {
		return this.sound.get(id);
	}
	,hasBitmapData: function(id) {
		return this.bitmapData.exists(id);
	}
	,hasFont: function(id) {
		return this.font.exists(id);
	}
	,hasSound: function(id) {
		return this.sound.exists(id);
	}
	,removeBitmapData: function(id) {
		return this.bitmapData.remove(id);
	}
	,removeFont: function(id) {
		return this.font.remove(id);
	}
	,removeSound: function(id) {
		return this.sound.remove(id);
	}
	,setBitmapData: function(id,bitmapData) {
		this.bitmapData.set(id,bitmapData);
	}
	,setFont: function(id,font) {
		this.font.set(id,font);
	}
	,setSound: function(id,sound) {
		this.sound.set(id,sound);
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,__class__: openfl_AssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_Assets = function() { };
$hxClasses["openfl.Assets"] = openfl_Assets;
openfl_Assets.__name__ = ["openfl","Assets"];
openfl_Assets.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) useWeakReference = false;
	if(priority == null) priority = 0;
	if(useCapture == null) useCapture = false;
	if(!lime_Assets.onChange.has(openfl_Assets.LimeAssets_onChange)) lime_Assets.onChange.add(openfl_Assets.LimeAssets_onChange);
	openfl_Assets.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
openfl_Assets.dispatchEvent = function(event) {
	return openfl_Assets.dispatcher.dispatchEvent(event);
};
openfl_Assets.exists = function(id,type) {
	return lime_Assets.exists(id,type);
};
openfl_Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_Assets.cache.getBitmapData(id);
		if(openfl_Assets.isValidBitmapData(bitmapData)) return bitmapData;
	}
	var image = lime_Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl_display_BitmapData.fromImage(image);
		if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setBitmapData(id,bitmapData1);
		return bitmapData1;
	}
	return null;
};
openfl_Assets.getBytes = function(id) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(lime_Assets.getBytes(id));
};
openfl_Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) return openfl_Assets.cache.getFont(id);
	var limeFont = lime_Assets.getFont(id,false);
	if(limeFont != null) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setFont(id,font);
		return font;
	}
	return new openfl_text_Font();
};
openfl_Assets.getLibrary = function(name) {
	return lime_Assets.getLibrary(name);
};
openfl_Assets.getMovieClip = function(id) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			if(library.isLocal(symbolName,"MOVIE_CLIP")) return library.getMovieClip(symbolName); else haxe_Log.trace("[openfl.Assets] MovieClip asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 223, className : "openfl.Assets", methodName : "getMovieClip"});
		} else haxe_Log.trace("[openfl.Assets] There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 229, className : "openfl.Assets", methodName : "getMovieClip"});
	} else haxe_Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 235, className : "openfl.Assets", methodName : "getMovieClip"});
	return null;
};
openfl_Assets.getMusic = function(id,useCache) {
	if(useCache == null) useCache = true;
	var path = lime_Assets.getPath(id);
	if(path != null) return new openfl_media_Sound(new openfl_net_URLRequest(path));
	return null;
};
openfl_Assets.getPath = function(id) {
	return lime_Assets.getPath(id);
};
openfl_Assets.getSound = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasSound(id)) {
		var sound = openfl_Assets.cache.getSound(id);
		if(openfl_Assets.isValidSound(sound)) return sound;
	}
	var path = lime_Assets.getPath(id);
	if(path != null) return new openfl_media_Sound(new openfl_net_URLRequest(path));
	return null;
};
openfl_Assets.getText = function(id) {
	return lime_Assets.getText(id);
};
openfl_Assets.hasEventListener = function(type) {
	return openfl_Assets.dispatcher.hasEventListener(type);
};
openfl_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled()) {
		if(type == "IMAGE" || type == null) {
			if(openfl_Assets.cache.hasBitmapData(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(openfl_Assets.cache.hasFont(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(openfl_Assets.cache.hasSound(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
openfl_Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null && bitmapData.image != null;
};
openfl_Assets.isValidSound = function(sound) {
	return true;
};
openfl_Assets.list = function(type) {
	return lime_Assets.list(type);
};
openfl_Assets.loadBitmapData = function(id,useCache,handler) {
	if(useCache == null) useCache = true;
	if(useCache == null) useCache = true;
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_Assets.cache.getBitmapData(id);
		if(openfl_Assets.isValidBitmapData(bitmapData)) {
			promise.complete(bitmapData);
			return promise.future;
		}
	}
	lime_Assets.loadImage(id,false).onComplete(function(image) {
		if(image != null) {
			var bitmapData1 = openfl_display_BitmapData.fromImage(image);
			if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setBitmapData(id,bitmapData1);
			promise.complete(bitmapData1);
		} else promise.error("[Assets] Could not load Image \"" + id + "\"");
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_Assets.loadBytes = function(id,handler) {
	var promise = new lime_app_Promise();
	var future = lime_Assets.loadBytes(id);
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
		future.onComplete(function(bytes) {
			promise.complete(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
		});
		future.onProgress(function(progress) {
			promise.progress(progress);
		});
		future.onError(function(msg) {
			promise.error(msg);
		});
	}
	return promise.future;
};
openfl_Assets.loadFont = function(id,useCache,handler) {
	if(useCache == null) useCache = true;
	if(useCache == null) useCache = true;
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) {
		promise.complete(openfl_Assets.cache.getFont(id));
		return promise.future;
	}
	lime_Assets.loadFont(id).onComplete(function(limeFont) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setFont(id,font);
		promise.complete(font);
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_Assets.loadLibrary = function(name,handler) {
	var future = lime_Assets.loadLibrary(name);
	if(handler != null) {
		future.onComplete(handler);
		future.onError(function(_) {
			handler(null);
		});
	}
	return future;
};
openfl_Assets.loadMusic = function(id,useCache,handler) {
	if(useCache == null) useCache = true;
	if(useCache == null) useCache = true;
	return new lime_app_Future(function() {
		return openfl_Assets.getMusic(id,useCache);
	});
};
openfl_Assets.loadMovieClip = function(id,handler) {
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) promise.completeWith(library.loadMovieClip(symbolName)); else promise.error("[Assets] There is no MovieClip asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
openfl_Assets.loadSound = function(id,useCache,handler) {
	if(useCache == null) useCache = true;
	if(useCache == null) useCache = true;
	return new lime_app_Future(function() {
		return openfl_Assets.getSound(id,useCache);
	});
};
openfl_Assets.loadText = function(id,handler) {
	var future = lime_Assets.loadText(id);
	if(handler != null) {
		future.onComplete(handler);
		future.onError(function(_) {
			handler(null);
		});
	}
	return future;
};
openfl_Assets.registerLibrary = function(name,library) {
	lime_Assets.registerLibrary(name,library);
};
openfl_Assets.removeEventListener = function(type,listener,capture) {
	if(capture == null) capture = false;
	openfl_Assets.dispatcher.removeEventListener(type,listener,capture);
};
openfl_Assets.resolveClass = function(name) {
	return Type.resolveClass(name);
};
openfl_Assets.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	return value;
};
openfl_Assets.unloadLibrary = function(name) {
	lime_Assets.unloadLibrary(name);
};
openfl_Assets.LimeAssets_onChange = function() {
	openfl_Assets.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
};
var openfl_AssetLibrary = function() {
	lime_AssetLibrary.call(this);
};
$hxClasses["openfl.AssetLibrary"] = openfl_AssetLibrary;
openfl_AssetLibrary.__name__ = ["openfl","AssetLibrary"];
openfl_AssetLibrary.__super__ = lime_AssetLibrary;
openfl_AssetLibrary.prototype = $extend(lime_AssetLibrary.prototype,{
	getMovieClip: function(id) {
		return null;
	}
	,loadMovieClip: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getMovieClip(id);
		});
	}
	,__class__: openfl_AssetLibrary
});
var openfl_display_MovieClip = function() {
	openfl_display_Sprite.call(this);
	this.__currentFrame = 0;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.enabled = true;
};
$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
openfl_display_MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl_display_MovieClip.__super__ = openfl_display_Sprite;
openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	addFrameScript: function(index,method) {
		if(method != null) {
			if(this.__frameScripts == null) this.__frameScripts = new haxe_ds_IntMap();
			this.__frameScripts.h[index] = method;
			haxe_Log.trace("added script index " + index,{ fileName : "MovieClip.hx", lineNumber : 47, className : "openfl.display.MovieClip", methodName : "addFrameScript"});
		} else if(this.__frameScripts != null) this.__frameScripts.remove(index);
	}
	,gotoAndPlay: function(frame,scene) {
	}
	,gotoAndStop: function(frame,scene) {
	}
	,nextFrame: function() {
	}
	,play: function() {
	}
	,prevFrame: function() {
	}
	,stop: function() {
	}
	,get_currentFrame: function() {
		return this.__currentFrame;
	}
	,get_currentFrameLabel: function() {
		return this.__currentFrameLabel;
	}
	,get_currentLabel: function() {
		return this.__currentLabel;
	}
	,get_currentLabels: function() {
		return this.__currentLabels;
	}
	,get_framesLoaded: function() {
		return this.__totalFrames;
	}
	,get_totalFrames: function() {
		return this.__totalFrames;
	}
	,__class__: openfl_display_MovieClip
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_totalFrames:"get_totalFrames",get_framesLoaded:"get_framesLoaded",get_currentLabels:"get_currentLabels",get_currentLabel:"get_currentLabel",get_currentFrameLabel:"get_currentFrameLabel",get_currentFrame:"get_currentFrame"})
});
var openfl_display_LoaderInfo = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) loaderInfo.loader = loader; else loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_display_LoaderInfo
});
var openfl_system_ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) this.parentDomain = parentDomain; else this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl_system_ApplicationDomain.prototype = {
	getDefinition: function(name) {
		return Type.resolveClass(name);
	}
	,hasDefinition: function(name) {
		return Type.resolveClass(name) != null;
	}
	,__class__: openfl_system_ApplicationDomain
};
var openfl_events_UncaughtErrorEvents = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = ["openfl","events","UncaughtErrorEvents"];
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_events_UncaughtErrorEvents
});
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = ["openfl","geom","Matrix"];
openfl_geom_Matrix.prototype = {
	clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(column == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.x = 0;
			vector3D.y = 0;
			vector3D.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl_geom_Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		return matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c && this.d == matrix.d;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,toArray: function(transpose) {
		if(transpose == null) transpose = false;
		if(this.__array == null) {
			var this1;
			this1 = new Float32Array(9);
			this.__array = this1;
		}
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__toMatrix3: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,__transformInversePoint: function(point) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			point.x = -this.tx;
			point.y = -this.ty;
		} else {
			var px = 1.0 / norm * (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
			point.y = 1.0 / norm * (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
			point.x = px;
		}
	}
	,__transformInverseX: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) return -this.tx; else return 1.0 / norm * (this.c * (this.ty - py) + this.d * (px - this.tx));
	}
	,__transformInverseY: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) return -this.ty; else return 1.0 / norm * (this.a * (py - this.ty) + this.b * (this.tx - px));
	}
	,__transformPoint: function(point) {
		var px = point.x;
		var py = point.y;
		point.x = px * this.a + py * this.c + this.tx;
		point.y = px * this.b + py * this.d + this.ty;
	}
	,__transformX: function(px,py) {
		return px * this.a + py * this.c + this.tx;
	}
	,__transformY: function(px,py) {
		return px * this.b + py * this.d + this.ty;
	}
	,__translateTransformed: function(px,py) {
		this.tx = px * this.a + py * this.c + this.tx;
		this.ty = px * this.b + py * this.d + this.ty;
	}
	,__class__: openfl_geom_Matrix
};
var openfl_geom_Point = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = ["openfl","geom","Point"];
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl_geom_Point.prototype = {
	add: function(v) {
		return new openfl_geom_Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl_geom_Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl_geom_Point
	,__properties__: {get_length:"get_length"}
};
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) alphaOffset = 0;
	if(blueOffset == null) blueOffset = 0;
	if(greenOffset == null) greenOffset = 0;
	if(redOffset == null) redOffset = 0;
	if(alphaMultiplier == null) alphaMultiplier = 1;
	if(blueMultiplier == null) blueMultiplier = 1;
	if(greenMultiplier == null) greenMultiplier = 1;
	if(redMultiplier == null) redMultiplier = 1;
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl_geom_ColorTransform.prototype = {
	concat: function(second) {
		this.redMultiplier *= second.redMultiplier;
		this.greenMultiplier *= second.greenMultiplier;
		this.blueMultiplier *= second.blueMultiplier;
		this.alphaMultiplier *= second.alphaMultiplier;
		this.redOffset = second.redMultiplier * this.redOffset + second.redOffset;
		this.greenOffset = second.greenMultiplier * this.greenOffset + second.greenOffset;
		this.blueOffset = second.blueMultiplier * this.blueOffset + second.blueOffset;
		this.alphaOffset = second.alphaMultiplier * this.alphaOffset + second.alphaOffset;
	}
	,toString: function() {
		return "(redMultiplier=" + this.redMultiplier + ", greenMultiplier=" + this.greenMultiplier + ", blueMultiplier=" + this.blueMultiplier + ", alphaMultiplier=" + this.alphaMultiplier + ", redOffset=" + this.redOffset + ", greenOffset=" + this.greenOffset + ", blueOffset=" + this.blueOffset + ", alphaOffset=" + this.alphaOffset + ")";
	}
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__equals: function(ct,skipAlphaMultiplier) {
		if(skipAlphaMultiplier == null) skipAlphaMultiplier = false;
		return ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset && this.alphaOffset == ct.alphaOffset;
	}
	,__isDefault: function() {
		return this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0 && this.alphaOffset == 0;
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		return (function($this) {
			var $r;
			var array = [$this.redMultiplier,0,0,0,$this.redOffset / 255,0,$this.greenMultiplier,0,0,$this.greenOffset / 255,0,0,$this.blueMultiplier,0,$this.blueOffset / 255,0,0,0,$this.alphaMultiplier,$this.alphaOffset / 255];
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this));
	}
	,__class__: openfl_geom_ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = ["openfl","Lib"];
openfl_Lib.application = null;
openfl_Lib["as"] = function(v,c) {
	if(js_Boot.__instanceof(v,c)) return v; else return null;
};
openfl_Lib.attach = function(name) {
	return new openfl_display_MovieClip();
};
openfl_Lib.embed = $hx_exports.openfl.embed = function(elementName,width,height,background,assetsPrefix) {
	lime_system_System.embed(elementName,width,height,background,assetsPrefix);
};
openfl_Lib.getTimer = function() {
	return lime_system_System.getTimer();
};
openfl_Lib.getURL = function(request,target) {
	if(target == null) target = "_blank";
	window.open(request.url,target);
};
openfl_Lib.notImplemented = function(api) {
	if(!openfl_Lib.__sentWarnings.exists(api)) {
		openfl_Lib.__sentWarnings.set(api,true);
		haxe_Log.trace("Warning: " + api + " is not implemented",{ fileName : "Lib.hx", lineNumber : 113, className : "openfl.Lib", methodName : "notImplemented"});
	}
};
openfl_Lib.preventDefaultTouchMove = function() {
	window.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl_Lib.trace = function(arg) {
	haxe_Log.trace(arg,{ fileName : "Lib.hx", lineNumber : 144, className : "openfl.Lib", methodName : "trace"});
};
var openfl_Memory = function() { };
$hxClasses["openfl.Memory"] = openfl_Memory;
openfl_Memory.__name__ = ["openfl","Memory"];
openfl_Memory.gcRef = null;
openfl_Memory.len = null;
openfl_Memory._setPositionTemporarily = function(position,action) {
	var oldPosition = openfl_Memory.gcRef.position;
	openfl_Memory.gcRef.position = position;
	var value = action();
	openfl_Memory.gcRef.position = oldPosition;
	return value;
};
openfl_Memory.getByte = function(addr) {
	return openfl_Memory.gcRef.b[addr];
};
openfl_Memory.getDouble = function(addr) {
	return openfl_Memory._setPositionTemporarily(addr,function() {
		return openfl_Memory.gcRef.readDouble();
	});
};
openfl_Memory.getFloat = function(addr) {
	return openfl_Memory._setPositionTemporarily(addr,function() {
		return openfl_Memory.gcRef.readFloat();
	});
};
openfl_Memory.getI32 = function(addr) {
	return openfl_Memory._setPositionTemporarily(addr,function() {
		return openfl_Memory.gcRef.readInt();
	});
};
openfl_Memory.getUI16 = function(addr) {
	return openfl_Memory._setPositionTemporarily(addr,function() {
		return openfl_Memory.gcRef.readUnsignedShort();
	});
};
openfl_Memory.select = function(inBytes) {
	openfl_Memory.gcRef = inBytes;
	if(inBytes != null) openfl_Memory.len = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(inBytes); else openfl_Memory.len = 0;
};
openfl_Memory.setByte = function(addr,v) {
	openfl_Memory.gcRef.b[addr] = v & 255;
	v;
};
openfl_Memory.setDouble = function(addr,v) {
	openfl_Memory._setPositionTemporarily(addr,function() {
		openfl_Memory.gcRef.writeDouble(v);
	});
};
openfl_Memory.setFloat = function(addr,v) {
	openfl_Memory._setPositionTemporarily(addr,function() {
		openfl_Memory.gcRef.writeFloat(v);
	});
};
openfl_Memory.setI16 = function(addr,v) {
	openfl_Memory._setPositionTemporarily(addr,function() {
		openfl_Memory.gcRef.writeShort(v);
	});
};
openfl_Memory.setI32 = function(addr,v) {
	openfl_Memory._setPositionTemporarily(addr,function() {
		openfl_Memory.gcRef.writeInt(v);
	});
};
var openfl__$Vector_Vector_$Impl_$ = {};
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl__$Vector_Vector_$Impl_$;
openfl__$Vector_Vector_$Impl_$.__name__ = ["openfl","_Vector","Vector_Impl_"];
openfl__$Vector_Vector_$Impl_$.__properties__ = {set_fixed:"set_fixed",get_fixed:"get_fixed",set_length:"set_length",get_length:"get_length"}
openfl__$Vector_Vector_$Impl_$._new = function(length,fixed) {
	if(fixed == null) fixed = false;
	if(length == null) length = 0;
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(length);
	this1.data = this2;
	this1.length = length;
	this1.fixed = fixed;
	return this1;
};
openfl__$Vector_Vector_$Impl_$.concat = function(this1,a) {
	var vectorData = new openfl_VectorData();
	if(a != null) vectorData.length = this1.length + a.length; else vectorData.length = this1.length;
	vectorData.fixed = false;
	var this2;
	this2 = new Array(vectorData.length);
	vectorData.data = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
	if(a != null) haxe_ds__$Vector_Vector_$Impl_$.blit(a.data,0,vectorData.data,this1.length,a.length);
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.copy = function(this1) {
	var vectorData = new openfl_VectorData();
	vectorData.length = this1.length;
	vectorData.fixed = this1.fixed;
	var this2;
	this2 = new Array(this1.length);
	vectorData.data = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.iterator = function(this1) {
	return new openfl_VectorDataIterator(this1);
};
openfl__$Vector_Vector_$Impl_$.join = function(this1,sep) {
	var output = "";
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(i > 0) output += sep;
		output += Std.string(this1.data[i]);
	}
	return output;
};
openfl__$Vector_Vector_$Impl_$.pop = function(this1) {
	var value = null;
	if(!this1.fixed) {
		if(this1.length > 0) {
			this1.length--;
			value = this1.data[this1.length];
		}
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.push = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
		this1.data[this1.length - 1] = x;
	}
	return this1.length;
};
openfl__$Vector_Vector_$Impl_$.reverse = function(this1) {
	var data;
	var this2;
	this2 = new Array(this1.length);
	data = this2;
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		data[this1.length - 1 - i] = this1.data[i];
	}
	this1.data = data;
};
openfl__$Vector_Vector_$Impl_$.shift = function(this1) {
	if(!this1.fixed && this1.length > 0) {
		this1.length--;
		var value = this1.data[0];
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,1,this1.data,0,this1.length);
		return value;
	}
	return null;
};
openfl__$Vector_Vector_$Impl_$.unshift = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.length + 10);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,1,this1.data.length);
			this1.data = data;
		} else haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,this1.data,1,this1.length - 1);
		this1.data[0] = x;
	}
};
openfl__$Vector_Vector_$Impl_$.slice = function(this1,pos,end) {
	if(end == null) end = 0;
	if(pos == null) pos = 0;
	if(pos < 0) pos += this1.length;
	if(end <= 0) end += this1.length;
	if(end > this1.length) end = this1.length;
	var length = end - pos;
	if(length <= 0 || length > this1.length) length = this1.length;
	var vectorData = new openfl_VectorData();
	vectorData.length = end - pos;
	vectorData.fixed = true;
	var this2;
	this2 = new Array(length);
	vectorData.data = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,pos,vectorData.data,0,length);
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.sort = function(this1,f) {
	var array = haxe_ds__$Vector_Vector_$Impl_$.toArray(this1.data);
	array.sort(f);
	var vec;
	var this2;
	this2 = new Array(array.length);
	vec = this2;
	var _g1 = 0;
	var _g = array.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = array[i];
	}
	this1.data = vec;
};
openfl__$Vector_Vector_$Impl_$.splice = function(this1,pos,len) {
	if(pos < 0) pos += this1.length;
	if(pos + len > this1.length) len = this1.length - pos;
	if(len < 0) len = 0;
	var vectorData = new openfl_VectorData();
	vectorData.length = len;
	vectorData.fixed = false;
	var this2;
	this2 = new Array(len);
	vectorData.data = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,pos,vectorData.data,0,len);
	if(len > 0) {
		this1.length -= len;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,pos + len,this1.data,pos,this1.length - pos);
	}
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.toString = function(this1) {
	return haxe_ds__$Vector_Vector_$Impl_$.toArray(this1.data).toString();
};
openfl__$Vector_Vector_$Impl_$.indexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var value = -1;
	var _g1 = from;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(this1.data[i] == x) {
			value = i;
			break;
		}
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.lastIndexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var value = -1;
	var i = this1.length - 1;
	while(i >= from) {
		if(this1.data[i] == x) {
			value = i;
			break;
		}
		i--;
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.ofArray = function(a) {
	var vectorData = new openfl_VectorData();
	vectorData.length = a.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(a.length);
	vec = this1;
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = a[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.convert = function(v) {
	return v;
};
openfl__$Vector_Vector_$Impl_$.get = function(this1,index) {
	return this1.data[index];
};
openfl__$Vector_Vector_$Impl_$.set = function(this1,key,value) {
	if(!this1.fixed) {
		if(key >= this1.length) this1.length = key + 1;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	return this1.data[key] = value;
};
openfl__$Vector_Vector_$Impl_$.fromArray = function(value) {
	var vectorData = new openfl_VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(value.length);
	vec = this1;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.toArray = function(this1) {
	var value = [];
	var _g1 = 0;
	var _g = this1.data.length;
	while(_g1 < _g) {
		var i = _g1++;
		value.push(this1.data[i]);
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.fromHaxeVector = function(value) {
	var vectorData = new openfl_VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	vectorData.data = value;
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.toHaxeVector = function(this1) {
	return this1.data;
};
openfl__$Vector_Vector_$Impl_$.fromVectorData = function(value) {
	return value;
};
openfl__$Vector_Vector_$Impl_$.toVectorData = function(this1) {
	return this1;
};
openfl__$Vector_Vector_$Impl_$.get_length = function(this1) {
	return this1.length;
};
openfl__$Vector_Vector_$Impl_$.set_length = function(this1,value) {
	if(!this1.fixed) {
		if(value > this1.length) {
			var data;
			var this2;
			this2 = new Array(value);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,value)));
			this1.data = data;
		}
		this1.length = value;
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.get_fixed = function(this1) {
	return this1.fixed;
};
openfl__$Vector_Vector_$Impl_$.set_fixed = function(this1,value) {
	return this1.fixed = value;
};
var openfl_VectorData = function() {
	this.length = 0;
};
$hxClasses["openfl.VectorData"] = openfl_VectorData;
openfl_VectorData.__name__ = ["openfl","VectorData"];
openfl_VectorData.prototype = {
	__class__: openfl_VectorData
};
var openfl_VectorDataIterator = function(data) {
	this.index = 0;
	this.vectorData = data;
};
$hxClasses["openfl.VectorDataIterator"] = openfl_VectorDataIterator;
openfl_VectorDataIterator.__name__ = ["openfl","VectorDataIterator"];
openfl_VectorDataIterator.prototype = {
	hasNext: function() {
		return this.index < this.vectorData.length;
	}
	,next: function() {
		var index = this.index++;
		return this.vectorData.data[index];
	}
	,__class__: openfl_VectorDataIterator
};
var openfl__$internal_renderer_AbstractMaskManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractMaskManager"] = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_AbstractMaskManager.__name__ = ["openfl","_internal","renderer","AbstractMaskManager"];
openfl__$internal_renderer_AbstractMaskManager.prototype = {
	pushMask: function(mask) {
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,popRect: function() {
	}
	,saveState: function() {
	}
	,restoreState: function() {
	}
	,__class__: openfl__$internal_renderer_AbstractMaskManager
};
var openfl__$internal_renderer_AbstractRenderer = function(width,height) {
	this.width = width;
	this.height = height;
};
$hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_AbstractRenderer.__name__ = ["openfl","_internal","renderer","AbstractRenderer"];
openfl__$internal_renderer_AbstractRenderer.prototype = {
	render: function(stage) {
	}
	,renderShape: function(shape) {
	}
	,setViewport: function(x,y,width,height) {
	}
	,resize: function(width,height) {
	}
	,__class__: openfl__$internal_renderer_AbstractRenderer
};
var openfl__$internal_renderer_DrawCommandBuffer = function() {
	this.types = [];
	this.b = [];
	this.i = [];
	this.f = [];
	this.o = [];
	this.ff = [];
	this.ii = [];
	this.ts = [];
};
$hxClasses["openfl._internal.renderer.DrawCommandBuffer"] = openfl__$internal_renderer_DrawCommandBuffer;
openfl__$internal_renderer_DrawCommandBuffer.__name__ = ["openfl","_internal","renderer","DrawCommandBuffer"];
openfl__$internal_renderer_DrawCommandBuffer.prototype = {
	append: function(other) {
		var data = new openfl__$internal_renderer_DrawCommandReader(other);
		var _g = 0;
		var _g1 = other.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				c = data;
				this.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				break;
			case 1:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				c1 = data;
				this.beginFill(c1.buffer.i[c1.iPos],c1.buffer.f[c1.fPos]);
				break;
			case 2:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				c2 = data;
				this.beginGradientFill(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.o[c2.oPos + 4]);
				break;
			case 3:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c3 = data;
				this.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
				break;
			case 4:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c4 = data;
				this.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 5:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c5 = data;
				this.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
				break;
			case 6:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c6 = data;
				this.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
				break;
			case 7:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_PATH;
				c7 = data;
				this.drawPath(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.o[c7.oPos + 2]);
				break;
			case 8:
				var c8;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c8 = data;
				this.drawRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3]);
				break;
			case 9:
				var c9;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c9 = data;
				this.drawRoundRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3],c9.buffer.f[c9.fPos + 4],c9.buffer.f[c9.fPos + 5]);
				break;
			case 10:
				var c10;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
				c10 = data;
				this.drawTiles(c10.buffer.ts[c10.tsPos],c10.buffer.ff[c10.ffPos],c10.buffer.b[c10.bPos],c10.buffer.i[c10.iPos],c10.buffer.o[c10.oPos],c10.buffer.i[c10.iPos + 1]);
				break;
			case 11:
				var c11;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				c11 = data;
				this.drawTriangles(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.o[c11.oPos + 4],c11.buffer.i[c11.iPos]);
				break;
			case 12:
				var c12;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				c12 = data;
				this.endFill();
				break;
			case 13:
				var c13;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				c13 = data;
				this.lineBitmapStyle(c13.buffer.o[c13.oPos],c13.buffer.o[c13.oPos + 1],c13.buffer.b[c13.bPos],c13.buffer.b[c13.bPos + 1]);
				break;
			case 14:
				var c14;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				c14 = data;
				this.lineGradientStyle(c14.buffer.o[c14.oPos],c14.buffer.ii[c14.iiPos],c14.buffer.ff[c14.ffPos],c14.buffer.ii[c14.iiPos + 1],c14.buffer.o[c14.oPos + 1],c14.buffer.o[c14.oPos + 2],c14.buffer.o[c14.oPos + 3],c14.buffer.o[c14.oPos + 4]);
				break;
			case 15:
				var c15;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				c15 = data;
				this.lineStyle(c15.buffer.o[c15.oPos],c15.buffer.o[c15.oPos + 1],c15.buffer.o[c15.oPos + 2],c15.buffer.o[c15.oPos + 3],c15.buffer.o[c15.oPos + 4],c15.buffer.o[c15.oPos + 5],c15.buffer.o[c15.oPos + 6],c15.buffer.o[c15.oPos + 7]);
				break;
			case 16:
				var c16;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c16 = data;
				this.lineTo(c16.buffer.f[c16.fPos],c16.buffer.f[c16.fPos + 1]);
				break;
			case 17:
				var c17;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c17 = data;
				this.moveTo(c17.buffer.f[c17.fPos],c17.buffer.f[c17.fPos + 1]);
				break;
			case 18:
				var c18;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
				c18 = data;
				this.overrideMatrix(c18.buffer.o[c18.oPos]);
				break;
			default:
			}
		}
		data.destroy();
		return other;
	}
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,beginFill: function(color,alpha) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_FILL);
		this.i.push(color);
		this.f.push(alpha);
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.o.push(focalPointRatio);
	}
	,clear: function() {
		this.types.splice(0,this.types.length);
		this.b.splice(0,this.b.length);
		this.i.splice(0,this.i.length);
		this.f.splice(0,this.f.length);
		this.o.splice(0,this.o.length);
		this.ff.splice(0,this.ff.length);
		this.ii.splice(0,this.ii.length);
		this.ts.splice(0,this.ts.length);
	}
	,copy: function() {
		var copy = new openfl__$internal_renderer_DrawCommandBuffer();
		copy.append(this);
		return copy;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO);
		this.f.push(controlX1);
		this.f.push(controlY1);
		this.f.push(controlX2);
		this.f.push(controlY2);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.CURVE_TO);
		this.f.push(controlX);
		this.f.push(controlY);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,destroy: function() {
		this.clear();
		this.types = null;
		this.b = null;
		this.i = null;
		this.f = null;
		this.o = null;
		this.ff = null;
		this.ii = null;
		this.ts = null;
	}
	,drawCircle: function(x,y,radius) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(radius);
	}
	,drawEllipse: function(x,y,width,height) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawPath: function(commands,data,winding) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_PATH);
		this.o.push(commands);
		this.o.push(data);
		this.o.push(winding);
	}
	,drawRect: function(x,y,width,height) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRoundRect: function(x,y,width,height,rx,ry) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
		this.f.push(rx);
		this.f.push(ry);
	}
	,drawTiles: function(sheet,tileData,smooth,flags,shader,count) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TILES);
		this.ts.push(sheet);
		this.ff.push(tileData);
		this.b.push(smooth);
		this.i.push(flags);
		this.o.push(shader);
		this.i.push(count);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling,colors,blendMode) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES);
		this.o.push(vertices);
		this.o.push(indices);
		this.o.push(uvtData);
		this.o.push(culling);
		this.o.push(colors);
		this.i.push(blendMode);
	}
	,endFill: function() {
		this.types.push(openfl__$internal_renderer_DrawCommandType.END_FILL);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.o.push(focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_STYLE);
		this.o.push(thickness);
		this.o.push(color);
		this.o.push(alpha);
		this.o.push(pixelHinting);
		this.o.push(scaleMode);
		this.o.push(caps);
		this.o.push(joints);
		this.o.push(miterLimit);
	}
	,lineTo: function(x,y) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,moveTo: function(x,y) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.MOVE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,overrideMatrix: function(matrix) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX);
		this.o.push(matrix);
	}
	,get_length: function() {
		return this.types.length;
	}
	,__class__: openfl__$internal_renderer_DrawCommandBuffer
	,__properties__: {get_length:"get_length"}
};
var openfl__$internal_renderer_DrawCommandReader = function(buffer) {
	this.buffer = buffer;
	this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	this.prev = openfl__$internal_renderer_DrawCommandType.UNKNOWN;
};
$hxClasses["openfl._internal.renderer.DrawCommandReader"] = openfl__$internal_renderer_DrawCommandReader;
openfl__$internal_renderer_DrawCommandReader.__name__ = ["openfl","_internal","renderer","DrawCommandReader"];
openfl__$internal_renderer_DrawCommandReader.prototype = {
	advance: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 5;
			this.iiPos += 2;
			this.ffPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.oPos += 3;
			break;
		case 8:
			this.fPos += 4;
			break;
		case 9:
			this.fPos += 6;
			break;
		case 10:
			this.tsPos += 1;
			this.ffPos += 1;
			this.bPos += 1;
			this.iPos += 2;
			this.oPos += 1;
			break;
		case 11:
			this.oPos += 5;
			this.iPos += 1;
			break;
		case 12:
			break;
		case 13:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 14:
			this.oPos += 5;
			this.iiPos += 2;
			this.ffPos += 1;
			break;
		case 15:
			this.oPos += 8;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.oPos += 1;
			break;
		default:
		}
	}
	,bool: function(index) {
		return this.buffer.b[this.bPos + index];
	}
	,destroy: function() {
		this.buffer = null;
		this.reset();
	}
	,fArr: function(index) {
		return this.buffer.ff[this.ffPos + index];
	}
	,'float': function(index) {
		return this.buffer.f[this.fPos + index];
	}
	,iArr: function(index) {
		return this.buffer.ii[this.iiPos + index];
	}
	,'int': function(index) {
		return this.buffer.i[this.iPos + index];
	}
	,obj: function(index) {
		return this.buffer.o[this.oPos + index];
	}
	,readBeginBitmapFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
		return this;
	}
	,readBeginFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
		return this;
	}
	,readBeginGradientFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
		return this;
	}
	,readCubicCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
		return this;
	}
	,readCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
		return this;
	}
	,readDrawCircle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
		return this;
	}
	,readDrawEllipse: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
		return this;
	}
	,readDrawPath: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_PATH;
		return this;
	}
	,readDrawRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
		return this;
	}
	,readDrawRoundRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
		return this;
	}
	,readDrawTiles: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
		return this;
	}
	,readDrawTriangles: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
		return this;
	}
	,readEndFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
		return this;
	}
	,readLineBitmapStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
		return this;
	}
	,readLineGradientStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
		return this;
	}
	,readLineStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
		return this;
	}
	,readLineTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
		return this;
	}
	,readMoveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
		return this;
	}
	,readOverrideMatrix: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
		return this;
	}
	,reset: function() {
		this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	}
	,skip: function(type) {
		this.advance();
		this.prev = type;
	}
	,tileSheet: function(index) {
		return this.buffer.ts[this.tsPos + index];
	}
	,__class__: openfl__$internal_renderer_DrawCommandReader
};
var openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginBitmapFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginBitmapFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"}
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__properties__ = {get_alpha:"get_alpha",get_color:"get_color"}
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color = function(this1) {
	return this1.buffer.i[this1.iPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginGradientFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginGradientFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"}
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors = function(this1) {
	return this1.buffer.ii[this1.iiPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios = function(this1) {
	return this1.buffer.ii[this1.iiPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1.buffer.o[this1.oPos + 4];
};
var openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CubicCurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CubicCurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY2:"get_controlY2",get_controlX2:"get_controlX2",get_controlY1:"get_controlY1",get_controlX1:"get_controlX1"}
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1 = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1 = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2 = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2 = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1.buffer.f[this1.fPos + 4];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1.buffer.f[this1.fPos + 5];
};
var openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY:"get_controlY",get_controlX:"get_controlX"}
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawCircleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawCircleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__properties__ = {get_radius:"get_radius",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawEllipseView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawEllipseView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawPathView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawPathView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.__properties__ = {get_winding:"get_winding",get_data:"get_data",get_commands:"get_commands"}
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_commands = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_winding = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRoundRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRoundRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__properties__ = {get_ry:"get_ry",get_rx:"get_rx",get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_rx = function(this1) {
	return this1.buffer.f[this1.fPos + 4];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ry = function(this1) {
	return this1.buffer.f[this1.fPos + 5];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTilesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawTilesView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.__properties__ = {get_count:"get_count",get_shader:"get_shader",get_flags:"get_flags",get_smooth:"get_smooth",get_tileData:"get_tileData",get_sheet:"get_sheet"}
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet = function(this1) {
	return this1.buffer.ts[this1.tsPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags = function(this1) {
	return this1.buffer.i[this1.iPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_shader = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count = function(this1) {
	return this1.buffer.i[this1.iPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTrianglesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawTrianglesView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__properties__ = {get_blendMode:"get_blendMode",get_colors:"get_colors",get_culling:"get_culling",get_uvtData:"get_uvtData",get_indices:"get_indices",get_vertices:"get_vertices"}
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_colors = function(this1) {
	return this1.buffer.o[this1.oPos + 4];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_blendMode = function(this1) {
	return this1.buffer.i[this1.iPos];
};
var openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.EndFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","EndFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new = function(d) {
	return d;
};
var openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineBitmapStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineBitmapStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"}
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineGradientStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineGradientStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"}
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors = function(this1) {
	return this1.buffer.ii[this1.iiPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios = function(this1) {
	return this1.buffer.ii[this1.iiPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1.buffer.o[this1.oPos + 4];
};
var openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__properties__ = {get_miterLimit:"get_miterLimit",get_joints:"get_joints",get_caps:"get_caps",get_scaleMode:"get_scaleMode",get_pixelHinting:"get_pixelHinting",get_alpha:"get_alpha",get_color:"get_color",get_thickness:"get_thickness"}
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode = function(this1) {
	return this1.buffer.o[this1.oPos + 4];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps = function(this1) {
	return this1.buffer.o[this1.oPos + 5];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints = function(this1) {
	return this1.buffer.o[this1.oPos + 6];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit = function(this1) {
	return this1.buffer.o[this1.oPos + 7];
};
var openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.MoveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","MoveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.OverrideMatrixView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","OverrideMatrixView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__properties__ = {get_matrix:"get_matrix"}
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl__$internal_renderer_DrawCommandType = $hxClasses["openfl._internal.renderer.DrawCommandType"] = { __ename__ : true, __constructs__ : ["BEGIN_BITMAP_FILL","BEGIN_FILL","BEGIN_GRADIENT_FILL","CUBIC_CURVE_TO","CURVE_TO","DRAW_CIRCLE","DRAW_ELLIPSE","DRAW_PATH","DRAW_RECT","DRAW_ROUND_RECT","DRAW_TILES","DRAW_TRIANGLES","END_FILL","LINE_BITMAP_STYLE","LINE_GRADIENT_STYLE","LINE_STYLE","LINE_TO","MOVE_TO","OVERRIDE_MATRIX","UNKNOWN"] };
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL = ["BEGIN_BITMAP_FILL",0];
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL = ["BEGIN_FILL",1];
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL = ["BEGIN_GRADIENT_FILL",2];
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO = ["CUBIC_CURVE_TO",3];
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CURVE_TO = ["CURVE_TO",4];
openfl__$internal_renderer_DrawCommandType.CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE = ["DRAW_CIRCLE",5];
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE = ["DRAW_ELLIPSE",6];
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_PATH = ["DRAW_PATH",7];
openfl__$internal_renderer_DrawCommandType.DRAW_PATH.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_PATH.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT = ["DRAW_RECT",8];
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT = ["DRAW_ROUND_RECT",9];
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES = ["DRAW_TILES",10];
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES = ["DRAW_TRIANGLES",11];
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.END_FILL = ["END_FILL",12];
openfl__$internal_renderer_DrawCommandType.END_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.END_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE = ["LINE_BITMAP_STYLE",13];
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE = ["LINE_GRADIENT_STYLE",14];
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE = ["LINE_STYLE",15];
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_TO = ["LINE_TO",16];
openfl__$internal_renderer_DrawCommandType.LINE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.MOVE_TO = ["MOVE_TO",17];
openfl__$internal_renderer_DrawCommandType.MOVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.MOVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX = ["OVERRIDE_MATRIX",18];
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.toString = $estr;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.UNKNOWN = ["UNKNOWN",19];
openfl__$internal_renderer_DrawCommandType.UNKNOWN.toString = $estr;
openfl__$internal_renderer_DrawCommandType.UNKNOWN.__enum__ = openfl__$internal_renderer_DrawCommandType;
var openfl__$internal_renderer_GraphicsPaths = function() { };
$hxClasses["openfl._internal.renderer.GraphicsPaths"] = openfl__$internal_renderer_GraphicsPaths;
openfl__$internal_renderer_GraphicsPaths.__name__ = ["openfl","_internal","renderer","GraphicsPaths"];
openfl__$internal_renderer_GraphicsPaths.ellipse = function(points,x,y,rx,ry,segmentCount) {
	var seg = Math.PI * 2 / segmentCount;
	var _g1 = 0;
	var _g = segmentCount + 1;
	while(_g1 < _g) {
		var i = _g1++;
		points.push(x + Math.sin(seg * i) * rx);
		points.push(y + Math.cos(seg * i) * ry);
	}
};
openfl__$internal_renderer_GraphicsPaths.cubicCurveTo = function(points,cx,cy,cx2,cy2,x,y) {
	var n = 20;
	var dt = 0;
	var dt2 = 0;
	var dt3 = 0;
	var t2 = 0;
	var t3 = 0;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		dt = 1 - tmp;
		dt2 = dt * dt;
		dt3 = dt2 * dt;
		t2 = tmp * tmp;
		t3 = t2 * tmp;
		px = dt3 * fromX + 3 * dt2 * tmp * cx + 3 * dt * t2 * cx2 + t3 * x;
		py = dt3 * fromY + 3 * dt2 * tmp * cy + 3 * dt * t2 * cy2 + t3 * y;
		points.push(px);
		points.push(py);
	}
};
openfl__$internal_renderer_GraphicsPaths.curveTo = function(points,cx,cy,x,y) {
	var xa = 0;
	var ya = 0;
	var n = 20;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		xa = fromX + (cx - fromX) * tmp;
		ya = fromY + (cy - fromY) * tmp;
		px = xa + (cx + (x - cx) * tmp - xa) * tmp;
		py = ya + (cy + (y - cy) * tmp - ya) * tmp;
		points.push(px);
		points.push(py);
	}
};
openfl__$internal_renderer_GraphicsPaths.roundRectangle = function(points,x,y,width,height,rx,ry) {
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl__$internal_renderer_GraphicsPaths.SIN45;
	var cx2 = -rx + rx * openfl__$internal_renderer_GraphicsPaths.TAN22;
	var cy1 = -ry + ry * openfl__$internal_renderer_GraphicsPaths.SIN45;
	var cy2 = -ry + ry * openfl__$internal_renderer_GraphicsPaths.TAN22;
	points.push(xe);
	points.push(ye - ry);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,xe + cx2,ye,xe - rx,ye);
	points.push(x + rx);
	points.push(ye);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,x,ye + cy2,x,ye - ry);
	points.push(x);
	points.push(y + ry);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,x - cx2,y,x + rx,y);
	points.push(xe - rx);
	points.push(y);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,xe,y - cy2,xe,y + ry);
	points.push(xe);
	points.push(ye - ry);
};
var openfl__$internal_renderer_PolyK = function() { };
$hxClasses["openfl._internal.renderer.PolyK"] = openfl__$internal_renderer_PolyK;
openfl__$internal_renderer_PolyK.__name__ = ["openfl","_internal","renderer","PolyK"];
openfl__$internal_renderer_PolyK.triangulate = function(tgs,p) {
	var sign = true;
	var n = p.length >> 1;
	if(n < 3) return [];
	var avl;
	var _g = [];
	var _g1 = 0;
	while(_g1 < n) {
		var i1 = _g1++;
		_g.push(i1);
	}
	avl = _g;
	var i = 0;
	var al = n;
	var earFound = false;
	while(al > 3) {
		var i0 = avl[i % al];
		var i11 = avl[(i + 1) % al];
		var i2 = avl[(i + 2) % al];
		var ax = p[2 * i0];
		var ay = p[2 * i0 + 1];
		var bx = p[2 * i11];
		var by = p[2 * i11 + 1];
		var cx = p[2 * i2];
		var cy = p[2 * i2 + 1];
		earFound = false;
		if(openfl__$internal_renderer_PolyK._convex(ax,ay,bx,by,cx,cy,sign)) {
			earFound = true;
			var _g11 = 0;
			while(_g11 < al) {
				var j = _g11++;
				var vi = avl[j];
				if(vi == i0 || vi == i11 || vi == i2) continue;
				if(openfl__$internal_renderer_PolyK._PointInTriangle(p[2 * vi],p[2 * vi + 1],ax,ay,bx,by,cx,cy)) {
					earFound = false;
					break;
				}
			}
		}
		if(earFound) {
			tgs.push(i0);
			tgs.push(i11);
			tgs.push(i2);
			avl.splice((i + 1) % al,1);
			al--;
			i = 0;
		} else if(i++ > 3 * al) {
			if(sign) {
				tgs = [];
				var _g12 = [];
				var _g2 = 0;
				while(_g2 < n) {
					var k = _g2++;
					_g12.push(k);
				}
				avl = _g12;
				i = 0;
				al = n;
				sign = false;
			} else {
				haxe_Log.trace("Warning: shape too complex to fill",{ fileName : "PolyK.hx", lineNumber : 104, className : "openfl._internal.renderer.PolyK", methodName : "triangulate"});
				return [];
			}
		}
	}
	tgs.push(avl[0]);
	tgs.push(avl[1]);
	tgs.push(avl[2]);
	return tgs;
};
openfl__$internal_renderer_PolyK._PointInTriangle = function(px,py,ax,ay,bx,by,cx,cy) {
	var v0x = cx - ax | 0;
	var v0y = cy - ay | 0;
	var v1x = bx - ax | 0;
	var v1y = by - ay | 0;
	var v2x = px - ax | 0;
	var v2y = py - ay | 0;
	var dot00 = v0x * v0x + v0y * v0y;
	var dot01 = v0x * v1x + v0y * v1y;
	var dot02 = v0x * v2x + v0y * v2y;
	var dot11 = v1x * v1x + v1y * v1y;
	var dot12 = v1x * v2x + v1y * v2y;
	var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
	var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
	var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
	return u >= 0 && v >= 0 && u + v < 1;
};
openfl__$internal_renderer_PolyK._convex = function(ax,ay,bx,by,cx,cy,sign) {
	return (ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0 == sign;
};
var openfl__$internal_renderer_RenderSession = function() {
	this.activeTextures = 0;
};
$hxClasses["openfl._internal.renderer.RenderSession"] = openfl__$internal_renderer_RenderSession;
openfl__$internal_renderer_RenderSession.__name__ = ["openfl","_internal","renderer","RenderSession"];
openfl__$internal_renderer_RenderSession.prototype = {
	__class__: openfl__$internal_renderer_RenderSession
};
var openfl__$internal_renderer_cairo_CairoBitmap = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoBitmap"] = openfl__$internal_renderer_cairo_CairoBitmap;
openfl__$internal_renderer_cairo_CairoBitmap.__name__ = ["openfl","_internal","renderer","cairo","CairoBitmap"];
openfl__$internal_renderer_cairo_CairoBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var cairo = renderSession.cairo;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
		var transform = bitmap.__renderTransform;
		var scrollRect = bitmap.get_scrollRect();
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else cairo.set_matrix(transform.__toMatrix3());
		var surface = bitmap.bitmapData.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
			lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,bitmap.smoothing?1:3);
			if(scrollRect != null) {
				cairo.pushGroup();
				cairo.set_source(pattern);
				cairo.newPath();
				cairo.rectangle(scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
				cairo.fill();
				cairo.popGroupToSource();
			} else cairo.set_source(pattern);
			if(bitmap.__worldAlpha == 1) cairo.paint(); else cairo.paintWithAlpha(bitmap.__worldAlpha);
		}
		if(bitmap.__mask != null) renderSession.maskManager.popMask();
	}
};
var openfl__$internal_renderer_cairo_CairoGraphics = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoGraphics"] = openfl__$internal_renderer_cairo_CairoGraphics;
openfl__$internal_renderer_cairo_CairoGraphics.__name__ = ["openfl","_internal","renderer","cairo","CairoGraphics"];
openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = null;
openfl__$internal_renderer_cairo_CairoGraphics.bounds = null;
openfl__$internal_renderer_cairo_CairoGraphics.cairo = null;
openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = null;
openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
openfl__$internal_renderer_cairo_CairoGraphics.graphics = null;
openfl__$internal_renderer_cairo_CairoGraphics.hasFill = null;
openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = null;
openfl__$internal_renderer_cairo_CairoGraphics.hitTesting = null;
openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix = null;
openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix = null;
openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = null;
openfl__$internal_renderer_cairo_CairoGraphics.closePath = function() {
	if(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern == null) return;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
	if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
};
openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var pattern = null;
	switch(type[1]) {
	case 0:
		if(matrix == null) matrix = new openfl_geom_Matrix();
		var point = matrix.transformPoint(new openfl_geom_Point(1638.4,0));
		var x = matrix.tx + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		var y = matrix.ty + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial(x,y,0,x,y,(point.x - matrix.tx) / 2);
		break;
	case 1:
		if(matrix == null) matrix = new openfl_geom_Matrix();
		var point1 = matrix.transformPoint(new openfl_geom_Point(-819.2,0));
		var point2 = matrix.transformPoint(new openfl_geom_Point(819.2,0));
		point1.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point2.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point1.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		point2.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear(point1.x,point1.y,point2.x,point2.y);
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var rgb = colors[i];
		var alpha = alphas[i];
		var r = ((rgb & 16711680) >>> 16) / 255;
		var g = ((rgb & 65280) >>> 8) / 255;
		var b = (rgb & 255) / 255;
		var ratio = ratios[i] / 255;
		if(ratio < 0) ratio = 0;
		if(ratio > 1) ratio = 1;
		lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA(pattern,ratio,r,g,b,alpha);
	}
	var mat = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix(pattern);
	mat.tx = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	mat.ty = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(pattern,mat);
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern = function(bitmapFill,matrix,bitmapRepeat) {
	var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(bitmapFill.getSurface());
	if(bitmapRepeat) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend(pattern,1);
	openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = matrix;
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect = function(x,y,width,height,rx,ry) {
	if(ry == -1) ry = rx;
	rx *= 0.5;
	ry *= 0.5;
	if(rx > width / 2) rx = width / 2;
	if(ry > height / 2) ry = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cx2 = -rx + rx * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	var cy1 = -ry + ry * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cy2 = -ry + ry * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(xe,ye - ry);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,ye,xe - rx,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x + rx,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,ye + cy2,x,ye - ry);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x,y + ry);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,y,x + rx,y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe - rx,y);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,y - cy2,xe,y + ry);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe,ye - ry);
};
openfl__$internal_renderer_cairo_CairoGraphics.endFill = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.fillCommands,false);
	openfl__$internal_renderer_cairo_CairoGraphics.fillCommands.clear();
};
openfl__$internal_renderer_cairo_CairoGraphics.endStroke = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands,true);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_cairo_CairoGraphics.hitTest = function(graphics,x,y) {
	return false;
};
openfl__$internal_renderer_cairo_CairoGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) skipT = false;
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.length;
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) continue;
		tmp = uvt.data[t - 1];
		if(max < tmp) max = tmp;
	}
	var result;
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	result = this1;
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) continue;
		if(!result.fixed) {
			result.length++;
			if(result.data.length < result.length) {
				var data;
				var this3;
				this3 = new Array(result.data.length + 10);
				data = this3;
				haxe_ds__$Vector_Vector_$Impl_$.blit(result.data,0,data,0,result.data.length);
				result.data = data;
			}
			result.data[result.length - 1] = uvt.data[t1 - 1] / max;
		}
		result.length;
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_cairo_CairoGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) stroke = false;
	if(commands.get_length() == 0) return;
	openfl__$internal_renderer_cairo_CairoGraphics.bounds = openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_fillRule(1);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(3);
	var hasPath = false;
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var _g = 0;
	var _g1 = commands.types;
	try {
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
				break;
			case 4:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c1 = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				break;
			case 5:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c2 = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(c2.buffer.f[c2.fPos] - offsetX + c2.buffer.f[c2.fPos + 2],c2.buffer.f[c2.fPos + 1] - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2);
				break;
			case 8:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c3 = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.rectangle(c3.buffer.f[c3.fPos] - offsetX,c3.buffer.f[c3.fPos + 1] - offsetY,c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3]);
				break;
			case 6:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c4 = data;
				hasPath = true;
				var x = c4.buffer.f[c4.fPos];
				var y = c4.buffer.f[c4.fPos + 1];
				var width = c4.buffer.f[c4.fPos + 2];
				var height = c4.buffer.f[c4.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x,ym);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 9:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c5 = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.f[c5.fPos + 5]);
				break;
			case 16:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c6 = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 17:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c7 = data;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				closeGap = true;
				startX = c7.buffer.f[c7.fPos];
				startY = c7.buffer.f[c7.fPos + 1];
				break;
			case 15:
				var c8;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				c8 = data;
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				if(c8.buffer.o[c8.oPos] == null) openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = false; else {
					openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineWidth(c8.buffer.o[c8.oPos] > 0?c8.buffer.o[c8.oPos]:1);
					if(c8.buffer.o[c8.oPos + 6] == null) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin(1); else openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin((function($this) {
						var $r;
						var _g2 = c8.buffer.o[c8.oPos + 6];
						$r = (function($this) {
							var $r;
							switch(_g2[1]) {
							case 0:
								$r = 0;
								break;
							case 2:
								$r = 2;
								break;
							default:
								$r = 1;
							}
							return $r;
						}($this));
						return $r;
					}(this)));
					if(c8.buffer.o[c8.oPos + 5] == null) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap(1); else openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap((function($this) {
						var $r;
						var _g21 = c8.buffer.o[c8.oPos + 5];
						$r = (function($this) {
							var $r;
							switch(_g21[1]) {
							case 0:
								$r = 0;
								break;
							case 2:
								$r = 2;
								break;
							default:
								$r = 1;
							}
							return $r;
						}($this));
						return $r;
					}(this)));
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_miterLimit(c8.buffer.o[c8.oPos + 7] == null?3:c8.buffer.o[c8.oPos + 7]);
					if(c8.buffer.o[c8.oPos + 1] != null) {
						var r = ((c8.buffer.o[c8.oPos + 1] & 16711680) >>> 16) / 255;
						var g = ((c8.buffer.o[c8.oPos + 1] & 65280) >>> 8) / 255;
						var b = (c8.buffer.o[c8.oPos + 1] & 255) / 255;
						if(c8.buffer.o[c8.oPos + 2] == 1 || c8.buffer.o[c8.oPos + 2] == null) openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB(r,g,b); else openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(r,g,b,c8.buffer.o[c8.oPos + 2]);
					}
				}
				break;
			case 14:
				var c9;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				c9 = data;
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(c9.buffer.o[c9.oPos],c9.buffer.ii[c9.iiPos],c9.buffer.ff[c9.ffPos],c9.buffer.ii[c9.iiPos + 1],c9.buffer.o[c9.oPos + 1],c9.buffer.o[c9.oPos + 2],c9.buffer.o[c9.oPos + 3],c9.buffer.o[c9.oPos + 4]);
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 13:
				var c10;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				c10 = data;
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(c10.buffer.o[c10.oPos],c10.buffer.o[c10.oPos + 1],c10.buffer.b[c10.bPos]);
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 0:
				var c11;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				c11 = data;
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.b[c11.bPos]);
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = c11.buffer.o[c11.oPos];
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = c11.buffer.b[c11.bPos];
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				break;
			case 1:
				var c12;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				c12 = data;
				if(c12.buffer.f[c12.fPos] < 0.005) openfl__$internal_renderer_cairo_CairoGraphics.hasFill = false; else {
					if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
					openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(((c12.buffer.i[c12.iPos] & 16711680) >>> 16) / 255,((c12.buffer.i[c12.iPos] & 65280) >>> 8) / 255,(c12.buffer.i[c12.iPos] & 255) / 255,c12.buffer.f[c12.fPos]);
					openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				}
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 2:
				var c13;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				c13 = data;
				if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(c13.buffer.o[c13.oPos],c13.buffer.ii[c13.iiPos],c13.buffer.ff[c13.ffPos],c13.buffer.ii[c13.iiPos + 1],c13.buffer.o[c13.oPos + 1],c13.buffer.o[c13.oPos + 2],c13.buffer.o[c13.oPos + 3],c13.buffer.o[c13.oPos + 4]);
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 11:
				var c14;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				c14 = data;
				var v = c14.buffer.o[c14.oPos];
				var ind = c14.buffer.o[c14.oPos + 1];
				var uvt = c14.buffer.o[c14.oPos + 2];
				var colorFill = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill == null;
				if(colorFill && uvt != null) throw "__break__";
				var width1 = 0;
				var height1 = 0;
				if(!colorFill) {
					if(uvt == null) {
						var this1;
						this1 = new openfl_VectorData();
						var this2;
						this2 = new Array(0);
						this1.data = this2;
						this1.length = 0;
						this1.fixed = false;
						uvt = this1;
						var _g3 = 0;
						var _g22 = v.length / 2 | 0;
						while(_g3 < _g22) {
							var i1 = _g3++;
							if(!uvt.fixed) {
								uvt.length++;
								if(uvt.data.length < uvt.length) {
									var data1;
									var this3;
									this3 = new Array(uvt.data.length + 10);
									data1 = this3;
									haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data,0,data1,0,uvt.data.length);
									uvt.data = data1;
								}
								uvt.data[uvt.length - 1] = v.data[i1 * 2] / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
							}
							uvt.length;
							if(!uvt.fixed) {
								uvt.length++;
								if(uvt.data.length < uvt.length) {
									var data2;
									var this4;
									this4 = new Array(uvt.data.length + 10);
									data2 = this4;
									haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data,0,data2,0,uvt.data.length);
									uvt.data = data2;
								}
								uvt.data[uvt.length - 1] = v.data[i1 * 2 + 1] / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
							}
							uvt.length;
						}
					}
					var skipT = c14.buffer.o[c14.oPos + 2].length != v.length;
					var normalizedUVT = openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT(uvt,skipT);
					var maxUVT = normalizedUVT.max;
					uvt = normalizedUVT.uvt;
					if(maxUVT > 1) {
						width1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.width | 0;
						height1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.height | 0;
					} else {
						width1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
						height1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
					}
				}
				var i = 0;
				var l = ind.length;
				var a_;
				var b_;
				var c_;
				var iax;
				var iay;
				var ibx;
				var iby;
				var icx;
				var icy;
				var x1;
				var y1;
				var x2;
				var y2;
				var x3;
				var y3;
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				var uvx3;
				var uvy3;
				var denom;
				var t1;
				var t2;
				var t3;
				var t4;
				var dx;
				var dy;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(1);
				while(i < l) {
					a_ = i;
					b_ = i + 1;
					c_ = i + 2;
					iax = ind.data[a_] * 2;
					iay = ind.data[a_] * 2 + 1;
					ibx = ind.data[b_] * 2;
					iby = ind.data[b_] * 2 + 1;
					icx = ind.data[c_] * 2;
					icy = ind.data[c_] * 2 + 1;
					x1 = v.data[iax];
					y1 = v.data[iay];
					x2 = v.data[ibx];
					y2 = v.data[iby];
					x3 = v.data[icx];
					y3 = v.data[icy];
					var _g23 = c14.buffer.o[c14.oPos + 3];
					switch(_g23[1]) {
					case 2:
						if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
							i += 3;
							continue;
						}
						break;
					case 0:
						if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
							i += 3;
							continue;
						}
						break;
					default:
					}
					if(colorFill) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x1,y1);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x2,y2);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3,y3);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
						if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
						i += 3;
						continue;
					}
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.identityMatrix();
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x1,y1);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x2,y2);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3,y3);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
					uvx1 = uvt.data[iax] * width1;
					uvx2 = uvt.data[ibx] * width1;
					uvx3 = uvt.data[icx] * width1;
					uvy1 = uvt.data[iay] * height1;
					uvy2 = uvt.data[iby] * height1;
					uvy3 = uvt.data[icy] * height1;
					denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
					if(denom == 0) {
						i += 3;
						continue;
					}
					t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
					t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
					t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
					t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
					dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
					dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
					var matrix = new lime_math_Matrix3(t1,t2,t3,t4,dx,dy);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(matrix);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
					if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fill();
					i += 3;
				}
				break;
			case 10:
				var c15;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
				c15 = data;
				var useScale = (c15.buffer.i[c15.iPos] & 1) > 0;
				var useRotation = (c15.buffer.i[c15.iPos] & 2) > 0;
				var offsetX1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
				var offsetY1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
				var useTransform = (c15.buffer.i[c15.iPos] & 16) > 0;
				var useRGB = (c15.buffer.i[c15.iPos] & 4) > 0;
				var useAlpha = (c15.buffer.i[c15.iPos] & 8) > 0;
				var useRect = (c15.buffer.i[c15.iPos] & 32) > 0;
				var useOrigin = (c15.buffer.i[c15.iPos] & 64) > 0;
				var useBlendAdd = (c15.buffer.i[c15.iPos] & 65536) > 0;
				var useBlendOverlay = (c15.buffer.i[c15.iPos] & 4194304) > 0;
				if(useTransform) {
					useScale = false;
					useRotation = false;
				}
				var scaleIndex = 0;
				var rotationIndex = 0;
				var rgbIndex = 0;
				var alphaIndex = 0;
				var transformIndex = 0;
				var numValues = 3;
				if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
				if(useScale) {
					scaleIndex = numValues;
					numValues++;
				}
				if(useRotation) {
					rotationIndex = numValues;
					numValues++;
				}
				if(useTransform) {
					transformIndex = numValues;
					numValues += 4;
				}
				if(useRGB) {
					rgbIndex = numValues;
					numValues += 3;
				}
				if(useAlpha) {
					alphaIndex = numValues;
					numValues++;
				}
				var totalCount = c15.buffer.ff[c15.ffPos].length;
				if(c15.buffer.i[c15.iPos + 1] >= 0 && totalCount > c15.buffer.i[c15.iPos + 1]) totalCount = c15.buffer.i[c15.iPos + 1];
				var itemCount = totalCount / numValues | 0;
				var index = 0;
				var rect = null;
				var center = null;
				var previousTileID = -1;
				var surface;
				c15.buffer.ts[c15.tsPos].__bitmap.__sync();
				surface = c15.buffer.ts[c15.tsPos].__bitmap.getSurface();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.save();
				if(useBlendAdd) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_operator(12);
				if(useBlendOverlay) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_operator(16);
				while(index < totalCount) {
					var i2 = c15.buffer.ff[c15.ffPos][index + 2] | 0;
					var tileID;
					if(!useRect) tileID = i2; else tileID = -1;
					if(!useRect && tileID != previousTileID) {
						rect = c15.buffer.ts[c15.tsPos].__tileRects[tileID];
						center = c15.buffer.ts[c15.tsPos].__centerPoints[tileID];
						previousTileID = tileID;
					} else if(useRect) {
						rect = c15.buffer.ts[c15.tsPos].__rectTile;
						rect.setTo(c15.buffer.ff[c15.ffPos][index + 2],c15.buffer.ff[c15.ffPos][index + 3],c15.buffer.ff[c15.ffPos][index + 4],c15.buffer.ff[c15.ffPos][index + 5]);
						center = c15.buffer.ts[c15.tsPos].__point;
						if(useOrigin) {
							center.x = c15.buffer.ff[c15.ffPos][index + 6];
							center.y = c15.buffer.ff[c15.ffPos][index + 7];
						} else {
							center.x = 0;
							center.y = 0;
						}
					}
					if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.identityMatrix();
						if(useTransform) {
							var matrix1 = new lime_math_Matrix3(c15.buffer.ff[c15.ffPos][index + transformIndex],c15.buffer.ff[c15.ffPos][index + transformIndex + 1],c15.buffer.ff[c15.ffPos][index + transformIndex + 2],c15.buffer.ff[c15.ffPos][index + transformIndex + 3],0,0);
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(matrix1);
						}
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(c15.buffer.ff[c15.ffPos][index] - offsetX1,c15.buffer.ff[c15.ffPos][index + 1] - offsetY1);
						if(useRotation) openfl__$internal_renderer_cairo_CairoGraphics.cairo.rotate(c15.buffer.ff[c15.ffPos][index + rotationIndex]);
						if(useScale) {
							var scale = c15.buffer.ff[c15.ffPos][index + scaleIndex];
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.scale(scale,scale);
						}
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.setSourceSurface(surface,0,0);
						if(useAlpha) {
							if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.paintWithAlpha(c15.buffer.ff[c15.ffPos][index + alphaIndex]);
						} else if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.paint();
					}
					index += numValues;
				}
				if(useBlendAdd || useBlendOverlay) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_operator(2);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.restore();
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	data.destroy();
	if(hasPath) {
		if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
			if(openfl__$internal_renderer_cairo_CairoGraphics.hasFill && closeGap) openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(startX - offsetX,startY - offsetY); else if(closeGap && positionX == startX && positionY == startY) openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
			if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
		}
		if(!stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasFill) {
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(-openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,-openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			if(openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix != null) {
				var matrix2 = openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix.clone();
				matrix2.invert();
				if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) matrix2.concat(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix);
				lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern,matrix2.__toMatrix3());
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
			if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix.__toMatrix3());
				if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix.__toMatrix3());
			} else if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
		}
	}
};
openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo = function(cx,cy,x,y) {
	var current = null;
	if(!openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_hasCurrentPoint()) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(cx,cy);
		current = new lime_math_Vector2(cx,cy);
	} else current = openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_currentPoint();
	var cx1 = current.x + 0.66666666666666663 * (cx - current.x);
	var cy1 = current.y + 0.66666666666666663 * (cy - current.y);
	var cx2 = x + 0.66666666666666663 * (cx - x);
	var cy2 = y + 0.66666666666666663 * (cy - y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(cx1,cy1,cx2,cy2,x,y);
};
openfl__$internal_renderer_cairo_CairoGraphics.render = function(graphics,renderSession) {
};
openfl__$internal_renderer_cairo_CairoGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		var cairo = renderSession.cairo;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c = data;
				cairo.curveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
				positionX = c.buffer.f[c.fPos + 4];
				positionY = c.buffer.f[c.fPos + 4];
				break;
			case 4:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c1 = data;
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				positionX = c1.buffer.f[c1.fPos + 2];
				positionY = c1.buffer.f[c1.fPos + 3];
				break;
			case 5:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c2 = data;
				cairo.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2);
				break;
			case 6:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c3 = data;
				var x = c3.buffer.f[c3.fPos];
				var y = c3.buffer.f[c3.fPos + 1];
				var width = c3.buffer.f[c3.fPos + 2];
				var height = c3.buffer.f[c3.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				cairo.moveTo(x,ym);
				cairo.curveTo(x,ym - oy,xm - ox,y,xm,y);
				cairo.curveTo(xm + ox,y,xe,ym - oy,xe,ym);
				cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				cairo.curveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 8:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c4 = data;
				cairo.rectangle(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 9:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c5 = data;
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.f[c5.fPos + 5]);
				break;
			case 16:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c6 = data;
				cairo.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 17:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c7 = data;
				cairo.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
		data.destroy();
	}
};
var openfl__$internal_renderer_cairo_CairoMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoMaskManager"] = openfl__$internal_renderer_cairo_CairoMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.__name__ = ["openfl","_internal","renderer","cairo","CairoMaskManager"];
openfl__$internal_renderer_cairo_CairoMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		var transform = mask.__getWorldTransform();
		cairo.set_matrix(transform.__toMatrix3());
		cairo.newPath();
		mask.__renderCairoMask(this.renderSession);
		cairo.clip();
	}
	,pushRect: function(rect,transform) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		cairo.set_matrix(new lime_math_Matrix3(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty));
		cairo.newPath();
		cairo.rectangle(rect.x,rect.y,rect.width,rect.height);
		cairo.clip();
	}
	,popMask: function() {
		this.renderSession.cairo.restore();
	}
	,popRect: function() {
		this.renderSession.cairo.restore();
	}
	,__class__: openfl__$internal_renderer_cairo_CairoMaskManager
});
var openfl__$internal_renderer_cairo_CairoRenderer = function(width,height,cairo) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.cairo = cairo;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.cairo = cairo;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_cairo_CairoMaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoRenderer"] = openfl__$internal_renderer_cairo_CairoRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.__name__ = ["openfl","_internal","renderer","cairo","CairoRenderer"];
openfl__$internal_renderer_cairo_CairoRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function(stage) {
		this.cairo.identityMatrix();
		if(stage.__clearBeforeRender) {
			this.cairo.setSourceRGB(stage.__colorSplit[0],stage.__colorSplit[1],stage.__colorSplit[2]);
			this.cairo.paint();
		}
		stage.__renderCairo(this.renderSession);
	}
	,renderDisplayObject: function(object) {
		this.cairo.identityMatrix();
		object.__renderCairo(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_cairo_CairoRenderer
});
var openfl__$internal_renderer_cairo_CairoShape = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoShape"] = openfl__$internal_renderer_cairo_CairoShape;
openfl__$internal_renderer_cairo_CairoShape.__name__ = ["openfl","_internal","renderer","cairo","CairoShape"];
openfl__$internal_renderer_cairo_CairoShape.render = function(shape,renderSession) {
};
var openfl__$internal_renderer_cairo_CairoTextField = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoTextField"] = openfl__$internal_renderer_cairo_CairoTextField;
openfl__$internal_renderer_cairo_CairoTextField.__name__ = ["openfl","_internal","renderer","cairo","CairoTextField"];
openfl__$internal_renderer_cairo_CairoTextField.render = function(textField,renderSession) {
};
var openfl__$internal_renderer_canvas_CanvasBitmap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl__$internal_renderer_canvas_CanvasBitmap;
openfl__$internal_renderer_canvas_CanvasBitmap.__name__ = ["openfl","_internal","renderer","canvas","CanvasBitmap"];
openfl__$internal_renderer_canvas_CanvasBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var context = renderSession.context;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
		bitmap.bitmapData.__sync();
		context.globalAlpha = bitmap.__worldAlpha;
		var transform = bitmap.__renderTransform;
		var scrollRect = bitmap.get_scrollRect();
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = false;
			context.msImageSmoothingEnabled = false;
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) context.drawImage(bitmap.bitmapData.image.get_src(),0,0); else context.drawImage(bitmap.bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = true;
			context.msImageSmoothingEnabled = true;
			context.imageSmoothingEnabled = true;
		}
		if(bitmap.__mask != null) renderSession.maskManager.popMask();
	}
};
var openfl__$internal_renderer_canvas_CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = ["openfl","_internal","renderer","canvas","CanvasGraphics"];
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapStroke = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bounds = null;
openfl__$internal_renderer_canvas_CanvasGraphics.graphics = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = null;
openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
openfl__$internal_renderer_canvas_CanvasGraphics.context = null;
openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function() {
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) return;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
};
openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat) {
	bitmap.__sync();
	return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.image.get_src(),bitmapRepeat?"repeat":"no-repeat");
};
openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	switch(type[1]) {
	case 0:
		if(matrix == null) matrix = new openfl_geom_Matrix();
		var point = matrix.transformPoint(new openfl_geom_Point(1638.4,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx,matrix.ty,0,matrix.tx,matrix.ty,(point.x - matrix.tx) / 2);
		break;
	case 1:
		var matrix1;
		if(matrix != null) matrix1 = matrix; else matrix1 = new openfl_geom_Matrix();
		var point1 = matrix1.transformPoint(new openfl_geom_Point(-819.2,0));
		var point2 = matrix1.transformPoint(new openfl_geom_Point(819.2,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point1.x,point1.y,point2.x,point2.y);
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var rgb = colors[i];
		var alpha = alphas[i];
		var r = (rgb & 16711680) >>> 16;
		var g = (rgb & 65280) >>> 8;
		var b = rgb & 255;
		var ratio = ratios[i] / 255;
		if(ratio < 0) ratio = 0;
		if(ratio > 1) ratio = 1;
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	return gradientFill;
};
openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	context.fillStyle = context.createPattern(bitmap.image.get_src(),repeat?"repeat":"no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) context.fill();
	return canvas;
};
openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function(x,y,width,height,rx,ry) {
	if(ry == -1) ry = rx;
	rx *= 0.5;
	ry *= 0.5;
	if(rx > width / 2) rx = width / 2;
	if(ry > height / 2) ry = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cx2 = -rx + rx * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	var cy1 = -ry + ry * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cy2 = -ry + ry * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe,ye - ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - rx,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + rx,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x,y + ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + rx,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - rx,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe,ye - ry);
};
openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands,false);
	openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands,true);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.hitTest = function(graphics,x,y) {
	if(graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) return false; else {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = true;
		x -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
		y -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
		if(graphics.__canvas == null) {
			graphics.__canvas = window.document.createElement("canvas");
			graphics.__context = graphics.__canvas.getContext("2d");
		}
		openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
		openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 2],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 2],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5]);
				break;
			case 4:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c1 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]);
				break;
			case 16:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c2 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1]);
				break;
			case 17:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c3 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1]);
				break;
			case 14:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				c4 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c4.buffer.o[c4.oPos],c4.buffer.ii[c4.iiPos],c4.buffer.ff[c4.ffPos],c4.buffer.ii[c4.iiPos + 1],c4.buffer.o[c4.oPos + 1],c4.buffer.o[c4.oPos + 2],c4.buffer.o[c4.oPos + 3],c4.buffer.o[c4.oPos + 4]);
				break;
			case 13:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				c5 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c5.buffer.o[c5.oPos],c5.buffer.o[c5.oPos + 1],c5.buffer.b[c5.bPos],c5.buffer.b[c5.bPos + 1]);
				break;
			case 15:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				c6 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c6.buffer.o[c6.oPos],c6.buffer.o[c6.oPos + 1],1,c6.buffer.o[c6.oPos + 3],c6.buffer.o[c6.oPos + 4],c6.buffer.o[c6.oPos + 5],c6.buffer.o[c6.oPos + 6],c6.buffer.o[c6.oPos + 7]);
				break;
			case 12:
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				data;
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
					data.destroy();
					return true;
				}
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				break;
			case 0:case 1:case 2:
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
					data.destroy();
					return true;
				}
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					return true;
				}
				if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
					var c7;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
					c7 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.b[c7.bPos],c7.buffer.b[c7.bPos + 1]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.b[c7.bPos],c7.buffer.b[c7.bPos + 1]);
				} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
					var c8;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
					c8 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.o[c8.oPos + 4]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.o[c8.oPos + 4]);
				} else {
					var c9;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
					c9 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c9.buffer.i[c9.iPos],1);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c9.buffer.i[c9.iPos],1);
				}
				break;
			case 5:
				var c10;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c10 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2]);
				break;
			case 6:
				var c11;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c11 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c11.buffer.f[c11.fPos],c11.buffer.f[c11.fPos + 1],c11.buffer.f[c11.fPos + 2],c11.buffer.f[c11.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c11.buffer.f[c11.fPos],c11.buffer.f[c11.fPos + 1],c11.buffer.f[c11.fPos + 2],c11.buffer.f[c11.fPos + 3]);
				break;
			case 8:
				var c12;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c12 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1],c12.buffer.f[c12.fPos + 2],c12.buffer.f[c12.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1],c12.buffer.f[c12.fPos + 2],c12.buffer.f[c12.fPos + 3]);
				break;
			case 9:
				var c13;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c13 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1],c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3],c13.buffer.f[c13.fPos + 4],c13.buffer.f[c13.fPos + 5]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1],c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3],c13.buffer.f[c13.fPos + 4],c13.buffer.f[c13.fPos + 5]);
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
		if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
		data.destroy();
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) return true;
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) return true;
	}
	return false;
};
openfl__$internal_renderer_canvas_CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) skipT = false;
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.length;
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) continue;
		tmp = uvt.data[t - 1];
		if(max < tmp) max = tmp;
	}
	var result;
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	result = this1;
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) continue;
		if(!result.fixed) {
			result.length++;
			if(result.data.length < result.length) {
				var data;
				var this3;
				this3 = new Array(result.data.length + 10);
				data = this3;
				haxe_ds__$Vector_Vector_$Impl_$.blit(result.data,0,data,0,result.data.length);
				result.data = data;
			}
			result.data[result.length - 1] = uvt.data[t1 - 1] / max;
		}
		result.length;
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) stroke = false;
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var _g = 0;
	var _g1 = commands.types;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type[1]) {
		case 3:
			var c;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
			c = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
			break;
		case 4:
			var c1;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
			c1 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
			break;
		case 5:
			var c2;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
			c2 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c2.buffer.f[c2.fPos] - offsetX + c2.buffer.f[c2.fPos + 2],c2.buffer.f[c2.fPos + 1] - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2,true);
			break;
		case 6:
			var c3;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
			c3 = data;
			var x = c3.buffer.f[c3.fPos];
			var y = c3.buffer.f[c3.fPos + 1];
			var width = c3.buffer.f[c3.fPos + 2];
			var height = c3.buffer.f[c3.fPos + 3];
			x -= offsetX;
			y -= offsetY;
			var kappa = .5522848;
			var ox = width / 2 * kappa;
			var oy = height / 2 * kappa;
			var xe = x + width;
			var ye = y + height;
			var xm = x + width / 2;
			var ym = y + height / 2;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
			break;
		case 9:
			var c4;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
			c4 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
			break;
		case 16:
			var c5;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
			c5 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY);
			positionX = c5.buffer.f[c5.fPos];
			positionY = c5.buffer.f[c5.fPos + 1];
			break;
		case 17:
			var c6;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
			c6 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
			positionX = c6.buffer.f[c6.fPos];
			positionY = c6.buffer.f[c6.fPos + 1];
			closeGap = true;
			startX = c6.buffer.f[c6.fPos];
			startY = c6.buffer.f[c6.fPos + 1];
			break;
		case 15:
			var c7;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
			c7 = data;
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
				if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			if(c7.buffer.o[c7.oPos] == null) openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false; else {
				if(c7.buffer.o[c7.oPos] > 0) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = c7.buffer.o[c7.oPos]; else openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = 1;
				if(c7.buffer.o[c7.oPos + 6] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = "round"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = Std.string(c7.buffer.o[c7.oPos + 6]).toLowerCase();
				if(c7.buffer.o[c7.oPos + 5] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = "round"; else {
					var _g2 = c7.buffer.o[c7.oPos + 5];
					switch(_g2[1]) {
					case 0:
						openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = "butt";
						break;
					default:
						openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = Std.string(c7.buffer.o[c7.oPos + 5]).toLowerCase();
					}
				}
				if(c7.buffer.o[c7.oPos + 7] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = 3; else openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = c7.buffer.o[c7.oPos + 7];
				if(c7.buffer.o[c7.oPos + 2] == 1 || c7.buffer.o[c7.oPos + 2] == null) if(c7.buffer.o[c7.oPos + 1] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#000000"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + StringTools.hex(c7.buffer.o[c7.oPos + 1] & 16777215,6); else {
					var r = (c7.buffer.o[c7.oPos + 1] & 16711680) >>> 16;
					var g = (c7.buffer.o[c7.oPos + 1] & 65280) >>> 8;
					var b = c7.buffer.o[c7.oPos + 1] & 255;
					if(c7.buffer.o[c7.oPos + 1] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#000000"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c7.buffer.o[c7.oPos + 2] + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			}
			break;
		case 14:
			var c8;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
			c8 = data;
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.o[c8.oPos + 4]);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 13:
			var c9;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
			c9 = data;
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c9.buffer.o[c9.oPos],c9.buffer.b[c9.bPos]);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 0:
			var c10;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
			c10 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c10.buffer.o[c10.oPos],true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			if(c10.buffer.o[c10.oPos + 1] != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = c10.buffer.o[c10.oPos + 1];
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = c10.buffer.o[c10.oPos + 1].clone();
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 1:
			var c11;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
			c11 = data;
			if(c11.buffer.f[c11.fPos] < 0.005) openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false; else {
				if(c11.buffer.f[c11.fPos] == 1) openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + StringTools.hex(c11.buffer.i[c11.iPos],6); else {
					var r1 = (c11.buffer.i[c11.iPos] & 16711680) >>> 16;
					var g1 = (c11.buffer.i[c11.iPos] & 65280) >>> 8;
					var b1 = c11.buffer.i[c11.iPos] & 255;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "rgba(" + r1 + ", " + g1 + ", " + b1 + ", " + c11.buffer.f[c11.fPos] + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			}
			break;
		case 2:
			var c12;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
			c12 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c12.buffer.o[c12.oPos],c12.buffer.ii[c12.iiPos],c12.buffer.ff[c12.ffPos],c12.buffer.ii[c12.iiPos + 1],c12.buffer.o[c12.oPos + 1],c12.buffer.o[c12.oPos + 2],c12.buffer.o[c12.oPos + 3],c12.buffer.o[c12.oPos + 4]);
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			break;
		case 8:
			var c13;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
			c13 = data;
			var optimizationUsed = false;
			if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
				var st = 0;
				var sr = 0;
				var sb = 0;
				var sl = 0;
				var canOptimizeMatrix = true;
				if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
					if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) canOptimizeMatrix = false; else {
						var stl = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]));
						var sbr = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(c13.buffer.f[c13.fPos] + c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 1] + c13.buffer.f[c13.fPos + 3]));
						st = stl.y;
						sl = stl.x;
						sb = sbr.y;
						sr = sbr.x;
					}
				} else {
					st = c13.buffer.f[c13.fPos + 1];
					sl = c13.buffer.f[c13.fPos];
					sb = c13.buffer.f[c13.fPos + 1] + c13.buffer.f[c13.fPos + 3];
					sr = c13.buffer.f[c13.fPos] + c13.buffer.f[c13.fPos + 2];
				}
				if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
					optimizationUsed = true;
					if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),sl,st,sr - sl,sb - st,c13.buffer.f[c13.fPos] - offsetX,c13.buffer.f[c13.fPos + 1] - offsetY,c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3]);
				}
			}
			if(!optimizationUsed) openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c13.buffer.f[c13.fPos] - offsetX,c13.buffer.f[c13.fPos + 1] - offsetY,c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3]);
			break;
		default:
			data.advance();
			data.prev = type;
		}
	}
	data.destroy();
	if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY); else if(closeGap && positionX == startX && positionY == startY) openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	}
	if(!stroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
				if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
			} else if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		}
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.render = function(graphics,renderSession) {
	var directRender = false;
	if(graphics.__dirty || directRender) {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
		if(!graphics.__visible || graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(directRender) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
				openfl__$internal_renderer_canvas_CanvasGraphics.bounds.setTo(0,0,openfl__$internal_renderer_canvas_CanvasGraphics.context.canvas.width,openfl__$internal_renderer_canvas_CanvasGraphics.context.canvas.width);
			} else {
				if(graphics.__canvas == null) {
					graphics.__canvas = window.document.createElement("canvas");
					graphics.__context = graphics.__canvas.getContext("2d");
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
				graphics.__canvas.width = Math.ceil(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width);
				graphics.__canvas.height = Math.ceil(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height);
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			try {
				while(_g < _g1.length) {
					var type = _g1[_g];
					++_g;
					switch(type[1]) {
					case 3:
						var c;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
						c = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 2],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 2],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5]);
						break;
					case 4:
						var c1;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
						c1 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]);
						break;
					case 16:
						var c2;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
						c2 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1]);
						break;
					case 17:
						var c3;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
						c3 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1]);
						break;
					case 12:
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
						data;
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
						openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
						break;
					case 15:
						var c4;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
						c4 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c4.buffer.o[c4.oPos],c4.buffer.o[c4.oPos + 1],c4.buffer.o[c4.oPos + 2],c4.buffer.o[c4.oPos + 3],c4.buffer.o[c4.oPos + 4],c4.buffer.o[c4.oPos + 5],c4.buffer.o[c4.oPos + 6],c4.buffer.o[c4.oPos + 7]);
						break;
					case 14:
						var c5;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
						c5 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c5.buffer.o[c5.oPos],c5.buffer.ii[c5.iiPos],c5.buffer.ff[c5.ffPos],c5.buffer.ii[c5.iiPos + 1],c5.buffer.o[c5.oPos + 1],c5.buffer.o[c5.oPos + 2],c5.buffer.o[c5.oPos + 3],c5.buffer.o[c5.oPos + 4]);
						break;
					case 13:
						var c6;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
						c6 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c6.buffer.o[c6.oPos],c6.buffer.o[c6.oPos + 1],c6.buffer.b[c6.bPos],c6.buffer.b[c6.bPos + 1]);
						break;
					case 0:case 1:case 2:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
							var c7;
							data.advance();
							data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
							c7 = data;
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.b[c7.bPos],c7.buffer.b[c7.bPos + 1]);
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.b[c7.bPos],c7.buffer.b[c7.bPos + 1]);
						} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
							var c8;
							data.advance();
							data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
							c8 = data;
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.o[c8.oPos + 4]);
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.o[c8.oPos + 4]);
						} else {
							var c9;
							data.advance();
							data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
							c9 = data;
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c9.buffer.i[c9.iPos],c9.buffer.f[c9.fPos]);
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c9.buffer.i[c9.iPos],c9.buffer.f[c9.fPos]);
						}
						break;
					case 5:
						var c10;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
						c10 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2]);
						break;
					case 6:
						var c11;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
						c11 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c11.buffer.f[c11.fPos],c11.buffer.f[c11.fPos + 1],c11.buffer.f[c11.fPos + 2],c11.buffer.f[c11.fPos + 3]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c11.buffer.f[c11.fPos],c11.buffer.f[c11.fPos + 1],c11.buffer.f[c11.fPos + 2],c11.buffer.f[c11.fPos + 3]);
						break;
					case 8:
						var c12;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
						c12 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1],c12.buffer.f[c12.fPos + 2],c12.buffer.f[c12.fPos + 3]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1],c12.buffer.f[c12.fPos + 2],c12.buffer.f[c12.fPos + 3]);
						break;
					case 9:
						var c13;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
						c13 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1],c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3],c13.buffer.f[c13.fPos + 4],c13.buffer.f[c13.fPos + 5]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1],c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3],c13.buffer.f[c13.fPos + 4],c13.buffer.f[c13.fPos + 5]);
						break;
					case 11:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						var c14;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
						c14 = data;
						var v = c14.buffer.o[c14.oPos];
						var ind = c14.buffer.o[c14.oPos + 1];
						var uvt = c14.buffer.o[c14.oPos + 2];
						var pattern = null;
						var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
						if(colorFill && uvt != null) throw "__break__";
						if(!colorFill) {
							if(uvt == null) {
								var this1;
								this1 = new openfl_VectorData();
								var this2;
								this2 = new Array(0);
								this1.data = this2;
								this1.length = 0;
								this1.fixed = false;
								uvt = this1;
								var _g3 = 0;
								var _g2 = v.length / 2 | 0;
								while(_g3 < _g2) {
									var i1 = _g3++;
									if(!uvt.fixed) {
										uvt.length++;
										if(uvt.data.length < uvt.length) {
											var data1;
											var this3;
											this3 = new Array(uvt.data.length + 10);
											data1 = this3;
											haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data,0,data1,0,uvt.data.length);
											uvt.data = data1;
										}
										uvt.data[uvt.length - 1] = v.data[i1 * 2] / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width;
									}
									uvt.length;
									if(!uvt.fixed) {
										uvt.length++;
										if(uvt.data.length < uvt.length) {
											var data2;
											var this4;
											this4 = new Array(uvt.data.length + 10);
											data2 = this4;
											haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data,0,data2,0,uvt.data.length);
											uvt.data = data2;
										}
										uvt.data[uvt.length - 1] = v.data[i1 * 2 + 1] / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height;
									}
									uvt.length;
								}
							}
							var skipT = uvt.length != v.length;
							var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvt,skipT);
							var maxUVT = normalizedUVT.max;
							uvt = normalizedUVT.uvt;
							if(maxUVT > 1) pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width | 0,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height | 0); else pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
						}
						var i = 0;
						var l = ind.length;
						var a_;
						var b_;
						var c_;
						var iax;
						var iay;
						var ibx;
						var iby;
						var icx;
						var icy;
						var x1;
						var y1;
						var x2;
						var y2;
						var x3;
						var y3;
						var uvx1;
						var uvy1;
						var uvx2;
						var uvy2;
						var uvx3;
						var uvy3;
						var denom;
						var t1;
						var t2;
						var t3;
						var t4;
						var dx;
						var dy;
						while(i < l) {
							a_ = i;
							b_ = i + 1;
							c_ = i + 2;
							iax = ind.data[a_] * 2;
							iay = ind.data[a_] * 2 + 1;
							ibx = ind.data[b_] * 2;
							iby = ind.data[b_] * 2 + 1;
							icx = ind.data[c_] * 2;
							icy = ind.data[c_] * 2 + 1;
							x1 = v.data[iax];
							y1 = v.data[iay];
							x2 = v.data[ibx];
							y2 = v.data[iby];
							x3 = v.data[icx];
							y3 = v.data[icy];
							var _g21 = c14.buffer.o[c14.oPos + 3];
							switch(_g21[1]) {
							case 2:
								if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
									i += 3;
									continue;
								}
								break;
							case 0:
								if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
									i += 3;
									continue;
								}
								break;
							default:
							}
							if(colorFill) {
								openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
								if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
								i += 3;
								continue;
							}
							openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
							uvx1 = uvt.data[iax] * pattern.width;
							uvx2 = uvt.data[ibx] * pattern.width;
							uvx3 = uvt.data[icx] * pattern.width;
							uvy1 = uvt.data[iay] * pattern.height;
							uvy2 = uvt.data[iby] * pattern.height;
							uvy3 = uvt.data[icy] * pattern.height;
							denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
							if(denom == 0) {
								i += 3;
								continue;
							}
							t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
							t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
							t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
							t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
							dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
							dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
							openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern,0,0);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
							i += 3;
						}
						break;
					case 10:
						var c15;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
						c15 = data;
						var useScale = (c15.buffer.i[c15.iPos] & 1) > 0;
						var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
						var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
						var useRotation = (c15.buffer.i[c15.iPos] & 2) > 0;
						var useTransform = (c15.buffer.i[c15.iPos] & 16) > 0;
						var useRGB = (c15.buffer.i[c15.iPos] & 4) > 0;
						var useAlpha = (c15.buffer.i[c15.iPos] & 8) > 0;
						var useRect = (c15.buffer.i[c15.iPos] & 32) > 0;
						var useOrigin = (c15.buffer.i[c15.iPos] & 64) > 0;
						var useBlendAdd = (c15.buffer.i[c15.iPos] & 65536) > 0;
						if(useTransform) {
							useScale = false;
							useRotation = false;
						}
						var scaleIndex = 0;
						var rotationIndex = 0;
						var rgbIndex = 0;
						var alphaIndex = 0;
						var transformIndex = 0;
						var numValues = 3;
						if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
						if(useScale) {
							scaleIndex = numValues;
							numValues++;
						}
						if(useRotation) {
							rotationIndex = numValues;
							numValues++;
						}
						if(useTransform) {
							transformIndex = numValues;
							numValues += 4;
						}
						if(useRGB) {
							rgbIndex = numValues;
							numValues += 3;
						}
						if(useAlpha) {
							alphaIndex = numValues;
							numValues++;
						}
						var totalCount = c15.buffer.ff[c15.ffPos].length;
						if(c15.buffer.i[c15.iPos + 1] >= 0 && totalCount > c15.buffer.i[c15.iPos + 1]) totalCount = c15.buffer.i[c15.iPos + 1];
						var itemCount = totalCount / numValues | 0;
						var index = 0;
						var rect = null;
						var center = null;
						var previousTileID = -1;
						var surface;
						c15.buffer.ts[c15.tsPos].__bitmap.__sync();
						surface = c15.buffer.ts[c15.tsPos].__bitmap.image.get_src();
						if(useBlendAdd) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalCompositeOperation = "lighter";
						while(index < totalCount) {
							var tileID;
							if(!useRect) tileID = c15.buffer.ff[c15.ffPos][index + 2] | 0; else tileID = -1;
							if(!useRect && tileID != previousTileID) {
								rect = c15.buffer.ts[c15.tsPos].__tileRects[tileID];
								center = c15.buffer.ts[c15.tsPos].__centerPoints[tileID];
								previousTileID = tileID;
							} else if(useRect) {
								rect = c15.buffer.ts[c15.tsPos].__rectTile;
								rect.setTo(c15.buffer.ff[c15.ffPos][index + 2],c15.buffer.ff[c15.ffPos][index + 3],c15.buffer.ff[c15.ffPos][index + 4],c15.buffer.ff[c15.ffPos][index + 5]);
								center = c15.buffer.ts[c15.tsPos].__point;
								if(useOrigin) {
									center.x = c15.buffer.ff[c15.ffPos][index + 6];
									center.y = c15.buffer.ff[c15.ffPos][index + 7];
								} else {
									center.x = 0;
									center.y = 0;
								}
							}
							if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
								openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(c15.buffer.ff[c15.ffPos][index] - offsetX,c15.buffer.ff[c15.ffPos][index + 1] - offsetY);
								if(useRotation) openfl__$internal_renderer_canvas_CanvasGraphics.context.rotate(c15.buffer.ff[c15.ffPos][index + rotationIndex]);
								var scale = 1.0;
								if(useScale) scale = c15.buffer.ff[c15.ffPos][index + scaleIndex];
								if(useTransform) openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(c15.buffer.ff[c15.ffPos][index + transformIndex],c15.buffer.ff[c15.ffPos][index + transformIndex + 1],c15.buffer.ff[c15.ffPos][index + transformIndex + 2],c15.buffer.ff[c15.ffPos][index + transformIndex + 3],0,0);
								if(useAlpha) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalAlpha = c15.buffer.ff[c15.ffPos][index + alphaIndex];
								openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled = c15.buffer.b[c15.bPos];
								openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(surface,rect.x,rect.y,rect.width,rect.height,-center.x * scale,-center.y * scale,rect.width * scale,rect.height * scale);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
							}
							index += numValues;
						}
						if(useBlendAdd) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalCompositeOperation = "source-over";
						break;
					default:
						data.advance();
						data.prev = type;
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
			if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
			data.destroy();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
				positionX = c.buffer.f[c.fPos + 4];
				positionY = c.buffer.f[c.fPos + 5];
				break;
			case 4:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c1 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				positionX = c1.buffer.f[c1.fPos + 2];
				positionY = c1.buffer.f[c1.fPos + 3];
				break;
			case 5:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c2 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2,true);
				break;
			case 6:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c3 = data;
				var x = c3.buffer.f[c3.fPos];
				var y = c3.buffer.f[c3.fPos + 1];
				var width = c3.buffer.f[c3.fPos + 2];
				var height = c3.buffer.f[c3.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 8:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c4 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 9:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c5 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.f[c5.fPos + 5]);
				break;
			case 16:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c6 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 17:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c7 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
		data.destroy();
	}
};
var openfl__$internal_renderer_canvas_CanvasMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasMaskManager"] = openfl__$internal_renderer_canvas_CanvasMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.__name__ = ["openfl","_internal","renderer","canvas","CanvasMaskManager"];
openfl__$internal_renderer_canvas_CanvasMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__getWorldTransform();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		mask.__renderCanvasMask(this.renderSession);
		context.clip();
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,popRect: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasMaskManager
});
var openfl__$internal_renderer_canvas_CanvasRenderer = function(width,height,context) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.context = context;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.context = context;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl__$internal_renderer_canvas_CanvasRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.__name__ = ["openfl","_internal","renderer","canvas","CanvasRenderer"];
openfl__$internal_renderer_canvas_CanvasRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function(stage) {
		this.context.setTransform(1,0,0,1,0,0);
		this.context.globalAlpha = 1;
		if(!stage.__transparent && stage.__clearBeforeRender) {
			this.context.fillStyle = stage.__colorString;
			this.context.fillRect(0,0,stage.stageWidth,stage.stageHeight);
		} else if(stage.__transparent && stage.__clearBeforeRender) this.context.clearRect(0,0,stage.stageWidth,stage.stageHeight);
		stage.__renderCanvas(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasRenderer
});
var openfl__$internal_renderer_canvas_CanvasShape = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl__$internal_renderer_canvas_CanvasShape;
openfl__$internal_renderer_canvas_CanvasShape.__name__ = ["openfl","_internal","renderer","canvas","CanvasShape"];
openfl__$internal_renderer_canvas_CanvasShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession);
		if(graphics.__canvas != null) {
			var context = renderSession.context;
			var scrollRect = shape.get_scrollRect();
			if(graphics.__bounds.width > 0 && graphics.__bounds.height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
				if(shape.__mask != null) renderSession.maskManager.pushMask(shape.__mask);
				context.globalAlpha = shape.__worldAlpha;
				var transform = shape.__renderTransform;
				if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				if(scrollRect == null) context.drawImage(graphics.__canvas,graphics.__bounds.x,graphics.__bounds.y); else context.drawImage(graphics.__canvas,Math.ceil(graphics.__bounds.x + scrollRect.x),Math.ceil(graphics.__bounds.y + scrollRect.y),scrollRect.width,scrollRect.height,Math.ceil(graphics.__bounds.x + scrollRect.x),Math.ceil(graphics.__bounds.y + scrollRect.y),scrollRect.width,scrollRect.height);
				if(shape.__mask != null) renderSession.maskManager.popMask();
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
openfl__$internal_renderer_canvas_CanvasTextField.__name__ = ["openfl","_internal","renderer","canvas","CanvasTextField"];
openfl__$internal_renderer_canvas_CanvasTextField.context = null;
openfl__$internal_renderer_canvas_CanvasTextField.disableInputMode = function(textEngine) {
};
openfl__$internal_renderer_canvas_CanvasTextField.enableInputMode = function(textEngine) {
	textEngine.__cursorPosition = -1;
	if(textEngine.__hiddenInput == null) {
		textEngine.__hiddenInput = window.document.createElement("input");
		var hiddenInput = textEngine.__hiddenInput;
		hiddenInput.type = "text";
		hiddenInput.style.position = "absolute";
		hiddenInput.style.opacity = "0";
		hiddenInput.style.color = "transparent";
		hiddenInput.style.left = "0px";
		hiddenInput.style.top = "50%";
		if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
			hiddenInput.style.fontSize = "0px";
			hiddenInput.style.width = "0px";
			hiddenInput.style.height = "0px";
		} else {
			hiddenInput.style.width = "1px";
			hiddenInput.style.height = "1px";
		}
		hiddenInput.style.pointerEvents = "none";
		hiddenInput.style.zIndex = "-10000000";
		if(textEngine.maxChars > 0) hiddenInput.maxLength = textEngine.maxChars;
		window.document.body.appendChild(hiddenInput);
		hiddenInput.value = textEngine.text;
	}
};
openfl__$internal_renderer_canvas_CanvasTextField.render = function(textField,renderSession) {
	if(textField.__dirty) {
		var textEngine = textField.__textEngine;
		textField.__updateLayout();
		if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != openfl_text_TextFieldAutoSize.NONE) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			var bounds = textEngine.bounds;
			if(textField.__graphics == null || textField.__graphics.__canvas == null) {
				if(textField.__graphics == null) textField.__graphics = new openfl_display_Graphics();
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
				textField.__graphics.__bounds = new openfl_geom_Rectangle(0,0,bounds.width,bounds.height);
			}
			var graphics = textField.__graphics;
			openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(textEngine.displayAsPassword) {
					var length = text.length;
					var mask = "";
					var _g = 0;
					while(_g < length) {
						var i = _g++;
						mask += "*";
					}
					text = mask;
				}
				graphics.__canvas.width = Math.ceil(bounds.width);
				graphics.__canvas.height = Math.ceil(bounds.height);
				if(textEngine.antiAliasType != openfl_text_AntiAliasType.ADVANCED || textEngine.gridFitType != openfl_text_GridFitType.PIXEL) {
					graphics.__context.mozImageSmoothingEnabled = true;
					graphics.__context.msImageSmoothingEnabled = true;
					graphics.__context.imageSmoothingEnabled = true;
				} else {
					graphics.__context.mozImageSmoothingEnabled = false;
					graphics.__context.msImageSmoothingEnabled = false;
					graphics.__context.imageSmoothingEnabled = false;
				}
				if(textEngine.border || textEngine.background) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
				openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g1 = 0;
				var _g2 = textField.get_scrollV() - 1;
				while(_g1 < _g2) {
					var i1 = _g1++;
					scrollY -= textEngine.lineHeights[i1];
				}
				var advance;
				var offsetY = 0.0;
				var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
				var _g3 = 0;
				var _g11 = textEngine.layoutGroups;
				while(_g3 < _g11.length) {
					var group = _g11[_g3];
					++_g3;
					if(group.lineIndex < textField.get_scrollV() - 1) continue;
					if(group.lineIndex > textField.get_scrollV() + textEngine.bottomScrollV - 2) break;
					openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(group.format.color,6);
					if(applyHack) offsetY = group.format.size * 0.185;
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g31 = 0;
								var _g21 = textField.__caretIndex - group.startIndex;
								while(_g31 < _g21) {
									var i2 = _g31++;
									if(group.advances.length <= i2) break;
									advance += group.advances[i2];
								}
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance,group.offsetY,1,group.height);
							}
						} else if(group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex || group.startIndex <= textField.__selectionIndex && group.endIndex >= textField.__selectionIndex) {
							var selectionStart = Std["int"](Math.min(textField.__selectionIndex,textField.__caretIndex));
							var selectionEnd = Std["int"](Math.max(textField.__selectionIndex,textField.__caretIndex));
							if(group.startIndex > selectionStart) selectionStart = group.startIndex;
							if(group.endIndex < selectionEnd) selectionEnd = group.endIndex;
							var start;
							var end;
							start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= textEngine.text.length) {
								end = textField.getCharBoundaries(textEngine.text.length - 1);
								end.x += end.width + 2;
							} else end = textField.getCharBoundaries(selectionEnd);
							if(start != null && end != null) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x,start.y,end.x - start.x,group.height);
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
							}
						}
					}
				}
			} else {
				graphics.__canvas.width = Math.ceil(bounds.width);
				graphics.__canvas.height = Math.ceil(bounds.height);
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1); else openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					if(textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			textField.__dirty = false;
			graphics.set___dirty(false);
		}
	}
};
var openfl__$internal_renderer_console_ConsoleRenderer = function(width,height,ctx) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	throw new js__$Boot_HaxeError("ConsoleRenderer not supported");
};
$hxClasses["openfl._internal.renderer.console.ConsoleRenderer"] = openfl__$internal_renderer_console_ConsoleRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.__name__ = ["openfl","_internal","renderer","console","ConsoleRenderer"];
openfl__$internal_renderer_console_ConsoleRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function(stage) {
	}
	,__class__: openfl__$internal_renderer_console_ConsoleRenderer
});
var openfl__$internal_renderer_dom_DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl__$internal_renderer_dom_DOMBitmap;
openfl__$internal_renderer_dom_DOMBitmap.__name__ = ["openfl","_internal","renderer","dom","DOMBitmap"];
openfl__$internal_renderer_dom_DOMBitmap.render = function(bitmap,renderSession) {
	if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.bitmapData.image.buffer.__srcImage != null) openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderSession); else openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderSession);
	} else {
		if(bitmap.__image != null) {
			renderSession.element.removeChild(bitmap.__image);
			bitmap.__image = null;
			bitmap.__style = null;
		}
		if(bitmap.__canvas != null) {
			renderSession.element.removeChild(bitmap.__canvas);
			bitmap.__canvas = null;
			bitmap.__style = null;
		}
	}
};
openfl__$internal_renderer_dom_DOMBitmap.renderCanvas = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		if(!bitmap.smoothing) {
			bitmap.__context.mozImageSmoothingEnabled = false;
			bitmap.__context.msImageSmoothingEnabled = false;
			bitmap.__context.imageSmoothingEnabled = false;
		}
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__canvas,renderSession);
	}
	bitmap.bitmapData.__sync();
	bitmap.__canvas.width = bitmap.bitmapData.width;
	bitmap.__canvas.height = bitmap.bitmapData.height;
	bitmap.__context.globalAlpha = bitmap.__worldAlpha;
	bitmap.__context.drawImage(bitmap.bitmapData.image.buffer.__srcCanvas,0,0);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,false,true);
};
openfl__$internal_renderer_dom_DOMBitmap.renderImage = function(bitmap,renderSession) {
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.src = bitmap.bitmapData.image.buffer.__srcImage.src;
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__image,renderSession);
	}
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
var openfl__$internal_renderer_dom_DOMMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.dom.DOMMaskManager"] = openfl__$internal_renderer_dom_DOMMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.__name__ = ["openfl","_internal","renderer","dom","DOMMaskManager"];
openfl__$internal_renderer_dom_DOMMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,__class__: openfl__$internal_renderer_dom_DOMMaskManager
});
var openfl__$internal_renderer_dom_DOMRenderer = function(width,height,element) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.element = element;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.element = element;
	this.renderSession.roundPixels = true;
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('') 
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.renderSession.vendorPrefix = prefix.lowercase;
	if(prefix.lowercase == "webkit") this.renderSession.transformProperty = "-webkit-transform"; else this.renderSession.transformProperty = "transform";
	if(prefix.lowercase == "webkit") this.renderSession.transformOriginProperty = "-webkit-transform-origin"; else this.renderSession.transformOriginProperty = "transform-origin";
	this.renderSession.maskManager = new openfl__$internal_renderer_dom_DOMMaskManager(this.renderSession);
	this.renderSession.renderer = this;
};
$hxClasses["openfl._internal.renderer.dom.DOMRenderer"] = openfl__$internal_renderer_dom_DOMRenderer;
openfl__$internal_renderer_dom_DOMRenderer.__name__ = ["openfl","_internal","renderer","dom","DOMRenderer"];
openfl__$internal_renderer_dom_DOMRenderer.applyStyle = function(displayObject,renderSession,setTransform,setAlpha,setClip) {
	var style = displayObject.__style;
	if(setTransform && displayObject.__worldTransformChanged) style.setProperty(renderSession.transformProperty,displayObject.__worldTransform.to3DString(renderSession.roundPixels),null);
	if(displayObject.__worldZ != ++renderSession.z) {
		displayObject.__worldZ = renderSession.z;
		style.setProperty("z-index",displayObject.__worldZ == null?"null":"" + displayObject.__worldZ,null);
	}
	if(setAlpha && displayObject.__worldAlphaChanged) {
		if(displayObject.__worldAlpha < 1) style.setProperty("opacity",displayObject.__worldAlpha == null?"null":"" + displayObject.__worldAlpha,null); else style.removeProperty("opacity");
	}
	if(setClip && displayObject.__worldClipChanged) {
		if(displayObject.__worldClip == null) style.removeProperty("clip"); else {
			var clip = openfl_geom_Rectangle.__temp;
			var matrix = openfl_geom_Matrix.__temp;
			matrix.copyFrom(displayObject.__worldTransform);
			matrix.invert();
			displayObject.__worldClip.__transform(clip,matrix);
			style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
		}
	}
};
openfl__$internal_renderer_dom_DOMRenderer.initializeElement = function(displayObject,element,renderSession) {
	var style = displayObject.__style = element.style;
	style.setProperty("position","absolute",null);
	style.setProperty("top","0",null);
	style.setProperty("left","0",null);
	style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
	renderSession.element.appendChild(element);
	displayObject.__worldAlphaChanged = true;
	displayObject.__worldClipChanged = true;
	displayObject.__worldTransformChanged = true;
	displayObject.__worldVisibleChanged = true;
	displayObject.__worldZ = -1;
};
openfl__$internal_renderer_dom_DOMRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_dom_DOMRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function(stage) {
		this.element.style.background = stage.__colorString;
		this.renderSession.z = 1;
		stage.__renderDOM(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_dom_DOMRenderer
});
var openfl__$internal_renderer_dom_DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl__$internal_renderer_dom_DOMShape;
openfl__$internal_renderer_dom_DOMShape.__name__ = ["openfl","_internal","renderer","dom","DOMShape"];
openfl__$internal_renderer_dom_DOMShape.render = function(shape,renderSession) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		if(graphics.__dirty || shape.__worldAlphaChanged || shape.__canvas == null && graphics.__canvas != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession);
			if(graphics.__canvas != null) {
				if(shape.__canvas == null) {
					shape.__canvas = window.document.createElement("canvas");
					shape.__context = shape.__canvas.getContext("2d");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(shape,shape.__canvas,renderSession);
				}
				shape.__canvas.width = graphics.__canvas.width;
				shape.__canvas.height = graphics.__canvas.height;
				shape.__context.globalAlpha = shape.__worldAlpha;
				shape.__context.drawImage(graphics.__canvas,0,0);
			} else if(shape.__canvas != null) {
				renderSession.element.removeChild(shape.__canvas);
				shape.__canvas = null;
				shape.__style = null;
			}
		}
		if(shape.__canvas != null) {
			if(shape.__worldTransformChanged || graphics.__transformDirty) {
				graphics.__transformDirty = false;
				var transform = openfl_geom_Matrix.__temp;
				transform.identity();
				transform.translate(graphics.__bounds.x,graphics.__bounds.y);
				transform.concat(shape.__worldTransform);
				shape.__style.setProperty(renderSession.transformProperty,renderSession.roundPixels?"matrix3d(" + transform.a + ", " + transform.b + ", 0, 0, " + transform.c + ", " + transform.d + ", 0, 0, 0, 0, 1, 0, " + (transform.tx | 0) + ", " + (transform.ty | 0) + ", 0, 1)":"matrix3d(" + transform.a + ", " + transform.b + ", 0, 0, " + transform.c + ", " + transform.d + ", 0, 0, 0, 0, 1, 0, " + transform.tx + ", " + transform.ty + ", 0, 1)",null);
			}
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(shape,renderSession,false,false,true);
		}
	} else if(shape.__canvas != null) {
		renderSession.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
var openfl__$internal_renderer_dom_DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl__$internal_renderer_dom_DOMTextField;
openfl__$internal_renderer_dom_DOMTextField.__name__ = ["openfl","_internal","renderer","dom","DOMTextField"];
openfl__$internal_renderer_dom_DOMTextField.measureText = function(textField) {
	var textEngine = textField.__textEngine;
	var div = textField.__div;
	if(div == null) {
		div = window.document.createElement("div");
		div.innerHTML = new EReg("\n","g").replace(textEngine.text,"<br>");
		div.style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
		div.style.setProperty("pointer-events","none",null);
		div.style.position = "absolute";
		div.style.top = "110%";
		window.document.body.appendChild(div);
	}
	textEngine.__measuredWidth = div.clientWidth;
	if(textField.__div == null) div.style.width = Std.string(textEngine.width - 4) + "px";
	textEngine.__measuredHeight = div.clientHeight;
	if(textField.__div == null) window.document.body.removeChild(div);
};
openfl__$internal_renderer_dom_DOMTextField.render = function(textField,renderSession) {
	var textEngine = textField.__textEngine;
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__div == null) {
			if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == openfl_text_TextFieldType.INPUT) {
				if(textField.__div == null) {
					textField.__div = window.document.createElement("div");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(textField,textField.__div,renderSession);
					textField.__style.setProperty("outline","none",null);
					textField.__div.addEventListener("input",function(event) {
						event.preventDefault();
						if(textField.get_htmlText() != textField.__div.innerHTML) {
							textField.set_htmlText(textField.__div.innerHTML);
							textField.__dirty = false;
						}
					},true);
				}
				if(textEngine.selectable) textField.__style.setProperty("cursor","text",null); else textField.__style.setProperty("cursor","inherit",null);
				textField.__div.contentEditable = textEngine.type == openfl_text_TextFieldType.INPUT;
				var style = textField.__style;
				textField.__div.innerHTML = textEngine.text;
				if(textEngine.background) style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor,6),null); else style.removeProperty("background-color");
				if(textEngine.border) style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor,6),null); else style.removeProperty("border");
				style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
				style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color,6),null);
				if(textEngine.autoSize != openfl_text_TextFieldAutoSize.NONE) style.setProperty("width","auto",null); else style.setProperty("width",textEngine.width + "px",null);
				style.setProperty("height",textEngine.height + "px",null);
				var _g = textField.__textFormat.align;
				switch(_g[1]) {
				case 3:
					style.setProperty("text-align","center",null);
					break;
				case 1:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderSession.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) openfl__$internal_renderer_dom_DOMRenderer.applyStyle(textField,renderSession,true,true,false);
	} else if(textField.__div != null) {
		renderSession.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
var openfl__$internal_renderer_opengl_GLBitmap = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLBitmap"] = openfl__$internal_renderer_opengl_GLBitmap;
openfl__$internal_renderer_opengl_GLBitmap.__name__ = ["openfl","_internal","renderer","opengl","GLBitmap"];
openfl__$internal_renderer_opengl_GLBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0 || bitmap.bitmapData == null || !bitmap.bitmapData.__isValid) return;
	renderSession.spriteBatch.renderBitmapData(bitmap.bitmapData,bitmap.smoothing,bitmap.__renderTransform,bitmap.__worldColorTransform,bitmap.__worldAlpha,bitmap.__blendMode,bitmap.__shader,bitmap.pixelSnapping);
};
openfl__$internal_renderer_opengl_GLBitmap.pushFramebuffer = function(renderSession,texture,viewPort,smoothing,transparent,clearBuffer,powerOfTwo) {
	if(powerOfTwo == null) powerOfTwo = true;
	if(clearBuffer == null) clearBuffer = false;
	if(transparent == null) transparent = true;
	var gl = renderSession.gl;
	if(gl == null) return null;
	var renderer = renderSession.renderer;
	var spritebatch = renderSession.spriteBatch;
	var x = viewPort.x | 0;
	var y = viewPort.y | 0;
	var width = viewPort.width | 0;
	var height = viewPort.height | 0;
	spritebatch.finish();
	if(openfl__$internal_renderer_opengl_GLBitmap.fbData.length <= 0) openfl__$internal_renderer_opengl_GLBitmap.fbData.push({ texture : null, viewPort : null, transparent : renderer.transparent});
	if(texture == null) texture = new openfl__$internal_renderer_opengl_utils_PingPongTexture(gl,width,height,smoothing,powerOfTwo);
	texture.resize(width,height);
	renderer.transparent = transparent;
	renderSession.maskManager.saveState();
	gl.bindFramebuffer(gl.FRAMEBUFFER,(texture.__swapped?texture.__texture1:texture.__texture0).frameBuffer);
	renderer.setViewport(x,y,width,height);
	gl.colorMask(true,true,true,true);
	renderSession.blendModeManager.setBlendMode(openfl_display_BlendMode.NORMAL);
	if(clearBuffer) (texture.__swapped?texture.__texture1:texture.__texture0).clear(0,0,0,0,null);
	openfl__$internal_renderer_opengl_GLBitmap.fbData.push({ texture : texture, viewPort : viewPort, transparent : transparent});
	return texture;
};
openfl__$internal_renderer_opengl_GLBitmap.drawBitmapDrawable = function(renderSession,target,source,matrix,colorTransform,blendMode,clipRect) {
	var data = openfl__$internal_renderer_opengl_GLBitmap.fbData[openfl__$internal_renderer_opengl_GLBitmap.fbData.length - 1];
	if(data == null) throw new js__$Boot_HaxeError("No data to draw to");
	var gl = renderSession.gl;
	if(gl == null) return;
	var viewPort = data.viewPort;
	var renderer = renderSession.renderer;
	var spritebatch = renderSession.spriteBatch;
	var drawTarget = target != null;
	var tmpRect;
	if(clipRect == null) tmpRect = new openfl_geom_Rectangle(viewPort.x,viewPort.y,viewPort.width,viewPort.height); else tmpRect = clipRect.clone();
	spritebatch.begin(renderSession,drawTarget?null:tmpRect);
	if(drawTarget) {
		target.__worldTransform.identity();
		openfl__$internal_renderer_opengl_GLBitmap.flipMatrix(target.__worldTransform,viewPort.height);
		target.__renderGL(renderSession);
		spritebatch.stop();
		if(target.__texture != null) gl.deleteTexture(target.__texture);
		target.__texture = null;
		spritebatch.start(tmpRect);
	}
	var ctCache = source.__worldColorTransform;
	var blendModeCache = source.__blendMode;
	var cached = source.__cacheAsBitmap;
	var m;
	if(matrix != null) m = new openfl_geom_Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty); else m = new openfl_geom_Matrix();
	openfl__$internal_renderer_opengl_GLBitmap.flipMatrix(m,viewPort.height);
	if(colorTransform != null) source.__worldColorTransform = colorTransform; else source.__worldColorTransform = new openfl_geom_ColorTransform();
	source.__blendMode = blendMode;
	openfl_display_DisplayObject.__cacheAsBitmapMode = true;
	source.__updateTransforms(m);
	source.__updateChildren(false);
	source.__cacheAsBitmap = false;
	source.__renderGL(renderSession);
	source.__cacheAsBitmap = cached;
	source.__worldColorTransform = ctCache;
	source.__blendMode = blendModeCache;
	openfl_display_DisplayObject.__cacheAsBitmapMode = false;
	source.__updateTransforms();
	source.__updateChildren(false);
};
openfl__$internal_renderer_opengl_GLBitmap.popFramebuffer = function(renderSession,image) {
	var gl = renderSession.gl;
	if(gl == null) return;
	renderSession.spriteBatch.finish();
	openfl__$internal_renderer_opengl_GLBitmap.fbData.pop();
	var data = openfl__$internal_renderer_opengl_GLBitmap.fbData[openfl__$internal_renderer_opengl_GLBitmap.fbData.length - 1];
	if(data == null) throw new js__$Boot_HaxeError("oh");
	var x;
	var y;
	var width;
	var height;
	if(data.viewPort == null) {
		x = y = 0;
		width = renderSession.renderer.width;
		height = renderSession.renderer.height;
	} else {
		x = Math.floor(data.viewPort.x);
		y = Math.floor(data.viewPort.y);
		width = Math.ceil(data.viewPort.width);
		height = Math.ceil(data.viewPort.height);
	}
	if(image != null) {
		if(image.width != width || image.height != height) image.resize(width,height);
		gl.readPixels(x,y,width,height,gl.RGBA,gl.UNSIGNED_BYTE,image.buffer.data);
		image.dirty = false;
		image.set_premultiplied(true);
	}
	gl.bindFramebuffer(gl.FRAMEBUFFER,data.texture == null?renderSession.defaultFramebuffer:data.texture.get_framebuffer());
	renderSession.renderer.setViewport(x,y,width,height);
	renderSession.renderer.transparent = data.transparent;
	renderSession.maskManager.restoreState();
};
openfl__$internal_renderer_opengl_GLBitmap.flipMatrix = function(m,height) {
	var tx = m.tx;
	var ty = m.ty;
	m.tx = 0;
	m.ty = 0;
	m.scale(1,-1);
	m.translate(0,height);
	m.tx += tx;
	m.ty -= ty;
};
var openfl__$internal_renderer_opengl_GLRenderer = function(width,height,gl,transparent,antialias,preserveDrawingBuffer) {
	if(preserveDrawingBuffer == null) preserveDrawingBuffer = false;
	if(antialias == null) antialias = false;
	if(transparent == null) transparent = false;
	if(height == null) height = 600;
	if(width == null) width = 800;
	this.vpHeight = 0;
	this.vpWidth = 0;
	this.vpY = 0;
	this.vpX = 0;
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.transparent = transparent;
	this.preserveDrawingBuffer = preserveDrawingBuffer;
	this.width = width;
	this.height = height;
	this.viewport = new openfl_geom_Rectangle();
	this.options = { alpha : transparent, antialias : antialias, premultipliedAlpha : transparent, stencil : true, preserveDrawingBuffer : preserveDrawingBuffer};
	this._glContextId = openfl__$internal_renderer_opengl_GLRenderer.glContextId++;
	this.gl = gl;
	this.defaultFramebuffer = null;
	openfl__$internal_renderer_opengl_GLRenderer.glContexts[this._glContextId] = gl;
	this.projectionMatrix = new openfl_geom_Matrix();
	this.projection = new openfl_geom_Point();
	this.projection.x = this.width / 2;
	this.projection.y = -this.height / 2;
	this.offset = new openfl_geom_Point(0,0);
	this.resize(this.width,this.height);
	this.contextLost = false;
	this.shaderManager = new openfl__$internal_renderer_opengl_utils_ShaderManager(gl);
	this.spriteBatch = new openfl__$internal_renderer_opengl_utils_SpriteBatch(gl);
	this.filterManager = new openfl__$internal_renderer_opengl_utils_FilterManager(gl,this.transparent);
	this.stencilManager = new openfl__$internal_renderer_opengl_utils_StencilManager(gl);
	this.blendModeManager = new openfl__$internal_renderer_opengl_utils_BlendModeManager(gl);
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.gl = this.gl;
	this.renderSession.drawCount = 0;
	this.renderSession.shaderManager = this.shaderManager;
	this.renderSession.filterManager = this.filterManager;
	this.renderSession.blendModeManager = this.blendModeManager;
	this.renderSession.spriteBatch = this.spriteBatch;
	this.renderSession.stencilManager = this.stencilManager;
	this.renderSession.renderer = this;
	this.renderSession.defaultFramebuffer = this.defaultFramebuffer;
	this.renderSession.projectionMatrix = this.projectionMatrix;
	this.maskManager = new openfl__$internal_renderer_opengl_utils_GLMaskManager(this.renderSession);
	this.renderSession.maskManager = this.maskManager;
	this.shaderManager.setShader(this.shaderManager.defaultShader);
	gl.disable(gl.DEPTH_TEST);
	gl.disable(gl.CULL_FACE);
	gl.enable(gl.BLEND);
	gl.colorMask(true,true,true,this.transparent);
};
$hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl__$internal_renderer_opengl_GLRenderer;
openfl__$internal_renderer_opengl_GLRenderer.__name__ = ["openfl","_internal","renderer","opengl","GLRenderer"];
openfl__$internal_renderer_opengl_GLRenderer.renderBitmap = function(shape,renderSession,smooth) {
	if(smooth == null) smooth = true;
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	if(shape.__graphics == null || shape.__graphics.__bitmap == null) return;
	var rect = openfl_geom_Rectangle.__temp;
	var matrix = openfl_geom_Matrix.__temp;
	rect.setEmpty();
	matrix.identity();
	shape.__getBounds(rect,matrix);
	var bitmap = shape.__graphics.__bitmap;
	matrix.translate(shape.__graphics.__bounds.x,shape.__graphics.__bounds.y);
	matrix.concat(shape.__renderTransform);
	renderSession.spriteBatch.renderBitmapData(bitmap,smooth,matrix,shape.__worldColorTransform,shape.__worldAlpha,shape.__blendMode,null,openfl_display_PixelSnapping.ALWAYS);
};
openfl__$internal_renderer_opengl_GLRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_opengl_GLRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	destroy: function() {
		openfl__$internal_renderer_opengl_GLRenderer.glContexts[this._glContextId] = null;
		this.projection = null;
		this.offset = null;
		this.shaderManager.destroy();
		this.spriteBatch.destroy();
		this.maskManager.destroy();
		this.filterManager.destroy();
		this.shaderManager = null;
		this.spriteBatch = null;
		this.maskManager = null;
		this.filterManager = null;
		this.gl = null;
		this.renderSession = null;
	}
	,setViewport: function(x,y,width,height) {
		if(!(this.vpX == x && this.vpY == y && this.vpWidth == width && this.vpHeight == height)) {
			this.vpX = x;
			this.vpY = y;
			this.vpWidth = width;
			this.vpHeight = height;
			this.gl.viewport(x,y,width,height);
			this.setOrtho(x,y,width,height);
			this.viewport.setTo(x,y,width,height);
		}
	}
	,setOrtho: function(x,y,width,height) {
		var o = this.projectionMatrix;
		o.identity();
		o.a = 1 / width * 2;
		o.d = -1 / height * 2;
		o.tx = -1 - x * o.a;
		o.ty = 1 - y * o.d;
	}
	,handleContextLost: function(event) {
		event.preventDefault();
		this.contextLost = true;
	}
	,handleContextRestored: function() {
		var gl = this.gl;
		openfl__$internal_renderer_opengl_GLRenderer.glContextId++;
		this.shaderManager.setContext(gl);
		this.spriteBatch.setContext(gl);
		this.maskManager.setContext(gl);
		this.filterManager.setContext(gl);
		this.renderSession.gl = gl;
		this.defaultFramebuffer = null;
		gl.disable(gl.DEPTH_TEST);
		gl.disable(gl.CULL_FACE);
		gl.enable(gl.BLEND);
		gl.colorMask(true,true,true,this.transparent);
		this.setViewport(0,0,this.width,this.height);
		this.contextLost = false;
	}
	,render: function(stage) {
		if(this.contextLost) return;
		var gl = this.gl;
		this.setViewport(0,0,this.width,this.height);
		gl.bindFramebuffer(gl.FRAMEBUFFER,this.defaultFramebuffer);
		if(this.transparent) gl.clearColor(0,0,0,0); else gl.clearColor(stage.__colorSplit[0],stage.__colorSplit[1],stage.__colorSplit[2],1);
		gl.clear(gl.COLOR_BUFFER_BIT);
		this.renderDisplayObject(stage,this.projection);
	}
	,renderDisplayObject: function(displayObject,projection,buffer) {
		this.renderSession.blendModeManager.setBlendMode(openfl_display_BlendMode.NORMAL);
		this.renderSession.drawCount = 0;
		this.renderSession.currentBlendMode = null;
		this.spriteBatch.begin(this.renderSession);
		this.filterManager.begin(this.renderSession,buffer);
		displayObject.__renderGL(this.renderSession);
		this.spriteBatch.finish();
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
		openfl__$internal_renderer_AbstractRenderer.prototype.resize.call(this,width,height);
		this.setViewport(0,0,width,height);
		this.projection.x = width / 2;
		this.projection.y = -height / 2;
	}
	,__class__: openfl__$internal_renderer_opengl_GLRenderer
});
var openfl__$internal_renderer_opengl_shaders2_Shader = function(gl) {
	this.wrapT = 33071;
	this.wrapS = 33071;
	this.compiled = false;
	this.uniforms = new haxe_ds_StringMap();
	this.attributes = new haxe_ds_StringMap();
	this.ID = openfl__$internal_renderer_opengl_shaders2_Shader.UID++;
	this.gl = gl;
	this.program = null;
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.Shader"] = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_Shader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","Shader"];
openfl__$internal_renderer_opengl_shaders2_Shader.compileProgram = function(gl,vertexSrc,fragmentSrc) {
	var cache = openfl__$internal_renderer_opengl_utils_ShaderManager.compiledShadersCache;
	var key = haxe_crypto_Md5.encode(vertexSrc + fragmentSrc);
	if(__map_reserved[key] != null?cache.existsReserved(key):cache.h.hasOwnProperty(key)) return __map_reserved[key] != null?cache.getReserved(key):cache.h[key];
	var vertexShader = openfl__$internal_renderer_opengl_shaders2_Shader.compileShader(gl,vertexSrc,gl.VERTEX_SHADER);
	var fragmentShader = openfl__$internal_renderer_opengl_shaders2_Shader.compileShader(gl,fragmentSrc,gl.FRAGMENT_SHADER);
	var program = gl.createProgram();
	if(vertexShader != null && fragmentShader != null) {
		gl.attachShader(program,vertexShader);
		gl.attachShader(program,fragmentShader);
		gl.linkProgram(program);
		gl.deleteShader(vertexShader);
		gl.deleteShader(fragmentShader);
		if(gl.getProgramParameter(program,gl.LINK_STATUS) == 0) {
			haxe_Log.trace("Could not compile the program:\n\t" + gl.getProgramInfoLog(program),{ fileName : "Shader.hx", lineNumber : 226, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileProgram"});
			haxe_Log.trace("VERTEX:\n" + vertexSrc + "\nFRAGMENT:\n" + fragmentSrc,{ fileName : "Shader.hx", lineNumber : 227, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileProgram"});
			return null;
		}
	}
	if(__map_reserved[key] != null) cache.setReserved(key,program); else cache.h[key] = program;
	return program;
};
openfl__$internal_renderer_opengl_shaders2_Shader.compileShader = function(gl,shaderSrc,type) {
	var src = shaderSrc;
	var shader = gl.createShader(type);
	gl.shaderSource(shader,src);
	gl.compileShader(shader);
	if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Could not compile the shader:\n\t" + gl.getShaderInfoLog(shader),{ fileName : "Shader.hx", lineNumber : 244, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileShader"});
		haxe_Log.trace(shaderSrc,{ fileName : "Shader.hx", lineNumber : 245, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileShader"});
		return null;
	}
	return shader;
};
openfl__$internal_renderer_opengl_shaders2_Shader.prototype = {
	init: function(force) {
		if(force == null) force = false;
		if(this.compiled && !force) return;
		if(this.vertexSrc != null) this.vertexString = this.vertexSrc.join("\n");
		if(this.fragmentSrc != null) this.fragmentString = this.fragmentSrc.join("\n");
		if(this.vertexString == null || this.fragmentString == null) throw new js__$Boot_HaxeError("No vertex or fragment source provided");
		this.program = openfl__$internal_renderer_opengl_shaders2_Shader.compileProgram(this.gl,this.vertexString,this.fragmentString);
		if(this.program != null) this.compiled = true;
	}
	,destroy: function() {
		if(this.program != null) this.gl.deleteProgram(this.program);
		this.compiled = false;
		this.attributes = null;
	}
	,applyData: function(shaderData,renderSession) {
		if(shaderData == null) return;
		var param;
		var u;
		var v;
		var bd;
		var $it0 = shaderData.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			u = this.getUniformLocation(key);
			param = __map_reserved[key] != null?shaderData.getReserved(key):shaderData.h[key];
			if(param == null) continue;
			v = param.value;
			bd = param.bitmap;
			if(v == null && bd == null) continue;
			var _g = param.internalType;
			switch(_g) {
			case 1:
				var _g1 = param.size;
				switch(_g1) {
				case 1:
					this.gl.uniform1i(u,v[0] | 0);
					break;
				case 2:
					this.gl.uniform2i(u,v[0] | 0,v[1] | 0);
					break;
				case 3:
					this.gl.uniform3i(u,v[0] | 0,v[1] | 0,v[2] | 0);
					break;
				case 4:
					this.gl.uniform4i(u,v[0] | 0,v[1] | 0,v[2] | 0,v[3] | 0);
					break;
				}
				break;
			case 2:
				var _g11 = param.size;
				switch(_g11) {
				case 1:
					this.gl.uniform1f(u,v[0]);
					break;
				case 2:
					this.gl.uniform2f(u,v[0],v[1]);
					break;
				case 3:
					this.gl.uniform3f(u,v[0],v[1],v[2]);
					break;
				case 4:
					this.gl.uniform4f(u,v[0],v[1],v[2],v[3]);
					break;
				}
				break;
			case 3:
				var _g12 = param.size;
				switch(_g12) {
				case 2:
					this.gl.uniformMatrix2fv(u,param.transpose,(function($this) {
						var $r;
						var array = param.value;
						var this1;
						if(array != null) this1 = new Float32Array(array); else this1 = null;
						$r = this1;
						return $r;
					}(this)));
					break;
				case 3:
					this.gl.uniformMatrix3fv(u,param.transpose,(function($this) {
						var $r;
						var array1 = param.value;
						var this2;
						if(array1 != null) this2 = new Float32Array(array1); else this2 = null;
						$r = this2;
						return $r;
					}(this)));
					break;
				case 4:
					this.gl.uniformMatrix4fv(u,param.transpose,(function($this) {
						var $r;
						var array2 = param.value;
						var this3;
						if(array2 != null) this3 = new Float32Array(array2); else this3 = null;
						$r = this3;
						return $r;
					}(this)));
					break;
				}
				break;
			case 4:
				if(bd == null || !bd.__isValid) continue;
				this.gl.activeTexture(this.gl.TEXTURE0 + renderSession.activeTextures);
				this.gl.bindTexture(this.gl.TEXTURE_2D,bd.getTexture(this.gl));
				this.gl.uniform1i(u,renderSession.activeTextures);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,param.smooth?this.gl.LINEAR:this.gl.NEAREST);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,param.smooth?this.gl.LINEAR:this.gl.NEAREST);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,param.repeatX);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,param.repeatY);
				renderSession.activeTextures++;
				break;
			default:
			}
		}
	}
	,getAttribLocation: function(attribute) {
		if(this.program == null) throw new js__$Boot_HaxeError("Shader isn't initialized");
		if(this.attributes.exists(attribute)) return this.attributes.get(attribute); else {
			var location = this.gl.getAttribLocation(this.program,attribute);
			this.attributes.set(attribute,location);
			return location;
		}
	}
	,getUniformLocation: function(uniform) {
		if(this.program == null) throw new js__$Boot_HaxeError("Shader isn't initialized");
		if(this.uniforms.exists(uniform)) return this.uniforms.get(uniform); else {
			var location = this.gl.getUniformLocation(this.program,uniform);
			this.uniforms.set(uniform,location);
			return location;
		}
	}
	,enableVertexAttribute: function(attribute,stride,offset) {
		var location = this.getAttribLocation(attribute.name);
		this.gl.enableVertexAttribArray(location);
		this.gl.vertexAttribPointer(location,attribute.components,attribute.type,attribute.normalized,stride,offset * 4);
	}
	,disableVertexAttribute: function(attribute,setDefault) {
		if(setDefault == null) setDefault = true;
		var location = this.getAttribLocation(attribute.name);
		this.gl.disableVertexAttribArray(location);
		if(setDefault) {
			var _g = attribute.components;
			switch(_g) {
			case 1:
				this.gl.vertexAttrib1fv(location,attribute.defaultValue.subarray(0,1));
				break;
			case 2:
				this.gl.vertexAttrib2fv(location,attribute.defaultValue.subarray(0,2));
				break;
			case 3:
				this.gl.vertexAttrib3fv(location,attribute.defaultValue.subarray(0,3));
				break;
			default:
				this.gl.vertexAttrib4fv(location,attribute.defaultValue.subarray(0,4));
			}
		}
	}
	,bindVertexArray: function(va) {
		var offset = 0;
		var stride = va.get_stride();
		var _g = 0;
		var _g1 = va.attributes;
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			if(attribute.enabled) {
				this.enableVertexAttribute(attribute,stride,offset);
				offset += Math.floor(attribute.components * attribute.getElementsBytes() / 4);
			} else this.disableVertexAttribute(attribute,true);
		}
	}
	,unbindVertexArray: function(va) {
		var _g = 0;
		var _g1 = va.attributes;
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			this.disableVertexAttribute(attribute,false);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_Shader
};
var openfl__$internal_renderer_opengl_shaders2_DefaultShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = openfl__$internal_renderer_opengl_shaders2_DefaultShader.VERTEX_SRC;
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform sampler2D " + "openfl_uSampler0" + ";","uniform vec4 " + "openfl_uColorMultiplier" + ";","uniform vec4 " + "openfl_uColorOffset" + ";","uniform bool " + "openfl_uUseColorTransform" + ";","varying vec2 " + "openfl_vTexCoord" + ";","varying vec4 " + "openfl_vColor" + ";","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","\tif(!" + "openfl_uUseColorTransform" + ") {","\t\treturn color * tint;","\t}","\tvec4 unmultiply;","\tif (color.a == 0.0) {","\t\tunmultiply = vec4(0.0, 0.0, 0.0, 0.0);","\t} else {","   \tunmultiply = vec4(color.rgb / color.a, color.a);","\t}","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec4 tc = texture2D(" + "openfl_uSampler0" + ", " + "openfl_vTexCoord" + ");","   gl_FragColor = colorTransform(tc, " + "openfl_vColor" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.DefaultShader"] = openfl__$internal_renderer_opengl_shaders2_DefaultShader;
openfl__$internal_renderer_opengl_shaders2_DefaultShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","DefaultShader"];
openfl__$internal_renderer_opengl_shaders2_DefaultShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_DefaultShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function(force) {
		if(force == null) force = false;
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this,force);
		this.getAttribLocation("openfl_aPosition");
		this.getAttribLocation("openfl_aTexCoord0");
		this.getAttribLocation("openfl_aColor");
		this.getUniformLocation("openfl_uProjectionMatrix");
		this.getUniformLocation("openfl_uSampler0");
		this.getUniformLocation("openfl_uColorMultiplier");
		this.getUniformLocation("openfl_uColorOffset");
		this.getUniformLocation("openfl_uUseColorTransform");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_DefaultShader
});
var openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";","attribute vec2 " + "openfl_aTexCoord0" + ";","attribute vec4 " + "openfl_aColor" + ";","uniform mat3 " + "openfl_uProjectionMatrix" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","void main(void) {","   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vTexCoord = " + "openfl_aTexCoord0" + ";","   vColor = " + "openfl_aColor" + ".bgra;","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform sampler2D " + "openfl_uSampler0" + ";","uniform vec3 " + "openfl_uColor" + ";","uniform bool " + "openfl_uUseTexture" + ";","uniform float " + "openfl_uAlpha" + ";","uniform vec4 " + "openfl_uColorMultiplier" + ";","uniform vec4 " + "openfl_uColorOffset" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","vec4 tmp;","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   if(" + "openfl_uUseTexture" + ") {","       tmp = texture2D(" + "openfl_uSampler0" + ", vTexCoord);","   } else {","       tmp = vec4(" + "openfl_uColor" + ", 1.);","   }","   gl_FragColor = colorTransform(tmp, vColor, " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader"] = openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader;
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","DrawTrianglesShader"];
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function(force) {
		if(force == null) force = false;
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this,force);
		this.getAttribLocation("openfl_aPosition");
		this.getAttribLocation("openfl_aTexCoord0");
		this.getAttribLocation("openfl_aColor");
		this.getUniformLocation("openfl_uSampler0");
		this.getUniformLocation("openfl_uProjectionMatrix");
		this.getUniformLocation("openfl_uColor");
		this.getUniformLocation("openfl_uAlpha");
		this.getUniformLocation("openfl_uUseTexture");
		this.getUniformLocation("openfl_uColorMultiplier");
		this.getUniformLocation("openfl_uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader
});
var openfl__$internal_renderer_opengl_shaders2_FillShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";","uniform mat3 " + "openfl_uTranslationMatrix" + ";","uniform mat3 " + "openfl_uProjectionMatrix" + ";","uniform vec4 " + "openfl_uColor" + ";","uniform float " + "openfl_uAlpha" + ";","uniform vec4 " + "openfl_uColorMultiplier" + ";","uniform vec4 " + "openfl_uColorOffset" + ";","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 result = color * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * " + "openfl_uTranslationMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vColor = colorTransform(" + "openfl_uColor" + ", " + "openfl_uAlpha" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.FillShader"] = openfl__$internal_renderer_opengl_shaders2_FillShader;
openfl__$internal_renderer_opengl_shaders2_FillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","FillShader"];
openfl__$internal_renderer_opengl_shaders2_FillShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_FillShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function(force) {
		if(force == null) force = false;
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this,force);
		this.getAttribLocation("openfl_aPosition");
		this.getUniformLocation("openfl_uTranslationMatrix");
		this.getUniformLocation("openfl_uProjectionMatrix");
		this.getUniformLocation("openfl_uColor");
		this.getUniformLocation("openfl_uColorMultiplier");
		this.getUniformLocation("openfl_uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_FillShader
});
var openfl__$internal_renderer_opengl_shaders2_PatternFillShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";","uniform mat3 " + "openfl_uTranslationMatrix" + ";","uniform mat3 " + "openfl_uProjectionMatrix" + ";","uniform mat3 " + "openfl_uPatternMatrix" + ";","varying vec2 vPosition;","void main(void) {","   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * " + "openfl_uTranslationMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vPosition = (" + "openfl_uPatternMatrix" + " * vec3(" + "openfl_aPosition" + ", 1)).xy;","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform float " + "openfl_uAlpha" + ";","uniform vec2 " + "openfl_uPatternTL" + ";","uniform vec2 " + "openfl_uPatternBR" + ";","uniform sampler2D " + "openfl_uSampler0" + ";","uniform vec4 " + "openfl_uColorMultiplier" + ";","uniform vec4 " + "openfl_uColorOffset" + ";","varying vec2 vPosition;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec2 pos = mix(" + "openfl_uPatternTL" + ", " + "openfl_uPatternBR" + ", vPosition);","   vec4 tcol = texture2D(" + "openfl_uSampler0" + ", pos);","   gl_FragColor = colorTransform(tcol, " + "openfl_uAlpha" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.PatternFillShader"] = openfl__$internal_renderer_opengl_shaders2_PatternFillShader;
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","PatternFillShader"];
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function(force) {
		if(force == null) force = false;
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this,force);
		this.getAttribLocation("openfl_aPosition");
		this.getUniformLocation("openfl_uTranslationMatrix");
		this.getUniformLocation("openfl_uPatternMatrix");
		this.getUniformLocation("openfl_uProjectionMatrix");
		this.getUniformLocation("openfl_uSampler0");
		this.getUniformLocation("openfl_uPatternTL");
		this.getUniformLocation("openfl_uPatternBR");
		this.getUniformLocation("openfl_uAlpha");
		this.getUniformLocation("openfl_uColorMultiplier");
		this.getUniformLocation("openfl_uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_PatternFillShader
});
var openfl__$internal_renderer_opengl_shaders2_PrimitiveShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";","attribute vec4 " + "openfl_aColor" + ";","uniform mat3 " + "openfl_uTranslationMatrix" + ";","uniform mat3 " + "openfl_uProjectionMatrix" + ";","uniform vec4 " + "openfl_uColorMultiplier" + ";","uniform vec4 " + "openfl_uColorOffset" + ";","uniform float " + "openfl_uAlpha" + ";","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 result = color * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * " + "openfl_uTranslationMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vColor = colorTransform(" + "openfl_aColor" + ", " + "openfl_uAlpha" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.PrimitiveShader"] = openfl__$internal_renderer_opengl_shaders2_PrimitiveShader;
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","PrimitiveShader"];
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function(force) {
		if(force == null) force = false;
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this,force);
		this.getAttribLocation("openfl_aPosition");
		this.getAttribLocation("openfl_aColor");
		this.getUniformLocation("openfl_uTranslationMatrix");
		this.getUniformLocation("openfl_uProjectionMatrix");
		this.getUniformLocation("openfl_uAlpha");
		this.getUniformLocation("openfl_uColorMultiplier");
		this.getUniformLocation("openfl_uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_PrimitiveShader
});
var openfl__$internal_renderer_opengl_utils_BlendModeManager = function(gl) {
	this.gl = gl;
	this.currentBlendMode = null;
};
$hxClasses["openfl._internal.renderer.opengl.utils.BlendModeManager"] = openfl__$internal_renderer_opengl_utils_BlendModeManager;
openfl__$internal_renderer_opengl_utils_BlendModeManager.__name__ = ["openfl","_internal","renderer","opengl","utils","BlendModeManager"];
openfl__$internal_renderer_opengl_utils_BlendModeManager.prototype = {
	destroy: function() {
		this.gl = null;
	}
	,setBlendMode: function(blendMode,force) {
		if(force == null) force = false;
		if(blendMode == null) {
			blendMode = openfl_display_BlendMode.NORMAL;
			force = true;
		}
		if(!force && this.currentBlendMode == blendMode) return false;
		this.currentBlendMode = blendMode;
		switch(blendMode[1]) {
		case 0:
			this.gl.blendEquation(32774);
			this.gl.blendFunc(1,1);
			break;
		case 9:
			this.gl.blendEquation(32774);
			this.gl.blendFunc(774,771);
			break;
		case 12:
			this.gl.blendEquation(32774);
			this.gl.blendFunc(1,769);
			break;
		case 14:
			this.gl.blendEquation(32779);
			this.gl.blendFunc(1,1);
			break;
		default:
			this.gl.blendEquation(32774);
			this.gl.blendFunc(1,771);
		}
		return true;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_BlendModeManager
};
var openfl__$internal_renderer_opengl_utils_DrawPath = function(makeArray) {
	if(makeArray == null) makeArray = true;
	this.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
	this.points = null;
	this.winding = 0;
	this.isRemovable = true;
	this.fillIndex = 0;
	this.line = new openfl__$internal_renderer_opengl_utils_LineStyle();
	this.fill = openfl__$internal_renderer_opengl_utils_FillType.None;
	if(makeArray) this.points = [];
};
$hxClasses["openfl._internal.renderer.opengl.utils.DrawPath"] = openfl__$internal_renderer_opengl_utils_DrawPath;
openfl__$internal_renderer_opengl_utils_DrawPath.__name__ = ["openfl","_internal","renderer","opengl","utils","DrawPath"];
openfl__$internal_renderer_opengl_utils_DrawPath.getStack = function(graphics,gl) {
	return openfl__$internal_renderer_opengl_utils_PathBuiler.build(graphics,gl);
};
openfl__$internal_renderer_opengl_utils_DrawPath.prototype = {
	update: function(line,fill,fillIndex,winding) {
		this.updateLine(line);
		this.fill = fill;
		this.fillIndex = fillIndex;
		this.winding = winding;
	}
	,updateLine: function(line) {
		this.line.width = line.width;
		this.line.color = line.color;
		if(line.alpha == null) this.line.alpha = 1; else this.line.alpha = line.alpha;
		if(line.scaleMode == null) this.line.scaleMode = openfl_display_LineScaleMode.NORMAL; else this.line.scaleMode = line.scaleMode;
		if(line.caps == null) this.line.caps = openfl_display_CapsStyle.ROUND; else this.line.caps = line.caps;
		if(line.joints == null) this.line.joints = openfl_display_JointStyle.ROUND; else this.line.joints = line.joints;
		this.line.miterLimit = line.miterLimit;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_DrawPath
};
var openfl__$internal_renderer_opengl_utils_PathBuiler = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.PathBuiler"] = openfl__$internal_renderer_opengl_utils_PathBuiler;
openfl__$internal_renderer_opengl_utils_PathBuiler.__name__ = ["openfl","_internal","renderer","opengl","utils","PathBuiler"];
openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__line = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.closePath = function() {
	var l;
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null) l = 0; else l = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length;
	if(l <= 0) return;
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type == openfl__$internal_renderer_opengl_utils_GraphicType.Polygon && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.fill != openfl__$internal_renderer_opengl_utils_FillType.None) {
		var sx = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[0];
		var sy = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[1];
		var ex = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[l - 2];
		var ey = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[l - 1];
		if(!(sx == ex && sy == ey)) openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(sx,sy);
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.endFill = function() {
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex++;
};
openfl__$internal_renderer_opengl_utils_PathBuiler.moveTo = function(x,y) {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(x);
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(y);
	openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
};
openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo = function(x,y) {
	var points = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points;
	var push_point = true;
	if(points.length > 1) {
		var lastX = points[points.length - 2];
		var lastY = points[points.length - 1];
		if(lastX == x && lastY == y) push_point = false;
	}
	if(push_point == true) {
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(x);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(y);
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.curveTo = function(cx,cy,x,y) {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
		if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
	}
	openfl__$internal_renderer_GraphicsPaths.curveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,cx,cy,x,y);
};
openfl__$internal_renderer_opengl_utils_PathBuiler.cubicCurveTo = function(cx,cy,cx2,cy2,x,y) {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
		if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
	}
	openfl__$internal_renderer_GraphicsPaths.cubicCurveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,cx,cy,cx2,cy2,x,y);
};
openfl__$internal_renderer_opengl_utils_PathBuiler.graphicDataPop = function() {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
};
openfl__$internal_renderer_opengl_utils_PathBuiler.build = function(graphics,gl) {
	var glStack = null;
	var bounds = graphics.__bounds;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths = [];
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__line = new openfl__$internal_renderer_opengl_utils_LineStyle();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex = 0;
	glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
	if(glStack == null) glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId] = new openfl__$internal_renderer_opengl_utils_GLStack(gl);
	if(!graphics.__visible || graphics.__commands.get_length() == 0 || bounds == null || bounds.width == 0 || bounds.height == 0) {
	} else {
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				c = data;
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				if(c.buffer.o[c.oPos] != null) openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.Texture(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]); else openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				break;
			case 1:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				c1 = data;
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				if(c1.buffer.f[c1.fPos] > 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.Color(c1.buffer.i[c1.iPos] & 16777215,c1.buffer.f[c1.fPos]); else openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				break;
			case 3:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c2 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				openfl__$internal_renderer_GraphicsPaths.cubicCurveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1],c2.buffer.f[c2.fPos + 2],c2.buffer.f[c2.fPos + 3],c2.buffer.f[c2.fPos + 4],c2.buffer.f[c2.fPos + 5]);
				break;
			case 4:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c3 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				openfl__$internal_renderer_GraphicsPaths.curveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3]);
				break;
			case 5:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c4 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Circle;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2]];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 6:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c5 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 8:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c6 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle(false);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 9:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c7 = data;
				var x = c7.buffer.f[c7.fPos];
				var y = c7.buffer.f[c7.fPos + 1];
				var width = c7.buffer.f[c7.fPos + 2];
				var height = c7.buffer.f[c7.fPos + 3];
				var rx = c7.buffer.f[c7.fPos + 4];
				var ry = c7.buffer.f[c7.fPos + 5];
				if(ry == -1) ry = rx;
				rx *= 0.5;
				ry *= 0.5;
				if(rx > width / 2) rx = width / 2;
				if(ry > height / 2) ry = height / 2;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle(true);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [x,y,width,height,rx,ry];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 12:
				var c8;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				c8 = data;
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				break;
			case 15:
				var c9;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				c9 = data;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line = new openfl__$internal_renderer_opengl_utils_LineStyle();
				if(c9.buffer.o[c9.oPos] == null || isNaN(c9.buffer.o[c9.oPos]) || c9.buffer.o[c9.oPos] < 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = 0; else if(c9.buffer.o[c9.oPos] == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = 1; else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = c9.buffer.o[c9.oPos];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				if(c9.buffer.o[c9.oPos + 1] == null) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.color = 0; else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.color = c9.buffer.o[c9.oPos + 1];
				if(c9.buffer.o[c9.oPos + 2] == null) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.alpha = 1; else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.alpha = c9.buffer.o[c9.oPos + 2];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.scaleMode = c9.buffer.o[c9.oPos + 4];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.caps = c9.buffer.o[c9.oPos + 5];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.joints = c9.buffer.o[c9.oPos + 6];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.miterLimit = c9.buffer.o[c9.oPos + 7];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 16:
				var c10;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c10 = data;
				openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1]);
				break;
			case 17:
				var c11;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c11 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(c11.buffer.f[c11.fPos]);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(c11.buffer.f[c11.fPos + 1]);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 11:
				var c12;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				c12 = data;
				var uvtData = c12.buffer.o[c12.oPos + 2];
				var vertices = c12.buffer.o[c12.oPos];
				var indices = c12.buffer.o[c12.oPos + 1];
				var culling = c12.buffer.o[c12.oPos + 3];
				var colors = c12.buffer.o[c12.oPos + 4];
				var blendMode = c12.buffer.i[c12.iPos];
				var isColor;
				{
					var _g2 = openfl__$internal_renderer_opengl_utils_PathBuiler.__fill;
					switch(_g2[1]) {
					case 1:
						isColor = true;
						break;
					default:
						isColor = false;
					}
				}
				if(isColor && uvtData != null) continue;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				if(uvtData == null) {
					var this1;
					this1 = new openfl_VectorData();
					var this2;
					this2 = new Array(0);
					this1.data = this2;
					this1.length = 0;
					this1.fixed = false;
					uvtData = this1;
					{
						var _g21 = openfl__$internal_renderer_opengl_utils_PathBuiler.__fill;
						switch(_g21[1]) {
						case 2:
							var b = _g21[2];
							var _g4 = 0;
							var _g3 = vertices.length / 2 | 0;
							while(_g4 < _g3) {
								var i = _g4++;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data1;
										var this3;
										this3 = new Array(uvtData.data.length + 10);
										data1 = this3;
										haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data1,0,uvtData.data.length);
										uvtData.data = data1;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i * 2] / b.width;
								}
								uvtData.length;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data2;
										var this4;
										this4 = new Array(uvtData.data.length + 10);
										data2 = this4;
										haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data2,0,uvtData.data.length);
										uvtData.data = data2;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i * 2 + 1] / b.height;
								}
								uvtData.length;
							}
							break;
						default:
						}
					}
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.DrawTriangles(vertices,indices,uvtData,culling,colors,blendMode);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 10:
				var c13;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
				c13 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex++;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath(false);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.DrawTiles(c13.buffer.ts[c13.tsPos],c13.buffer.ff[c13.ffPos],c13.buffer.b[c13.bPos],c13.buffer.i[c13.iPos],c13.buffer.o[c13.oPos],c13.buffer.i[c13.iPos + 1]);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 7:
				var c14;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_PATH;
				c14 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				switch(c14.buffer.o[c14.oPos + 2]) {
				case openfl_display_GraphicsPathWinding.EVEN_ODD:
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
					break;
				case openfl_display_GraphicsPathWinding.NON_ZERO:
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 1;
					break;
				default:
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
				}
				var command;
				var cx;
				var cy;
				var cx2;
				var cy2;
				var ax;
				var ay;
				var idx = 0;
				var _g31 = 0;
				var _g22 = c14.buffer.o[c14.oPos].length;
				while(_g31 < _g22) {
					var i1 = _g31++;
					command = c14.buffer.o[c14.oPos].data[i1];
					switch(command) {
					case 1:
						ax = c14.buffer.o[c14.oPos + 1].data[idx];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 1];
						idx += 2;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ax);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ay);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 4:
						ax = c14.buffer.o[c14.oPos + 1].data[idx + 2];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 3];
						idx += 4;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ax);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ay);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 2:
						ax = c14.buffer.o[c14.oPos + 1].data[idx];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 1];
						idx += 2;
						openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(ax,ay);
						break;
					case 5:
						ax = c14.buffer.o[c14.oPos + 1].data[idx + 2];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 3];
						idx += 4;
						openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(ax,ay);
						break;
					case 3:
						cx = c14.buffer.o[c14.oPos + 1].data[idx];
						cy = c14.buffer.o[c14.oPos + 1].data[idx + 1];
						ax = c14.buffer.o[c14.oPos + 1].data[idx + 2];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 3];
						idx += 4;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
							if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						}
						openfl__$internal_renderer_GraphicsPaths.curveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,cx,cy,ax,ay);
						break;
					case 6:
						cx = c14.buffer.o[c14.oPos + 1].data[idx];
						cy = c14.buffer.o[c14.oPos + 1].data[idx + 1];
						cx2 = c14.buffer.o[c14.oPos + 1].data[idx + 2];
						cy2 = c14.buffer.o[c14.oPos + 1].data[idx + 3];
						ax = c14.buffer.o[c14.oPos + 1].data[idx + 4];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 5];
						idx += 6;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
							if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						}
						openfl__$internal_renderer_GraphicsPaths.cubicCurveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,cx,cy,cx2,cy2,ax,ay);
						break;
					default:
					}
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
				break;
			case 18:
				var c15;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
				c15 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.OverrideMatrix(c15.buffer.o[c15.oPos]);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
		openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
		data.destroy();
	}
	graphics.__drawPaths = openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths;
	return glStack;
};
var openfl__$internal_renderer_opengl_utils_LineStyle = function() {
	this.width = 0;
	this.color = 0;
	this.alpha = 1;
	this.scaleMode = openfl_display_LineScaleMode.NORMAL;
	this.caps = openfl_display_CapsStyle.ROUND;
	this.joints = openfl_display_JointStyle.ROUND;
	this.miterLimit = 3;
};
$hxClasses["openfl._internal.renderer.opengl.utils.LineStyle"] = openfl__$internal_renderer_opengl_utils_LineStyle;
openfl__$internal_renderer_opengl_utils_LineStyle.__name__ = ["openfl","_internal","renderer","opengl","utils","LineStyle"];
openfl__$internal_renderer_opengl_utils_LineStyle.prototype = {
	__class__: openfl__$internal_renderer_opengl_utils_LineStyle
};
var openfl__$internal_renderer_opengl_utils_FillType = $hxClasses["openfl._internal.renderer.opengl.utils.FillType"] = { __ename__ : true, __constructs__ : ["None","Color","Texture","Gradient"] };
openfl__$internal_renderer_opengl_utils_FillType.None = ["None",0];
openfl__$internal_renderer_opengl_utils_FillType.None.toString = $estr;
openfl__$internal_renderer_opengl_utils_FillType.None.__enum__ = openfl__$internal_renderer_opengl_utils_FillType;
openfl__$internal_renderer_opengl_utils_FillType.Color = function(color,alpha) { var $x = ["Color",1,color,alpha]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_FillType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_FillType.Texture = function(bitmap,matrix,repeat,smooth) { var $x = ["Texture",2,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_FillType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_FillType.Gradient = ["Gradient",3];
openfl__$internal_renderer_opengl_utils_FillType.Gradient.toString = $estr;
openfl__$internal_renderer_opengl_utils_FillType.Gradient.__enum__ = openfl__$internal_renderer_opengl_utils_FillType;
var openfl__$internal_renderer_opengl_utils_FilterManager = function(gl,transparent) {
	this.transparent = transparent;
	this.filterStack = [];
	this.offsetX = 0;
	this.offsetY = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.FilterManager"] = openfl__$internal_renderer_opengl_utils_FilterManager;
openfl__$internal_renderer_opengl_utils_FilterManager.__name__ = ["openfl","_internal","renderer","opengl","utils","FilterManager"];
openfl__$internal_renderer_opengl_utils_FilterManager.prototype = {
	applyFilterPass: function(filter,filterArea,width,height) {
	}
	,begin: function(renderSession,buffer) {
		this.renderSession = renderSession;
		this.defaultShader = renderSession.shaderManager.defaultShader;
		this.width = 0;
		this.height = 0;
		this.buffer = buffer;
	}
	,destroy: function() {
		var gl = this.gl;
		this.filterStack = null;
		this.offsetX = 0;
		this.offsetY = 0;
		var _g = 0;
		var _g1 = this.texturePool;
		while(_g < _g1.length) {
			var texture = _g1[_g];
			++_g;
			texture.destroy();
		}
		this.texturePool = null;
		gl.deleteBuffer(this.vertexBuffer);
		gl.deleteBuffer(this.uvBuffer);
		gl.deleteBuffer(this.colorBuffer);
		gl.deleteBuffer(this.indexBuffer);
	}
	,initShaderBuffers: function() {
		var gl = this.gl;
		this.vertexBuffer = gl.createBuffer();
		this.uvBuffer = gl.createBuffer();
		this.colorBuffer = gl.createBuffer();
		this.indexBuffer = gl.createBuffer();
		var array = [0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		this.vertexArray = this1;
		gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.vertexArray,gl.STATIC_DRAW);
		var array1 = [0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0];
		var this2;
		if(array1 != null) this2 = new Float32Array(array1); else this2 = null;
		this.uvArray = this2;
		gl.bindBuffer(gl.ARRAY_BUFFER,this.uvBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.uvArray,gl.STATIC_DRAW);
		var array2 = [1.0,16777215,1.0,16777215,1.0,16777215,1.0,16777215];
		var this3;
		if(array2 != null) this3 = new Float32Array(array2); else this3 = null;
		this.colorArray = this3;
		gl.bindBuffer(gl.ARRAY_BUFFER,this.colorBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.colorArray,gl.STATIC_DRAW);
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,(function($this) {
			var $r;
			var array3 = [0,1,2,1,3,2];
			var this4;
			if(array3 != null) this4 = new Uint16Array(array3); else this4 = null;
			$r = this4;
			return $r;
		}(this)),gl.STATIC_DRAW);
	}
	,popFilter: function() {
	}
	,pushFilter: function(filterBlock) {
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.texturePool = [];
		this.initShaderBuffers();
	}
	,__class__: openfl__$internal_renderer_opengl_utils_FilterManager
};
var openfl__$internal_renderer_opengl_utils_GLMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.setContext(renderSession.gl);
	this.clips = [];
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLMaskManager"] = openfl__$internal_renderer_opengl_utils_GLMaskManager;
openfl__$internal_renderer_opengl_utils_GLMaskManager.__name__ = ["openfl","_internal","renderer","opengl","utils","GLMaskManager"];
openfl__$internal_renderer_opengl_utils_GLMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_opengl_utils_GLMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	destroy: function() {
		this.gl = null;
	}
	,pushRect: function(rect,transform) {
		if(rect == null) return;
		var m = new openfl_geom_Matrix(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		openfl__$internal_renderer_opengl_GLBitmap.flipMatrix(m,this.renderSession.renderer.viewport.height);
		var clip = rect.clone();
		clip.__transform(clip,m);
		if(this.currentClip != null) clip = this.currentClip.intersection(clip);
		var restartBatch = this.currentClip == null || clip.isEmpty() || this.currentClip.containsRect(clip);
		this.clips.push(clip);
		this.currentClip = clip;
		if(restartBatch) {
			this.renderSession.spriteBatch.stop();
			this.renderSession.spriteBatch.start(this.currentClip);
		}
	}
	,pushMask: function(mask) {
		this.renderSession.spriteBatch.stop();
		this.renderSession.stencilManager.pushMask(mask,this.renderSession);
		this.renderSession.spriteBatch.start(this.currentClip);
	}
	,popMask: function() {
		this.renderSession.spriteBatch.stop();
		this.renderSession.stencilManager.popMask(null,this.renderSession);
		this.renderSession.spriteBatch.start(this.currentClip);
	}
	,popRect: function() {
		this.renderSession.spriteBatch.stop();
		this.clips.pop();
		this.currentClip = this.clips[this.clips.length - 1];
		this.renderSession.spriteBatch.start(this.currentClip);
	}
	,saveState: function() {
		this.savedClip = this.currentClip;
		this.currentClip = null;
	}
	,restoreState: function() {
		this.currentClip = this.savedClip;
		this.savedClip = null;
	}
	,setContext: function(gl) {
		if(this.renderSession != null) this.renderSession.gl = gl;
		this.gl = gl;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLMaskManager
});
var openfl__$internal_renderer_opengl_utils_VertexAttribute = function(components,type,normalized,name,defaultValue) {
	if(normalized == null) normalized = false;
	this.enabled = true;
	this.normalized = false;
	this.components = components;
	this.type = type;
	this.normalized = normalized;
	this.name = name;
	if(defaultValue == null) {
		var this1;
		if(components != null) this1 = new Float32Array(components); else this1 = null;
		this.defaultValue = this1;
	} else this.defaultValue = defaultValue;
};
$hxClasses["openfl._internal.renderer.opengl.utils.VertexAttribute"] = openfl__$internal_renderer_opengl_utils_VertexAttribute;
openfl__$internal_renderer_opengl_utils_VertexAttribute.__name__ = ["openfl","_internal","renderer","opengl","utils","VertexAttribute"];
openfl__$internal_renderer_opengl_utils_VertexAttribute.prototype = {
	copy: function() {
		return new openfl__$internal_renderer_opengl_utils_VertexAttribute(this.components,this.type,this.normalized,this.name,this.defaultValue);
	}
	,getElementsBytes: function() {
		var _g = this.type;
		switch(_g) {
		case 5120:case 5121:
			return 1;
		case 5122:case 5123:
			return 2;
		default:
			return 4;
		}
	}
	,get_elements: function() {
		return Math.floor(this.components * this.getElementsBytes() / 4);
	}
	,__class__: openfl__$internal_renderer_opengl_utils_VertexAttribute
	,__properties__: {get_elements:"get_elements"}
};
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl_geom_Rectangle.prototype = {
	clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new openfl_geom_Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new openfl_geom_Rectangle();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toLimeRectangle: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl_geom_Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl_geom_Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var openfl__$internal_renderer_opengl_utils_GraphicsRenderer = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.GraphicsRenderer"] = openfl__$internal_renderer_opengl_utils_GraphicsRenderer;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.__name__ = ["openfl","_internal","renderer","opengl","utils","GraphicsRenderer"];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastVertsBuffer = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastBucketMode = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTexture = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTextureRepeat = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTextureSmooth = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildCircle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var rx = rectData[2];
	var ry;
	if(rectData.length == 3) ry = rx; else ry = rectData[3];
	if(path.type == openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse) {
		rx /= 2;
		ry /= 2;
		x += rx;
		y += ry;
	}
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var totalSegs = 40;
	var seg = Math.PI * 2 / totalSegs;
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vertPos = verts.length / 2 | 0;
		indices.push(vertPos);
		var _g1 = 0;
		var _g = totalSegs + 1;
		while(_g1 < _g) {
			var i = _g1++;
			verts.push(x);
			verts.push(y);
			verts.push(x + Math.sin(seg * i) * rx);
			verts.push(y + Math.cos(seg * i) * ry);
			indices.push(vertPos++);
			indices.push(vertPos++);
		}
		indices.push(vertPos - 1);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [];
		openfl__$internal_renderer_GraphicsPaths.ellipse(path.points,x,y,rx,ry,totalSegs);
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildComplexPoly = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var bucket = null;
	if(path.points.length >= 6) {
		var points = path.points.slice();
		if(localCoords) {
			var _g1 = 0;
			var _g = points.length / 2 | 0;
			while(_g1 < _g) {
				var i = _g1++;
				points[i * 2] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
				points[i * 2 + 1] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			}
		}
		bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
		var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
		fill.drawMode = glStack.gl.TRIANGLE_FAN;
		fill.verts = points;
		var indices = fill.indices;
		var length = points.length / 2 | 0;
		var _g2 = 0;
		while(_g2 < length) {
			var i1 = _g2++;
			indices.push(i1);
		}
	}
	if(path.line.width > 0) {
		if(bucket == null) bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket,localCoords);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine = function(path,bucket,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points;
	if(points.length == 0) return;
	var line = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Line);
	if(localCoords) {
		var _g1 = 0;
		var _g = points.length / 2 | 0;
		while(_g1 < _g) {
			var i = _g1++;
			points[i * 2] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			points[i * 2 + 1] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
		}
	}
	var firstPoint = new openfl_geom_Point(points[0],points[1]);
	var lastPoint = new openfl_geom_Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
	if(firstPoint.x == lastPoint.x && firstPoint.y == lastPoint.y) {
		points = points.slice();
		points.pop();
		points.pop();
		lastPoint = new openfl_geom_Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
		var midPointX = lastPoint.x + (firstPoint.x - lastPoint.x) * 0.5;
		var midPointY = lastPoint.y + (firstPoint.y - lastPoint.y) * 0.5;
		points.unshift(midPointY);
		points.unshift(midPointX);
		points.push(midPointX);
		points.push(midPointY);
	}
	var verts = line.verts;
	var indices = line.indices;
	var length = points.length / 2 | 0;
	var indexCount = points.length;
	var indexStart = verts.length / 6 | 0;
	var width = path.line.width / 2;
	var color = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgb(path.line.color);
	var alpha = path.line.alpha;
	var r = color[0];
	var g = color[1];
	var b = color[2];
	var px;
	var py;
	var p1x;
	var p1y;
	var p2x;
	var p2y;
	var p3x;
	var p3y;
	var perpx;
	var perpy;
	var perp2x;
	var perp2y;
	var perp3x;
	var perp3y;
	var a1;
	var b1;
	var c1;
	var a2;
	var b2;
	var c2;
	var denom;
	var pdist;
	var dist;
	p1x = points[0];
	p1y = points[1];
	p2x = points[2];
	p2y = points[3];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p1x - perpx);
	verts.push(p1y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p1x + perpx);
	verts.push(p1y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	var _g11 = 1;
	var _g2 = length - 1;
	while(_g11 < _g2) {
		var i1 = _g11++;
		p1x = points[(i1 - 1) * 2];
		p1y = points[(i1 - 1) * 2 + 1];
		p2x = points[i1 * 2];
		p2y = points[i1 * 2 + 1];
		p3x = points[(i1 + 1) * 2];
		p3y = points[(i1 + 1) * 2 + 1];
		perpx = -(p1y - p2y);
		perpy = p1x - p2x;
		dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
		perpx = perpx / dist;
		perpy = perpy / dist;
		perpx = perpx * width;
		perpy = perpy * width;
		perp2x = -(p2y - p3y);
		perp2y = p2x - p3x;
		dist = Math.sqrt(Math.abs(perp2x * perp2x + perp2y * perp2y));
		perp2x = perp2x / dist;
		perp2y = perp2y / dist;
		perp2x = perp2x * width;
		perp2y = perp2y * width;
		a1 = -perpy + p1y - (-perpy + p2y);
		b1 = -perpx + p2x - (-perpx + p1x);
		c1 = (-perpx + p1x) * (-perpy + p2y) - (-perpx + p2x) * (-perpy + p1y);
		a2 = -perp2y + p3y - (-perp2y + p2y);
		b2 = -perp2x + p2x - (-perp2x + p3x);
		c2 = (-perp2x + p3x) * (-perp2y + p2y) - (-perp2x + p2x) * (-perp2y + p3y);
		denom = a1 * b2 - a2 * b1;
		if(Math.abs(denom) < 0.1) {
			denom += 10.1;
			verts.push(p2x - perpx);
			verts.push(p2y - perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perpx);
			verts.push(p2y + perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			continue;
		}
		px = (b1 * c2 - b2 * c1) / denom;
		py = (a2 * c1 - a1 * c2) / denom;
		pdist = (px - p2x) * (px - p2x) + (py - p2y) + (py - p2y);
		if(pdist > 19600) {
			perp3x = perpx - perp2x;
			perp3y = perpy - perp2y;
			dist = Math.sqrt(Math.abs(perp3x * perp3x + perp3y * perp3y));
			perp3x = perp3x / dist;
			perp3y = perp3y / dist;
			perp3x = perp3x * width;
			perp3y = perp3y * width;
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perp3x);
			verts.push(p2y + perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			indexCount++;
		} else {
			verts.push(px);
			verts.push(py);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - (px - p2x));
			verts.push(p2y - (py - p2y));
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
		}
	}
	p1x = points[(length - 2) * 2];
	p1y = points[(length - 2) * 2 + 1];
	p2x = points[(length - 1) * 2];
	p2y = points[(length - 1) * 2 + 1];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	if(!isFinite(dist)) haxe_Log.trace(perpx * perpx + perpy * perpy,{ fileName : "GraphicsRenderer.hx", lineNumber : 407, className : "openfl._internal.renderer.opengl.utils.GraphicsRenderer", methodName : "buildLine"});
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p2x - perpx);
	verts.push(p2y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p2x + perpx);
	verts.push(p2y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	indices.push(indexStart);
	var _g3 = 0;
	while(_g3 < indexCount) {
		var i2 = _g3++;
		indices.push(indexStart++);
	}
	indices.push(indexStart - 1);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildPoly = function(path,glStack) {
	if(path.points.length < 6) return;
	var points = path.points;
	var l = points.length;
	var sx = points[0];
	var sy = points[1];
	var ex = points[l - 2];
	var ey = points[l - 1];
	if(sx != ex || sy != ey) {
		points.push(sx);
		points.push(sy);
	}
	var length = points.length / 2 | 0;
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	var verts = fill.verts;
	var indices = fill.indices;
	if(fill != null) {
		var triangles = [];
		openfl__$internal_renderer_PolyK.triangulate(triangles,points);
		var vertPos = verts.length / 2;
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vertPos | 0);
			indices.push(triangles[i] + vertPos | 0);
			indices.push(triangles[i + 1] + vertPos | 0);
			indices.push(triangles[i + 2] + vertPos | 0);
			indices.push(triangles[i + 2] + vertPos | 0);
			i += 3;
		}
		var _g = 0;
		while(_g < length) {
			var i1 = _g++;
			verts.push(points[i1 * 2]);
			verts.push(points[i1 * 2 + 1]);
		}
	}
	if(path.line.width > 0) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var width = rectData[2];
	var height = rectData[3];
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vertPos = verts.length / 2 | 0;
		verts.push(x);
		verts.push(y);
		verts.push(x + width);
		verts.push(y);
		verts.push(x);
		verts.push(y + height);
		verts.push(x + width);
		verts.push(y + height);
		indices.push(vertPos);
		indices.push(vertPos);
		indices.push(vertPos + 1);
		indices.push(vertPos + 2);
		indices.push(vertPos + 3);
		indices.push(vertPos + 3);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [x,y,x + width,y,x + width,y + height,x,y + height,x,y];
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRoundedRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points.slice();
	var x = points[0];
	var y = points[1];
	var width = points[2];
	var height = points[3];
	var rx = points[4];
	var ry = points[5];
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var recPoints = [];
	openfl__$internal_renderer_GraphicsPaths.roundRectangle(recPoints,x,y,width,height,rx,ry);
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vecPos = verts.length / 2;
		var triangles = [];
		openfl__$internal_renderer_PolyK.triangulate(triangles,recPoints);
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i + 1] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			i += 3;
		}
		i = 0;
		while(i < recPoints.length) {
			verts.push(recPoints[i]);
			verts.push(recPoints[++i]);
			i++;
		}
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = recPoints;
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTriangles = function(path,object,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var args = path.type.slice(2);
	var vertices = args[0];
	var indices = args[1];
	var uvtData = args[2];
	var culling = args[3];
	var colors = args[4];
	var blendMode = args[5];
	var a;
	var b;
	var c;
	var d;
	var tx;
	var ty;
	if(localCoords) {
		a = 1.0;
		b = 0.0;
		c = 0.0;
		d = 1.0;
		tx = 0.0;
		ty = 0.0;
	} else {
		a = object.__worldTransform.a;
		b = object.__worldTransform.b;
		c = object.__worldTransform.c;
		d = object.__worldTransform.d;
		tx = object.__worldTransform.tx;
		ty = object.__worldTransform.ty;
	}
	var hasColors = colors != null && colors.length > 0;
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	var colorAttrib = fill.vertexArray.attributes[2];
	colorAttrib.enabled = hasColors;
	var array = [1,1,1,1];
	var this1;
	if(array != null) this1 = new Float32Array(array); else this1 = null;
	colorAttrib.defaultValue = this1;
	fill.rawVerts = true;
	fill.glLength = indices.length;
	fill.stride = Std["int"](fill.vertexArray.get_stride() / 4);
	var vertsLength = fill.glLength * fill.stride;
	var verts;
	if(fill.glVerts == null || fill.glVerts.length < vertsLength) {
		var this2;
		if(vertsLength != null) this2 = new Float32Array(vertsLength); else this2 = null;
		verts = this2;
		fill.glVerts = verts;
	} else verts = fill.glVerts;
	var glColors;
	var buffer = verts.buffer;
	var this3;
	if(buffer != null) this3 = new Uint32Array(buffer,0); else this3 = null;
	glColors = this3;
	var v0 = 0;
	var v1 = 0;
	var v2 = 0;
	var i0 = 0;
	var i1 = 0;
	var i2 = 0;
	var x0 = 0.0;
	var y0 = 0.0;
	var x1 = 0.0;
	var y1 = 0.0;
	var x2 = 0.0;
	var y2 = 0.0;
	var idx = 0;
	var _g1 = 0;
	var _g = indices.length / 3 | 0;
	while(_g1 < _g) {
		var i = _g1++;
		i0 = indices.data[i * 3];
		i1 = indices.data[i * 3 + 1];
		i2 = indices.data[i * 3 + 2];
		v0 = i0 * 2;
		v1 = i1 * 2;
		v2 = i2 * 2;
		x0 = vertices.data[v0];
		y0 = vertices.data[v0 + 1];
		x1 = vertices.data[v1];
		y1 = vertices.data[v1 + 1];
		x2 = vertices.data[v2];
		y2 = vertices.data[v2 + 1];
		if(localCoords) {
			x0 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y0 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			x1 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y1 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			x2 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y2 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
		}
		switch(culling[1]) {
		case 2:
			if(!((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0)) continue;
			break;
		case 0:
			if((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0) continue;
			break;
		default:
		}
		var idx1 = idx++;
		verts[idx1] = a * x0 + c * y0 + tx;
		var idx2 = idx++;
		verts[idx2] = b * x0 + d * y0 + ty;
		var idx3 = idx++;
		verts[idx3] = uvtData.data[v0];
		var idx4 = idx++;
		verts[idx4] = uvtData.data[v0 + 1];
		if(hasColors) {
			var idx5 = idx++;
			glColors[idx5] = colors.data[i0];
		}
		var idx6 = idx++;
		verts[idx6] = a * x1 + c * y1 + tx;
		var idx7 = idx++;
		verts[idx7] = b * x1 + d * y1 + ty;
		var idx8 = idx++;
		verts[idx8] = uvtData.data[v1];
		var idx9 = idx++;
		verts[idx9] = uvtData.data[v1 + 1];
		if(hasColors) {
			var idx10 = idx++;
			glColors[idx10] = colors.data[i1];
		}
		var idx11 = idx++;
		verts[idx11] = a * x2 + c * y2 + tx;
		var idx12 = idx++;
		verts[idx12] = b * x2 + d * y2 + ty;
		var idx13 = idx++;
		verts[idx13] = uvtData.data[v2];
		var idx14 = idx++;
		verts[idx14] = uvtData.data[v2 + 1];
		if(hasColors) {
			var idx15 = idx++;
			glColors[idx15] = colors.data[i2];
		}
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTiles = function(path,glStack) {
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.quadraticBezierCurve = function(fromX,fromY,cpX,cpY,toX,toY) {
	var xa;
	var ya;
	var xb;
	var yb;
	var x;
	var y;
	var n = 20;
	var points = [];
	var getPt = function(n1,n2,perc) {
		var diff = n2 - n1;
		return n1 + diff * perc;
	};
	var j = 0.0;
	var _g1 = 0;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		j = i / n;
		xa = getPt(fromX,cpX,j);
		ya = getPt(fromY,cpY,j);
		xb = getPt(cpX,toX,j);
		yb = getPt(cpY,toY,j);
		x = getPt(xa,xb,j);
		y = getPt(ya,yb,j);
		points.push(x);
		points.push(y);
	}
	return points;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render = function(object,renderSession) {
	var graphics = object.__graphics;
	var bounds = graphics.__bounds;
	var spritebatch = renderSession.spriteBatch;
	var dirty = graphics.__dirty;
	if(!graphics.__visible || graphics.__commands.get_length() == 0 || bounds == null || bounds.width == 0 || bounds.height == 0) {
		graphics.__glStack.splice(0,graphics.__glStack.length);
		return;
	}
	if(dirty) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics(object,object.__graphics,renderSession.gl,object.get_cacheAsBitmap());
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderGraphics(object,renderSession,false);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderGraphics = function(object,renderSession,localCoords) {
	if(localCoords == null) localCoords = false;
	var graphics = object.__graphics;
	var gl = renderSession.gl;
	var glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
	if(glStack == null) return;
	var bucket;
	var translationMatrix;
	if(localCoords) translationMatrix = openfl_geom_Matrix.__identity; else translationMatrix = object.__worldTransform;
	var clipRect = renderSession.spriteBatch.clipRect;
	var batchDrawing = renderSession.spriteBatch.drawing;
	batchDrawing = renderSession.spriteBatch.drawing;
	var _g1 = 0;
	var _g = glStack.buckets.length;
	while(_g1 < _g) {
		var i = _g1++;
		batchDrawing = renderSession.spriteBatch.drawing;
		if(batchDrawing && !localCoords) renderSession.spriteBatch.finish();
		renderSession.blendModeManager.setBlendMode(object.__blendMode);
		if(clipRect != null) {
			gl.enable(gl.SCISSOR_TEST);
			gl.scissor(Math.floor(clipRect.x),Math.floor(clipRect.y),Math.floor(clipRect.width),Math.floor(clipRect.height));
		}
		bucket = glStack.buckets[i];
		var _g2 = bucket.mode;
		switch(_g2[1]) {
		case 1:case 2:
			renderSession.stencilManager.pushBucket(bucket,renderSession,translationMatrix.toArray(true));
			var shader = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader(bucket,renderSession,object,translationMatrix.toArray(true));
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderFill(bucket,shader,renderSession);
			renderSession.stencilManager.popBucket(object,bucket,renderSession);
			break;
		case 5:
			var shader1 = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader(bucket,renderSession,object,null);
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderDrawTriangles(bucket,shader1,renderSession);
			break;
		case 6:
			if(!batchDrawing) renderSession.spriteBatch.begin(renderSession,clipRect);
			var args = bucket.graphicType.slice(2);
			renderSession.spriteBatch.renderTiles(object,args[0],args[1],args[2],args[3],args[4],args[5]);
			renderSession.spriteBatch.finish();
			break;
		default:
		}
		var ct = object.__worldColorTransform;
		var _g21 = 0;
		var _g3 = bucket.lines;
		while(_g21 < _g3.length) {
			var line = _g3[_g21];
			++_g21;
			if(line != null && line.verts.length > 0) {
				var shader2 = renderSession.shaderManager.primitiveShader;
				renderSession.shaderManager.setShader(shader2);
				gl.uniformMatrix3fv(shader2.getUniformLocation("openfl_uTranslationMatrix"),false,translationMatrix.toArray(true));
				gl.uniformMatrix3fv(shader2.getUniformLocation("openfl_uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
				gl.uniform1f(shader2.getUniformLocation("openfl_uAlpha"),1);
				gl.uniform4f(shader2.getUniformLocation("openfl_uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,ct.alphaMultiplier);
				gl.uniform4f(shader2.getUniformLocation("openfl_uColorOffset"),ct.redOffset / 255,ct.greenOffset / 255,ct.blueOffset / 255,ct.alphaOffset / 255);
				line.vertexArray.bind();
				shader2.bindVertexArray(line.vertexArray);
				gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,line.indexBuffer);
				gl.drawElements(gl.TRIANGLE_STRIP,line.indices.length,gl.UNSIGNED_SHORT,0);
			}
		}
		if(clipRect != null) gl.disable(gl.SCISSOR_TEST);
		batchDrawing = renderSession.spriteBatch.drawing;
		if(!batchDrawing && !localCoords) renderSession.spriteBatch.begin(renderSession,clipRect);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics = function(object,graphics,gl,localCoords) {
	if(localCoords == null) localCoords = false;
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectPosition.setTo(object.get_x(),object.get_y());
	if(graphics.__bounds == null) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds = new openfl_geom_Rectangle(); else openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.copyFrom(graphics.__bounds);
	var glStack = null;
	if(graphics.__dirty) glStack = openfl__$internal_renderer_opengl_utils_DrawPath.getStack(graphics,gl);
	graphics.set___dirty(false);
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var data = _g1[_g];
		++_g;
		data.reset();
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool.push(data);
	}
	glStack.reset();
	var _g11 = glStack.lastIndex;
	var _g2 = graphics.__drawPaths.length;
	while(_g11 < _g2) {
		var i = _g11++;
		var path = graphics.__drawPaths[i];
		{
			var _g21 = path.type;
			switch(_g21[1]) {
			case 0:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildComplexPoly(path,glStack,localCoords);
				break;
			case 1:
				var rounded = _g21[2];
				if(rounded) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRoundedRectangle(path,glStack,localCoords); else openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRectangle(path,glStack,localCoords);
				break;
			case 2:case 3:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildCircle(path,glStack,localCoords);
				break;
			case 4:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTriangles(path,object,glStack,localCoords);
				break;
			case 5:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
				break;
			case 6:
				var m = _g21[2];
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix = m;
				break;
			}
		}
		glStack.lastIndex++;
	}
	var _g3 = 0;
	var _g12 = glStack.buckets;
	while(_g3 < _g12.length) {
		var bucket = _g12[_g3];
		++_g3;
		if(bucket.uploadTileBuffer) bucket.uploadTile(Math.ceil(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_left()),Math.ceil(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_top()),Math.floor(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_right()),Math.floor(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_bottom()));
		bucket.optimize();
	}
	glStack.upload();
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket = function(path,glStack) {
	var bucket = null;
	{
		var _g = path.fill;
		switch(_g[1]) {
		case 1:
			var a = _g[3];
			var c = _g[2];
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.Fill);
			if(c == null) bucket.color = [1,1,1]; else bucket.color = [(c >> 16 & 255) / 255,(c >> 8 & 255) / 255,(c & 255) / 255];
			bucket.color[3] = a;
			bucket.uploadTileBuffer = true;
			break;
		case 2:
			var s = _g[5];
			var r = _g[4];
			var m = _g[3];
			var b = _g[2];
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill);
			bucket.bitmap = b;
			bucket.textureRepeat = r;
			bucket.textureSmooth = s;
			bucket.texture = b.getTexture(glStack.gl);
			bucket.uploadTileBuffer = true;
			var pMatrix;
			if(m == null) pMatrix = new openfl_geom_Matrix(); else pMatrix = new openfl_geom_Matrix(m.a,m.b,m.c,m.d,m.tx,m.ty);
			pMatrix.invert();
			pMatrix.scale(1 / b.width,1 / b.height);
			var tx = pMatrix.tx;
			var ty = pMatrix.ty;
			pMatrix.tx = 0;
			pMatrix.ty = 0;
			bucket.textureTL.x = tx;
			bucket.textureTL.y = ty;
			bucket.textureBR.x = tx + 1;
			bucket.textureBR.y = ty + 1;
			bucket.textureMatrix = pMatrix;
			break;
		default:
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.Line);
			bucket.uploadTileBuffer = false;
		}
	}
	{
		var _g1 = path.type;
		switch(_g1[1]) {
		case 4:
			bucket.mode = openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles;
			bucket.uploadTileBuffer = false;
			break;
		case 5:
			bucket.mode = openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles;
			bucket.uploadTileBuffer = false;
			break;
		default:
		}
	}
	bucket.graphicType = path.type;
	bucket.overrideMatrix = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix;
	return bucket;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.getBucket = function(glStack,mode) {
	var b = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool.pop();
	if(b == null) b = new openfl__$internal_renderer_opengl_utils_GLBucket(glStack.gl);
	b.mode = mode;
	glStack.buckets.push(b);
	return b;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket = function(fillIndex,glStack,mode) {
	var bucket = null;
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.fillIndex == fillIndex) {
			bucket = b;
			break;
		}
	}
	if(bucket == null) bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.getBucket(glStack,mode);
	bucket.dirty = true;
	bucket.fillIndex = fillIndex;
	return bucket;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader = function(bucket,renderSession,object,translationMatrix) {
	var gl = renderSession.gl;
	var shader = null;
	var _g = bucket.mode;
	switch(_g[1]) {
	case 1:
		shader = renderSession.shaderManager.fillShader;
		break;
	case 2:
		shader = renderSession.shaderManager.patternFillShader;
		break;
	case 5:
		shader = renderSession.shaderManager.drawTrianglesShader;
		break;
	default:
		shader = null;
	}
	if(shader == null) return null;
	var newShader = renderSession.shaderManager.setShader(shader);
	gl.uniform1f(shader.getUniformLocation("openfl_uAlpha"),object.__worldAlpha);
	gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
	var ct = object.__worldColorTransform;
	gl.uniform4f(shader.getUniformLocation("openfl_uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,ct.alphaMultiplier);
	gl.uniform4f(shader.getUniformLocation("openfl_uColorOffset"),ct.redOffset / 255,ct.greenOffset / 255,ct.blueOffset / 255,ct.alphaOffset / 255);
	var _g1 = bucket.mode;
	switch(_g1[1]) {
	case 1:
		gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uTranslationMatrix"),false,translationMatrix);
		gl.uniform4fv(shader.getUniformLocation("openfl_uColor"),(function($this) {
			var $r;
			var array = bucket.color;
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
		break;
	case 2:
		gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uTranslationMatrix"),false,translationMatrix);
		gl.uniform2f(shader.getUniformLocation("openfl_uPatternTL"),bucket.textureTL.x,bucket.textureTL.y);
		gl.uniform2f(shader.getUniformLocation("openfl_uPatternBR"),bucket.textureBR.x,bucket.textureBR.y);
		gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uPatternMatrix"),false,bucket.textureMatrix.toArray(true));
		break;
	case 5:
		if(bucket.texture != null) gl.uniform1i(shader.getUniformLocation("openfl_uUseTexture"),1); else {
			gl.uniform1i(shader.getUniformLocation("openfl_uUseTexture"),0);
			gl.uniform4fv(shader.getUniformLocation("openfl_uColor"),(function($this) {
				var $r;
				var array1 = bucket.color;
				var this2;
				if(array1 != null) this2 = new Float32Array(array1); else this2 = null;
				$r = this2;
				return $r;
			}(this)));
		}
		break;
	default:
	}
	return shader;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderFill = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	if(bucket.mode == openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill && bucket.texture != null) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture(gl,bucket);
	gl.bindBuffer(gl.ARRAY_BUFFER,bucket.tileBuffer);
	gl.vertexAttribPointer(shader.getAttribLocation("openfl_aPosition"),4,gl.SHORT,false,0,0);
	gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderDrawTriangles = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	var _g = 0;
	var _g1 = bucket.fills;
	while(_g < _g1.length) {
		var fill = _g1[_g];
		++_g;
		if(fill.available) continue;
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture(gl,bucket);
		fill.vertexArray.bind();
		shader.bindVertexArray(fill.vertexArray);
		gl.drawArrays(gl.TRIANGLES,fill.glStart,fill.glLength);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture = function(gl,bucket) {
	gl.bindTexture(gl.TEXTURE_2D,bucket.texture);
	if(bucket.textureRepeat && bucket.bitmap.image.get_powerOfTwo()) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.REPEAT);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	}
	if(bucket.textureSmooth) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgb = function(hex) {
	if(hex == null) return [1,1,1]; else return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255];
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgba = function(hex) {
	if(hex == null) return [1,1,1,1]; else return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255,(hex >> 24 & 255) / 255];
};
var openfl__$internal_renderer_opengl_utils_GLStack = function(gl) {
	this.lastIndex = 0;
	this.gl = gl;
	this.buckets = [];
	this.lastIndex = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLStack"] = openfl__$internal_renderer_opengl_utils_GLStack;
openfl__$internal_renderer_opengl_utils_GLStack.__name__ = ["openfl","_internal","renderer","opengl","utils","GLStack"];
openfl__$internal_renderer_opengl_utils_GLStack.prototype = {
	reset: function() {
		this.buckets = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		var _g = 0;
		var _g1 = this.buckets;
		while(_g < _g1.length) {
			var bucket = _g1[_g];
			++_g;
			if(bucket.dirty) bucket.upload();
		}
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLStack
};
var openfl__$internal_renderer_opengl_utils_GLBucket = function(gl) {
	this.uploadTileBuffer = true;
	this.textureSmooth = true;
	this.textureRepeat = false;
	this.lines = [];
	this.fills = [];
	this.fillIndex = -1;
	this.gl = gl;
	this.color = [0,0,0];
	this.lastIndex = 0;
	this.alpha = 1;
	this.dirty = true;
	this.mode = openfl__$internal_renderer_opengl_utils_BucketMode.Fill;
	this.textureMatrix = new openfl_geom_Matrix();
	this.textureTL = new openfl_geom_Point();
	this.textureBR = new openfl_geom_Point(1,1);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucket"] = openfl__$internal_renderer_opengl_utils_GLBucket;
openfl__$internal_renderer_opengl_utils_GLBucket.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucket"];
openfl__$internal_renderer_opengl_utils_GLBucket.prototype = {
	getData: function(type) {
		var data;
		switch(type[1]) {
		case 1:
			data = this.fills;
			break;
		default:
			data = this.lines;
		}
		var result = null;
		var remove = false;
		var _g = 0;
		while(_g < data.length) {
			var d = data[_g];
			++_g;
			if(d.available) {
				result = d;
				remove = true;
				break;
			}
		}
		if(result == null) result = new openfl__$internal_renderer_opengl_utils_GLBucketData(this.gl);
		result.available = false;
		result.parent = this;
		result.type = type;
		if(remove) HxOverrides.remove(data,result);
		data.push(result);
		switch(type[1]) {
		case 1:
			var _g1 = this.mode;
			switch(_g1[1]) {
			case 1:case 2:
				result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.fillVertexAttributes;
				break;
			case 5:
				result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.drawTrianglesVertexAttributes.slice();
				result.vertexArray.attributes[2] = result.vertexArray.attributes[2].copy();
				break;
			default:
			}
			break;
		case 0:
			result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.primitiveVertexAttributes;
			break;
		}
		return result;
	}
	,optimize: function() {
		var _g = this;
		var data = this.lines;
		if(data.length > 1) {
			var result = [];
			var tmp = null;
			var last = null;
			var idx = 0;
			var vi = 0;
			var ii = 0;
			var before = data.length;
			var _g1 = 0;
			while(_g1 < data.length) {
				var d = data[_g1];
				++_g1;
				if(d.available || d.rawVerts || d.rawIndices) {
					if(tmp != null) {
						result.push(tmp);
						tmp = null;
					}
					result.push(d);
					last = d;
					continue;
				}
				if(last == null || last.drawMode == d.drawMode) {
					if(tmp == null) tmp = d; else {
						vi = tmp.verts.length;
						ii = tmp.indices.length;
						var _g2 = 0;
						var _g11 = d.verts.length;
						while(_g2 < _g11) {
							var j = _g2++;
							tmp.verts[j + vi] = d.verts[j];
						}
						var _g21 = 0;
						var _g12 = d.indices.length;
						while(_g21 < _g12) {
							var j1 = _g21++;
							tmp.indices[j1 + ii] = d.indices[j1] + idx;
						}
					}
					idx = tmp.indices[tmp.indices.length - 1] + 1;
					last = d;
				} else {
					if(tmp != null) {
						result.push(tmp);
						tmp = null;
					}
					result.push(d);
					last = d;
					continue;
				}
			}
			if(result.length == 0 && tmp != null) result.push(tmp);
			if(result.length > 0) switch(openfl__$internal_renderer_opengl_utils_BucketDataType.Line[1]) {
			case 1:
				_g.fills = result;
				break;
			default:
				_g.lines = result;
			}
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.fills;
		while(_g < _g1.length) {
			var fill = _g1[_g];
			++_g;
			fill.reset();
		}
		var _g2 = 0;
		var _g11 = this.lines;
		while(_g2 < _g11.length) {
			var line = _g11[_g2];
			++_g2;
			line.reset();
		}
		this.fillIndex = -1;
		this.uploadTileBuffer = true;
		this.graphicType = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
	}
	,uploadTile: function(x,y,w,h) {
		if(this.tileBuffer == null) this.tileBuffer = this.gl.createBuffer();
		this.tile = [x,y,0,0,w,y,1,0,x,h,0,1,w,h,1,1];
		var array = this.tile;
		var this1;
		if(array != null) this1 = new Int16Array(array); else this1 = null;
		this.glTile = this1;
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.tileBuffer);
		this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glTile,this.gl.STATIC_DRAW);
	}
	,upload: function() {
		if(this.mode != openfl__$internal_renderer_opengl_utils_BucketMode.Line) {
			var _g = 0;
			var _g1 = this.fills;
			while(_g < _g1.length) {
				var fill = _g1[_g];
				++_g;
				if(!fill.available) fill.upload();
			}
		}
		var _g2 = 0;
		var _g11 = this.lines;
		while(_g2 < _g11.length) {
			var line = _g11[_g2];
			++_g2;
			if(!line.available) line.upload();
		}
		this.dirty = false;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLBucket
};
var openfl__$internal_renderer_opengl_utils_GLBucketData = function(gl) {
	this.available = false;
	this.rawIndices = false;
	this.stride = 0;
	this.rawVerts = false;
	this.lastVertsSize = 0;
	this.glStart = 0;
	this.glLength = 0;
	this.gl = gl;
	this.drawMode = gl.TRIANGLE_STRIP;
	this.verts = [];
	this.indices = [];
	this.vertexArray = new openfl__$internal_renderer_opengl_utils_VertexArray([]);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucketData"] = openfl__$internal_renderer_opengl_utils_GLBucketData;
openfl__$internal_renderer_opengl_utils_GLBucketData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucketData"];
openfl__$internal_renderer_opengl_utils_GLBucketData.prototype = {
	reset: function() {
		this.available = true;
		this.verts = [];
		this.indices = [];
		this.glLength = 0;
		this.glStart = 0;
		this.stride = 0;
		this.rawVerts = false;
		this.rawIndices = false;
		this.drawMode = this.gl.TRIANGLE_STRIP;
	}
	,upload: function() {
		if(this.rawVerts && this.glVerts != null && this.glVerts.length > 0 || this.verts.length > 0) {
			if(!this.rawVerts) {
				var array = this.verts;
				var this1;
				if(array != null) this1 = new Float32Array(array); else this1 = null;
				this.glVerts = this1;
			}
			this.vertexArray.buffer = this.glVerts.buffer;
			if(this.glVerts.length <= this.lastVertsSize) {
				this.vertexArray.bind();
				var end = this.glLength * this.stride;
				if(this.glLength > 0 && this.lastVertsSize > end) {
					var view = this.glVerts.subarray(0,end);
					this.vertexArray.upload(view);
				} else this.vertexArray.upload(this.glVerts);
			} else {
				this.vertexArray.setContext(this.gl,this.glVerts);
				this.lastVertsSize = this.glVerts.length;
			}
		}
		if(this.glLength == 0 && (this.rawIndices && this.glIndices != null && this.glIndices.length > 0 || this.indices.length > 0)) {
			if(this.indexBuffer == null) this.indexBuffer = this.gl.createBuffer();
			if(!this.rawIndices) {
				var array1 = this.indices;
				var this2;
				if(array1 != null) this2 = new Uint16Array(array1); else this2 = null;
				this.glIndices = this2;
			}
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
			this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STREAM_DRAW);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLBucketData
};
var openfl__$internal_renderer_opengl_utils_BucketMode = $hxClasses["openfl._internal.renderer.opengl.utils.BucketMode"] = { __ename__ : true, __constructs__ : ["None","Fill","PatternFill","Line","PatternLine","DrawTriangles","DrawTiles"] };
openfl__$internal_renderer_opengl_utils_BucketMode.None = ["None",0];
openfl__$internal_renderer_opengl_utils_BucketMode.None.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.None.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.Fill = ["Fill",1];
openfl__$internal_renderer_opengl_utils_BucketMode.Fill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.Fill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill = ["PatternFill",2];
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.Line = ["Line",3];
openfl__$internal_renderer_opengl_utils_BucketMode.Line.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.Line.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine = ["PatternLine",4];
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles = ["DrawTriangles",5];
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles = ["DrawTiles",6];
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
var openfl__$internal_renderer_opengl_utils_BucketDataType = $hxClasses["openfl._internal.renderer.opengl.utils.BucketDataType"] = { __ename__ : true, __constructs__ : ["Line","Fill"] };
openfl__$internal_renderer_opengl_utils_BucketDataType.Line = ["Line",0];
openfl__$internal_renderer_opengl_utils_BucketDataType.Line.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketDataType.Line.__enum__ = openfl__$internal_renderer_opengl_utils_BucketDataType;
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill = ["Fill",1];
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketDataType;
var openfl__$internal_renderer_opengl_utils_GLGraphicsData = function(gl) {
	this.indices = [];
	this.data = [];
	this.lastIndex = 0;
	this.mode = 0;
	this.dirty = true;
	this.alpha = 1.0;
	this.tint = [1.0,1.0,1.0];
	this.gl = gl;
	this.dataBuffer = gl.createBuffer();
	this.indexBuffer = gl.createBuffer();
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLGraphicsData"] = openfl__$internal_renderer_opengl_utils_GLGraphicsData;
openfl__$internal_renderer_opengl_utils_GLGraphicsData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLGraphicsData"];
openfl__$internal_renderer_opengl_utils_GLGraphicsData.prototype = {
	reset: function() {
		this.data = [];
		this.indices = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		var elements = this.data;
		var this1;
		if(elements != null) this1 = new Float32Array(elements); else this1 = null;
		this.glData = this1;
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.dataBuffer);
		this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glData,this.gl.STATIC_DRAW);
		var elements1 = this.indices;
		var this2;
		if(elements1 != null) this2 = new Uint16Array(elements1); else this2 = null;
		this.glIndices = this2;
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STATIC_DRAW);
		this.dirty = false;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLGraphicsData
};
var openfl__$internal_renderer_opengl_utils_GraphicType = $hxClasses["openfl._internal.renderer.opengl.utils.GraphicType"] = { __ename__ : true, __constructs__ : ["Polygon","Rectangle","Circle","Ellipse","DrawTriangles","DrawTiles","OverrideMatrix"] };
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon = ["Polygon",0];
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle = function(rounded) { var $x = ["Rectangle",1,rounded]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.Circle = ["Circle",2];
openfl__$internal_renderer_opengl_utils_GraphicType.Circle.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Circle.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse = ["Ellipse",3];
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.DrawTriangles = function(vertices,indices,uvtData,culling,colors,blendMode) { var $x = ["DrawTriangles",4,vertices,indices,uvtData,culling,colors,blendMode]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.DrawTiles = function(sheet,tileData,smooth,flags,shader,count) { var $x = ["DrawTiles",5,sheet,tileData,smooth,flags,shader,count]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.OverrideMatrix = function(matrix) { var $x = ["OverrideMatrix",6,matrix]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
var openfl__$internal_renderer_opengl_utils_PingPongTexture = function(gl,width,height,smoothing,powerOfTwo) {
	if(powerOfTwo == null) powerOfTwo = true;
	if(smoothing == null) smoothing = true;
	this.__swapped = false;
	this.powerOfTwo = true;
	this.useOldTexture = false;
	this.gl = gl;
	this.width = width;
	this.height = height;
	this.smoothing = smoothing;
	this.powerOfTwo = powerOfTwo;
	this.set_renderTexture(new openfl__$internal_renderer_opengl_utils_RenderTexture(gl,width,height,smoothing,powerOfTwo));
};
$hxClasses["openfl._internal.renderer.opengl.utils.PingPongTexture"] = openfl__$internal_renderer_opengl_utils_PingPongTexture;
openfl__$internal_renderer_opengl_utils_PingPongTexture.__name__ = ["openfl","_internal","renderer","opengl","utils","PingPongTexture"];
openfl__$internal_renderer_opengl_utils_PingPongTexture.prototype = {
	swap: function() {
		this.__swapped = !this.__swapped;
		if((this.__swapped?this.__texture1:this.__texture0) == null) this.set_renderTexture(new openfl__$internal_renderer_opengl_utils_RenderTexture(this.gl,this.width,this.height,this.smoothing,this.powerOfTwo));
	}
	,clear: function(r,g,b,a,mask) {
		if(a == null) a = 0;
		if(b == null) b = 0;
		if(g == null) g = 0;
		if(r == null) r = 0;
		(this.__swapped?this.__texture1:this.__texture0).clear(r,g,b,a,mask);
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
		(this.__swapped?this.__texture1:this.__texture0).resize(width,height);
	}
	,destroy: function() {
		if(this.__texture0 != null) {
			this.__texture0.destroy();
			this.__texture0 = null;
		}
		if(this.__texture1 != null) {
			this.__texture1.destroy();
			this.__texture1 = null;
		}
		this.__swapped = false;
	}
	,get_renderTexture: function() {
		if(this.__swapped) return this.__texture1; else return this.__texture0;
	}
	,set_renderTexture: function(v) {
		if(this.__swapped) return this.__texture1 = v; else return this.__texture0 = v;
	}
	,get_oldRenderTexture: function() {
		if(this.__swapped) return this.__texture0; else return this.__texture1;
	}
	,set_oldRenderTexture: function(v) {
		if(this.__swapped) return this.__texture0 = v; else return this.__texture1 = v;
	}
	,get_framebuffer: function() {
		return (this.__swapped?this.__texture1:this.__texture0).frameBuffer;
	}
	,get_texture: function() {
		if(this.useOldTexture) return (this.__swapped?this.__texture0:this.__texture1).texture; else return (this.__swapped?this.__texture1:this.__texture0).texture;
	}
	,get___otherTexture: function() {
		if(this.__swapped) return this.__texture0; else return this.__texture1;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_PingPongTexture
	,__properties__: {get___otherTexture:"get___otherTexture",get_texture:"get_texture",get_framebuffer:"get_framebuffer",set_oldRenderTexture:"set_oldRenderTexture",get_oldRenderTexture:"get_oldRenderTexture",set_renderTexture:"set_renderTexture",get_renderTexture:"get_renderTexture"}
};
var openfl__$internal_renderer_opengl_utils_RenderTexture = function(gl,width,height,smoothing,powerOfTwo) {
	if(powerOfTwo == null) powerOfTwo = true;
	if(smoothing == null) smoothing = true;
	this.powerOfTwo = true;
	this.gl = gl;
	this.powerOfTwo = powerOfTwo;
	this.frameBuffer = gl.createFramebuffer();
	this.texture = gl.createTexture();
	gl.bindTexture(gl.TEXTURE_2D,this.texture);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	gl.bindFramebuffer(gl.FRAMEBUFFER,this.frameBuffer);
	gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.texture,0);
	this.renderBuffer = gl.createRenderbuffer();
	gl.bindRenderbuffer(gl.RENDERBUFFER,this.renderBuffer);
	gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.renderBuffer);
	this.resize(width,height);
};
$hxClasses["openfl._internal.renderer.opengl.utils.RenderTexture"] = openfl__$internal_renderer_opengl_utils_RenderTexture;
openfl__$internal_renderer_opengl_utils_RenderTexture.__name__ = ["openfl","_internal","renderer","opengl","utils","RenderTexture"];
openfl__$internal_renderer_opengl_utils_RenderTexture.prototype = {
	clear: function(r,g,b,a,mask) {
		if(a == null) a = 0;
		if(b == null) b = 0;
		if(g == null) g = 0;
		if(r == null) r = 0;
		this.gl.clearColor(r,g,b,a);
		this.gl.clear(mask == null?this.gl.COLOR_BUFFER_BIT:mask);
	}
	,destroy: function() {
		if(this.frameBuffer != null) this.gl.deleteFramebuffer(this.frameBuffer);
		if(this.texture != null) this.gl.deleteTexture(this.texture);
		this.frameBuffer = null;
		this.texture = null;
	}
	,resize: function(width,height) {
		if(this.width == width && this.height == height) return;
		this.width = width;
		this.height = height;
		var pow2W = width;
		var pow2H = height;
		if(this.powerOfTwo) {
			pow2W = this.powOfTwo(width);
			pow2H = this.powOfTwo(height);
		}
		var lastW = this.__width;
		var lastH = this.__height;
		this.__width = pow2W;
		this.__height = pow2H;
		this.createUVs();
		if(lastW == pow2W && lastH == pow2H) return;
		this.gl.bindTexture(this.gl.TEXTURE_2D,this.texture);
		this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,this.__width,this.__height,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,null);
		this.gl.bindRenderbuffer(this.gl.RENDERBUFFER,this.renderBuffer);
		this.gl.renderbufferStorage(this.gl.RENDERBUFFER,this.gl.DEPTH_STENCIL,this.__width,this.__height);
	}
	,createUVs: function() {
		if(this.__uvData == null) this.__uvData = new openfl_display_TextureUvs();
		var w = this.width / this.__width;
		var h = this.height / this.__height;
		this.__uvData.x0 = 0;
		this.__uvData.y0 = 0;
		this.__uvData.x1 = w;
		this.__uvData.y1 = 0;
		this.__uvData.x2 = w;
		this.__uvData.y2 = h;
		this.__uvData.x3 = 0;
		this.__uvData.y3 = h;
	}
	,powOfTwo: function(value) {
		var n = 1;
		while(n < value) n <<= 1;
		return n;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_RenderTexture
};
var openfl__$internal_renderer_opengl_utils_ShaderManager = function(gl) {
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.ShaderManager"] = openfl__$internal_renderer_opengl_utils_ShaderManager;
openfl__$internal_renderer_opengl_utils_ShaderManager.__name__ = ["openfl","_internal","renderer","opengl","utils","ShaderManager"];
openfl__$internal_renderer_opengl_utils_ShaderManager.prototype = {
	setContext: function(gl) {
		this.gl = gl;
		this.defaultShader = new openfl__$internal_renderer_opengl_shaders2_DefaultShader(gl);
		this.fillShader = new openfl__$internal_renderer_opengl_shaders2_FillShader(gl);
		this.patternFillShader = new openfl__$internal_renderer_opengl_shaders2_PatternFillShader(gl);
		this.drawTrianglesShader = new openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader(gl);
		this.primitiveShader = new openfl__$internal_renderer_opengl_shaders2_PrimitiveShader(gl);
		this.setShader(this.defaultShader,true);
	}
	,destroy: function() {
		this.defaultShader.destroy();
		this.fillShader.destroy();
		this.patternFillShader.destroy();
		this.drawTrianglesShader.destroy();
		this.primitiveShader.destroy();
		this.gl = null;
	}
	,setShader: function(shader,force) {
		if(force == null) force = false;
		if(shader == null) {
			this.currentShader = null;
			this.gl.useProgram(null);
			return true;
		}
		if(this.currentShader != null && !force && this.currentShader.ID == shader.ID) return false;
		this.currentShader = shader;
		this.gl.useProgram(shader.program);
		return true;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_ShaderManager
};
var openfl__$internal_renderer_opengl_utils_SpriteBatch = function(gl,maxSprites) {
	if(maxSprites == null) maxSprites = 2000;
	this.uvs = new openfl_display_TextureUvs();
	this.matrix = new openfl_geom_Matrix();
	this.lastEnableColor = true;
	this.enableColor = true;
	this.attributes = [];
	this.writtenVertexBytes = 0;
	this.drawing = false;
	this.dirty = true;
	this.states = [];
	this.maxSprites = maxSprites;
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aPosition"));
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aTexCoord0"));
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5121,true,"openfl_aColor"));
	var array = [1,1,1,1];
	var this1;
	if(array != null) this1 = new Float32Array(array); else this1 = null;
	this.attributes[2].defaultValue = this1;
	this.maxElementsPerVertex = 0;
	var _g = 0;
	var _g1 = this.attributes;
	while(_g < _g1.length) {
		var a = _g1[_g];
		++_g;
		this.maxElementsPerVertex += Math.floor(a.components * a.getElementsBytes() / 4);
	}
	this.vertexArraySize = maxSprites * this.maxElementsPerVertex * 4 * 4;
	this.indexArraySize = maxSprites * 6;
	this.vertexArray = new openfl__$internal_renderer_opengl_utils_VertexArray(this.attributes,this.vertexArraySize,false);
	var buffer = this.vertexArray.buffer;
	var this2;
	if(buffer != null) this2 = new Float32Array(buffer,0); else this2 = null;
	this.positions = this2;
	var buffer1 = this.vertexArray.buffer;
	var this3;
	if(buffer1 != null) this3 = new Uint32Array(buffer1,0); else this3 = null;
	this.colors = this3;
	var elements = this.indexArraySize;
	var this4;
	if(elements != null) this4 = new Uint16Array(elements); else this4 = null;
	this.indices = this4;
	var i = 0;
	var j = 0;
	while(i < this.indexArraySize) {
		this.indices[i] = j;
		this.indices[i + 1] = j + 1;
		this.indices[i + 2] = j + 2;
		this.indices[i + 3] = j;
		this.indices[i + 4] = j + 2;
		this.indices[i + 5] = j + 3;
		i += 6;
		j += 4;
	}
	this.currentState = new openfl__$internal_renderer_opengl_utils__$SpriteBatch_State();
	this.dirty = true;
	this.drawing = false;
	this.batchedSprites = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.SpriteBatch"] = openfl__$internal_renderer_opengl_utils_SpriteBatch;
openfl__$internal_renderer_opengl_utils_SpriteBatch.__name__ = ["openfl","_internal","renderer","opengl","utils","SpriteBatch"];
openfl__$internal_renderer_opengl_utils_SpriteBatch.prototype = {
	destroy: function() {
		this.vertexArray.destroy();
		this.vertexArray = null;
		this.indices = null;
		this.gl.deleteBuffer(this.indexBuffer);
		this.currentState.destroy();
		var _g = 0;
		var _g1 = this.states;
		while(_g < _g1.length) {
			var state = _g1[_g];
			++_g;
			state.destroy();
		}
		this.gl = null;
	}
	,begin: function(renderSession,clipRect) {
		this.renderSession = renderSession;
		this.shader = renderSession.shaderManager.defaultShader;
		this.drawing = true;
		this.start(clipRect);
	}
	,finish: function() {
		this.stop();
		this.clipRect = null;
		this.drawing = false;
	}
	,start: function(clipRect) {
		if(!this.drawing) this.stop();
		this.dirty = true;
		this.clipRect = clipRect;
	}
	,stop: function() {
		this.flush();
	}
	,renderBitmapData: function(bitmapData,smoothing,matrix,ct,alpha,blendMode,flashShader,pixelSnapping,bgra) {
		if(bgra == null) bgra = false;
		if(alpha == null) alpha = 1;
		if(bitmapData == null) return;
		var texture = bitmapData.getTexture(this.gl);
		if(this.batchedSprites >= this.maxSprites) this.flush();
		var uvs = bitmapData.__uvData;
		if(uvs == null) return;
		this.prepareShader(flashShader,bitmapData);
		var color = ((alpha * 255 | 0) & 255) << 24 | 16777215;
		this.enableColor = true;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		var index = this.batchedSprites * 4 * this.elementsPerVertex;
		this.fillVertices(index,bitmapData.width,bitmapData.height,matrix,uvs,color,pixelSnapping);
		this.setState(this.batchedSprites,texture,smoothing,blendMode,ct,flashShader,true);
		this.batchedSprites++;
	}
	,renderTiles: function(object,sheet,tileData,smooth,flags,flashShader,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		var texture = sheet.__bitmap.getTexture(this.gl);
		if(texture == null) return;
		var useScale = (flags & 1) > 0;
		var useRotation = (flags & 2) > 0;
		var useTransform = (flags & 16) > 0;
		var useRGB = (flags & 4) > 0;
		var useAlpha = (flags & 8) > 0;
		var useRect = (flags & 32) > 0;
		var useOrigin = (flags & 64) > 0;
		var blendMode;
		var _g = flags & 983040;
		switch(_g) {
		case 65536:
			blendMode = openfl_display_BlendMode.ADD;
			break;
		case 131072:
			blendMode = openfl_display_BlendMode.MULTIPLY;
			break;
		case 262144:
			blendMode = openfl_display_BlendMode.SCREEN;
			break;
		case 524288:
			blendMode = openfl_display_BlendMode.SUBTRACT;
			break;
		default:
			var _g1 = flags & 15728640;
			switch(_g1) {
			case 1048576:
				blendMode = openfl_display_BlendMode.DARKEN;
				break;
			case 2097152:
				blendMode = openfl_display_BlendMode.LIGHTEN;
				break;
			case 4194304:
				blendMode = openfl_display_BlendMode.OVERLAY;
				break;
			case 8388608:
				blendMode = openfl_display_BlendMode.HARDLIGHT;
				break;
			default:
				var _g2 = flags & 251658240;
				switch(_g2) {
				case 16777216:
					blendMode = openfl_display_BlendMode.DIFFERENCE;
					break;
				case 33554432:
					blendMode = openfl_display_BlendMode.INVERT;
					break;
				default:
					blendMode = openfl_display_BlendMode.NORMAL;
				}
			}
		}
		if(useTransform) {
			useScale = false;
			useRotation = false;
		}
		var scaleIndex = 0;
		var rotationIndex = 0;
		var rgbIndex = 0;
		var alphaIndex = 0;
		var transformIndex = 0;
		var numValues = 3;
		if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
		if(useScale) {
			scaleIndex = numValues;
			numValues++;
		}
		if(useRotation) {
			rotationIndex = numValues;
			numValues++;
		}
		if(useTransform) {
			transformIndex = numValues;
			numValues += 4;
		}
		if(useRGB) {
			rgbIndex = numValues;
			numValues += 3;
		}
		if(useAlpha) {
			alphaIndex = numValues;
			numValues++;
		}
		var totalCount = tileData.length;
		if(count >= 0 && totalCount > count) totalCount = count;
		var itemCount = Math.ceil(totalCount / numValues);
		var iIndex = 0;
		var tileID = -1;
		var rect = sheet.__rectTile;
		var tileUV = sheet.__rectUV;
		var center = sheet.__point;
		var x = 0.0;
		var y = 0.0;
		var alpha = 1.0;
		var tint = 16777215;
		var color = -1;
		var scale = 1.0;
		var rotation = 0.0;
		var cosTheta = 1.0;
		var sinTheta = 0.0;
		var a = 0.0;
		var b = 0.0;
		var c = 0.0;
		var d = 0.0;
		var tx = 0.0;
		var ty = 0.0;
		var ox = 0.0;
		var oy = 0.0;
		var oMatrix = object.__worldTransform;
		var bIndex = 0;
		var tMa = 1.0;
		var tMb = 0.0;
		var tMc = 0.0;
		var tMd = 1.0;
		var tMtx = 0.0;
		var tMty = 0.0;
		var oMa = oMatrix.a;
		var oMb = oMatrix.b;
		var oMc = oMatrix.c;
		var oMd = oMatrix.d;
		var oMtx = oMatrix.tx;
		var oMty = oMatrix.ty;
		var rx = 0.0;
		var ry = 0.0;
		var rw = 0.0;
		var rh = 0.0;
		var tuvx = 0.0;
		var tuvy = 0.0;
		var tuvw = 0.0;
		var tuvh = 0.0;
		this.enableColor = true;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		this.prepareShader(flashShader,null);
		while(iIndex < totalCount) {
			if(this.batchedSprites >= this.maxSprites) this.flush();
			x = tileData[iIndex];
			y = tileData[iIndex + 1];
			if(useRect) {
				tileID = -1;
				rect.x = tileData[iIndex + 2];
				rect.y = tileData[iIndex + 3];
				rect.width = tileData[iIndex + 4];
				rect.height = tileData[iIndex + 5];
				if(useOrigin) {
					center.x = tileData[iIndex + 6];
					center.y = tileData[iIndex + 7];
				} else {
					center.x = 0;
					center.y = 0;
				}
				rw = rect.width;
				rh = rect.height;
				tuvx = rect.get_left() / sheet.__bitmap.width;
				tuvy = rect.get_top() / sheet.__bitmap.height;
				tuvw = rect.get_right() / sheet.__bitmap.width;
				tuvh = rect.get_bottom() / sheet.__bitmap.height;
			} else {
				tileID = (tileData[iIndex + 2] == null?0:tileData[iIndex + 2]) | 0;
				rect = sheet.__tileRects[tileID];
				center = sheet.__centerPoints[tileID];
				tileUV = sheet.__tileUVs[tileID];
				if(rect != null) {
					rw = rect.width;
					rh = rect.height;
					tuvx = tileUV.x;
					tuvy = tileUV.y;
					tuvw = tileUV.width;
					tuvh = tileUV.height;
				}
			}
			if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
				alpha = 1;
				tint = 16777215;
				scale = 1.0;
				rotation = 0.0;
				cosTheta = 1.0;
				sinTheta = 0.0;
				if(useAlpha) alpha = tileData[iIndex + alphaIndex] * object.__worldAlpha; else alpha = object.__worldAlpha;
				if(useRGB) tint = (tileData[iIndex + rgbIndex] * 255 | 0) << 16 | (tileData[iIndex + rgbIndex + 1] * 255 | 0) << 8 | (tileData[iIndex + rgbIndex + 2] * 255 | 0);
				if(useScale) scale = tileData[iIndex + scaleIndex];
				if(useRotation) {
					rotation = tileData[iIndex + rotationIndex];
					cosTheta = Math.cos(rotation);
					sinTheta = Math.sin(rotation);
				}
				if(useTransform) {
					a = tileData[iIndex + transformIndex];
					b = tileData[iIndex + transformIndex + 1];
					c = tileData[iIndex + transformIndex + 2];
					d = tileData[iIndex + transformIndex + 3];
				} else {
					a = scale * cosTheta;
					b = scale * sinTheta;
					c = -b;
					d = a;
				}
				ox = center.x * a + center.y * c;
				oy = center.x * b + center.y * d;
				tx = x - ox;
				ty = y - oy;
				tMa = (a * oMa + b * oMc) * rw;
				tMb = (a * oMb + b * oMd) * rw;
				tMc = (c * oMa + d * oMc) * rh;
				tMd = (c * oMb + d * oMd) * rh;
				tMtx = tx * oMa + ty * oMc + oMtx;
				tMty = tx * oMb + ty * oMd + oMty;
				bIndex = this.batchedSprites * 4 * this.elementsPerVertex;
				this.positions[bIndex] = tMtx;
				this.positions[bIndex + 1] = tMty;
				this.positions[bIndex + 5] = tMa + tMtx;
				this.positions[bIndex + 6] = tMb + tMty;
				this.positions[bIndex + 10] = tMa + tMc + tMtx;
				this.positions[bIndex + 11] = tMd + tMb + tMty;
				this.positions[bIndex + 15] = tMc + tMtx;
				this.positions[bIndex + 16] = tMd + tMty;
				var val;
				var val1;
				var val2 = this.colors[bIndex + 19] = ((alpha * 255 | 0) & 255) << 24 | tint;
				val1 = this.colors[bIndex + 14] = val2;
				val = this.colors[bIndex + 9] = val1;
				this.colors[bIndex + 4] = val;
				this.positions[bIndex + 2] = tuvx;
				this.positions[bIndex + 3] = tuvy;
				this.positions[bIndex + 7] = tuvw;
				this.positions[bIndex + 8] = tuvy;
				this.positions[bIndex + 12] = tuvw;
				this.positions[bIndex + 13] = tuvh;
				this.positions[bIndex + 17] = tuvx;
				this.positions[bIndex + 18] = tuvh;
				this.writtenVertexBytes = bIndex + 20;
				this.setState(this.batchedSprites,texture,smooth,blendMode,object.__worldColorTransform,flashShader,false);
				this.batchedSprites++;
			}
			iIndex += numValues;
		}
	}
	,fillVertices: function(index,width,height,matrix,uvs,color,pixelSnapping) {
		if(color == null) color = -1;
		var a = matrix.a;
		var b = matrix.b;
		var c = matrix.c;
		var d = matrix.d;
		var tx = matrix.tx;
		var ty = matrix.ty;
		if(pixelSnapping == null || pixelSnapping == openfl_display_PixelSnapping.NEVER) {
			this.positions[index] = tx;
			this.positions[index + 1] = ty;
			this.positions[index + 5] = a * width + tx;
			this.positions[index + 6] = b * width + ty;
			this.positions[index + 10] = a * width + c * height + tx;
			this.positions[index + 11] = d * height + b * width + ty;
			this.positions[index + 15] = c * height + tx;
			this.positions[index + 16] = d * height + ty;
		} else {
			var val = Math.round(tx);
			this.positions[index] = val;
			var val1 = Math.round(ty);
			this.positions[index + 1] = val1;
			var val2 = Math.round(a * width + tx);
			this.positions[index + 5] = val2;
			var val3 = Math.round(b * width + ty);
			this.positions[index + 6] = val3;
			var val4 = Math.round(a * width + c * height + tx);
			this.positions[index + 10] = val4;
			var val5 = Math.round(d * height + b * width + ty);
			this.positions[index + 11] = val5;
			var val6 = Math.round(c * height + tx);
			this.positions[index + 15] = val6;
			var val7 = Math.round(d * height + ty);
			this.positions[index + 16] = val7;
		}
		if(this.enableColor) {
			var val8;
			var val9;
			var val10 = this.colors[index + 19] = color;
			val9 = this.colors[index + 14] = val10;
			val8 = this.colors[index + 9] = val9;
			this.colors[index + 4] = val8;
		}
		this.positions[index + 2] = uvs.x0;
		this.positions[index + 3] = uvs.y0;
		this.positions[index + 7] = uvs.x1;
		this.positions[index + 8] = uvs.y1;
		this.positions[index + 12] = uvs.x2;
		this.positions[index + 13] = uvs.y2;
		this.positions[index + 17] = uvs.x3;
		this.positions[index + 18] = uvs.y3;
		this.writtenVertexBytes = index + 20;
	}
	,enableAttributes: function(color) {
		if(color == null) color = -1;
		this.enableColor = color != -1;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
	}
	,flush: function() {
		if(this.batchedSprites == 0) return;
		if(this.clipRect != null) {
			this.gl.enable(this.gl.SCISSOR_TEST);
			this.gl.scissor(Math.floor(this.clipRect.x),Math.floor(this.clipRect.y),Math.ceil(this.clipRect.width),Math.ceil(this.clipRect.height));
		}
		if(this.dirty) {
			this.dirty = false;
			this.renderSession.activeTextures = 1;
			this.vertexArray.bind();
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		}
		if(this.writtenVertexBytes > this.vertexArraySize * 0.5) this.vertexArray.upload(this.positions); else {
			var view = this.positions.subarray(0,this.writtenVertexBytes);
			this.vertexArray.upload(view);
		}
		var nextState;
		var batchSize = 0;
		var start = 0;
		this.currentState.shader = null;
		this.currentState.shaderData = null;
		this.currentState.texture = null;
		this.currentState.textureSmooth = false;
		this.currentState.blendMode = this.renderSession.blendModeManager.currentBlendMode;
		this.currentState.colorTransform = null;
		this.currentState.skipColorTransformAlpha = false;
		var _g1 = 0;
		var _g = this.batchedSprites;
		while(_g1 < _g) {
			var i = _g1++;
			nextState = this.states[i];
			this.currentState.skipColorTransformAlpha = nextState.skipColorTransformAlpha;
			if(!nextState.equals(this.currentState)) {
				this.renderBatch(this.currentState,batchSize,start);
				start = i;
				batchSize = 0;
				this.currentState.shader = nextState.shader;
				this.currentState.shaderData = nextState.shaderData;
				this.currentState.texture = nextState.texture;
				this.currentState.textureSmooth = nextState.textureSmooth;
				this.currentState.blendMode = nextState.blendMode;
				this.currentState.colorTransform = nextState.colorTransform;
			}
			batchSize++;
		}
		this.renderBatch(this.currentState,batchSize,start);
		this.batchedSprites = 0;
		this.writtenVertexBytes = 0;
		if(this.clipRect != null) this.gl.disable(this.gl.SCISSOR_TEST);
	}
	,renderBatch: function(state,size,start) {
		if(size == 0 || state.texture == null) return;
		var shader;
		if(state.shader == null) shader = this.renderSession.shaderManager.defaultShader; else shader = state.shader;
		this.renderSession.shaderManager.setShader(shader);
		shader.bindVertexArray(this.vertexArray);
		this.renderSession.blendModeManager.setBlendMode(shader.blendMode != null?shader.blendMode:state.blendMode);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uProjectionMatrix"),false,this.renderSession.projectionMatrix.toArray(true));
		if(state.colorTransform != null) {
			this.gl.uniform1i(shader.getUniformLocation("openfl_uUseColorTransform"),1);
			var ct = state.colorTransform;
			this.gl.uniform4f(shader.getUniformLocation("openfl_uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,state.skipColorTransformAlpha?1:ct.alphaMultiplier);
			this.gl.uniform4f(shader.getUniformLocation("openfl_uColorOffset"),ct.redOffset / 255.,ct.greenOffset / 255.,ct.blueOffset / 255.,ct.alphaOffset / 255.);
		} else {
			this.gl.uniform1i(shader.getUniformLocation("openfl_uUseColorTransform"),0);
			this.gl.uniform4f(shader.getUniformLocation("openfl_uColorMultiplier"),1,1,1,1);
			this.gl.uniform4f(shader.getUniformLocation("openfl_uColorOffset"),0,0,0,0);
		}
		this.gl.activeTexture(this.gl.TEXTURE0);
		this.gl.bindTexture(this.gl.TEXTURE_2D,state.texture);
		this.gl.uniform1i(shader.getUniformLocation("openfl_uSampler0"),0);
		if(shader.smooth != null && shader.smooth || state.textureSmooth) {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR);
		} else {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);
		}
		this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,shader.wrapS);
		this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,shader.wrapT);
		shader.applyData(state.shaderData,this.renderSession);
		this.gl.drawElements(this.gl.TRIANGLES,size * 6,this.gl.UNSIGNED_SHORT,start * 6 * 2);
		this.renderSession.drawCount++;
	}
	,setState: function(index,texture,smooth,blendMode,colorTransform,shader,skipAlpha) {
		if(skipAlpha == null) skipAlpha = false;
		if(smooth == null) smooth = false;
		var state = this.states[index];
		if(state == null) state = this.states[index] = new openfl__$internal_renderer_opengl_utils__$SpriteBatch_State();
		state.texture = texture;
		state.textureSmooth = smooth;
		state.blendMode = blendMode;
		if(colorTransform != null && colorTransform.__isDefault()) state.colorTransform = null; else state.colorTransform = colorTransform;
		state.skipColorTransformAlpha = skipAlpha;
		if(shader == null) {
			state.shader = null;
			state.shaderData = null;
		} else {
			state.shader = shader.__shader;
			state.shaderData = shader.data;
		}
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.vertexArray.setContext(gl,this.positions);
		this.indexBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,this.indices,gl.STATIC_DRAW);
	}
	,prepareShader: function(flashShader,bd) {
		if(flashShader != null) {
			flashShader.__init(this.gl);
			flashShader.__shader.wrapS = flashShader.repeatX;
			flashShader.__shader.wrapT = flashShader.repeatY;
			flashShader.__shader.smooth = flashShader.smooth;
			flashShader.__shader.blendMode = flashShader.blendMode;
			var objSize = flashShader.data.get(openfl_display_Shader.uObjectSize);
			var texSize = flashShader.data.get(openfl_display_Shader.uTextureSize);
			if(bd != null) {
				objSize.value[0] = bd.width;
				objSize.value[1] = bd.height;
				if(bd.__pingPongTexture != null) {
					texSize.value[0] = bd.__pingPongTexture.get_renderTexture().__width;
					texSize.value[1] = bd.__pingPongTexture.get_renderTexture().__height;
				} else {
					texSize.value[0] = bd.width;
					texSize.value[1] = bd.height;
				}
			} else {
				objSize.value[0] = 0;
				objSize.value[1] = 0;
				texSize.value[0] = 0;
				texSize.value[1] = 0;
			}
		}
	}
	,getElementsPerVertex: function() {
		var r = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) r += Math.floor(a.components * a.getElementsBytes() / 4);
		}
		return r;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_SpriteBatch
};
var openfl__$internal_renderer_opengl_utils__$SpriteBatch_State = function() {
	this.skipColorTransformAlpha = false;
	this.textureSmooth = true;
};
$hxClasses["openfl._internal.renderer.opengl.utils._SpriteBatch.State"] = openfl__$internal_renderer_opengl_utils__$SpriteBatch_State;
openfl__$internal_renderer_opengl_utils__$SpriteBatch_State.__name__ = ["openfl","_internal","renderer","opengl","utils","_SpriteBatch","State"];
openfl__$internal_renderer_opengl_utils__$SpriteBatch_State.prototype = {
	equals: function(other) {
		return (this.shader == null && other.shader == null || this.shader != null && other.shader != null && this.shader.ID == other.shader.ID) && this.texture == other.texture && this.textureSmooth == other.textureSmooth && this.blendMode == other.blendMode && (this.colorTransform == null && other.colorTransform == null || this.colorTransform != null && other.colorTransform != null && this.colorTransform.__equals(other.colorTransform,this.skipColorTransformAlpha));
	}
	,destroy: function() {
		this.texture = null;
		this.colorTransform = null;
	}
	,__class__: openfl__$internal_renderer_opengl_utils__$SpriteBatch_State
};
var openfl__$internal_renderer_opengl_utils_StencilManager = function(gl) {
	this.stencilMask = 0;
	this.stencilStack = [];
	this.setContext(gl);
	this.reverse = true;
	this.count = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.StencilManager"] = openfl__$internal_renderer_opengl_utils_StencilManager;
openfl__$internal_renderer_opengl_utils_StencilManager.__name__ = ["openfl","_internal","renderer","opengl","utils","StencilManager"];
openfl__$internal_renderer_opengl_utils_StencilManager.prototype = {
	prepareGraphics: function(fill,renderSession,translationMatrix) {
		var shader = renderSession.shaderManager.fillShader;
		renderSession.shaderManager.setShader(shader);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uTranslationMatrix"),false,translationMatrix);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
		fill.vertexArray.bind();
		shader.bindVertexArray(fill.vertexArray);
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,fill.indexBuffer);
	}
	,pushBucket: function(bucket,renderSession,translationMatrix,isMask) {
		if(isMask == null) isMask = false;
		if(!isMask) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.gl.stencilMask(255);
			this.gl.colorMask(false,false,false,false);
			this.gl.stencilFunc(this.gl.NEVER,1,255);
			this.gl.stencilOp(this.gl.INVERT,this.gl.KEEP,this.gl.KEEP);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		var _g = 0;
		var _g1 = bucket.fills;
		while(_g < _g1.length) {
			var fill = _g1[_g];
			++_g;
			if(fill.available) continue;
			this.prepareGraphics(fill,renderSession,translationMatrix);
			this.gl.drawElements(fill.drawMode,fill.glIndices.length,this.gl.UNSIGNED_SHORT,0);
		}
		if(!isMask) {
			this.gl.colorMask(true,true,true,renderSession.renderer.transparent);
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
			this.gl.stencilFunc(this.gl.EQUAL,255,255);
		}
	}
	,popBucket: function(object,bucket,renderSession) {
		this.gl.disable(this.gl.STENCIL_TEST);
	}
	,pushMask: function(object,renderSession) {
		var maskGraphics = object.__maskGraphics;
		if(maskGraphics == null || maskGraphics.__commands.get_length() <= 0) return;
		if(this.stencilMask == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		this.stencilMask++;
		if(maskGraphics.__dirty) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics(object,maskGraphics,renderSession.gl);
		var func;
		if(this.stencilMask == 1) func = this.gl.NEVER; else func = this.gl.EQUAL;
		var ref = this.stencilMask;
		var mask = 255 - this.stencilMask;
		this.gl.stencilMask(255);
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(func,ref,mask);
		this.gl.stencilOp(this.gl.REPLACE,this.gl.KEEP,this.gl.KEEP);
		var glStack = maskGraphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
		var bucket;
		var translationMatrix = object.__worldTransform;
		var _g1 = 0;
		var _g = glStack.buckets.length;
		while(_g1 < _g) {
			var i = _g1++;
			bucket = glStack.buckets[i];
			if(bucket.overrideMatrix != null) translationMatrix = bucket.overrideMatrix; else translationMatrix = object.__worldTransform;
			var _g2 = bucket.mode;
			switch(_g2[1]) {
			case 1:case 2:
				this.pushBucket(bucket,renderSession,translationMatrix.toArray(true),true);
				break;
			default:
			}
		}
		this.gl.colorMask(true,true,true,renderSession.renderer.transparent);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.gl.stencilFunc(this.gl.EQUAL,this.stencilMask,255);
	}
	,popMask: function(object,renderSession) {
		this.stencilMask--;
		if(this.stencilMask <= 0) {
			this.gl.disable(this.gl.STENCIL_TEST);
			this.stencilMask = 0;
		}
	}
	,bindGraphics: function(object,glData,renderSession) {
	}
	,destroy: function() {
		this.stencilStack = null;
		this.gl = null;
	}
	,popStencil: function(object,glData,renderSession) {
		this.stencilStack.pop();
		this.count--;
		if(this.stencilStack.length == 0) this.gl.disable(this.gl.STENCIL_TEST); else {
			var level = this.count;
			this.bindGraphics(object,glData,renderSession);
			this.gl.colorMask(false,false,false,false);
			if(glData.mode == 1) {
				this.reverse = !this.reverse;
				if(this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_FAN,4,this.gl.UNSIGNED_SHORT,(glData.indices.length - 4) * 2);
				this.gl.stencilFunc(this.gl.ALWAYS,0,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INVERT);
				this.gl.drawElements(this.gl.TRIANGLE_FAN,glData.indices.length - 4,this.gl.UNSIGNED_SHORT,0);
				if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - level,255); else this.gl.stencilFunc(this.gl.EQUAL,level,255);
			} else {
				if(!this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_STRIP,glData.indices.length,this.gl.UNSIGNED_SHORT,0);
				if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - level,255); else this.gl.stencilFunc(this.gl.EQUAL,level,255);
			}
			this.gl.colorMask(true,true,true,true);
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		}
	}
	,pushStencil: function(object,glData,renderSession) {
		this.bindGraphics(object,glData,renderSession);
		if(this.stencilStack.length == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.reverse = true;
			this.count = 0;
		}
		this.stencilStack.push(glData);
		var level = this.count;
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(this.gl.ALWAYS,0,255);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INVERT);
		if(glData.mode == 1) {
			this.gl.drawElements(this.gl.TRIANGLE_FAN,glData.indices.length - 4,this.gl.UNSIGNED_SHORT,0);
			if(this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
			}
			this.gl.drawElements(this.gl.TRIANGLE_FAN,4,this.gl.UNSIGNED_SHORT,(glData.indices.length - 4) * 2);
			if(this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255); else this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
			this.reverse = !this.reverse;
		} else {
			if(!this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
			}
			this.gl.drawElements(this.gl.TRIANGLE_STRIP,glData.indices.length,this.gl.UNSIGNED_SHORT,0);
			if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255); else this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
		}
		this.gl.colorMask(true,true,true,true);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.count++;
	}
	,setContext: function(gl) {
		this.gl = gl;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_StencilManager
};
var openfl__$internal_renderer_opengl_utils_VertexArray = function(attributes,size,isStatic) {
	if(isStatic == null) isStatic = false;
	if(size == null) size = 0;
	this.isStatic = false;
	this.size = 0;
	this.attributes = [];
	this.size = size;
	this.attributes = attributes;
	if(size > 0) this.buffer = new ArrayBuffer(size);
	this.isStatic = isStatic;
};
$hxClasses["openfl._internal.renderer.opengl.utils.VertexArray"] = openfl__$internal_renderer_opengl_utils_VertexArray;
openfl__$internal_renderer_opengl_utils_VertexArray.__name__ = ["openfl","_internal","renderer","opengl","utils","VertexArray"];
openfl__$internal_renderer_opengl_utils_VertexArray.prototype = {
	bind: function() {
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.glBuffer);
	}
	,unbind: function() {
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null);
	}
	,upload: function(view) {
		this.gl.bufferSubData(this.gl.ARRAY_BUFFER,0,view);
	}
	,destroy: function() {
		this.gl.deleteBuffer(this.glBuffer);
		this.buffer = null;
	}
	,setContext: function(gl,view) {
		this.gl = gl;
		this.glBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER,this.glBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,view,this.isStatic?gl.STATIC_DRAW:gl.DYNAMIC_DRAW);
	}
	,get_stride: function() {
		var s = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) s += Math.floor(a.components * a.getElementsBytes() / 4) * 4;
		}
		return s;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_VertexArray
	,__properties__: {get_stride:"get_stride"}
};
var openfl__$internal_text_TextEngine = function(textField) {
	this.textField = textField;
	this.width = 100;
	this.height = 100;
	this.text = "";
	this.bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.type = openfl_text_TextFieldType.DYNAMIC;
	this.autoSize = openfl_text_TextFieldAutoSize.NONE;
	this.displayAsPassword = false;
	this.embedFonts = false;
	this.selectable = true;
	this.borderColor = 0;
	this.border = false;
	this.backgroundColor = 16777215;
	this.background = false;
	this.gridFitType = openfl_text_GridFitType.PIXEL;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.wordWrap = false;
	this.lineAscents = [];
	this.lineBreaks = [];
	this.lineDescents = [];
	this.lineLeadings = [];
	this.lineHeights = [];
	this.lineWidths = [];
	this.layoutGroups = [];
	this.textFormatRanges = [];
	openfl__$internal_text_TextEngine.__canvas = window.document.createElement("canvas");
	openfl__$internal_text_TextEngine.__context = openfl__$internal_text_TextEngine.__canvas.getContext("2d");
};
$hxClasses["openfl._internal.text.TextEngine"] = openfl__$internal_text_TextEngine;
openfl__$internal_text_TextEngine.__name__ = ["openfl","_internal","text","TextEngine"];
openfl__$internal_text_TextEngine.__canvas = null;
openfl__$internal_text_TextEngine.__context = null;
openfl__$internal_text_TextEngine.findFont = function(name) {
	return null;
};
openfl__$internal_text_TextEngine.getFont = function(format) {
	var font;
	if(format.italic) font = "italic "; else font = "normal ";
	font += "normal ";
	if(format.bold) font += "bold "; else font += "normal ";
	font += format.size + "px";
	font += "/" + (format.size + format.leading + 6) + "px ";
	font += "" + (function($this) {
		var $r;
		var _g = format.font;
		$r = (function($this) {
			var $r;
			switch(_g) {
			case "_sans":
				$r = "sans-serif";
				break;
			case "_serif":
				$r = "serif";
				break;
			case "_typewriter":
				$r = "monospace";
				break;
			default:
				$r = "'" + format.font + "'";
			}
			return $r;
		}($this));
		return $r;
	}(this));
	return font;
};
openfl__$internal_text_TextEngine.getFontInstance = function(format) {
	return null;
};
openfl__$internal_text_TextEngine.prototype = {
	getBounds: function() {
		var padding;
		if(this.border) padding = 1; else padding = 0;
		this.bounds.width = this.width + padding;
		this.bounds.height = this.height + padding;
	}
	,getLine: function(index) {
		if(index < 0 || index > this.lineBreaks.length + 1) return null;
		if(this.lineBreaks.length == 0) return this.text; else return this.text.substring(index > 0?this.lineBreaks[index - 1]:0,this.lineBreaks[index]);
	}
	,getLineMeasurements: function() {
		this.lineAscents.splice(0,this.lineAscents.length);
		this.lineDescents.splice(0,this.lineDescents.length);
		this.lineLeadings.splice(0,this.lineLeadings.length);
		this.lineHeights.splice(0,this.lineHeights.length);
		this.lineWidths.splice(0,this.lineWidths.length);
		var currentLineAscent = 0.0;
		var currentLineDescent = 0.0;
		var currentLineLeading = null;
		var currentLineHeight = 0.0;
		var currentLineWidth = 0.0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.numLines = 1;
		this.bottomScrollV = 0;
		this.maxScrollH = 0;
		var _g = 0;
		var _g1 = this.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			while(group.lineIndex > this.numLines - 1) {
				this.lineAscents.push(currentLineAscent);
				this.lineDescents.push(currentLineDescent);
				this.lineLeadings.push(currentLineLeading != null?currentLineLeading:0);
				this.lineHeights.push(currentLineHeight);
				this.lineWidths.push(currentLineWidth);
				currentLineAscent = 0;
				currentLineDescent = 0;
				currentLineLeading = null;
				currentLineHeight = 0;
				currentLineWidth = 0;
				this.numLines++;
				if(this.textHeight <= this.height - 2) this.bottomScrollV++;
			}
			currentLineAscent = Math.max(currentLineAscent,group.ascent);
			currentLineDescent = Math.max(currentLineDescent,group.descent);
			if(currentLineLeading == null) currentLineLeading = group.leading; else currentLineLeading = Std["int"](Math.max(currentLineLeading,group.leading));
			currentLineHeight = Math.max(currentLineHeight,group.height);
			currentLineWidth = group.offsetX - 2 + group.width;
			if(currentLineWidth > this.textWidth) this.textWidth = currentLineWidth;
			this.textHeight = group.offsetY - 2 + group.ascent + group.descent;
		}
		this.lineAscents.push(currentLineAscent);
		this.lineDescents.push(currentLineDescent);
		this.lineLeadings.push(currentLineLeading != null?currentLineLeading:0);
		this.lineHeights.push(currentLineHeight);
		this.lineWidths.push(currentLineWidth);
		if(this.numLines == 1) {
			this.bottomScrollV = 1;
			if(currentLineLeading > 0) this.textHeight += currentLineLeading;
		} else if(this.textHeight <= this.height - 2) this.bottomScrollV++;
		if(this.textWidth > this.width - 4) this.maxScrollH = this.textWidth - this.width + 4 | 0; else this.maxScrollH = 0;
		this.maxScrollV = this.numLines - this.bottomScrollV + 1;
	}
	,getLayoutGroups: function() {
		var _g = this;
		this.layoutGroups.splice(0,this.layoutGroups.length);
		var rangeIndex = -1;
		var formatRange = null;
		var font = null;
		var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
		var leading = 0;
		var ascent = 0.0;
		var descent = 0.0;
		var layoutGroup;
		var advances;
		var widthValue;
		var heightValue = 0.0;
		var spaceWidth = 0.0;
		var previousSpaceIndex = 0;
		var spaceIndex = this.text.indexOf(" ");
		var breakIndex = this.text.indexOf("\n");
		var marginRight = 0.0;
		var offsetX = 2.0;
		var offsetY = 2.0;
		var textIndex = 0;
		var lineIndex = 0;
		var lineFormat = null;
		if(rangeIndex < _g.textFormatRanges.length - 1) {
			rangeIndex++;
			formatRange = _g.textFormatRanges[rangeIndex];
			currentFormat.__merge(formatRange.format);
			openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
			ascent = currentFormat.size;
			descent = currentFormat.size * 0.185;
			leading = currentFormat.leading;
			heightValue = ascent + descent + leading;
			if(spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
		}
		lineFormat = formatRange.format;
		var wrap;
		while(textIndex < this.text.length) if(breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex) && formatRange.end >= breakIndex) {
			layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,breakIndex);
			var text = this.text;
			var advances1 = [];
			var _g1 = textIndex;
			while(_g1 < breakIndex) {
				var i = _g1++;
				advances1.push(openfl__$internal_text_TextEngine.__context.measureText(text.charAt(i)).width);
			}
			layoutGroup.advances = advances1;
			layoutGroup.offsetX = offsetX;
			layoutGroup.ascent = ascent;
			layoutGroup.descent = descent;
			layoutGroup.leading = leading;
			layoutGroup.lineIndex = lineIndex;
			layoutGroup.offsetY = offsetY;
			var advances2 = layoutGroup.advances;
			var width = 0.0;
			var _g2 = 0;
			while(_g2 < advances2.length) {
				var advance = advances2[_g2];
				++_g2;
				width += advance;
			}
			layoutGroup.width = width;
			layoutGroup.height = heightValue;
			this.layoutGroups.push(layoutGroup);
			offsetY += heightValue;
			offsetX = 2;
			if(this.wordWrap && layoutGroup.offsetX + layoutGroup.width > this.width - 2) {
				layoutGroup.offsetY = offsetY;
				layoutGroup.offsetX = offsetX;
				offsetY += heightValue;
				lineIndex++;
			}
			textIndex = breakIndex + 1;
			breakIndex = this.text.indexOf("\n",textIndex);
			lineIndex++;
			if(formatRange.end == breakIndex) {
				if(rangeIndex < _g.textFormatRanges.length - 1) {
					rangeIndex++;
					formatRange = _g.textFormatRanges[rangeIndex];
					currentFormat.__merge(formatRange.format);
					openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
					ascent = currentFormat.size;
					descent = currentFormat.size * 0.185;
					leading = currentFormat.leading;
					heightValue = ascent + descent + leading;
					if(spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
				}
				lineFormat = formatRange.format;
			}
		} else if(formatRange.end >= spaceIndex && spaceIndex > -1) {
			layoutGroup = null;
			wrap = false;
			while(true) {
				if(spaceIndex == -1) spaceIndex = formatRange.end;
				var text1 = this.text;
				var advances3 = [];
				var _g3 = textIndex;
				while(_g3 < spaceIndex) {
					var i1 = _g3++;
					advances3.push(openfl__$internal_text_TextEngine.__context.measureText(text1.charAt(i1)).width);
				}
				advances = advances3;
				var width1 = 0.0;
				var _g4 = 0;
				while(_g4 < advances.length) {
					var advance1 = advances[_g4];
					++_g4;
					width1 += advance1;
				}
				widthValue = width1;
				if(this.wordWrap) {
					if(offsetX + widthValue > this.width - 2) wrap = true;
				}
				if(wrap) {
					offsetY += heightValue;
					var i2 = this.layoutGroups.length - 1;
					var offsetCount = 0;
					while(true) {
						layoutGroup = this.layoutGroups[i2];
						if(i2 > 0 && layoutGroup.startIndex > previousSpaceIndex) offsetCount++; else break;
						i2--;
					}
					lineIndex++;
					offsetX = 2;
					if(offsetCount > 0) {
						var bumpX = this.layoutGroups[this.layoutGroups.length - offsetCount].offsetX;
						var _g11 = this.layoutGroups.length - offsetCount;
						var _g5 = this.layoutGroups.length;
						while(_g11 < _g5) {
							var i3 = _g11++;
							layoutGroup = this.layoutGroups[i3];
							layoutGroup.offsetX -= bumpX;
							layoutGroup.offsetY = offsetY;
							layoutGroup.lineIndex = lineIndex;
							offsetX += layoutGroup.width;
						}
					}
					layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,spaceIndex);
					layoutGroup.advances = advances;
					layoutGroup.offsetX = offsetX;
					layoutGroup.ascent = ascent;
					layoutGroup.descent = descent;
					layoutGroup.leading = leading;
					layoutGroup.lineIndex = lineIndex;
					layoutGroup.offsetY = offsetY;
					layoutGroup.width = widthValue;
					layoutGroup.height = heightValue;
					this.layoutGroups.push(layoutGroup);
					offsetX = widthValue + spaceWidth;
					marginRight = spaceWidth;
					wrap = false;
				} else {
					if(layoutGroup != null && textIndex == spaceIndex) {
						if(formatRange.format.align != openfl_text_TextFormatAlign.JUSTIFY) layoutGroup.endIndex = spaceIndex;
						layoutGroup.advances.push(spaceWidth);
						marginRight += spaceWidth;
					} else if(layoutGroup == null || lineFormat.align == openfl_text_TextFormatAlign.JUSTIFY) {
						layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,spaceIndex);
						layoutGroup.advances = advances;
						layoutGroup.offsetX = offsetX;
						layoutGroup.ascent = ascent;
						layoutGroup.descent = descent;
						layoutGroup.leading = leading;
						layoutGroup.lineIndex = lineIndex;
						layoutGroup.offsetY = offsetY;
						layoutGroup.width = widthValue;
						layoutGroup.height = heightValue;
						this.layoutGroups.push(layoutGroup);
						layoutGroup.advances.push(spaceWidth);
						marginRight = spaceWidth;
					} else {
						layoutGroup.endIndex = spaceIndex;
						layoutGroup.advances = layoutGroup.advances.concat(advances);
						layoutGroup.width += marginRight + widthValue;
						layoutGroup.advances.push(spaceWidth);
						marginRight = spaceWidth;
					}
					offsetX += widthValue + spaceWidth;
				}
				textIndex = spaceIndex + 1;
				previousSpaceIndex = spaceIndex;
				spaceIndex = this.text.indexOf(" ",previousSpaceIndex + 1);
				if(formatRange.end <= previousSpaceIndex) {
					layoutGroup = null;
					if(rangeIndex < _g.textFormatRanges.length - 1) {
						rangeIndex++;
						formatRange = _g.textFormatRanges[rangeIndex];
						currentFormat.__merge(formatRange.format);
						openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
						ascent = currentFormat.size;
						descent = currentFormat.size * 0.185;
						leading = currentFormat.leading;
						heightValue = ascent + descent + leading;
						if(spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
					}
				}
				if(spaceIndex > breakIndex && breakIndex > -1 || textIndex > this.text.length || spaceIndex > formatRange.end || spaceIndex == -1 && breakIndex > -1) break;
			}
		} else {
			if(textIndex >= formatRange.end) break;
			layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,formatRange.end);
			var text2 = this.text;
			var advances4 = [];
			var _g6 = textIndex;
			while(_g6 < formatRange.end) {
				var i4 = _g6++;
				advances4.push(openfl__$internal_text_TextEngine.__context.measureText(text2.charAt(i4)).width);
			}
			layoutGroup.advances = advances4;
			layoutGroup.offsetX = offsetX;
			layoutGroup.ascent = ascent;
			layoutGroup.descent = descent;
			layoutGroup.leading = leading;
			layoutGroup.lineIndex = lineIndex;
			layoutGroup.offsetY = offsetY;
			var advances5 = layoutGroup.advances;
			var width2 = 0.0;
			var _g7 = 0;
			while(_g7 < advances5.length) {
				var advance2 = advances5[_g7];
				++_g7;
				width2 += advance2;
			}
			layoutGroup.width = width2;
			layoutGroup.height = heightValue;
			this.layoutGroups.push(layoutGroup);
			offsetX += layoutGroup.width;
			textIndex = formatRange.end;
			if(rangeIndex < _g.textFormatRanges.length - 1) {
				rangeIndex++;
				formatRange = _g.textFormatRanges[rangeIndex];
				currentFormat.__merge(formatRange.format);
				openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
				leading = currentFormat.leading;
				heightValue = ascent + descent + leading;
				if(spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
			}
		}
	}
	,setTextAlignment: function() {
		var lineIndex = -1;
		var offsetX = 0.0;
		var group;
		var lineLength;
		var _g1 = 0;
		var _g = this.layoutGroups.length;
		while(_g1 < _g) {
			var i = _g1++;
			group = this.layoutGroups[i];
			if(group.lineIndex != lineIndex) {
				lineIndex = group.lineIndex;
				var _g2 = group.format.align;
				switch(_g2[1]) {
				case 3:
					if(this.lineWidths[lineIndex] < this.width - 4) offsetX = Math.round((this.width - 4 - this.lineWidths[lineIndex]) / 2); else offsetX = 0;
					break;
				case 1:
					if(this.lineWidths[lineIndex] < this.width - 4) offsetX = Math.round(this.width - 4 - this.lineWidths[lineIndex]); else offsetX = 0;
					break;
				case 2:
					if(this.lineWidths[lineIndex] < this.width - 4) {
						lineLength = 1;
						var _g4 = i + 1;
						var _g3 = this.layoutGroups.length;
						while(_g4 < _g3) {
							var j = _g4++;
							if(this.layoutGroups[j].lineIndex == lineIndex) lineLength++; else break;
						}
						if(lineLength > 1) {
							group = this.layoutGroups[i + lineLength - 1];
							if(group.endIndex < this.text.length && this.text.charAt(group.endIndex) != "\n") {
								offsetX = (this.width - 4 - this.lineWidths[lineIndex]) / (lineLength - 1);
								var _g31 = 1;
								while(_g31 < lineLength) {
									var j1 = _g31++;
									this.layoutGroups[i + j1].offsetX += offsetX * j1;
								}
							}
						}
					}
					offsetX = 0;
					break;
				default:
					offsetX = 0;
				}
			}
			if(offsetX > 0) group.offsetX += offsetX;
		}
	}
	,update: function() {
		if(this.text == null || StringTools.trim(this.text) == "" || this.textFormatRanges.length == 0) {
			this.lineAscents.splice(0,this.lineAscents.length);
			this.lineBreaks.splice(0,this.lineBreaks.length);
			this.lineDescents.splice(0,this.lineDescents.length);
			this.lineLeadings.splice(0,this.lineLeadings.length);
			this.lineHeights.splice(0,this.lineHeights.length);
			this.lineWidths.splice(0,this.lineWidths.length);
			this.layoutGroups.splice(0,this.layoutGroups.length);
			this.textWidth = 0;
			this.textHeight = 0;
			this.numLines = 1;
			this.maxScrollH = 0;
			this.maxScrollV = 1;
			this.bottomScrollV = 1;
		} else {
			this.getLayoutGroups();
			this.getLineMeasurements();
			this.setTextAlignment();
		}
		this.getBounds();
	}
	,__class__: openfl__$internal_text_TextEngine
};
var openfl__$internal_text_TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl._internal.text.TextFormatRange"] = openfl__$internal_text_TextFormatRange;
openfl__$internal_text_TextFormatRange.__name__ = ["openfl","_internal","text","TextFormatRange"];
openfl__$internal_text_TextFormatRange.prototype = {
	__class__: openfl__$internal_text_TextFormatRange
};
var openfl__$internal_text_TextLayoutGroup = function(format,startIndex,endIndex) {
	this.format = format;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
};
$hxClasses["openfl._internal.text.TextLayoutGroup"] = openfl__$internal_text_TextLayoutGroup;
openfl__$internal_text_TextLayoutGroup.__name__ = ["openfl","_internal","text","TextLayoutGroup"];
openfl__$internal_text_TextLayoutGroup.prototype = {
	__class__: openfl__$internal_text_TextLayoutGroup
};
var openfl_display_Application = function() {
	lime_app_Application.call(this);
	if(openfl_Lib.application == null) openfl_Lib.application = this;
};
$hxClasses["openfl.display.Application"] = openfl_display_Application;
openfl_display_Application.__name__ = ["openfl","display","Application"];
openfl_display_Application.__super__ = lime_app_Application;
openfl_display_Application.prototype = $extend(lime_app_Application.prototype,{
	create: function(config) {
		this.config = config;
		this.backend.create(config);
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) this.backend.setFrameRate(config.fps);
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g = 0;
				var _g1 = config.windows;
				while(_g < _g1.length) {
					var windowConfig = _g1[_g];
					++_g;
					var $window = new openfl_display_Window(windowConfig);
					this.createWindow($window);
					break;
				}
			}
			if(this.preloader == null || this.preloader.complete) this.onPreloadComplete();
		}
	}
	,__class__: openfl_display_Application
});
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) smoothing = false;
	openfl_display_DisplayObject.call(this);
	this.bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) this.pixelSnapping = openfl_display_PixelSnapping.AUTO;
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	__getBounds: function(rect,matrix) {
		if(this.bitmapData != null) {
			var bounds = openfl_geom_Rectangle.__temp;
			bounds.setTo(0,0,this.bitmapData.width,this.bitmapData.height);
			bounds.__transform(bounds,matrix);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || this.bitmapData == null) return false;
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
		this.__getWorldTransform();
		var px = this.__worldTransform.__transformInverseX(x,y);
		var py = this.__worldTransform.__transformInverseY(x,y);
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) {
			if(stack != null && !interactiveOnly) stack.push(hitObject);
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.bitmapData == null) return false;
		this.__getWorldTransform();
		var px = this.__worldTransform.__transformInverseX(x,y);
		var py = this.__worldTransform.__transformInverseY(x,y);
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) return true;
		return false;
	}
	,__renderCairo: function(renderSession) {
		openfl__$internal_renderer_cairo_CairoBitmap.render(this,renderSession);
	}
	,__renderCairoMask: function(renderSession) {
		renderSession.cairo.rectangle(0,0,this.get_width(),this.get_height());
	}
	,__renderCanvas: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasBitmap.render(this,renderSession);
	}
	,__renderCanvasMask: function(renderSession) {
		renderSession.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable && this.bitmapData != null && this.bitmapData.__isValid) {
			if(this.bitmapData.image.buffer.__srcImage != null) openfl__$internal_renderer_dom_DOMBitmap.renderImage(this,renderSession); else openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(this,renderSession);
		} else {
			if(this.__image != null) {
				renderSession.element.removeChild(this.__image);
				this.__image = null;
				this.__style = null;
			}
			if(this.__canvas != null) {
				renderSession.element.removeChild(this.__canvas);
				this.__canvas = null;
				this.__style = null;
			}
		}
	}
	,__renderGL: function(renderSession) {
		if(this.__cacheAsBitmap) {
			this.__cacheGL(renderSession);
			return;
		}
		if(this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
		if(!this.__renderable || this.__worldAlpha <= 0 || this.bitmapData == null || !this.bitmapData.__isValid) null; else renderSession.spriteBatch.renderBitmapData(this.bitmapData,this.smoothing,this.__renderTransform,this.__worldColorTransform,this.__worldAlpha,this.__blendMode,this.__shader,this.pixelSnapping);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
		if(this.__scrollRect != null) renderSession.maskManager.popRect();
	}
	,__updateMask: function(maskGraphics) {
		maskGraphics.__commands.overrideMatrix(this.__worldTransform);
		maskGraphics.beginFill(0);
		maskGraphics.drawRect(0,0,this.bitmapData.width,this.bitmapData.height);
		if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl_geom_Rectangle();
		this.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		openfl_display_DisplayObject.prototype.__updateMask.call(this,maskGraphics);
	}
	,get_height: function() {
		if(this.bitmapData != null) return this.bitmapData.height * this.get_scaleY();
		return 0;
	}
	,set_height: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.height) this.set_scaleY(value / this.bitmapData.height);
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.bitmapData != null) return this.bitmapData.width * this.get_scaleX();
		return 0;
	}
	,set_width: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.width) this.set_scaleX(value / this.bitmapData.width);
			return value;
		}
		return 0;
	}
	,__class__: openfl_display_Bitmap
});
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) fillColor = -1;
	if(transparent == null) transparent = true;
	this.__usingPingPongTexture = false;
	this.transparent = transparent;
	if(width == null) width = 0; else width = width;
	if(height == null) height = 0; else height = height;
	if(width < 0) width = 0; else width = width;
	if(height < 0) height = 0; else height = height;
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) fillColor = 0;
		} else fillColor = -16777216 | fillColor & 16777215;
		fillColor = fillColor << 8 | fillColor >> 24 & 255;
		this.image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
	}
	this.__createUVs();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.fromBase64 = function(base64,type,onload) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	bitmapData.__fromBase64(base64,type,onload);
	return bitmapData;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha,onload) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	bitmapData.__fromBytes(bytes,rawAlpha,onload);
	return bitmapData;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) transparent = true;
	if(canvas == null) return null;
	var bitmapData = new openfl_display_BitmapData(0,0,transparent);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path,onload,onerror) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	bitmapData.__fromFile(path,onload,onerror);
	return bitmapData;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) transparent = true;
	if(image == null || image.buffer == null) return null;
	var bitmapData = new openfl_display_BitmapData(0,0,transparent);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.__asRenderTexture = function(width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	var b = new openfl_display_BitmapData(0,0);
	b.__resize(width,height);
	return b;
};
openfl_display_BitmapData.__ucompare = function(n1,n2) {
	var tmp1;
	var tmp2;
	tmp1 = n1 >> 24 & 255;
	tmp2 = n2 >> 24 & 255;
	if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
		tmp1 = n1 >> 16 & 255;
		tmp2 = n2 >> 16 & 255;
		if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
			tmp1 = n1 >> 8 & 255;
			tmp2 = n2 >> 8 & 255;
			if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else return 0;
			}
		}
	}
};
openfl_display_BitmapData.prototype = {
	applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid) return;
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(this.image);
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceBitmapData.image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(sourceBitmapData.image);
		filter.__applyFilter(this.image.buffer.__srcImageData,sourceBitmapData.image.buffer.__srcImageData,sourceRect,destPoint);
		this.image.dirty = true;
	}
	,clone: function() {
		if(!this.__isValid) return new openfl_display_BitmapData(this.width,this.height,this.transparent); else return openfl_display_BitmapData.fromImage(this.image.clone(),this.transparent);
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.__isValid) return;
		this.image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
		this.__usingPingPongTexture = false;
	}
	,compare: function(otherBitmapData) {
		if(otherBitmapData == this) return 0; else if(otherBitmapData == null) return -1; else if(this.__isValid == false || otherBitmapData.__isValid == false) return -2; else if(this.width != otherBitmapData.width) return -3; else if(this.height != otherBitmapData.height) return -4;
		if(this.image != null && otherBitmapData.image != null && this.image.get_format() == otherBitmapData.image.get_format()) {
			var bytes = this.image.get_data();
			var otherBytes = otherBitmapData.image.get_data();
			var equal = true;
			var _g1 = 0;
			var _g = bytes.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(bytes[i] != otherBytes[i]) {
					equal = false;
					break;
				}
			}
			if(equal) return 0;
		}
		var bitmapData = null;
		var foundDifference;
		var pixel;
		var otherPixel;
		var comparePixel;
		var r;
		var g;
		var b;
		var a;
		var _g11 = 0;
		var _g2 = this.height;
		while(_g11 < _g2) {
			var y = _g11++;
			var _g3 = 0;
			var _g21 = this.width;
			while(_g3 < _g21) {
				var x = _g3++;
				foundDifference = false;
				pixel = this.getPixel32(x,y);
				otherPixel = otherBitmapData.getPixel32(x,y);
				comparePixel = 0;
				if(pixel != otherPixel) {
					r = (pixel >> 16 & 255) - (otherPixel >> 16 & 255);
					g = (pixel >> 8 & 255) - (otherPixel >> 8 & 255);
					b = (pixel & 255) - (otherPixel & 255);
					if(r < 0) r *= -1;
					if(g < 0) g *= -1;
					if(b < 0) b *= -1;
					if(r == 0 && g == 0 && b == 0) {
						a = (pixel >> 24 & 255) - (otherPixel >> 24 & 255);
						if(a != 0) {
							comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | 16711680 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							255;
							comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | 65280 | comparePixel & 255 & 255;
							255;
							comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | 255;
							255;
							comparePixel = (a & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							a;
							foundDifference = true;
						}
					} else {
						comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						r;
						comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (g & 255) << 8 | comparePixel & 255 & 255;
						g;
						comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | b & 255;
						b;
						comparePixel = -16777216 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						255;
						foundDifference = true;
					}
				}
				if(foundDifference) {
					if(bitmapData == null) bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent || otherBitmapData.transparent,0);
					bitmapData.setPixel32(x,y,comparePixel);
				}
			}
		}
		if(bitmapData == null) return 0;
		return bitmapData;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.__isValid) return;
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.image.copyChannel(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
		this.__usingPingPongTexture = false;
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(!this.__isValid || sourceBitmapData == null) return;
		this.image.copyPixels(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null?alphaBitmapData.image:null,alphaPoint != null?alphaPoint.__toLimeVector2():null,mergeAlpha);
		this.__usingPingPongTexture = false;
	}
	,dispose: function() {
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		if(this.__texture != null) {
			var renderer = openfl_Lib.current.stage.__renderer;
			if(renderer != null) {
				var renderSession = renderer.renderSession;
				var gl = renderSession.gl;
				if(gl != null) {
					gl.deleteTexture(this.__texture);
					this.__texture = null;
				}
			}
		}
		if(this.__pingPongTexture != null) {
			this.__pingPongTexture.destroy();
			this.__pingPongTexture = null;
		}
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) smoothing = false;
		if(!this.__isValid) return;
		if(colorTransform != null) {
			var copy = new openfl_display_BitmapData(Reflect.getProperty(source,"width"),Reflect.getProperty(source,"height"),true,0);
			copy.draw(source);
			copy.colorTransform(copy.rect,colorTransform);
			source = copy;
		}
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,true);
		var buffer = this.image.buffer;
		var renderSession = new openfl__$internal_renderer_RenderSession();
		renderSession.context = buffer.__srcContext;
		renderSession.roundPixels = true;
		renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(renderSession);
		if(!smoothing) {
			buffer.__srcContext.mozImageSmoothingEnabled = false;
			buffer.__srcContext.msImageSmoothingEnabled = false;
			buffer.__srcContext.imageSmoothingEnabled = false;
		}
		if(clipRect != null) renderSession.maskManager.pushRect(clipRect,new openfl_geom_Matrix());
		var matrixCache = source.__worldTransform;
		source.__updateTransforms(matrix != null?matrix:new openfl_geom_Matrix());
		source.__updateChildren(false);
		source.__renderCanvas(renderSession);
		source.__updateTransforms(matrixCache);
		source.__updateChildren(true);
		if(!smoothing) {
			buffer.__srcContext.mozImageSmoothingEnabled = true;
			buffer.__srcContext.msImageSmoothingEnabled = true;
			buffer.__srcContext.imageSmoothingEnabled = true;
		}
		if(clipRect != null) renderSession.maskManager.popMask();
		buffer.__srcContext.setTransform(1,0,0,1,0,0);
		buffer.__srcImageData = null;
		buffer.data = null;
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.__isValid || rect == null) return byteArray = null;
		if(js_Boot.__instanceof(compressor,openfl_display_PNGEncoderOptions)) return byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.encode("png")); else if(js_Boot.__instanceof(compressor,openfl_display_JPEGEncoderOptions)) return byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.encode("jpg",(js_Boot.__cast(compressor , openfl_display_JPEGEncoderOptions)).quality));
		return byteArray = null;
	}
	,fillRect: function(rect,color) {
		if(!this.__isValid || rect == null) return;
		if(this.transparent && (color & -16777216) == 0) color = 0;
		this.image.fillRect(rect.__toLimeRectangle(),color,1);
		this.__usingPingPongTexture = false;
	}
	,floodFill: function(x,y,color) {
		if(!this.__isValid) return;
		this.image.floodFill(x,y,color,1);
		this.__usingPingPongTexture = false;
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getBuffer: function(gl) {
		if(this.__buffer == null) {
			var data = [this.width,this.height,0,1,1,0,this.height,0,0,1,this.width,0,0,1,0,0,0,0,0,0];
			this.__buffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			gl.bufferData(gl.ARRAY_BUFFER,(function($this) {
				var $r;
				var this1;
				if(data != null) this1 = new Float32Array(data); else this1 = null;
				$r = this1;
				return $r;
			}(this)),gl.STATIC_DRAW);
			gl.bindBuffer(gl.ARRAY_BUFFER,null);
		}
		return this.__buffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) findColor = true;
		if(!this.__isValid) return new openfl_geom_Rectangle(0,0,this.width,this.height);
		if(!this.transparent || (mask >> 24 & 255) > 0) {
			var color1 = color;
			if((color1 >> 24 & 255) == 0) color1 = 0;
		}
		var rect = this.image.getColorBoundsRect(mask,color,findColor,1);
		return new openfl_geom_Rectangle(rect.x,rect.y,rect.width,rect.height);
	}
	,getPixel: function(x,y) {
		if(!this.__isValid) return 0;
		return this.image.getPixel(x,y,1);
	}
	,getPixel32: function(x,y) {
		if(!this.__isValid) return 0;
		return this.image.getPixel32(x,y,1);
	}
	,getPixels: function(rect) {
		if(!this.__isValid) return null;
		if(rect == null) rect = this.rect;
		return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.getPixels(rect.__toLimeRectangle(),1));
	}
	,getSurface: function() {
		if(!this.__isValid) return null;
		if(this.__surface == null) this.__surface = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage(this.image);
		return this.__surface;
	}
	,getTexture: function(gl) {
		if(!this.__isValid) return null;
		if(this.__usingPingPongTexture && this.__pingPongTexture != null) return this.__pingPongTexture.get_texture();
		if(this.__texture == null) {
			this.__texture = gl.createTexture();
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
			this.image.dirty = true;
		}
		if(this.image != null && this.image.dirty) {
			var internalFormat;
			var format;
			if(this.__surface != null) lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush(this.__surface);
			if(this.image.buffer.bitsPerPixel == 1) {
				internalFormat = gl.ALPHA;
				format = gl.ALPHA;
			} else {
				internalFormat = gl.RGBA;
				format = gl.RGBA;
			}
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			var textureImage = this.image;
			if(!textureImage.get_premultiplied() && textureImage.get_transparent() || textureImage.get_format() != 0) {
				textureImage = textureImage.clone();
				textureImage.set_format(0);
				textureImage.set_premultiplied(true);
			}
			gl.texImage2D(gl.TEXTURE_2D,0,internalFormat,this.width,this.height,0,format,gl.UNSIGNED_BYTE,textureImage.get_data());
			gl.bindTexture(gl.TEXTURE_2D,null);
			this.image.dirty = false;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = Std["int"](openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels) / 4);
		var result;
		var this1;
		this1 = new openfl_VectorData();
		var this2;
		this2 = new Array(length);
		this1.data = this2;
		this1.length = length;
		this1.fixed = true;
		result = this1;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var value = pixels.readUnsignedInt();
			if(!result.fixed) {
				if(i >= result.length) result.length = i + 1;
				if(result.data.length < result.length) {
					var data;
					var this3;
					this3 = new Array(result.data.length + 10);
					data = this3;
					haxe_ds__$Vector_Vector_$Impl_$.blit(result.data,0,data,0,result.data.length);
					result.data = data;
				}
			}
			result.data[i] = value;
		}
		return result;
	}
	,histogram: function(hRect) {
		var rect;
		if(hRect != null) rect = hRect; else rect = new openfl_geom_Rectangle(0,0,this.width,this.height);
		var pixels = this.getPixels(rect);
		var result;
		var _g = [];
		var _g1 = 0;
		while(_g1 < 4) {
			var i = _g1++;
			_g.push((function($this) {
				var $r;
				var _g2 = [];
				{
					var _g3 = 0;
					while(_g3 < 256) {
						var j = _g3++;
						_g2.push(0);
					}
				}
				$r = _g2;
				return $r;
			}(this)));
		}
		result = _g;
		var _g21 = 0;
		var _g11 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels);
		while(_g21 < _g11) {
			var i1 = _g21++;
			++result[i1 % 4][pixels.readUnsignedByte()];
		}
		return result;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) secondAlphaThreshold = 1;
		if(!this.__isValid) return false;
		if(js_Boot.__instanceof(secondObject,openfl_display_Bitmap)) secondObject = (js_Boot.__cast(secondObject , openfl_display_Bitmap)).bitmapData;
		if(js_Boot.__instanceof(secondObject,openfl_geom_Point)) {
			var secondPoint = secondObject;
			var x = secondPoint.x - firstPoint.x | 0;
			var y = secondPoint.y - firstPoint.y | 0;
			if(this.rect.contains(x,y)) {
				var pixel = this.getPixel32(x,y);
				if((pixel >> 24 & 255) >= firstAlphaThreshold) return true;
			}
		} else if(js_Boot.__instanceof(secondObject,openfl_display_BitmapData)) {
			var secondBitmapData = secondObject;
			var x1;
			var y1;
			if(secondBitmapDataPoint == null) {
				x1 = 0;
				y1 = 0;
			} else {
				x1 = secondBitmapDataPoint.x - firstPoint.x | 0;
				y1 = secondBitmapDataPoint.y - firstPoint.y | 0;
			}
			if(this.rect.contains(x1,y1)) {
				var hitRect = openfl_geom_Rectangle.__temp;
				hitRect.setTo(x1,y1,Math.min(secondBitmapData.width,this.width - x1),Math.min(secondBitmapData.height,this.height - y1));
				var pixels = this.getPixels(hitRect);
				hitRect.offset(-x1,-y1);
				var testPixels = secondBitmapData.getPixels(hitRect);
				var length = hitRect.width * hitRect.height | 0;
				var pixel1;
				var testPixel;
				var _g = 0;
				while(_g < length) {
					var i = _g++;
					pixel1 = pixels.readUnsignedInt();
					testPixel = testPixels.readUnsignedInt();
					if((pixel1 >> 24 & 255) >= firstAlphaThreshold && (testPixel >> 24 & 255) >= secondAlphaThreshold) return true;
				}
				return false;
			}
		} else if(js_Boot.__instanceof(secondObject,openfl_geom_Rectangle)) {
			var secondRectangle = openfl_geom_Rectangle.__temp;
			secondRectangle.copyFrom(secondObject);
			secondRectangle.offset(-firstPoint.x,-firstPoint.y);
			secondRectangle.__contract(0,0,this.width,this.height);
			if(secondRectangle.width > 0 && secondRectangle.height > 0) {
				var pixels1 = this.getPixels(secondRectangle);
				var length1 = Std["int"](openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels1) / 4);
				var pixel2;
				var _g1 = 0;
				while(_g1 < length1) {
					var i1 = _g1++;
					pixel2 = pixels1.readUnsignedInt();
					if((pixel2 >> 24 & 255) >= firstAlphaThreshold) return true;
				}
			}
		}
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid || sourceRect == null || destPoint == null) return;
		this.image.merge(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
		this.__usingPingPongTexture = false;
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		if(high == null) high = 255;
		if(low == null) low = 0;
		if(!this.__isValid) return;
		openfl_Lib.notImplemented("BitmapData.noise");
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = this.getPixels(sourceRect);
		pixels.position = 0;
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var c1;
		var c2;
		var c3;
		var c4;
		var _g1 = 0;
		var _g = sh * sw;
		while(_g1 < _g) {
			var i = _g1++;
			pixelValue = pixels.readUnsignedInt();
			if(alphaArray == null) c1 = pixelValue & -16777216; else c1 = alphaArray[pixelValue >> 24 & 255];
			if(redArray == null) c2 = pixelValue & 16711680; else c2 = redArray[pixelValue >> 16 & 255];
			if(greenArray == null) c3 = pixelValue & 65280; else c3 = greenArray[pixelValue >> 8 & 255];
			if(blueArray == null) c4 = pixelValue & 255; else c4 = blueArray[pixelValue & 255];
			a = (c1 >> 24 & 255) + (c2 >> 24 & 255) + (c3 >> 24 & 255) + (c4 >> 24 & 255);
			if(a > 255) a == 255;
			r = (c1 >> 16 & 255) + (c2 >> 16 & 255) + (c3 >> 16 & 255) + (c4 >> 16 & 255);
			if(r > 255) r == 255;
			g = (c1 >> 8 & 255) + (c2 >> 8 & 255) + (c3 >> 8 & 255) + (c4 >> 8 & 255);
			if(g > 255) g == 255;
			b = (c1 & 255) + (c2 & 255) + (c3 & 255) + (c4 & 255);
			if(b > 255) b == 255;
			color = a << 24 | r << 16 | g << 8 | b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		var destRect = new openfl_geom_Rectangle(destPoint.x,destPoint.y,sw,sh);
		this.setPixels(destRect,pixels);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		openfl_Lib.notImplemented("BitmapData.perlinNoise");
	}
	,scroll: function(x,y) {
		if(!this.__isValid) return;
		this.image.scroll(x,y);
		this.__usingPingPongTexture = false;
	}
	,setPixel: function(x,y,color) {
		if(!this.__isValid) return;
		this.image.setPixel(x,y,color,1);
		this.__usingPingPongTexture = false;
	}
	,setPixel32: function(x,y,color) {
		if(!this.__isValid) return;
		this.image.setPixel32(x,y,color,1);
		this.__usingPingPongTexture = false;
	}
	,setPixels: function(rect,byteArray) {
		if(!this.__isValid || rect == null) return;
		this.image.setPixels(rect.__toLimeRectangle(),openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(byteArray),1);
		this.__usingPingPongTexture = false;
	}
	,setVector: function(rect,inputVector) {
		var byteArray = new openfl_utils_ByteArrayData(0);
		openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length(byteArray,inputVector.length * 4);
		var _g = 0;
		while(_g < inputVector.length) {
			var color = inputVector.data[_g];
			++_g;
			byteArray.writeUnsignedInt(color);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) copySource = false;
		if(mask == null) mask = -1;
		if(color == null) color = 0;
		if(sourceBitmapData == null || sourceRect == null || destPoint == null || sourceRect.x > sourceBitmapData.width || sourceRect.y > sourceBitmapData.height || destPoint.x > this.width || destPoint.y > this.height) return 0;
		if(sourceBitmapData == this && sourceRect.equals(this.rect) && destPoint.x == 0 && destPoint.y == 0) {
			var hits = 0;
			var memory = new openfl_utils_ByteArrayData(this.width * this.height * 4);
			memory = this.getPixels(this.rect);
			memory.position = 0;
			openfl_Memory.select(memory);
			var thresholdMask = threshold & mask;
			var width_yy;
			var position;
			var pixelMask;
			var pixelValue;
			var i;
			var test;
			var _g1 = 0;
			var _g = this.height;
			while(_g1 < _g) {
				var yy = _g1++;
				width_yy = this.width * yy;
				var _g3 = 0;
				var _g2 = this.width;
				while(_g3 < _g2) {
					var xx = _g3++;
					position = (width_yy + xx) * 4;
					pixelValue = openfl_Memory._setPositionTemporarily(position,function() {
						return openfl_Memory.gcRef.readInt();
					});
					pixelMask = pixelValue & mask;
					i = openfl_display_BitmapData.__ucompare(pixelMask,thresholdMask);
					test = false;
					if(operation == "==") test = i == 0; else if(operation == "<") test = i == -1; else if(operation == ">") test = i == 1; else if(operation == "!=") test = i != 0; else if(operation == "<=") test = i == 0 || i == -1; else if(operation == ">=") test = i == 0 || i == 1;
					if(test) {
						openfl_Memory.setI32(position,color);
						hits++;
					}
				}
			}
			memory.position = 0;
			this.setPixels(this.rect,memory);
			openfl_Memory.select(null);
			return hits;
		} else {
			sourceRect = sourceRect.clone();
			if(sourceRect.get_right() > sourceBitmapData.width) sourceRect.width = sourceBitmapData.width - sourceRect.x;
			if(sourceRect.get_bottom() > sourceBitmapData.height) sourceRect.height = sourceBitmapData.height - sourceRect.y;
			var targetRect = sourceRect.clone();
			targetRect.offsetPoint(destPoint);
			if(targetRect.get_right() > this.width) targetRect.width = this.width - targetRect.x;
			if(targetRect.get_bottom() > this.height) targetRect.height = this.height - targetRect.y;
			sourceRect.width = Math.min(sourceRect.width,targetRect.width);
			sourceRect.height = Math.min(sourceRect.height,targetRect.height);
			var sx = sourceRect.x | 0;
			var sy = sourceRect.y | 0;
			var sw = sourceRect.width | 0;
			var sh = sourceRect.height | 0;
			var dx = destPoint.x | 0;
			var dy = destPoint.y | 0;
			var bw = this.width - sw - dx;
			var bh = this.height - sh - dy;
			var dw;
			if(bw < 0) dw = sw + (this.width - sw - dx); else dw = sw;
			var dh;
			if(bw < 0) dh = sh + (this.height - sh - dy); else dh = sh;
			var hits1 = 0;
			var canvasMemory = sw * sh * 4;
			var sourceMemory = sw * sh * 4;
			var totalMemory = canvasMemory + sourceMemory;
			var memory1 = new openfl_utils_ByteArrayData(totalMemory);
			memory1.position = 0;
			var pixels = sourceBitmapData.getPixels(sourceRect);
			if(copySource) memory1.writeBytes(pixels); else memory1.writeBytes(this.getPixels(targetRect));
			memory1.position = canvasMemory;
			memory1.writeBytes(pixels);
			memory1.position = 0;
			openfl_Memory.select(memory1);
			var thresholdMask1 = threshold & mask;
			var position1;
			var pixelMask1;
			var pixelValue1;
			var i1;
			var test1;
			var _g4 = 0;
			while(_g4 < dh) {
				var yy1 = _g4++;
				var _g11 = 0;
				while(_g11 < dw) {
					var xx1 = _g11++;
					position1 = (xx1 + sx + (yy1 + sy) * sw) * 4;
					pixelValue1 = openfl_Memory._setPositionTemporarily(canvasMemory + position1,function() {
						return openfl_Memory.gcRef.readInt();
					});
					pixelMask1 = pixelValue1 & mask;
					i1 = openfl_display_BitmapData.__ucompare(pixelMask1,thresholdMask1);
					test1 = false;
					if(operation == "==") test1 = i1 == 0; else if(operation == "<") test1 = i1 == -1; else if(operation == ">") test1 = i1 == 1; else if(operation == "!=") test1 = i1 != 0; else if(operation == "<=") test1 = i1 == 0 || i1 == -1; else if(operation == ">=") test1 = i1 == 0 || i1 == 1;
					if(test1) {
						openfl_Memory.setI32(position1,color);
						hits1++;
					}
				}
			}
			memory1.position = 0;
			this.setPixels(targetRect,memory1);
			openfl_Memory.select(null);
			return hits1;
		}
	}
	,unlock: function(changeRect) {
	}
	,__createUVs: function(x0,y0,x1,y1,x2,y2,x3,y3) {
		if(y3 == null) y3 = 1;
		if(x3 == null) x3 = 0;
		if(y2 == null) y2 = 1;
		if(x2 == null) x2 = 1;
		if(y1 == null) y1 = 0;
		if(x1 == null) x1 = 1;
		if(y0 == null) y0 = 0;
		if(x0 == null) x0 = 0;
		if(this.__uvData == null) this.__uvData = new openfl_display_TextureUvs();
		this.__uvData.x0 = x0;
		this.__uvData.y0 = y0;
		this.__uvData.x1 = x1;
		this.__uvData.y1 = y1;
		this.__uvData.x2 = x2;
		this.__uvData.y2 = y2;
		this.__uvData.x3 = x3;
		this.__uvData.y3 = y3;
	}
	,__drawGL: function(renderSession,source,matrix,colorTransform,blendMode,clipRect,smoothing,drawSelf,clearBuffer,readPixels,powerOfTwo) {
		if(powerOfTwo == null) powerOfTwo = true;
		if(readPixels == null) readPixels = false;
		if(clearBuffer == null) clearBuffer = false;
		if(drawSelf == null) drawSelf = false;
		if(smoothing == null) smoothing = false;
		this.__pingPongTexture = openfl__$internal_renderer_opengl_GLBitmap.pushFramebuffer(renderSession,this.__pingPongTexture,this.rect,smoothing,this.transparent,clearBuffer,powerOfTwo);
		openfl__$internal_renderer_opengl_GLBitmap.drawBitmapDrawable(renderSession,drawSelf?this:null,source,matrix,colorTransform,blendMode,clipRect);
		openfl__$internal_renderer_opengl_GLBitmap.popFramebuffer(renderSession,readPixels?this.image:null);
		var uv = this.__pingPongTexture.get_renderTexture().__uvData;
		this.__createUVs(uv.x0,uv.y0,uv.x1,uv.y1,uv.x2,uv.y2,uv.x3,uv.y3);
		this.__isValid = true;
		this.__usingPingPongTexture = true;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		lime_graphics_Image.fromBase64(base64,type,function(image) {
			_g.__fromImage(image);
			if(onload != null) onload(_g);
		});
	}
	,__fromBytes: function(bytes,rawAlpha,onload) {
		var _g = this;
		lime_graphics_Image.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),function(image) {
			_g.__fromImage(image);
			if(rawAlpha != null) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
				lime_graphics_utils_ImageCanvasUtil.createImageData(image);
				var data = image.buffer.data;
				var _g2 = 0;
				var _g1 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(rawAlpha);
				while(_g2 < _g1) {
					var i = _g2++;
					var val = rawAlpha.readUnsignedByte();
					data[i * 4 + 3] = val;
				}
				image.dirty = true;
			}
			if(onload != null) onload(_g);
		});
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		lime_graphics_Image.fromFile(path,function(image) {
			_g.__fromImage(image);
			if(onload != null) onload(_g);
		},onerror);
	}
	,__fromImage: function(image) {
		if(image != null && image.buffer != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.__isValid = true;
		}
	}
	,__renderCairo: function(renderSession) {
		if(!this.__isValid) return;
		var cairo = renderSession.cairo;
		if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else cairo.set_matrix(transform.__toMatrix3());
		var surface = this.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
			if(cairo.get_antialias() == 1) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,3); else lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,1);
			cairo.set_source(pattern);
			cairo.paint();
		}
	}
	,__renderCairoMask: function(renderSession) {
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__isValid) return;
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
		var context = renderSession.context;
		if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
		context.globalAlpha = 1;
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.drawImage(this.image.get_src(),0,0);
	}
	,__renderCanvasMask: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		renderSession.spriteBatch.renderBitmapData(this,false,this.__worldTransform,this.__worldColorTransform,this.__worldColorTransform.alphaMultiplier,this.__blendMode,this.__shader);
	}
	,__resize: function(width,height) {
		this.width = width;
		this.height = height;
		this.rect.width = width;
		this.rect.height = height;
	}
	,__sync: function() {
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
	}
	,__updateChildren: function(transformOnly) {
	}
	,__updateMask: function(maskGraphics) {
	}
	,__updateTransforms: function(overrideTransform) {
		if(overrideTransform == null) this.__worldTransform.identity(); else this.__worldTransform = overrideTransform;
	}
	,__class__: openfl_display_BitmapData
};
var openfl_display_TextureUvs = function() {
	this.y3 = 0;
	this.y2 = 0;
	this.y1 = 0;
	this.y0 = 0;
	this.x3 = 0;
	this.x2 = 0;
	this.x1 = 0;
	this.x0 = 0;
};
$hxClasses["openfl.display.TextureUvs"] = openfl_display_TextureUvs;
openfl_display_TextureUvs.__name__ = ["openfl","display","TextureUvs"];
openfl_display_TextureUvs.prototype = {
	reset: function() {
		this.x0 = this.x1 = this.x2 = this.x3 = this.y0 = this.y1 = this.y2 = this.y3 = 0;
	}
	,__class__: openfl_display_TextureUvs
};
var openfl_display_BitmapDataChannel = function() { };
$hxClasses["openfl.display.BitmapDataChannel"] = openfl_display_BitmapDataChannel;
openfl_display_BitmapDataChannel.__name__ = ["openfl","display","BitmapDataChannel"];
var openfl_display_BlendMode = $hxClasses["openfl.display.BlendMode"] = { __ename__ : true, __constructs__ : ["ADD","ALPHA","DARKEN","DIFFERENCE","ERASE","HARDLIGHT","INVERT","LAYER","LIGHTEN","MULTIPLY","NORMAL","OVERLAY","SCREEN","SHADER","SUBTRACT"] };
openfl_display_BlendMode.ADD = ["ADD",0];
openfl_display_BlendMode.ADD.toString = $estr;
openfl_display_BlendMode.ADD.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.ALPHA = ["ALPHA",1];
openfl_display_BlendMode.ALPHA.toString = $estr;
openfl_display_BlendMode.ALPHA.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.DARKEN = ["DARKEN",2];
openfl_display_BlendMode.DARKEN.toString = $estr;
openfl_display_BlendMode.DARKEN.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.DIFFERENCE = ["DIFFERENCE",3];
openfl_display_BlendMode.DIFFERENCE.toString = $estr;
openfl_display_BlendMode.DIFFERENCE.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.ERASE = ["ERASE",4];
openfl_display_BlendMode.ERASE.toString = $estr;
openfl_display_BlendMode.ERASE.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.HARDLIGHT = ["HARDLIGHT",5];
openfl_display_BlendMode.HARDLIGHT.toString = $estr;
openfl_display_BlendMode.HARDLIGHT.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.INVERT = ["INVERT",6];
openfl_display_BlendMode.INVERT.toString = $estr;
openfl_display_BlendMode.INVERT.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.LAYER = ["LAYER",7];
openfl_display_BlendMode.LAYER.toString = $estr;
openfl_display_BlendMode.LAYER.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.LIGHTEN = ["LIGHTEN",8];
openfl_display_BlendMode.LIGHTEN.toString = $estr;
openfl_display_BlendMode.LIGHTEN.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.MULTIPLY = ["MULTIPLY",9];
openfl_display_BlendMode.MULTIPLY.toString = $estr;
openfl_display_BlendMode.MULTIPLY.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.NORMAL = ["NORMAL",10];
openfl_display_BlendMode.NORMAL.toString = $estr;
openfl_display_BlendMode.NORMAL.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.OVERLAY = ["OVERLAY",11];
openfl_display_BlendMode.OVERLAY.toString = $estr;
openfl_display_BlendMode.OVERLAY.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.SCREEN = ["SCREEN",12];
openfl_display_BlendMode.SCREEN.toString = $estr;
openfl_display_BlendMode.SCREEN.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.SHADER = ["SHADER",13];
openfl_display_BlendMode.SHADER.toString = $estr;
openfl_display_BlendMode.SHADER.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.SUBTRACT = ["SUBTRACT",14];
openfl_display_BlendMode.SUBTRACT.toString = $estr;
openfl_display_BlendMode.SUBTRACT.__enum__ = openfl_display_BlendMode;
var openfl_display_CapsStyle = $hxClasses["openfl.display.CapsStyle"] = { __ename__ : true, __constructs__ : ["NONE","ROUND","SQUARE"] };
openfl_display_CapsStyle.NONE = ["NONE",0];
openfl_display_CapsStyle.NONE.toString = $estr;
openfl_display_CapsStyle.NONE.__enum__ = openfl_display_CapsStyle;
openfl_display_CapsStyle.ROUND = ["ROUND",1];
openfl_display_CapsStyle.ROUND.toString = $estr;
openfl_display_CapsStyle.ROUND.__enum__ = openfl_display_CapsStyle;
openfl_display_CapsStyle.SQUARE = ["SQUARE",2];
openfl_display_CapsStyle.SQUARE.toString = $estr;
openfl_display_CapsStyle.SQUARE.__enum__ = openfl_display_CapsStyle;
var openfl_display_DirectRenderer = function(type) {
	if(type == null) type = "DirectRenderer";
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.DirectRenderer"] = openfl_display_DirectRenderer;
openfl_display_DirectRenderer.__name__ = ["openfl","display","DirectRenderer"];
openfl_display_DirectRenderer.__super__ = openfl_display_DisplayObject;
openfl_display_DirectRenderer.prototype = $extend(openfl_display_DisplayObject.prototype,{
	get_render: function() {
		return this.__render;
	}
	,set_render: function(value) {
		return this.__render = value;
	}
	,__class__: openfl_display_DirectRenderer
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_render:"set_render",get_render:"get_render"})
});
var openfl_display_FrameLabel = function(name,frame) {
	openfl_events_EventDispatcher.call(this);
	this.__name = name;
	this.__frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
openfl_display_FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	get_frame: function() {
		return this.__frame;
	}
	,get_name: function() {
		return this.__name;
	}
	,__class__: openfl_display_FrameLabel
	,__properties__: {get_name:"get_name",get_frame:"get_frame"}
});
var openfl_display_GradientType = $hxClasses["openfl.display.GradientType"] = { __ename__ : true, __constructs__ : ["RADIAL","LINEAR"] };
openfl_display_GradientType.RADIAL = ["RADIAL",0];
openfl_display_GradientType.RADIAL.toString = $estr;
openfl_display_GradientType.RADIAL.__enum__ = openfl_display_GradientType;
openfl_display_GradientType.LINEAR = ["LINEAR",1];
openfl_display_GradientType.LINEAR.toString = $estr;
openfl_display_GradientType.LINEAR.__enum__ = openfl_display_GradientType;
var openfl_display_Graphics = function() {
	this.__glStack = [];
	this.__dirty = true;
	this.__commands = new openfl__$internal_renderer_DrawCommandBuffer();
	this.__strokePadding = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__hardware = true;
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = ["openfl","display","Graphics"];
openfl_display_Graphics.prototype = {
	beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		this.__commands.beginBitmapFill(bitmap,matrix != null?new openfl_geom_Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty):null,repeat,smooth);
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) alpha = 1;
		if(color == null) color = 0;
		this.__commands.beginFill(color & 16777215,alpha);
		if(alpha > 0) this.__visible = true;
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.__commands.beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
		this.__hardware = false;
		var _g = 0;
		while(_g < alphas.length) {
			var alpha = alphas[_g];
			++_g;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,clear: function() {
		this.__commands.clear();
		this.__strokePadding = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.__hardware = true;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		this.__bounds = sourceGraphics.__bounds.clone();
		this.__commands = sourceGraphics.__commands.copy();
		this.set___dirty(true);
		this.__strokePadding = sourceGraphics.__strokePadding;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix1;
		var iy1;
		var ix2;
		var iy2;
		ix1 = anchorX;
		ix2 = anchorX;
		if(!((controlX1 < anchorX && controlX1 > this.__positionX || controlX1 > anchorX && controlX1 < this.__positionX) && (controlX2 < anchorX && controlX2 > this.__positionX || controlX2 > anchorX && controlX2 < this.__positionX))) {
			var u = 2 * this.__positionX - 4 * controlX1 + 2 * controlX2;
			var v = controlX1 - this.__positionX;
			var w = -this.__positionX + 3 * controlX1 + anchorX - 3 * controlX2;
			var t1 = (-u + Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			var t2 = (-u - Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			if(t1 > 0 && t1 < 1) ix1 = this.__calculateBezierCubicPoint(t1,this.__positionX,controlX1,controlX2,anchorX);
			if(t2 > 0 && t2 < 1) ix2 = this.__calculateBezierCubicPoint(t2,this.__positionX,controlX1,controlX2,anchorX);
		}
		iy1 = anchorY;
		iy2 = anchorY;
		if(!((controlY1 < anchorY && controlY1 > this.__positionX || controlY1 > anchorY && controlY1 < this.__positionX) && (controlY2 < anchorY && controlY2 > this.__positionX || controlY2 > anchorY && controlY2 < this.__positionX))) {
			var u1 = 2 * this.__positionX - 4 * controlY1 + 2 * controlY2;
			var v1 = controlY1 - this.__positionX;
			var w1 = -this.__positionX + 3 * controlY1 + anchorY - 3 * controlY2;
			var t11 = (-u1 + Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			var t21 = (-u1 - Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			if(t11 > 0 && t11 < 1) iy1 = this.__calculateBezierCubicPoint(t11,this.__positionX,controlY1,controlY2,anchorY);
			if(t21 > 0 && t21 < 1) iy2 = this.__calculateBezierCubicPoint(t21,this.__positionX,controlY1,controlY2,anchorY);
		}
		this.__inflateBounds(ix1 - this.__strokePadding,iy1 - this.__strokePadding);
		this.__inflateBounds(ix1 + this.__strokePadding,iy1 + this.__strokePadding);
		this.__inflateBounds(ix2 - this.__strokePadding,iy2 - this.__strokePadding);
		this.__inflateBounds(ix2 + this.__strokePadding,iy2 + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.cubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix;
		var iy;
		if(controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) ix = anchorX; else {
			var tx = (this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX);
			ix = this.__calculateBezierQuadPoint(tx,this.__positionX,controlX,anchorX);
		}
		if(controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) iy = anchorY; else {
			var ty = (this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY);
			iy = this.__calculateBezierQuadPoint(ty,this.__positionY,controlY,anchorY);
		}
		this.__inflateBounds(ix - this.__strokePadding,iy - this.__strokePadding);
		this.__inflateBounds(ix + this.__strokePadding,iy + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.curveTo(controlX,controlY,anchorX,anchorY);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) return;
		this.__inflateBounds(x - radius - this.__strokePadding,y - radius - this.__strokePadding);
		this.__inflateBounds(x + radius + this.__strokePadding,y + radius + this.__strokePadding);
		this.__commands.drawCircle(x,y,radius);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawEllipse(x,y,width,height);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawGraphicsData: function(graphicsData) {
		var fill;
		var bitmapFill;
		var gradientFill;
		var stroke;
		var path;
		var _g = 0;
		while(_g < graphicsData.length) {
			var graphics = graphicsData.data[_g];
			++_g;
			if(js_Boot.__instanceof(graphics,openfl_display_GraphicsSolidFill)) {
				fill = graphics;
				this.beginFill(fill.color,fill.alpha);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsBitmapFill)) {
				bitmapFill = graphics;
				this.beginBitmapFill(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsGradientFill)) {
				gradientFill = graphics;
				this.beginGradientFill(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsStroke)) {
				stroke = graphics;
				if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsSolidFill)) {
					fill = stroke.fill;
					this.lineStyle(stroke.thickness,fill.color,fill.alpha,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
				} else {
					this.lineStyle(stroke.thickness,0,1,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
					if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsBitmapFill)) {
						bitmapFill = stroke.fill;
						this.lineBitmapStyle(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
					} else if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsGradientFill)) {
						gradientFill = stroke.fill;
						this.lineGradientStyle(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
					}
				}
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsPath)) {
				path = graphics;
				this.drawPath(path.commands,path.data,path.winding);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsEndFill)) this.endFill();
		}
	}
	,drawPath: function(commands,data,winding) {
		var dataIndex = 0;
		var _g = 0;
		try {
			while(_g < commands.length) {
				var command = commands.data[_g];
				++_g;
				if(command != null) switch(command) {
				case 1:
					this.moveTo(data.data[dataIndex],data.data[dataIndex + 1]);
					dataIndex += 2;
					break;
				case 2:
					this.lineTo(data.data[dataIndex],data.data[dataIndex + 1]);
					dataIndex += 2;
					break;
				case 4:
					this.moveTo(data.data[dataIndex + 2],data.data[dataIndex + 3]);
					throw "__break__";
					dataIndex += 4;
					break;
				case 5:
					this.lineTo(data.data[dataIndex + 2],data.data[dataIndex + 3]);
					throw "__break__";
					dataIndex += 4;
					break;
				case 3:
					this.curveTo(data.data[dataIndex],data.data[dataIndex + 1],data.data[dataIndex + 2],data.data[dataIndex + 3]);
					dataIndex += 4;
					break;
				case 6:
					this.cubicCurveTo(data.data[dataIndex],data.data[dataIndex + 1],data.data[dataIndex + 2],data.data[dataIndex + 3],data.data[dataIndex + 4],data.data[dataIndex + 5]);
					dataIndex += 6;
					break;
				default:
				} else {
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRect(x,y,width,height);
		this.set___dirty(true);
	}
	,drawRoundRect: function(x,y,width,height,rx,ry) {
		if(ry == null) ry = -1;
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRoundRect(x,y,width,height,rx,ry);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawRoundRectComplex: function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		openfl_Lib.notImplemented("Graphics.drawRoundRectComplex");
	}
	,drawTiles: function(sheet,tileData,smooth,flags,shader,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		var useScale = (flags & 1) > 0;
		var useRotation = (flags & 2) > 0;
		var useRGB = (flags & 4) > 0;
		var useAlpha = (flags & 8) > 0;
		var useTransform = (flags & 16) > 0;
		var useRect = (flags & 32) > 0;
		var useOrigin = (flags & 64) > 0;
		var rect = openfl_geom_Rectangle.__temp;
		var matrix = openfl_geom_Matrix.__temp;
		var numValues = 3;
		var totalCount = count;
		if(count < 0) totalCount = tileData.length;
		if(useTransform || useScale || useRotation || useRGB || useAlpha) {
			var scaleIndex = 0;
			var rotationIndex = 0;
			var transformIndex = 0;
			if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
			if(useScale) {
				scaleIndex = numValues;
				numValues++;
			}
			if(useRotation) {
				rotationIndex = numValues;
				numValues++;
			}
			if(useTransform) {
				transformIndex = numValues;
				numValues += 4;
			}
			if(useRGB) numValues += 3;
			if(useAlpha) numValues++;
			var itemCount = totalCount / numValues | 0;
			var index = 0;
			var cacheID = -1;
			var x;
			var y;
			var id;
			var scale;
			var rotation;
			var tileWidth;
			var tileHeight;
			var originX;
			var originY;
			var tile = null;
			var tilePoint = null;
			while(index < totalCount) {
				x = tileData[index];
				y = tileData[index + 1];
				if(!useRect) id = tileData[index + 2] | 0; else id = -1;
				scale = 1.0;
				rotation = 0.0;
				if(useScale) scale = tileData[index + scaleIndex];
				if(useRotation) rotation = tileData[index + rotationIndex];
				if(id < 0) tile = null; else if(!useRect && cacheID != id) {
					cacheID = id;
					tile = sheet.__tileRects[id];
					tilePoint = sheet.__centerPoints[id];
				} else if(useRect) {
					tile = sheet.__rectTile;
					tile.setTo(tileData[index + 2],tileData[index + 3],tileData[index + 4],tileData[index + 5]);
					tilePoint = sheet.__point;
					if(useOrigin) {
						tilePoint.x = tileData[index + 6] / tile.width;
						tilePoint.y = tileData[index + 7] / tile.height;
					} else {
						tilePoint.x = 0;
						tilePoint.y = 0;
					}
				}
				if(tile != null) {
					if(useTransform) {
						rect.setTo(0,0,tile.width,tile.height);
						matrix.setTo(tileData[index + transformIndex],tileData[index + transformIndex + 1],tileData[index + transformIndex + 2],tileData[index + transformIndex + 3],0,0);
						originX = tilePoint.x * scale;
						originY = tilePoint.y * scale;
						matrix.translate(x - (originX * matrix.a + originY * matrix.c + matrix.tx),y - (originX * matrix.b + originY * matrix.d + matrix.ty));
						rect.__transform(rect,matrix);
						this.__inflateBounds(rect.x,rect.y);
						this.__inflateBounds(rect.get_right(),rect.get_bottom());
					} else {
						tileWidth = tile.width * scale;
						tileHeight = tile.height * scale;
						x -= tilePoint.x * tileWidth;
						y -= tilePoint.y * tileHeight;
						if(rotation != 0) {
							rect.setTo(0,0,tileWidth,tileHeight);
							matrix.identity();
							matrix.rotate(rotation);
							matrix.translate(x,y);
							rect.__transform(rect,matrix);
							this.__inflateBounds(rect.x,rect.y);
							this.__inflateBounds(rect.get_right(),rect.get_bottom());
						} else {
							this.__inflateBounds(x,y);
							this.__inflateBounds(x + tileWidth,y + tileHeight);
						}
					}
				}
				index += numValues;
			}
		} else {
			var x1;
			var y1;
			var id1;
			var tile1;
			var centerPoint;
			var originX1;
			var originY1;
			var rect1 = openfl_geom_Rectangle.__temp;
			var index1 = 0;
			while(index1 < totalCount) {
				x1 = tileData[index1++];
				y1 = tileData[index1++];
				if(!useRect) id1 = Std["int"](tileData[index1++]); else id1 = -1;
				originX1 = 0.0;
				originY1 = 0.0;
				if(useRect) {
					rect1.setTo(tileData[index1++],tileData[index1++],tileData[index1++],tileData[index1++]);
					if(useOrigin) {
						originX1 = tileData[index1++];
						originY1 = tileData[index1++];
					}
					this.__inflateBounds(x1 - originX1,y1 - originY1);
					this.__inflateBounds(x1 - originX1 + rect1.width,y1 - originY1 + rect1.height);
				} else {
					tile1 = sheet.__tileRects[id1];
					if(tile1 != null) {
						centerPoint = sheet.__centerPoints[id1];
						originX1 = centerPoint.x * tile1.width;
						originY1 = centerPoint.y * tile1.height;
						this.__inflateBounds(x1 - originX1,y1 - originY1);
						this.__inflateBounds(x1 - originX1 + tile1.width,y1 - originY1 + tile1.height);
					}
				}
			}
		}
		this.__commands.drawTiles(sheet,tileData,smooth,flags,shader,count);
		this.set___dirty(true);
		this.__visible = true;
	}
	,drawTriangles: function(vertices,indices,uvtData,culling,colors,blendMode) {
		if(blendMode == null) blendMode = 0;
		var vlen = vertices.length / 2 | 0;
		if(culling == null) culling = openfl_display_TriangleCulling.NONE;
		if(indices == null) {
			if(vlen % 3 != 0) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Not enough vertices to close a triangle."));
			var this1;
			this1 = new openfl_VectorData();
			var this2;
			this2 = new Array(0);
			this1.data = this2;
			this1.length = 0;
			this1.fixed = false;
			indices = this1;
			var _g = 0;
			while(_g < vlen) {
				var i = _g++;
				if(!indices.fixed) {
					indices.length++;
					if(indices.data.length < indices.length) {
						var data;
						var this3;
						this3 = new Array(indices.data.length + 10);
						data = this3;
						haxe_ds__$Vector_Vector_$Impl_$.blit(indices.data,0,data,0,indices.data.length);
						indices.data = data;
					}
					indices.data[indices.length - 1] = i;
				}
				indices.length;
			}
		}
		this.__inflateBounds(0,0);
		var tmpx = -Infinity;
		var tmpy = -Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var _g1 = 0;
		while(_g1 < vlen) {
			var i1 = _g1++;
			tmpx = vertices.data[i1 * 2];
			tmpy = vertices.data[i1 * 2 + 1];
			if(maxX < tmpx) maxX = tmpx;
			if(maxY < tmpy) maxY = tmpy;
		}
		this.__inflateBounds(maxX,maxY);
		this.__commands.drawTriangles(vertices,indices,uvtData,culling,colors,blendMode);
		this.set___dirty(true);
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.endFill();
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		this.__commands.lineBitmapStyle(bitmap,matrix != null?new openfl_geom_Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty):null,repeat,smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.__commands.lineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(thickness != null) {
			if(joints == openfl_display_JointStyle.MITER) {
				if(thickness > this.__strokePadding) this.__strokePadding = thickness;
			} else if(thickness / 2 > this.__strokePadding) this.__strokePadding = thickness / 2;
		}
		this.__commands.lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
		if(thickness != null) this.__visible = true;
	}
	,lineTo: function(x,y) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding * 2,this.__positionY + this.__strokePadding);
		this.__commands.lineTo(x,y);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.moveTo(x,y);
	}
	,__calculateBezierCubicPoint: function(t,p1,p2,p3,p4) {
		var iT = 1 - t;
		return p1 * (iT * iT * iT) + 3 * p2 * t * (iT * iT) + 3 * p3 * iT * (t * t) + p4 * (t * t * t);
	}
	,__calculateBezierQuadPoint: function(t,p1,p2,p3) {
		var iT = 1 - t;
		return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) return;
		var bounds = openfl_geom_Rectangle.__temp;
		this.__bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) return false;
		var px = matrix.__transformInverseX(x,y);
		var py = matrix.__transformInverseY(x,y);
		if(px > this.__bounds.x && py > this.__bounds.y && this.__bounds.contains(px,py)) {
			if(shapeFlag) return openfl__$internal_renderer_canvas_CanvasGraphics.hitTest(this,px,py);
			return true;
		}
		return false;
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) this.__bounds.width = x - this.__bounds.x;
		if(y > this.__bounds.y + this.__bounds.height) this.__bounds.height = y - this.__bounds.y;
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) this.__owner.__setRenderDirty();
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
var openfl_display_IGraphicsFill = function() { };
$hxClasses["openfl.display.IGraphicsFill"] = openfl_display_IGraphicsFill;
openfl_display_IGraphicsFill.__name__ = ["openfl","display","IGraphicsFill"];
openfl_display_IGraphicsFill.prototype = {
	__class__: openfl_display_IGraphicsFill
};
var openfl_display_IGraphicsData = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl_display_IGraphicsData;
openfl_display_IGraphicsData.__name__ = ["openfl","display","IGraphicsData"];
openfl_display_IGraphicsData.prototype = {
	__class__: openfl_display_IGraphicsData
};
var openfl_display_GraphicsBitmapFill = function(bitmapData,matrix,repeat,smooth) {
	if(smooth == null) smooth = false;
	if(repeat == null) repeat = true;
	this.bitmapData = bitmapData;
	this.matrix = matrix;
	this.repeat = repeat;
	this.smooth = smooth;
	this.__graphicsDataType = openfl_display_GraphicsDataType.BITMAP;
	this.__graphicsFillType = openfl_display_GraphicsFillType.BITMAP_FILL;
};
$hxClasses["openfl.display.GraphicsBitmapFill"] = openfl_display_GraphicsBitmapFill;
openfl_display_GraphicsBitmapFill.__name__ = ["openfl","display","GraphicsBitmapFill"];
openfl_display_GraphicsBitmapFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsBitmapFill.prototype = {
	__class__: openfl_display_GraphicsBitmapFill
};
var openfl_display_GraphicsEndFill = function() {
	this.__graphicsDataType = openfl_display_GraphicsDataType.END;
	this.__graphicsFillType = openfl_display_GraphicsFillType.END_FILL;
};
$hxClasses["openfl.display.GraphicsEndFill"] = openfl_display_GraphicsEndFill;
openfl_display_GraphicsEndFill.__name__ = ["openfl","display","GraphicsEndFill"];
openfl_display_GraphicsEndFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsEndFill.prototype = {
	__class__: openfl_display_GraphicsEndFill
};
var openfl_display_GraphicsGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	if(focalPointRatio == null) focalPointRatio = 0;
	if(type == null) type = openfl_display_GradientType.LINEAR;
	if(spreadMethod == null) spreadMethod = openfl_display_SpreadMethod.PAD;
	if(interpolationMethod == null) interpolationMethod = openfl_display_InterpolationMethod.RGB;
	this.type = type;
	this.colors = colors;
	this.alphas = alphas;
	this.ratios = ratios;
	this.matrix = matrix;
	this.spreadMethod = spreadMethod;
	this.interpolationMethod = interpolationMethod;
	this.focalPointRatio = focalPointRatio;
	this.__graphicsDataType = openfl_display_GraphicsDataType.GRADIENT;
	this.__graphicsFillType = openfl_display_GraphicsFillType.GRADIENT_FILL;
};
$hxClasses["openfl.display.GraphicsGradientFill"] = openfl_display_GraphicsGradientFill;
openfl_display_GraphicsGradientFill.__name__ = ["openfl","display","GraphicsGradientFill"];
openfl_display_GraphicsGradientFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsGradientFill.prototype = {
	__class__: openfl_display_GraphicsGradientFill
};
var openfl_display_IGraphicsPath = function() { };
$hxClasses["openfl.display.IGraphicsPath"] = openfl_display_IGraphicsPath;
openfl_display_IGraphicsPath.__name__ = ["openfl","display","IGraphicsPath"];
var openfl_display_GraphicsPath = function(commands,data,winding) {
	if(winding == null) winding = openfl_display_GraphicsPathWinding.EVEN_ODD;
	this.commands = commands;
	this.data = data;
	this.winding = winding;
	this.__graphicsDataType = openfl_display_GraphicsDataType.PATH;
};
$hxClasses["openfl.display.GraphicsPath"] = openfl_display_GraphicsPath;
openfl_display_GraphicsPath.__name__ = ["openfl","display","GraphicsPath"];
openfl_display_GraphicsPath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsPath.prototype = {
	curveTo: function(controlX,controlY,anchorX,anchorY) {
		if(this.commands != null && this.data != null) {
			var this1 = this.commands;
			if(!this1.fixed) {
				this1.length++;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
				this1.data[this1.length - 1] = 3;
			}
			this1.length;
			var this3 = this.data;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
				this3.data[this3.length - 1] = anchorX;
			}
			this3.length;
			var this5 = this.data;
			if(!this5.fixed) {
				this5.length++;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
				this5.data[this5.length - 1] = anchorY;
			}
			this5.length;
			var this7 = this.data;
			if(!this7.fixed) {
				this7.length++;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
				this7.data[this7.length - 1] = controlX;
			}
			this7.length;
			var this9 = this.data;
			if(!this9.fixed) {
				this9.length++;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
				this9.data[this9.length - 1] = controlY;
			}
			this9.length;
		}
	}
	,lineTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			var this1 = this.commands;
			if(!this1.fixed) {
				this1.length++;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
				this1.data[this1.length - 1] = 2;
			}
			this1.length;
			var this3 = this.data;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
				this3.data[this3.length - 1] = x;
			}
			this3.length;
			var this5 = this.data;
			if(!this5.fixed) {
				this5.length++;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
				this5.data[this5.length - 1] = y;
			}
			this5.length;
		}
	}
	,moveTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			var this1 = this.commands;
			if(!this1.fixed) {
				this1.length++;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
				this1.data[this1.length - 1] = 1;
			}
			this1.length;
			var this3 = this.data;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
				this3.data[this3.length - 1] = x;
			}
			this3.length;
			var this5 = this.data;
			if(!this5.fixed) {
				this5.length++;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
				this5.data[this5.length - 1] = y;
			}
			this5.length;
		}
	}
	,wideLineTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			var this1 = this.commands;
			if(!this1.fixed) {
				this1.length++;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
				this1.data[this1.length - 1] = 2;
			}
			this1.length;
			var this3 = this.data;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
				this3.data[this3.length - 1] = x;
			}
			this3.length;
			var this5 = this.data;
			if(!this5.fixed) {
				this5.length++;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
				this5.data[this5.length - 1] = y;
			}
			this5.length;
		}
	}
	,wideMoveTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			var this1 = this.commands;
			if(!this1.fixed) {
				this1.length++;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
				this1.data[this1.length - 1] = 1;
			}
			this1.length;
			var this3 = this.data;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
				this3.data[this3.length - 1] = x;
			}
			this3.length;
			var this5 = this.data;
			if(!this5.fixed) {
				this5.length++;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
				this5.data[this5.length - 1] = y;
			}
			this5.length;
		}
	}
	,__class__: openfl_display_GraphicsPath
};
var openfl_display_GraphicsPathCommand = function() { };
$hxClasses["openfl.display.GraphicsPathCommand"] = openfl_display_GraphicsPathCommand;
openfl_display_GraphicsPathCommand.__name__ = ["openfl","display","GraphicsPathCommand"];
var openfl_display_GraphicsPathWinding = $hxClasses["openfl.display.GraphicsPathWinding"] = { __ename__ : true, __constructs__ : ["EVEN_ODD","NON_ZERO"] };
openfl_display_GraphicsPathWinding.EVEN_ODD = ["EVEN_ODD",0];
openfl_display_GraphicsPathWinding.EVEN_ODD.toString = $estr;
openfl_display_GraphicsPathWinding.EVEN_ODD.__enum__ = openfl_display_GraphicsPathWinding;
openfl_display_GraphicsPathWinding.NON_ZERO = ["NON_ZERO",1];
openfl_display_GraphicsPathWinding.NON_ZERO.toString = $estr;
openfl_display_GraphicsPathWinding.NON_ZERO.__enum__ = openfl_display_GraphicsPathWinding;
var openfl_display_GraphicsSolidFill = function(color,alpha) {
	if(alpha == null) alpha = 1;
	if(color == null) color = 0;
	this.alpha = alpha;
	this.color = color;
	this.__graphicsDataType = openfl_display_GraphicsDataType.SOLID;
	this.__graphicsFillType = openfl_display_GraphicsFillType.SOLID_FILL;
};
$hxClasses["openfl.display.GraphicsSolidFill"] = openfl_display_GraphicsSolidFill;
openfl_display_GraphicsSolidFill.__name__ = ["openfl","display","GraphicsSolidFill"];
openfl_display_GraphicsSolidFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsSolidFill.prototype = {
	__class__: openfl_display_GraphicsSolidFill
};
var openfl_display_IGraphicsStroke = function() { };
$hxClasses["openfl.display.IGraphicsStroke"] = openfl_display_IGraphicsStroke;
openfl_display_IGraphicsStroke.__name__ = ["openfl","display","IGraphicsStroke"];
var openfl_display_GraphicsStroke = function(thickness,pixelHinting,scaleMode,caps,joints,miterLimit,fill) {
	if(miterLimit == null) miterLimit = 3;
	if(pixelHinting == null) pixelHinting = false;
	if(thickness == null) thickness = 0.0;
	if(caps != null) this.caps = caps; else this.caps = openfl_display_CapsStyle.NONE;
	this.fill = fill;
	if(joints != null) this.joints = joints; else this.joints = openfl_display_JointStyle.ROUND;
	this.miterLimit = miterLimit;
	this.pixelHinting = pixelHinting;
	if(scaleMode != null) this.scaleMode = scaleMode; else this.scaleMode = openfl_display_LineScaleMode.NORMAL;
	this.thickness = thickness;
	this.__graphicsDataType = openfl_display_GraphicsDataType.STROKE;
};
$hxClasses["openfl.display.GraphicsStroke"] = openfl_display_GraphicsStroke;
openfl_display_GraphicsStroke.__name__ = ["openfl","display","GraphicsStroke"];
openfl_display_GraphicsStroke.__interfaces__ = [openfl_display_IGraphicsStroke,openfl_display_IGraphicsData];
openfl_display_GraphicsStroke.prototype = {
	__class__: openfl_display_GraphicsStroke
};
var openfl_display_GraphicsDataType = $hxClasses["openfl.display.GraphicsDataType"] = { __ename__ : true, __constructs__ : ["STROKE","SOLID","GRADIENT","PATH","BITMAP","END"] };
openfl_display_GraphicsDataType.STROKE = ["STROKE",0];
openfl_display_GraphicsDataType.STROKE.toString = $estr;
openfl_display_GraphicsDataType.STROKE.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.SOLID = ["SOLID",1];
openfl_display_GraphicsDataType.SOLID.toString = $estr;
openfl_display_GraphicsDataType.SOLID.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.GRADIENT = ["GRADIENT",2];
openfl_display_GraphicsDataType.GRADIENT.toString = $estr;
openfl_display_GraphicsDataType.GRADIENT.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.PATH = ["PATH",3];
openfl_display_GraphicsDataType.PATH.toString = $estr;
openfl_display_GraphicsDataType.PATH.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.BITMAP = ["BITMAP",4];
openfl_display_GraphicsDataType.BITMAP.toString = $estr;
openfl_display_GraphicsDataType.BITMAP.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.END = ["END",5];
openfl_display_GraphicsDataType.END.toString = $estr;
openfl_display_GraphicsDataType.END.__enum__ = openfl_display_GraphicsDataType;
var openfl_display_GraphicsFillType = $hxClasses["openfl.display.GraphicsFillType"] = { __ename__ : true, __constructs__ : ["SOLID_FILL","GRADIENT_FILL","BITMAP_FILL","END_FILL"] };
openfl_display_GraphicsFillType.SOLID_FILL = ["SOLID_FILL",0];
openfl_display_GraphicsFillType.SOLID_FILL.toString = $estr;
openfl_display_GraphicsFillType.SOLID_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.GRADIENT_FILL = ["GRADIENT_FILL",1];
openfl_display_GraphicsFillType.GRADIENT_FILL.toString = $estr;
openfl_display_GraphicsFillType.GRADIENT_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.BITMAP_FILL = ["BITMAP_FILL",2];
openfl_display_GraphicsFillType.BITMAP_FILL.toString = $estr;
openfl_display_GraphicsFillType.BITMAP_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.END_FILL = ["END_FILL",3];
openfl_display_GraphicsFillType.END_FILL.toString = $estr;
openfl_display_GraphicsFillType.END_FILL.__enum__ = openfl_display_GraphicsFillType;
var openfl_display_InterpolationMethod = $hxClasses["openfl.display.InterpolationMethod"] = { __ename__ : true, __constructs__ : ["RGB","LINEAR_RGB"] };
openfl_display_InterpolationMethod.RGB = ["RGB",0];
openfl_display_InterpolationMethod.RGB.toString = $estr;
openfl_display_InterpolationMethod.RGB.__enum__ = openfl_display_InterpolationMethod;
openfl_display_InterpolationMethod.LINEAR_RGB = ["LINEAR_RGB",1];
openfl_display_InterpolationMethod.LINEAR_RGB.toString = $estr;
openfl_display_InterpolationMethod.LINEAR_RGB.__enum__ = openfl_display_InterpolationMethod;
var openfl_display_JPEGEncoderOptions = function(quality) {
	if(quality == null) quality = 80;
	this.quality = quality;
};
$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl_display_JPEGEncoderOptions;
openfl_display_JPEGEncoderOptions.__name__ = ["openfl","display","JPEGEncoderOptions"];
openfl_display_JPEGEncoderOptions.prototype = {
	__class__: openfl_display_JPEGEncoderOptions
};
var openfl_display_JointStyle = $hxClasses["openfl.display.JointStyle"] = { __ename__ : true, __constructs__ : ["MITER","ROUND","BEVEL"] };
openfl_display_JointStyle.MITER = ["MITER",0];
openfl_display_JointStyle.MITER.toString = $estr;
openfl_display_JointStyle.MITER.__enum__ = openfl_display_JointStyle;
openfl_display_JointStyle.ROUND = ["ROUND",1];
openfl_display_JointStyle.ROUND.toString = $estr;
openfl_display_JointStyle.ROUND.__enum__ = openfl_display_JointStyle;
openfl_display_JointStyle.BEVEL = ["BEVEL",2];
openfl_display_JointStyle.BEVEL.toString = $estr;
openfl_display_JointStyle.BEVEL.__enum__ = openfl_display_JointStyle;
var openfl_display_LineScaleMode = $hxClasses["openfl.display.LineScaleMode"] = { __ename__ : true, __constructs__ : ["HORIZONTAL","NONE","NORMAL","VERTICAL"] };
openfl_display_LineScaleMode.HORIZONTAL = ["HORIZONTAL",0];
openfl_display_LineScaleMode.HORIZONTAL.toString = $estr;
openfl_display_LineScaleMode.HORIZONTAL.__enum__ = openfl_display_LineScaleMode;
openfl_display_LineScaleMode.NONE = ["NONE",1];
openfl_display_LineScaleMode.NONE.toString = $estr;
openfl_display_LineScaleMode.NONE.__enum__ = openfl_display_LineScaleMode;
openfl_display_LineScaleMode.NORMAL = ["NORMAL",2];
openfl_display_LineScaleMode.NORMAL.toString = $estr;
openfl_display_LineScaleMode.NORMAL.__enum__ = openfl_display_LineScaleMode;
openfl_display_LineScaleMode.VERTICAL = ["VERTICAL",3];
openfl_display_LineScaleMode.VERTICAL.toString = $estr;
openfl_display_LineScaleMode.VERTICAL.__enum__ = openfl_display_LineScaleMode;
var openfl_display_Loader = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
};
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = ["openfl","display","Loader"];
openfl_display_Loader.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Loader.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	close: function() {
		openfl_Lib.notImplemented("Loader.close");
	}
	,load: function(request,context) {
		var extension = "";
		var parts = request.url.split(".");
		if(parts.length > 0) extension = parts[parts.length - 1].toLowerCase();
		if(extension.indexOf("?") != -1) extension = extension.split("?")[0];
		var transparent = true;
		this.contentLoaderInfo.url = request.url;
		if(request.contentType == null && request.contentType != "") switch(extension) {
		case "swf":
			this.contentLoaderInfo.contentType = "application/x-shockwave-flash";
			break;
		case "jpg":case "jpeg":
			transparent = false;
			this.contentLoaderInfo.contentType = "image/jpeg";
			break;
		case "png":
			this.contentLoaderInfo.contentType = "image/png";
			break;
		case "gif":
			this.contentLoaderInfo.contentType = "image/gif";
			break;
		default:
			this.contentLoaderInfo.contentType = "application/x-www-form-urlencoded";
		} else this.contentLoaderInfo.contentType = request.contentType;
		var worker = new lime_system_BackgroundWorker();
		worker.doWork.add(function(_) {
			var path = request.url;
			openfl_display_BitmapData.fromFile(path,function(bitmapData) {
				worker.sendComplete(bitmapData);
			},function() {
				worker.sendError(openfl_events_IOErrorEvent.IO_ERROR);
			});
		});
		worker.onError.add($bind(this,this.BitmapData_onError));
		worker.onComplete.add($bind(this,this.BitmapData_onLoad));
		worker.run();
	}
	,loadBytes: function(buffer,context) {
		var worker = new lime_system_BackgroundWorker();
		worker.doWork.add(function(_) {
			openfl_display_BitmapData.fromBytes(buffer,null,function(bitmapData) {
				worker.sendComplete(bitmapData);
			});
		});
		worker.onComplete.add($bind(this,this.BitmapData_onLoad));
		worker.run();
	}
	,unload: function() {
		if(this.get_numChildren() > 0) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			var event = new openfl_events_Event(openfl_events_Event.UNLOAD);
			event.currentTarget = this;
			this.__dispatchEvent(event);
		}
	}
	,unloadAndStop: function(gc) {
		if(gc == null) gc = true;
		openfl_Lib.notImplemented("Loader.unloadAndStop");
	}
	,BitmapData_onLoad: function(bitmapData) {
		this.contentLoaderInfo.content = new openfl_display_Bitmap(bitmapData);
		this.content = this.contentLoaderInfo.content;
		this.addChild(this.contentLoaderInfo.content);
		var event = new openfl_events_Event(openfl_events_Event.COMPLETE);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,BitmapData_onError: function(_) {
		var event = new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl_display_Loader
});
var openfl_display_OpenGLView = function() {
	openfl_display_DirectRenderer.call(this,"OpenGLView");
	if(!this.__added) {
		this.__added = true;
		haxe_Log.trace("Warning: OpenGLView is not available in HTML5 canvas rendering mode",{ fileName : "OpenGLView.hx", lineNumber : 66, className : "openfl.display.OpenGLView", methodName : "new"});
		haxe_Log.trace("Please compile your project using -Ddom or -Dwebgl (beta) to enable",{ fileName : "OpenGLView.hx", lineNumber : 67, className : "openfl.display.OpenGLView", methodName : "new"});
	}
};
$hxClasses["openfl.display.OpenGLView"] = openfl_display_OpenGLView;
openfl_display_OpenGLView.__name__ = ["openfl","display","OpenGLView"];
openfl_display_OpenGLView.__properties__ = {get_isSupported:"get_isSupported"}
openfl_display_OpenGLView.isSupported = null;
openfl_display_OpenGLView.get_isSupported = function() {
	return false;
};
openfl_display_OpenGLView.__super__ = openfl_display_DirectRenderer;
openfl_display_OpenGLView.prototype = $extend(openfl_display_DirectRenderer.prototype,{
	__renderCanvas: function(renderSession) {
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable) {
			if(!this.__added) {
				renderSession.element.appendChild(this.__canvas);
				this.__added = true;
				openfl__$internal_renderer_dom_DOMRenderer.initializeElement(this,this.__canvas,renderSession);
			}
			if(this.__context != null) {
				var rect = null;
				if(this.get_scrollRect() == null) rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl_geom_Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
				if(this.__render != null) this.__render(rect);
			}
		} else if(this.__added) {
			renderSession.element.removeChild(this.__canvas);
			this.__added = false;
		}
	}
	,__renderGL: function(renderSession) {
		if(this.stage != null && this.__renderable) {
			var rect = null;
			if(this.get_scrollRect() == null) rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl_geom_Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
			if(this.__render != null) this.__render(rect);
			renderSession.shaderManager.setShader(null);
			renderSession.blendModeManager.setBlendMode(null);
		}
	}
	,__class__: openfl_display_OpenGLView
});
var openfl_display_PNGEncoderOptions = function(fastCompression) {
	if(fastCompression == null) fastCompression = false;
	this.fastCompression = fastCompression;
};
$hxClasses["openfl.display.PNGEncoderOptions"] = openfl_display_PNGEncoderOptions;
openfl_display_PNGEncoderOptions.__name__ = ["openfl","display","PNGEncoderOptions"];
openfl_display_PNGEncoderOptions.prototype = {
	__class__: openfl_display_PNGEncoderOptions
};
var openfl_display_PixelSnapping = $hxClasses["openfl.display.PixelSnapping"] = { __ename__ : true, __constructs__ : ["NEVER","AUTO","ALWAYS"] };
openfl_display_PixelSnapping.NEVER = ["NEVER",0];
openfl_display_PixelSnapping.NEVER.toString = $estr;
openfl_display_PixelSnapping.NEVER.__enum__ = openfl_display_PixelSnapping;
openfl_display_PixelSnapping.AUTO = ["AUTO",1];
openfl_display_PixelSnapping.AUTO.toString = $estr;
openfl_display_PixelSnapping.AUTO.__enum__ = openfl_display_PixelSnapping;
openfl_display_PixelSnapping.ALWAYS = ["ALWAYS",2];
openfl_display_PixelSnapping.ALWAYS.toString = $estr;
openfl_display_PixelSnapping.ALWAYS.__enum__ = openfl_display_PixelSnapping;
var openfl_display_Preloader = function(display) {
	lime_app_Preloader.call(this);
	if(display != null) {
		this.display = display;
		openfl_Lib.current.addChild(display);
		if(js_Boot.__instanceof(display,NMEPreloader)) (js_Boot.__cast(display , NMEPreloader)).onInit();
	}
};
$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
openfl_display_Preloader.__name__ = ["openfl","display","Preloader"];
openfl_display_Preloader.__super__ = lime_app_Preloader;
openfl_display_Preloader.prototype = $extend(lime_app_Preloader.prototype,{
	load: function(urls,types) {
		var sounds = [];
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "MUSIC":case "SOUND":
				var sound = haxe_io_Path.withoutExtension(url);
				if(!HxOverrides.remove(sounds,sound)) this.total++;
				sounds.push(sound);
				break;
			default:
			}
		}
		var _g3 = 0;
		while(_g3 < sounds.length) {
			var soundName = sounds[_g3];
			++_g3;
			var sound1 = new openfl_media_Sound();
			sound1.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this.sound_onComplete));
			sound1.addEventListener(openfl_events_IOErrorEvent.IO_ERROR,$bind(this,this.sound_onIOError));
			sound1.load(new openfl_net_URLRequest(soundName + ".ogg"));
		}
		lime_app_Preloader.prototype.load.call(this,urls,types);
	}
	,start: function() {
		if(this.display != null && js_Boot.__instanceof(this.display,NMEPreloader)) {
			this.display.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this.display_onComplete));
			(js_Boot.__cast(this.display , NMEPreloader)).onLoaded();
		} else lime_app_Preloader.prototype.start.call(this);
	}
	,update: function(loaded,total) {
		if(this.display != null && js_Boot.__instanceof(this.display,NMEPreloader)) (js_Boot.__cast(this.display , NMEPreloader)).onUpdate(loaded,total);
	}
	,display_onComplete: function(event) {
		this.display.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this.display_onComplete));
		openfl_Lib.current.removeChild(this.display);
		openfl_Lib.current.stage.set_focus(null);
		this.display = null;
		lime_app_Preloader.prototype.start.call(this);
	}
	,sound_onComplete: function(event) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,sound_onIOError: function(event) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: openfl_display_Preloader
});
var openfl_display_Shader = function(precision) {
	if(precision == null) precision = 1;
	this.__dirty = true;
	this.repeatY = 33071;
	this.repeatX = 33071;
	this.precision = 1;
	this.precision = precision;
	this.data = new haxe_ds_StringMap();
	var value = new openfl_display_GLShaderParameter("vec2");
	this.data.set(openfl_display_Shader.uObjectSize,value);
	var value1 = new openfl_display_GLShaderParameter("vec2");
	this.data.set(openfl_display_Shader.uTextureSize,value1);
};
$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
openfl_display_Shader.__name__ = ["openfl","display","Shader"];
openfl_display_Shader.prototype = {
	__init: function(gl) {
		var dirty = this.__dirty;
		if(dirty) {
			if(this.__shader != null) this.__shader.destroy();
			this.__shader = new openfl__$internal_renderer_opengl_shaders2_Shader(gl);
			if(this.__vertexCode != null) this.__shader.vertexString = this.__vertexCode; else this.__shader.vertexString = openfl__$internal_renderer_opengl_shaders2_DefaultShader.VERTEX_SRC.join("\n");
			this.__shader.fragmentString = this.__fragmentCode;
			this.__dirty = false;
		}
		this.__shader.init(dirty);
	}
	,__buildFragmentCode: function(code) {
		var output = [];
		output.push("#ifdef GL_ES");
		output.push((function($this) {
			var $r;
			var _g = $this.precision;
			$r = (function($this) {
				var $r;
				switch(_g) {
				case 2:
					$r = "precision highp float;";
					break;
				case 1:
					$r = "precision mediump float;";
					break;
				default:
					$r = "precision lowp float;";
				}
				return $r;
			}($this));
			return $r;
		}(this)));
		output.push("#endif");
		output = output.concat(openfl_display_Shader.fragmentHeader);
		output.push(code);
		this.__fragmentCode = output.join("\n");
	}
	,__buildVertexCode: function(code) {
		var output = [];
		output.push("#ifdef GL_ES");
		output.push((function($this) {
			var $r;
			var _g = $this.precision;
			$r = (function($this) {
				var $r;
				switch(_g) {
				case 2:
					$r = "precision highp float;";
					break;
				case 1:
					$r = "precision mediump float;";
					break;
				default:
					$r = "precision lowp float;";
				}
				return $r;
			}($this));
			return $r;
		}(this)));
		output.push("#endif");
		output = output.concat(openfl_display_Shader.vertexHeader);
		output.push(code);
		this.__vertexCode = output.join("\n");
	}
	,__class__: openfl_display_Shader
};
var openfl_display_GLShaderParameter = function(type,arraySize) {
	this.internalType = 0;
	this.transpose = false;
	this.repeatY = 33071;
	this.repeatX = 33071;
	this.smooth = false;
	this.arraySize = 0;
	this.size = 0;
	this.type = type;
	if(arraySize == null) this.arraySize = 0; else this.arraySize = arraySize;
	this.__init();
};
$hxClasses["openfl.display.GLShaderParameter"] = openfl_display_GLShaderParameter;
openfl_display_GLShaderParameter.__name__ = ["openfl","display","GLShaderParameter"];
openfl_display_GLShaderParameter.prototype = {
	__init: function() {
		var _g = this.type;
		var v = _g;
		var m = _g;
		switch(_g) {
		case "bool":
			this.internalType = 1;
			this.size = 1;
			if(this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
			this.value = [0.0];
			break;
		case "int":
			this.internalType = 1;
			this.size = 1;
			if(this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
			this.value = [0.0];
			break;
		case "float":
			this.internalType = 2;
			this.size = 1;
			if(this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
			this.value = [0.0];
			break;
		case "sampler2D":
			if(v.indexOf("vec") > -1) {
				if(StringTools.startsWith(this.type,"b") || StringTools.startsWith(this.type,"i")) this.internalType = 1; else this.internalType = 2;
				var s = Std.parseInt(this.type.charAt(this.type.length - 1));
				this.size = s;
				this.set_value((function($this) {
					var $r;
					var _g1 = [];
					{
						var _g3 = 0;
						var _g2 = $this.size;
						while(_g3 < _g2) {
							var i = _g3++;
							_g1.push(0.0);
						}
					}
					$r = _g1;
					return $r;
				}(this)));
			} else if(m.indexOf("mat") > -1) {
				this.internalType = 3;
				var s1 = Std.parseInt(this.type.charAt(this.type.length - 1));
				this.size = s1;
				if(this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
				var _g11 = this.size;
				switch(_g11) {
				case 2:
					this.value = [1,0,1,0];
					break;
				case 3:
					this.value = [1,0,0,0,1,0,0,0,1];
					break;
				case 4:
					this.value = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
					break;
				default:
					this.value = [0];
				}
			} else {
				this.internalType = 4;
				this.size = 0;
			}
			break;
		case "samplerCube":
			if(v.indexOf("vec") > -1) {
				if(StringTools.startsWith(this.type,"b") || StringTools.startsWith(this.type,"i")) this.internalType = 1; else this.internalType = 2;
				var s2 = Std.parseInt(this.type.charAt(this.type.length - 1));
				this.size = s2;
				this.set_value((function($this) {
					var $r;
					var _g12 = [];
					{
						var _g31 = 0;
						var _g21 = $this.size;
						while(_g31 < _g21) {
							var i1 = _g31++;
							_g12.push(0.0);
						}
					}
					$r = _g12;
					return $r;
				}(this)));
			} else if(m.indexOf("mat") > -1) {
				this.internalType = 3;
				var s3 = Std.parseInt(this.type.charAt(this.type.length - 1));
				this.size = s3;
				if(this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
				var _g13 = this.size;
				switch(_g13) {
				case 2:
					this.value = [1,0,1,0];
					break;
				case 3:
					this.value = [1,0,0,0,1,0,0,0,1];
					break;
				case 4:
					this.value = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
					break;
				default:
					this.value = [0];
				}
			} else {
				this.internalType = 4;
				this.size = 0;
			}
			break;
		default:
			if(v.indexOf("vec") > -1) {
				if(StringTools.startsWith(this.type,"b") || StringTools.startsWith(this.type,"i")) this.internalType = 1; else this.internalType = 2;
				var s4 = Std.parseInt(this.type.charAt(this.type.length - 1));
				this.size = s4;
				this.set_value((function($this) {
					var $r;
					var _g14 = [];
					{
						var _g32 = 0;
						var _g22 = $this.size;
						while(_g32 < _g22) {
							var i2 = _g32++;
							_g14.push(0.0);
						}
					}
					$r = _g14;
					return $r;
				}(this)));
			} else if(m.indexOf("mat") > -1) {
				this.internalType = 3;
				var s5 = Std.parseInt(this.type.charAt(this.type.length - 1));
				this.size = s5;
				if(this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
				var _g15 = this.size;
				switch(_g15) {
				case 2:
					this.value = [1,0,1,0];
					break;
				case 3:
					this.value = [1,0,0,0,1,0,0,0,1];
					break;
				case 4:
					this.value = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
					break;
				default:
					this.value = [0];
				}
			} else {
				this.internalType = 0;
				haxe_Log.trace("Can't initialize value for type " + this.type,{ fileName : "Shader.hx", lineNumber : 307, className : "openfl.display.GLShaderParameter", methodName : "__init"});
			}
		}
	}
	,set_value: function(v) {
		if(this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
		return this.value = v;
	}
	,set_bitmap: function(v) {
		if(this.internalType != 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a bitmap, use value instead");
		return this.bitmap = v;
	}
	,__class__: openfl_display_GLShaderParameter
	,__properties__: {set_bitmap:"set_bitmap",set_value:"set_value"}
};
var openfl_display_Shape = function() {
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
openfl_display_Shape.__name__ = ["openfl","display","Shape"];
openfl_display_Shape.__super__ = openfl_display_DisplayObject;
openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype,{
	get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics();
			this.__graphics.__owner = this;
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Shape
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
var openfl_display_SpreadMethod = $hxClasses["openfl.display.SpreadMethod"] = { __ename__ : true, __constructs__ : ["REPEAT","REFLECT","PAD"] };
openfl_display_SpreadMethod.REPEAT = ["REPEAT",0];
openfl_display_SpreadMethod.REPEAT.toString = $estr;
openfl_display_SpreadMethod.REPEAT.__enum__ = openfl_display_SpreadMethod;
openfl_display_SpreadMethod.REFLECT = ["REFLECT",1];
openfl_display_SpreadMethod.REFLECT.toString = $estr;
openfl_display_SpreadMethod.REFLECT.__enum__ = openfl_display_SpreadMethod;
openfl_display_SpreadMethod.PAD = ["PAD",2];
openfl_display_SpreadMethod.PAD.toString = $estr;
openfl_display_SpreadMethod.PAD.__enum__ = openfl_display_SpreadMethod;
var openfl_display_Stage = function(window,color) {
	openfl_display_DisplayObjectContainer.call(this);
	this.application = window.application;
	this.window = window;
	if(color == null) {
		this.__transparent = true;
		this.set_color(0);
	} else this.set_color(color);
	this.set_name(null);
	this.__deltaTime = 0;
	this.__displayState = openfl_display_StageDisplayState.NORMAL;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.stageWidth = window.__width * window.__scale | 0;
	this.stageHeight = window.__height * window.__scale | 0;
	this.stage = this;
	this.align = openfl_display_StageAlign.TOP_LEFT;
	this.allowsFullScreen = false;
	this.allowsFullScreenInteractive = false;
	this.quality = openfl_display_StageQuality.HIGH;
	this.scaleMode = openfl_display_StageScaleMode.NO_SCALE;
	this.stageFocusRect = true;
	this.__macKeyboard = /AppleWebKit/.test (navigator.userAgent) && /Mobile\/\w+/.test (navigator.userAgent) || /Mac/.test (navigator.platform);
	this.__clearBeforeRender = true;
	this.__stack = [];
	this.__mouseOutStack = [];
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.stage3Ds = this1;
	var this3 = this.stage3Ds;
	var x = new openfl_display_Stage3D();
	if(!this3.fixed) {
		this3.length++;
		if(this3.data.length < this3.length) {
			var data;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data = this4;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data,0,this3.data.length);
			this3.data = data;
		}
		this3.data[this3.length - 1] = x;
	}
	this3.length;
	if(openfl_Lib.current.stage == null) this.stage.addChild(openfl_Lib.current);
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = ["openfl","display","Stage"];
openfl_display_Stage.__interfaces__ = [lime_app_IModule];
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	globalToLocal: function(pos) {
		return pos.clone();
	}
	,invalidate: function() {
		this.__invalidated = true;
	}
	,localToGlobal: function(pos) {
		return pos.clone();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
	}
	,onGamepadButtonDown: function(gamepad,button) {
		openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
	}
	,onGamepadButtonUp: function(gamepad,button) {
		openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
	}
	,onGamepadConnect: function(gamepad) {
		openfl_ui_GameInput.__onGamepadConnect(gamepad);
	}
	,onGamepadDisconnect: function(gamepad) {
		openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) return;
		this.__onKey(openfl_events_KeyboardEvent.KEY_DOWN,keyCode,modifier);
	}
	,onKeyUp: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) return;
		this.__onKey(openfl_events_KeyboardEvent.KEY_UP,keyCode,modifier);
	}
	,onModuleExit: function(code) {
		if(this.window != null) {
			var event = new openfl_events_Event(openfl_events_Event.DEACTIVATE);
			this.__broadcast(event,true);
		}
	}
	,onMouseDown: function(window,x,y,button) {
		if(this.window == null || this.window != window) return;
		var type;
		switch(button) {
		case 1:
			type = openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN;
			break;
		case 2:
			type = openfl_events_MouseEvent.RIGHT_MOUSE_DOWN;
			break;
		default:
			type = openfl_events_MouseEvent.MOUSE_DOWN;
		}
		this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
	}
	,onMouseMove: function(window,x,y) {
		if(this.window == null || this.window != window) return;
		this.__onMouse(openfl_events_MouseEvent.MOUSE_MOVE,x * window.__scale | 0,y * window.__scale | 0,0);
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
		if(this.window == null || this.window != window) return;
		var type;
		switch(button) {
		case 1:
			type = openfl_events_MouseEvent.MIDDLE_MOUSE_UP;
			break;
		case 2:
			type = openfl_events_MouseEvent.RIGHT_MOUSE_UP;
			break;
		default:
			type = openfl_events_MouseEvent.MOUSE_UP;
		}
		this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
		if(this.window == null || this.window != window) return;
		this.__onMouseWheel(deltaX * window.__scale | 0,deltaY * window.__scale | 0);
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
		if(this.window == null || this.window != window) return;
		var stack = [];
		if(this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
		var event = new openfl_events_TextEvent(openfl_events_TextEvent.TEXT_INPUT,true,false,text);
		if(stack.length > 0) {
			stack.reverse();
			this.__fireEvent(event,stack);
		} else this.__broadcast(event,true);
	}
	,onTouchMove: function(touch) {
		this.__onTouch("touchMove",touch);
	}
	,onTouchEnd: function(touch) {
		this.__onTouch("touchEnd",touch);
	}
	,onTouchStart: function(touch) {
		this.__onTouch("touchBegin",touch);
	}
	,onWindowActivate: function(window) {
		if(this.window == null || this.window != window) return;
		var event = new openfl_events_Event(openfl_events_Event.ACTIVATE);
		this.__broadcast(event,true);
	}
	,onWindowClose: function(window) {
		if(this.window == window) this.window = null;
	}
	,onWindowCreate: function(window) {
		if(this.window == null || this.window != window) return;
		if(window.renderer != null) {
			var _g = window.renderer.context;
			switch(_g[1]) {
			case 0:
				var gl = _g[2];
				this.__renderer = new openfl__$internal_renderer_opengl_GLRenderer(this.stageWidth,this.stageHeight,gl);
				break;
			case 1:
				var context = _g[2];
				this.__renderer = new openfl__$internal_renderer_canvas_CanvasRenderer(this.stageWidth,this.stageHeight,context);
				break;
			case 2:
				var element = _g[2];
				this.__renderer = new openfl__$internal_renderer_dom_DOMRenderer(this.stageWidth,this.stageHeight,element);
				break;
			case 4:
				var cairo = _g[2];
				this.__renderer = new openfl__$internal_renderer_cairo_CairoRenderer(this.stageWidth,this.stageHeight,cairo);
				break;
			case 5:
				var ctx = _g[2];
				this.__renderer = new openfl__$internal_renderer_console_ConsoleRenderer(this.stageWidth,this.stageHeight,ctx);
				break;
			default:
			}
		}
	}
	,onWindowDeactivate: function(window) {
		if(this.window == null || this.window != window) return;
		var event = new openfl_events_Event(openfl_events_Event.DEACTIVATE);
		this.__broadcast(event,true);
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
		if(this.window == null || this.window != window) return;
		var event = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_IN,true,false,null,false,0);
		this.__broadcast(event,true);
	}
	,onWindowFocusOut: function(window) {
		if(this.window == null || this.window != window) return;
		var event = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_OUT,true,false,null,false,0);
		this.__broadcast(event,true);
	}
	,onWindowFullscreen: function(window) {
	}
	,onWindowLeave: function(window) {
		if(this.window == null || this.window != window) return;
		this.__dispatchEvent(new openfl_events_Event(openfl_events_Event.MOUSE_LEAVE));
	}
	,onWindowMinimize: function(window) {
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowResize: function(window,width,height) {
		if(this.window == null || this.window != window) return;
		this.stageWidth = width * window.__scale | 0;
		this.stageHeight = height * window.__scale | 0;
		if(this.__renderer != null) this.__renderer.resize(this.stageWidth,this.stageHeight);
		var event = new openfl_events_Event(openfl_events_Event.RESIZE);
		this.__broadcast(event,false);
	}
	,onWindowRestore: function(window) {
	}
	,render: function(renderer) {
		if(renderer.window == null || renderer.window != this.window) return;
		if(this.application != null && this.application.windows.length > 0) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__rendering) return;
		this.__rendering = true;
		this.__broadcast(new openfl_events_Event(openfl_events_Event.ENTER_FRAME),true);
		if(this.__invalidated) {
			this.__invalidated = false;
			this.__broadcast(new openfl_events_Event(openfl_events_Event.RENDER),true);
		}
		this.__renderable = true;
		this.__enterFrame(this.__deltaTime);
		this.__deltaTime = 0;
		this.__update(false,true);
		if(this.__renderer != null) {
			{
				var _g = renderer.context;
				switch(_g[1]) {
				case 4:
					var cairo = _g[2];
					(js_Boot.__cast(this.__renderer , openfl__$internal_renderer_cairo_CairoRenderer)).cairo = cairo;
					this.__renderer.renderSession.cairo = cairo;
					break;
				default:
				}
			}
			this.__renderer.render(this);
		}
		this.__rendering = false;
	}
	,update: function(deltaTime) {
		this.__deltaTime = deltaTime;
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) mouse = parent.globalToLocal(mouse);
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) x = this.__dragBounds.x; else if(x > this.__dragBounds.get_right()) x = this.__dragBounds.get_right();
			if(y < this.__dragBounds.y) y = this.__dragBounds.y; else if(y > this.__dragBounds.get_bottom()) y = this.__dragBounds.get_bottom();
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__fireEvent: function(event,stack) {
		var length = stack.length;
		if(length == 0) {
			event.eventPhase = openfl_events_EventPhase.AT_TARGET;
			event.target.__broadcast(event,false);
		} else {
			event.eventPhase = openfl_events_EventPhase.CAPTURING_PHASE;
			event.target = stack[stack.length - 1];
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				stack[i].__broadcast(event,false);
				if(event.__isCancelled) return;
			}
			event.eventPhase = openfl_events_EventPhase.AT_TARGET;
			event.target.__broadcast(event,false);
			if(event.__isCancelled) return;
			if(event.bubbles) {
				event.eventPhase = openfl_events_EventPhase.BUBBLING_PHASE;
				var i1 = length - 2;
				while(i1 >= 0) {
					stack[i1].__broadcast(event,false);
					if(event.__isCancelled) return;
					i1--;
				}
			}
		}
	}
	,__getInteractive: function(stack) {
		if(stack != null) stack.push(this);
		return true;
	}
	,__onKey: function(type,keyCode,modifier) {
		openfl_events_MouseEvent.__altKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
		if(stack.length > 0) {
			var keyLocation;
			switch(keyCode) {
			case 1073742048:case 1073742049:case 1073742050:case 1073742051:
				keyLocation = 1;
				break;
			case 1073742052:case 1073742053:case 1073742054:case 1073742055:
				keyLocation = 2;
				break;
			case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
				keyLocation = 3;
				break;
			default:
				keyLocation = 0;
			}
			var keyCode1;
			switch(keyCode) {
			case 8:
				keyCode1 = 8;
				break;
			case 9:
				keyCode1 = 9;
				break;
			case 13:
				keyCode1 = 13;
				break;
			case 27:
				keyCode1 = 27;
				break;
			case 32:
				keyCode1 = 32;
				break;
			case 33:
				keyCode1 = 49;
				break;
			case 34:
				keyCode1 = 222;
				break;
			case 35:
				keyCode1 = 51;
				break;
			case 36:
				keyCode1 = 52;
				break;
			case 37:
				keyCode1 = 53;
				break;
			case 38:
				keyCode1 = 55;
				break;
			case 39:
				keyCode1 = 222;
				break;
			case 40:
				keyCode1 = 57;
				break;
			case 41:
				keyCode1 = 48;
				break;
			case 42:
				keyCode1 = 56;
				break;
			case 44:
				keyCode1 = 188;
				break;
			case 45:
				keyCode1 = 189;
				break;
			case 46:
				keyCode1 = 190;
				break;
			case 47:
				keyCode1 = 191;
				break;
			case 48:
				keyCode1 = 48;
				break;
			case 49:
				keyCode1 = 49;
				break;
			case 50:
				keyCode1 = 50;
				break;
			case 51:
				keyCode1 = 51;
				break;
			case 52:
				keyCode1 = 52;
				break;
			case 53:
				keyCode1 = 53;
				break;
			case 54:
				keyCode1 = 54;
				break;
			case 55:
				keyCode1 = 55;
				break;
			case 56:
				keyCode1 = 56;
				break;
			case 57:
				keyCode1 = 57;
				break;
			case 58:
				keyCode1 = 186;
				break;
			case 59:
				keyCode1 = 186;
				break;
			case 60:
				keyCode1 = 60;
				break;
			case 61:
				keyCode1 = 187;
				break;
			case 62:
				keyCode1 = 190;
				break;
			case 63:
				keyCode1 = 191;
				break;
			case 64:
				keyCode1 = 50;
				break;
			case 91:
				keyCode1 = 219;
				break;
			case 92:
				keyCode1 = 220;
				break;
			case 93:
				keyCode1 = 221;
				break;
			case 94:
				keyCode1 = 54;
				break;
			case 95:
				keyCode1 = 189;
				break;
			case 96:
				keyCode1 = 192;
				break;
			case 97:
				keyCode1 = 65;
				break;
			case 98:
				keyCode1 = 66;
				break;
			case 99:
				keyCode1 = 67;
				break;
			case 100:
				keyCode1 = 68;
				break;
			case 101:
				keyCode1 = 69;
				break;
			case 102:
				keyCode1 = 70;
				break;
			case 103:
				keyCode1 = 71;
				break;
			case 104:
				keyCode1 = 72;
				break;
			case 105:
				keyCode1 = 73;
				break;
			case 106:
				keyCode1 = 74;
				break;
			case 107:
				keyCode1 = 75;
				break;
			case 108:
				keyCode1 = 76;
				break;
			case 109:
				keyCode1 = 77;
				break;
			case 110:
				keyCode1 = 78;
				break;
			case 111:
				keyCode1 = 79;
				break;
			case 112:
				keyCode1 = 80;
				break;
			case 113:
				keyCode1 = 81;
				break;
			case 114:
				keyCode1 = 82;
				break;
			case 115:
				keyCode1 = 83;
				break;
			case 116:
				keyCode1 = 84;
				break;
			case 117:
				keyCode1 = 85;
				break;
			case 118:
				keyCode1 = 86;
				break;
			case 119:
				keyCode1 = 87;
				break;
			case 120:
				keyCode1 = 88;
				break;
			case 121:
				keyCode1 = 89;
				break;
			case 122:
				keyCode1 = 90;
				break;
			case 127:
				keyCode1 = 46;
				break;
			case 1073741881:
				keyCode1 = 20;
				break;
			case 1073741882:
				keyCode1 = 112;
				break;
			case 1073741883:
				keyCode1 = 113;
				break;
			case 1073741884:
				keyCode1 = 114;
				break;
			case 1073741885:
				keyCode1 = 115;
				break;
			case 1073741886:
				keyCode1 = 116;
				break;
			case 1073741887:
				keyCode1 = 117;
				break;
			case 1073741888:
				keyCode1 = 118;
				break;
			case 1073741889:
				keyCode1 = 119;
				break;
			case 1073741890:
				keyCode1 = 120;
				break;
			case 1073741891:
				keyCode1 = 121;
				break;
			case 1073741892:
				keyCode1 = 122;
				break;
			case 1073741893:
				keyCode1 = 123;
				break;
			case 1073741894:
				keyCode1 = 301;
				break;
			case 1073741895:
				keyCode1 = 145;
				break;
			case 1073741896:
				keyCode1 = 19;
				break;
			case 1073741897:
				keyCode1 = 45;
				break;
			case 1073741898:
				keyCode1 = 36;
				break;
			case 1073741899:
				keyCode1 = 33;
				break;
			case 1073741901:
				keyCode1 = 35;
				break;
			case 1073741902:
				keyCode1 = 34;
				break;
			case 1073741903:
				keyCode1 = 39;
				break;
			case 1073741904:
				keyCode1 = 37;
				break;
			case 1073741905:
				keyCode1 = 40;
				break;
			case 1073741906:
				keyCode1 = 38;
				break;
			case 1073741907:
				keyCode1 = 144;
				break;
			case 1073741908:
				keyCode1 = 111;
				break;
			case 1073741909:
				keyCode1 = 106;
				break;
			case 1073741910:
				keyCode1 = 109;
				break;
			case 1073741911:
				keyCode1 = 107;
				break;
			case 1073741912:
				keyCode1 = 108;
				break;
			case 1073741913:
				keyCode1 = 97;
				break;
			case 1073741914:
				keyCode1 = 98;
				break;
			case 1073741915:
				keyCode1 = 99;
				break;
			case 1073741916:
				keyCode1 = 100;
				break;
			case 1073741917:
				keyCode1 = 101;
				break;
			case 1073741918:
				keyCode1 = 102;
				break;
			case 1073741919:
				keyCode1 = 103;
				break;
			case 1073741920:
				keyCode1 = 104;
				break;
			case 1073741921:
				keyCode1 = 105;
				break;
			case 1073741922:
				keyCode1 = 96;
				break;
			case 1073741923:
				keyCode1 = 110;
				break;
			case 1073741925:
				keyCode1 = 302;
				break;
			case 1073741928:
				keyCode1 = 124;
				break;
			case 1073741929:
				keyCode1 = 125;
				break;
			case 1073741930:
				keyCode1 = 126;
				break;
			case 1073741982:
				keyCode1 = 13;
				break;
			case 1073742044:
				keyCode1 = 110;
				break;
			case 1073742048:
				keyCode1 = 17;
				break;
			case 1073742049:
				keyCode1 = 16;
				break;
			case 1073742050:
				keyCode1 = 18;
				break;
			case 1073742051:
				keyCode1 = 15;
				break;
			case 1073742052:
				keyCode1 = 17;
				break;
			case 1073742053:
				keyCode1 = 16;
				break;
			case 1073742054:
				keyCode1 = 18;
				break;
			case 1073742055:
				keyCode1 = 15;
				break;
			default:
				keyCode1 = keyCode;
			}
			var charCode = openfl_ui_Keyboard.__getCharCode(keyCode1,lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier));
			var event = new openfl_events_KeyboardEvent(type,true,false,charCode,keyCode1,keyLocation,this.__macKeyboard?lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier):lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier));
			stack.reverse();
			this.__fireEvent(event,stack);
		}
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) return;
		this.__mouseX = x;
		this.__mouseY = y;
		var stack = [];
		var target = null;
		var targetPoint = new openfl_geom_Point(x,y);
		if(this.__hitTest(x,y,true,stack,true,this)) target = stack[stack.length - 1]; else {
			target = this;
			stack = [this];
		}
		if(target == null) target = this;
		if(type == openfl_events_MouseEvent.MOUSE_DOWN) {
			if(target.get_tabEnabled()) this.set_focus(target); else this.set_focus(null);
		}
		this.__fireEvent(openfl_events_MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
		var clickType;
		switch(type) {
		case "mouseUp":
			clickType = openfl_events_MouseEvent.CLICK;
			break;
		case "middleMouseUp":
			clickType = openfl_events_MouseEvent.MIDDLE_CLICK;
			break;
		case "rightMouseUp":
			clickType = openfl_events_MouseEvent.RIGHT_CLICK;
			break;
		default:
			clickType = null;
		}
		if(clickType != null) {
			this.__fireEvent(openfl_events_MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
			if(type == openfl_events_MouseEvent.MOUSE_UP && (js_Boot.__cast(target , openfl_display_InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.__fireEvent(openfl_events_MouseEvent.__create(openfl_events_MouseEvent.DOUBLE_CLICK,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
					this.__lastClickTime = 0;
				} else this.__lastClickTime = currentTime;
			}
		}
		var cursor = null;
		var _g = 0;
		while(_g < stack.length) {
			var target1 = stack[_g];
			++_g;
			cursor = target1.__getCursor();
			if(cursor != null) {
				lime_ui_Mouse.set_cursor(cursor);
				break;
			}
		}
		if(cursor == null) lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
		var _g1 = 0;
		var _g11 = this.__mouseOutStack;
		while(_g1 < _g11.length) {
			var target2 = _g11[_g1];
			++_g1;
			if(HxOverrides.indexOf(stack,target2,0) == -1) {
				HxOverrides.remove(this.__mouseOutStack,target2);
				var localPoint = target2.globalToLocal(targetPoint);
				target2.__dispatchEvent(new openfl_events_MouseEvent(openfl_events_MouseEvent.MOUSE_OUT,false,false,localPoint.x,localPoint.y,target2));
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target3 = stack[_g2];
			++_g2;
			if(HxOverrides.indexOf(this.__mouseOutStack,target3,0) == -1) {
				if(target3.hasEventListener(openfl_events_MouseEvent.MOUSE_OVER)) {
					var localPoint1 = target3.globalToLocal(targetPoint);
					target3.__dispatchEvent(new openfl_events_MouseEvent(openfl_events_MouseEvent.MOUSE_OVER,false,false,localPoint1.x,localPoint1.y,target3));
				}
				if(target3.hasEventListener(openfl_events_MouseEvent.MOUSE_OUT)) this.__mouseOutStack.push(target3);
			}
		}
		if(this.__dragObject != null) this.__drag(targetPoint);
	}
	,__onMouseWheel: function(deltaX,deltaY) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		if(!this.__hitTest(x,y,false,stack,true,this)) stack = [this];
		var target = stack[stack.length - 1];
		var targetPoint = new openfl_geom_Point(x,y);
		var delta = deltaY | 0;
		this.__fireEvent(openfl_events_MouseEvent.__create(openfl_events_MouseEvent.MOUSE_WHEEL,0,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target,delta),stack);
	}
	,__onTouch: function(type,touch) {
		var point = new openfl_geom_Point(touch.x * this.stageWidth,touch.y * this.stageHeight);
		this.__mouseX = point.x;
		this.__mouseY = point.y;
		var __stack = [];
		if(this.__hitTest(this.__mouseX,this.__mouseY,false,__stack,true,this)) {
			var target = __stack[__stack.length - 1];
			if(target == null) target = this;
			var localPoint = target.globalToLocal(point);
			var touchEvent = openfl_events_TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,localPoint,target);
			touchEvent.touchPointID = touch.id;
			touchEvent.isPrimaryTouchPoint = true;
			this.__fireEvent(touchEvent,__stack);
		} else {
			var touchEvent1 = openfl_events_TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,point,this);
			touchEvent1.touchPointID = touch.id;
			touchEvent1.isPrimaryTouchPoint = true;
			this.__fireEvent(touchEvent1,[this.stage]);
		}
	}
	,__resize: function() {
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		if(bounds == null) this.__dragBounds = null; else this.__dragBounds = bounds.clone();
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = -this.__dragObject.get_width() / 2;
				this.__dragOffsetY = -this.__dragObject.get_height() / 2;
			} else {
				var mouse = new openfl_geom_Point(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) mouse = parent.globalToLocal(mouse);
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__update: function(transformOnly,updateChildren,maskGrahpics) {
		if(transformOnly) {
			if(openfl_display_DisplayObject.__worldTransformDirty > 0) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren,maskGrahpics);
				if(updateChildren) {
					openfl_display_DisplayObject.__worldTransformDirty = 0;
					this.__dirty = true;
				}
			}
		} else if(openfl_display_DisplayObject.__worldTransformDirty > 0 || this.__dirty || openfl_display_DisplayObject.__worldRenderDirty > 0) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGrahpics);
			if(updateChildren) {
				openfl_display_DisplayObject.__worldTransformDirty = 0;
				openfl_display_DisplayObject.__worldRenderDirty = 0;
				this.__dirty = false;
			}
		}
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,canvas_onContextLost: function(event) {
	}
	,canvas_onContextRestored: function(event) {
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		var r = (value & 16711680) >>> 16;
		var g = (value & 65280) >>> 8;
		var b = value & 255;
		this.__colorSplit = [r / 255,g / 255,b / 255];
		this.__colorString = "#" + StringTools.hex(value,6);
		return this.__color = value;
	}
	,get_displayState: function() {
		return this.__displayState;
	}
	,set_displayState: function(value) {
		if(this.window != null) switch(value[1]) {
		case 0:
			if(this.window.__fullscreen) {
				this.window.set_fullscreen(false);
				this.dispatchEvent(new openfl_events_FullScreenEvent(openfl_events_FullScreenEvent.FULL_SCREEN,false,false,false,true));
			}
			break;
		default:
			if(!this.window.__fullscreen) {
				this.window.set_fullscreen(true);
				this.dispatchEvent(new openfl_events_FullScreenEvent(openfl_events_FullScreenEvent.FULL_SCREEN,false,false,true,true));
			}
		}
		return this.__displayState = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			var oldFocus = this.__focus;
			this.__focus = value;
			if(oldFocus != null) {
				var event = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_OUT,true,false,this.__focus,false,0);
				this.__stack = [];
				oldFocus.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event,this.__stack);
			}
			if(this.__focus != null) {
				var event1 = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_IN,true,false,oldFocus,false,0);
				this.__stack = [];
				value.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event1,this.__stack);
			}
		}
		return this.__focus;
	}
	,get_frameRate: function() {
		if(this.application != null) return this.application.backend.getFrameRate();
		return 0;
	}
	,set_frameRate: function(value) {
		if(this.application != null) return this.application.backend.setFrameRate(value);
		return value;
	}
	,__class__: openfl_display_Stage
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",get_displayState:"get_displayState",set_color:"set_color",get_color:"get_color"})
});
var openfl_display_Stage3D = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	requestContext3D: function(context3DRenderMode) {
		if(context3DRenderMode == null) context3DRenderMode = "";
		var _g = this;
		if(openfl_display_OpenGLView.get_isSupported()) haxe_Timer.delay(function() {
			_g.context3D = new openfl_display3D_Context3D();
			_g.dispatchEvent(new openfl_events_Event(openfl_events_Event.CONTEXT3D_CREATE));
		},1); else haxe_Timer.delay(function() {
			_g.dispatchEvent(new openfl_events_ErrorEvent(openfl_events_ErrorEvent.ERROR));
		},1);
	}
	,__class__: openfl_display_Stage3D
});
var openfl_display_StageAlign = $hxClasses["openfl.display.StageAlign"] = { __ename__ : true, __constructs__ : ["TOP_RIGHT","TOP_LEFT","TOP","RIGHT","LEFT","BOTTOM_RIGHT","BOTTOM_LEFT","BOTTOM"] };
openfl_display_StageAlign.TOP_RIGHT = ["TOP_RIGHT",0];
openfl_display_StageAlign.TOP_RIGHT.toString = $estr;
openfl_display_StageAlign.TOP_RIGHT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.TOP_LEFT = ["TOP_LEFT",1];
openfl_display_StageAlign.TOP_LEFT.toString = $estr;
openfl_display_StageAlign.TOP_LEFT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.TOP = ["TOP",2];
openfl_display_StageAlign.TOP.toString = $estr;
openfl_display_StageAlign.TOP.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.RIGHT = ["RIGHT",3];
openfl_display_StageAlign.RIGHT.toString = $estr;
openfl_display_StageAlign.RIGHT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.LEFT = ["LEFT",4];
openfl_display_StageAlign.LEFT.toString = $estr;
openfl_display_StageAlign.LEFT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.BOTTOM_RIGHT = ["BOTTOM_RIGHT",5];
openfl_display_StageAlign.BOTTOM_RIGHT.toString = $estr;
openfl_display_StageAlign.BOTTOM_RIGHT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.BOTTOM_LEFT = ["BOTTOM_LEFT",6];
openfl_display_StageAlign.BOTTOM_LEFT.toString = $estr;
openfl_display_StageAlign.BOTTOM_LEFT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.BOTTOM = ["BOTTOM",7];
openfl_display_StageAlign.BOTTOM.toString = $estr;
openfl_display_StageAlign.BOTTOM.__enum__ = openfl_display_StageAlign;
var openfl_display_StageDisplayState = $hxClasses["openfl.display.StageDisplayState"] = { __ename__ : true, __constructs__ : ["NORMAL","FULL_SCREEN","FULL_SCREEN_INTERACTIVE"] };
openfl_display_StageDisplayState.NORMAL = ["NORMAL",0];
openfl_display_StageDisplayState.NORMAL.toString = $estr;
openfl_display_StageDisplayState.NORMAL.__enum__ = openfl_display_StageDisplayState;
openfl_display_StageDisplayState.FULL_SCREEN = ["FULL_SCREEN",1];
openfl_display_StageDisplayState.FULL_SCREEN.toString = $estr;
openfl_display_StageDisplayState.FULL_SCREEN.__enum__ = openfl_display_StageDisplayState;
openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE = ["FULL_SCREEN_INTERACTIVE",2];
openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE.toString = $estr;
openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE.__enum__ = openfl_display_StageDisplayState;
var openfl_display_StageQuality = $hxClasses["openfl.display.StageQuality"] = { __ename__ : true, __constructs__ : ["BEST","HIGH","MEDIUM","LOW"] };
openfl_display_StageQuality.BEST = ["BEST",0];
openfl_display_StageQuality.BEST.toString = $estr;
openfl_display_StageQuality.BEST.__enum__ = openfl_display_StageQuality;
openfl_display_StageQuality.HIGH = ["HIGH",1];
openfl_display_StageQuality.HIGH.toString = $estr;
openfl_display_StageQuality.HIGH.__enum__ = openfl_display_StageQuality;
openfl_display_StageQuality.MEDIUM = ["MEDIUM",2];
openfl_display_StageQuality.MEDIUM.toString = $estr;
openfl_display_StageQuality.MEDIUM.__enum__ = openfl_display_StageQuality;
openfl_display_StageQuality.LOW = ["LOW",3];
openfl_display_StageQuality.LOW.toString = $estr;
openfl_display_StageQuality.LOW.__enum__ = openfl_display_StageQuality;
var openfl_display_StageScaleMode = $hxClasses["openfl.display.StageScaleMode"] = { __ename__ : true, __constructs__ : ["SHOW_ALL","NO_SCALE","NO_BORDER","EXACT_FIT"] };
openfl_display_StageScaleMode.SHOW_ALL = ["SHOW_ALL",0];
openfl_display_StageScaleMode.SHOW_ALL.toString = $estr;
openfl_display_StageScaleMode.SHOW_ALL.__enum__ = openfl_display_StageScaleMode;
openfl_display_StageScaleMode.NO_SCALE = ["NO_SCALE",1];
openfl_display_StageScaleMode.NO_SCALE.toString = $estr;
openfl_display_StageScaleMode.NO_SCALE.__enum__ = openfl_display_StageScaleMode;
openfl_display_StageScaleMode.NO_BORDER = ["NO_BORDER",2];
openfl_display_StageScaleMode.NO_BORDER.toString = $estr;
openfl_display_StageScaleMode.NO_BORDER.__enum__ = openfl_display_StageScaleMode;
openfl_display_StageScaleMode.EXACT_FIT = ["EXACT_FIT",3];
openfl_display_StageScaleMode.EXACT_FIT.toString = $estr;
openfl_display_StageScaleMode.EXACT_FIT.__enum__ = openfl_display_StageScaleMode;
var openfl_display_Tilesheet = function(image) {
	this.__bitmap = image;
	this.__centerPoints = [];
	this.__tileRects = [];
	this.__tileUVs = [];
	this.__rectTile = new openfl_geom_Rectangle();
	this.__rectUV = new openfl_geom_Rectangle();
	this.__point = new openfl_geom_Point();
};
$hxClasses["openfl.display.Tilesheet"] = openfl_display_Tilesheet;
openfl_display_Tilesheet.__name__ = ["openfl","display","Tilesheet"];
openfl_display_Tilesheet.prototype = {
	addTileRect: function(rectangle,centerPoint) {
		this.__tileRects.push(rectangle);
		if(centerPoint == null) centerPoint = openfl_display_Tilesheet.__defaultPoint;
		this.__centerPoints.push(centerPoint);
		this.__tileUVs.push(new openfl_geom_Rectangle(rectangle.get_left() / this.__bitmap.width,rectangle.get_top() / this.__bitmap.height,rectangle.get_right() / this.__bitmap.width,rectangle.get_bottom() / this.__bitmap.height));
		return this.__tileRects.length - 1;
	}
	,drawTiles: function(graphics,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		graphics.drawTiles(this,tileData,smooth,flags,null,count);
	}
	,getTileCenter: function(index) {
		return this.__centerPoints[index];
	}
	,getTileRect: function(index) {
		return this.__tileRects[index];
	}
	,getTileUVs: function(index) {
		return this.__tileUVs[index];
	}
	,__class__: openfl_display_Tilesheet
};
var openfl_display_TriangleCulling = $hxClasses["openfl.display.TriangleCulling"] = { __ename__ : true, __constructs__ : ["NEGATIVE","NONE","POSITIVE"] };
openfl_display_TriangleCulling.NEGATIVE = ["NEGATIVE",0];
openfl_display_TriangleCulling.NEGATIVE.toString = $estr;
openfl_display_TriangleCulling.NEGATIVE.__enum__ = openfl_display_TriangleCulling;
openfl_display_TriangleCulling.NONE = ["NONE",1];
openfl_display_TriangleCulling.NONE.toString = $estr;
openfl_display_TriangleCulling.NONE.__enum__ = openfl_display_TriangleCulling;
openfl_display_TriangleCulling.POSITIVE = ["POSITIVE",2];
openfl_display_TriangleCulling.POSITIVE.toString = $estr;
openfl_display_TriangleCulling.POSITIVE.__enum__ = openfl_display_TriangleCulling;
var openfl_display_Window = function(config) {
	lime_ui_Window.call(this,config);
};
$hxClasses["openfl.display.Window"] = openfl_display_Window;
openfl_display_Window.__name__ = ["openfl","display","Window"];
openfl_display_Window.__super__ = lime_ui_Window;
openfl_display_Window.prototype = $extend(lime_ui_Window.prototype,{
	create: function(application) {
		lime_ui_Window.prototype.create.call(this,application);
		this.stage = new openfl_display_Stage(this,Object.prototype.hasOwnProperty.call(this.config,"background")?this.config.background:16777215);
		application.addModule(this.stage);
	}
	,__class__: openfl_display_Window
});
var openfl_display3D_Context3D = function() {
	this.disposed = false;
	this.stencilCompareMode = 519;
	this.stencilRef = 0;
	this.stencilReadMask = 255;
	this._yFlip = 1;
	this.vertexBuffersCreated = [];
	this.indexBuffersCreated = [];
	this.programsCreated = [];
	this.texturesCreated = [];
	this.samplerParameters = [];
	var _g1 = 0;
	var _g = openfl_display3D_Context3D.MAX_SAMPLERS;
	while(_g1 < _g) {
		var i = _g1++;
		this.samplerParameters[i] = new openfl_display3D__$Context3D_SamplerState();
		this.samplerParameters[i].wrap = openfl_display3D_Context3DWrapMode.CLAMP;
		this.samplerParameters[i].filter = openfl_display3D_Context3DTextureFilter.LINEAR;
		this.samplerParameters[i].mipfilter = openfl_display3D_Context3DMipFilter.MIPNONE;
	}
	var stage = openfl_Lib.current.stage;
	this.ogl = new openfl_display_OpenGLView();
	this.ogl.set_scrollRect(new openfl_geom_Rectangle(0,0,stage.stageWidth,stage.stageHeight));
	this.scrollRect = this.ogl.get_scrollRect().clone();
	this.ogl.set_width(stage.stageWidth);
	this.ogl.set_height(stage.stageHeight);
	stage.addChildAt(this.ogl,0);
};
$hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
openfl_display3D_Context3D.__name__ = ["openfl","display3D","Context3D"];
openfl_display3D_Context3D.prototype = {
	clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) mask = 17664;
		if(stencil == null) stencil = 0;
		if(depth == null) depth = 1;
		if(alpha == null) alpha = 1;
		if(blue == null) blue = 0;
		if(green == null) green = 0;
		if(red == null) red = 0;
		if(!this.drawing) {
			this.__updateBlendStatus();
			this.drawing = true;
		}
		lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
		lime_graphics_opengl_GL.context.clearDepth(depth);
		lime_graphics_opengl_GL.context.clearStencil(stencil);
		lime_graphics_opengl_GL.context.clear(mask);
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil) {
		if(enableDepthAndStencil == null) enableDepthAndStencil = true;
		if(enableDepthAndStencil) {
			lime_graphics_opengl_GL.context.enable(2929);
			lime_graphics_opengl_GL.context.enable(2960);
		}
		this.ogl.set_scrollRect(new openfl_geom_Rectangle(0,0,width,height));
		this.ogl.set_width(width);
		this.ogl.set_height(height);
		this.scrollRect = this.ogl.get_scrollRect().clone();
		lime_graphics_opengl_GL.context.viewport(this.scrollRect.x | 0,this.scrollRect.y | 0,this.scrollRect.width | 0,this.scrollRect.height | 0);
	}
	,createCubeTexture: function(size,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		var texture = new openfl_display3D_textures_CubeTexture(this,lime_graphics_opengl_GL.context.createTexture(),size);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createIndexBuffer: function(numIndices,bufferUsage) {
		if(bufferUsage == null) bufferUsage = openfl_display3D_Context3DBufferUsage.STATIC_DRAW;
		var indexBuffer = new openfl_display3D_IndexBuffer3D(this,lime_graphics_opengl_GL.context.createBuffer(),numIndices,bufferUsage == openfl_display3D_Context3DBufferUsage.STATIC_DRAW?35044:35048);
		this.indexBuffersCreated.push(indexBuffer);
		return indexBuffer;
	}
	,createProgram: function() {
		var program = new openfl_display3D_Program3D(this,lime_graphics_opengl_GL.context.createProgram());
		this.programsCreated.push(program);
		return program;
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		var texture = new openfl_display3D_textures_RectangleTexture(this,lime_graphics_opengl_GL.context.createTexture(),optimizeForRenderToTexture,width,height);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createTexture: function(width,height,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		var texture = new openfl_display3D_textures_Texture(this,lime_graphics_opengl_GL.context.createTexture(),optimizeForRenderToTexture,width,height);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createVertexBuffer: function(numVertices,data32PerVertex,bufferUsage) {
		if(bufferUsage == null) bufferUsage = openfl_display3D_Context3DBufferUsage.STATIC_DRAW;
		var vertexBuffer = new openfl_display3D_VertexBuffer3D(this,lime_graphics_opengl_GL.context.createBuffer(),numVertices,data32PerVertex,bufferUsage == openfl_display3D_Context3DBufferUsage.STATIC_DRAW?35044:35048);
		this.vertexBuffersCreated.push(vertexBuffer);
		return vertexBuffer;
	}
	,__deleteTexture: function(texture) {
		if(texture.glTexture == null) return;
		HxOverrides.remove(this.texturesCreated,texture);
		lime_graphics_opengl_GL.context.deleteTexture(texture.glTexture);
		texture.glTexture = null;
	}
	,__deleteVertexBuffer: function(buffer) {
		if(buffer.glBuffer == null) return;
		HxOverrides.remove(this.vertexBuffersCreated,buffer);
		lime_graphics_opengl_GL.context.deleteBuffer(buffer.glBuffer);
		buffer.glBuffer = null;
	}
	,__deleteIndexBuffer: function(buffer) {
		if(buffer.glBuffer == null) return;
		HxOverrides.remove(this.indexBuffersCreated,buffer);
		lime_graphics_opengl_GL.context.deleteBuffer(buffer.glBuffer);
		buffer.glBuffer = null;
	}
	,__deleteProgram: function(program) {
		if(program.glProgram == null) return;
		HxOverrides.remove(this.programsCreated,program);
		lime_graphics_opengl_GL.context.deleteProgram(program.glProgram);
		program.glProgram = null;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.vertexBuffersCreated;
		while(_g < _g1.length) {
			var vertexBuffer = _g1[_g];
			++_g;
			vertexBuffer.dispose();
		}
		this.vertexBuffersCreated = null;
		var _g2 = 0;
		var _g11 = this.indexBuffersCreated;
		while(_g2 < _g11.length) {
			var indexBuffer = _g11[_g2];
			++_g2;
			indexBuffer.dispose();
		}
		this.indexBuffersCreated = null;
		var _g3 = 0;
		var _g12 = this.programsCreated;
		while(_g3 < _g12.length) {
			var program = _g12[_g3];
			++_g3;
			program.dispose();
		}
		this.programsCreated = null;
		this.samplerParameters = null;
		var _g4 = 0;
		var _g13 = this.texturesCreated;
		while(_g4 < _g13.length) {
			var texture = _g13[_g4];
			++_g4;
			texture.dispose();
		}
		this.texturesCreated = null;
		if(this.framebuffer != null) {
			lime_graphics_opengl_GL.context.deleteFramebuffer(this.framebuffer);
			this.framebuffer = null;
		}
		if(this.renderbuffer != null) {
			lime_graphics_opengl_GL.context.deleteRenderbuffer(this.renderbuffer);
			this.renderbuffer = null;
		}
		this.disposed = true;
	}
	,drawToBitmapData: function(destination) {
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) numTriangles = -1;
		if(firstIndex == null) firstIndex = 0;
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,"yflip");
		lime_graphics_opengl_GL.context.uniform1f(location,this._yFlip);
		if(!this.drawing) throw new js__$Boot_HaxeError(new openfl_errors_Error("Need to clear before drawing if the buffer has not been cleared since the last present() call."));
		var numIndices;
		if(numTriangles == -1) numIndices = indexBuffer.numIndices; else numIndices = numTriangles * 3;
		var byteOffset = firstIndex * 2;
		lime_graphics_opengl_GL.context.bindBuffer(34963,indexBuffer.glBuffer);
		lime_graphics_opengl_GL.context.drawElements(4,numIndices,5123,byteOffset);
	}
	,present: function() {
		this.drawing = false;
		lime_graphics_opengl_GL.context.useProgram(null);
		lime_graphics_opengl_GL.context.bindBuffer(34962,null);
		lime_graphics_opengl_GL.context.disable(2884);
		if(this.framebuffer != null) lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
		if(this.renderbuffer != null) lime_graphics_opengl_GL.context.bindRenderbuffer(36161,null);
	}
	,removeRenderMethod: function(func) {
		this.ogl.set_render(null);
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		this.blendEnabled = true;
		this.blendSourceFactor = sourceFactor;
		this.blendDestinationFactor = destinationFactor;
		this.__updateBlendStatus();
	}
	,setColorMask: function(red,green,blue,alpha) {
		lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
	}
	,setCulling: function(triangleFaceToCull) {
		if(triangleFaceToCull == 0) lime_graphics_opengl_GL.context.disable(2884); else {
			lime_graphics_opengl_GL.context.enable(2884);
			switch(triangleFaceToCull) {
			case 1029:
				lime_graphics_opengl_GL.context.cullFace(1029);
				break;
			case 1028:
				lime_graphics_opengl_GL.context.cullFace(1028);
				break;
			case 1032:
				lime_graphics_opengl_GL.context.cullFace(1032);
				break;
			default:
				throw new js__$Boot_HaxeError("Unknown Context3DTriangleFace type.");
			}
		}
		switch(triangleFaceToCull) {
		case 1029:
			this._yFlip = -1;
			break;
		case 1028:
			this._yFlip = 1;
			break;
		case 1032:
			this._yFlip = 1;
			break;
		case 0:
			this._yFlip = 1;
			break;
		default:
			throw new js__$Boot_HaxeError("Unknown culling mode " + triangleFaceToCull + ".");
		}
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		lime_graphics_opengl_GL.context.depthFunc(passCompareMode);
		lime_graphics_opengl_GL.context.depthMask(depthMask);
	}
	,setGLSLProgramConstantsFromByteArray: function(locationName,data,byteArrayOffset) {
		if(byteArrayOffset == null) byteArrayOffset = 0;
		data.position = byteArrayOffset;
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime_graphics_opengl_GL.uniform4f(location,data.readFloat(),data.readFloat(),data.readFloat(),data.readFloat());
	}
	,setGLSLProgramConstantsFromMatrix: function(locationName,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime_graphics_opengl_GL.uniformMatrix4fv(location,!transposedMatrix,(function($this) {
			var $r;
			var array;
			{
				var this2 = matrix.rawData;
				var value = [];
				var _g1 = 0;
				var _g = this2.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value.push(this2.data[i]);
				}
				array = value;
			}
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
	}
	,setGLSLProgramConstantsFromVector4: function(locationName,data,startIndex) {
		if(startIndex == null) startIndex = 0;
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime_graphics_opengl_GL.context.uniform4f(location,data[startIndex],data[startIndex + 1],data[startIndex + 2],data[startIndex + 3]);
	}
	,setGLSLTextureAt: function(locationName,texture,textureIndex) {
		switch(textureIndex) {
		case 0:
			lime_graphics_opengl_GL.context.activeTexture(33984);
			break;
		case 1:
			lime_graphics_opengl_GL.context.activeTexture(33985);
			break;
		case 2:
			lime_graphics_opengl_GL.context.activeTexture(33986);
			break;
		case 3:
			lime_graphics_opengl_GL.context.activeTexture(33987);
			break;
		case 4:
			lime_graphics_opengl_GL.context.activeTexture(33988);
			break;
		case 5:
			lime_graphics_opengl_GL.context.activeTexture(33989);
			break;
		case 6:
			lime_graphics_opengl_GL.context.activeTexture(33990);
			break;
		case 7:
			lime_graphics_opengl_GL.context.activeTexture(33991);
			break;
		default:
			throw new js__$Boot_HaxeError("Does not support texture8 or more");
		}
		if(texture == null) {
			lime_graphics_opengl_GL.context.bindTexture(3553,null);
			lime_graphics_opengl_GL.context.bindTexture(34067,null);
			return;
		}
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		if(js_Boot.__instanceof(texture,openfl_display3D_textures_Texture)) {
			lime_graphics_opengl_GL.bindTexture(3553,(js_Boot.__cast(texture , openfl_display3D_textures_Texture)).glTexture);
			lime_graphics_opengl_GL.context.uniform1i(location,textureIndex);
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_RectangleTexture)) {
			lime_graphics_opengl_GL.bindTexture(3553,(js_Boot.__cast(texture , openfl_display3D_textures_RectangleTexture)).glTexture);
			lime_graphics_opengl_GL.context.uniform1i(location,textureIndex);
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_CubeTexture)) {
			lime_graphics_opengl_GL.bindTexture(34067,(js_Boot.__cast(texture , openfl_display3D_textures_CubeTexture)).glTexture);
			lime_graphics_opengl_GL.context.uniform1i(location,textureIndex);
		} else throw new js__$Boot_HaxeError("Texture of type " + Type.getClassName(texture == null?null:js_Boot.getClass(texture)) + " not supported yet");
		var parameters = this.samplerParameters[textureIndex];
		if(parameters != null) this.setTextureParameters(texture,parameters.wrap,parameters.filter,parameters.mipfilter); else this.setTextureParameters(texture,openfl_display3D_Context3DWrapMode.CLAMP,openfl_display3D_Context3DTextureFilter.NEAREST,openfl_display3D_Context3DMipFilter.MIPNONE);
	}
	,setGLSLVertexBufferAt: function(locationName,buffer,bufferOffset,format) {
		if(bufferOffset == null) bufferOffset = 0;
		var location;
		if(this.currentProgram != null && this.currentProgram.glProgram != null) location = lime_graphics_opengl_GL.context.getAttribLocation(this.currentProgram.glProgram,locationName); else location = -1;
		if(buffer == null) {
			if(location > -1) lime_graphics_opengl_GL.context.disableVertexAttribArray(location);
			return;
		}
		lime_graphics_opengl_GL.context.bindBuffer(34962,buffer.glBuffer);
		var dimension = 4;
		var type = 5126;
		var numBytes = 4;
		if(format == openfl_display3D_Context3DVertexBufferFormat.BYTES_4) {
			dimension = 4;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_1) {
			dimension = 1;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_2) {
			dimension = 2;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_3) {
			dimension = 3;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_4) {
			dimension = 4;
			type = 5126;
			numBytes = 4;
		} else throw new js__$Boot_HaxeError("Buffer format " + Std.string(format) + " is not supported");
		lime_graphics_opengl_GL.context.enableVertexAttribArray(location);
		lime_graphics_opengl_GL.context.vertexAttribPointer(location,dimension,type,false,buffer.data32PerVertex * numBytes,bufferOffset * numBytes);
	}
	,setProgram: function(program3D) {
		var glProgram = null;
		if(program3D != null) glProgram = program3D.glProgram;
		lime_graphics_opengl_GL.context.useProgram(glProgram);
		this.currentProgram = program3D;
	}
	,setProgramConstantsFromByteArray: function(programType,firstRegister,numRegisters,data,byteArrayOffset) {
		data.position = byteArrayOffset;
		var _g = 0;
		while(_g < numRegisters) {
			var i = _g++;
			var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + i);
			this.setGLSLProgramConstantsFromByteArray(locationName,data);
		}
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var d = matrix.rawData;
		if(transposedMatrix) {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[4],d.data[8],d.data[12]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[1],d.data[5],d.data[9],d.data[13]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[2],d.data[6],d.data[10],d.data[14]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[3],d.data[7],d.data[11],d.data[15]],1);
		} else {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[1],d.data[2],d.data[3]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[4],d.data[5],d.data[6],d.data[7]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[8],d.data[9],d.data[10],d.data[11]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[12],d.data[13],d.data[14],d.data[15]],1);
		}
	}
	,setProgramConstantsFromVector: function(programType,firstRegister,data,numRegisters) {
		if(numRegisters == null) numRegisters = 1;
		var _g = 0;
		while(_g < numRegisters) {
			var i = _g++;
			var currentIndex = i * 4;
			var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + i);
			this.setGLSLProgramConstantsFromVector4(locationName,data,currentIndex);
		}
	}
	,setRenderMethod: function(func) {
		this.ogl.set_render(function(rect) {
			func(null);
		});
	}
	,setRenderToBackBuffer: function() {
		lime_graphics_opengl_GL.context.disable(2929);
		lime_graphics_opengl_GL.context.disable(2960);
		lime_graphics_opengl_GL.context.disable(3089);
		if(this.framebuffer != null) lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
		if(this.renderbuffer != null) lime_graphics_opengl_GL.context.bindRenderbuffer(36161,null);
		lime_graphics_opengl_GL.context.viewport(this.scrollRect.x | 0,this.scrollRect.y | 0,this.scrollRect.width | 0,this.scrollRect.height | 0);
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		if(antiAlias == null) antiAlias = 0;
		if(enableDepthAndStencil == null) enableDepthAndStencil = false;
		if(this.framebuffer == null) this.framebuffer = lime_graphics_opengl_GL.context.createFramebuffer();
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,this.framebuffer);
		if(this.renderbuffer == null) this.renderbuffer = lime_graphics_opengl_GL.context.createRenderbuffer();
		lime_graphics_opengl_GL.context.bindRenderbuffer(36161,this.renderbuffer);
		lime_graphics_opengl_GL.context.renderbufferStorage(36161,6408,texture.width,texture.height);
		lime_graphics_opengl_GL.context.framebufferTexture2D(36160,36064,3553,texture.glTexture,0);
		lime_graphics_opengl_GL.context.renderbufferStorage(36161,34041,texture.width,texture.height);
		lime_graphics_opengl_GL.context.framebufferRenderbuffer(36160,33306,36161,this.renderbuffer);
		if(enableDepthAndStencil) {
			lime_graphics_opengl_GL.context.enable(2929);
			lime_graphics_opengl_GL.context.enable(2960);
		}
		lime_graphics_opengl_GL.context.bindTexture(3553,texture.glTexture);
		lime_graphics_opengl_GL.context.texImage2D(3553,0,6408,texture.width,texture.height,0,6408,5121,null);
		lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
		lime_graphics_opengl_GL.context.texParameteri(3553,10241,9985);
		lime_graphics_opengl_GL.context.viewport(0,0,texture.width,texture.height);
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		if(0 <= sampler && sampler < openfl_display3D_Context3D.MAX_SAMPLERS) {
			this.samplerParameters[sampler].wrap = wrap;
			this.samplerParameters[sampler].filter = filter;
			this.samplerParameters[sampler].mipfilter = mipfilter;
		} else throw new js__$Boot_HaxeError("Sampler is out of bounds.");
	}
	,setScissorRectangle: function(rectangle) {
		if(rectangle == null) {
			lime_graphics_opengl_GL.context.disable(3089);
			return;
		}
		lime_graphics_opengl_GL.context.enable(3089);
		lime_graphics_opengl_GL.context.scissor(rectangle.x | 0,rectangle.y | 0,rectangle.width | 0,rectangle.height | 0);
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		this.stencilCompareMode = compareMode;
		lime_graphics_opengl_GL.context.stencilOp(actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail);
		lime_graphics_opengl_GL.context.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) writeMask = 255;
		if(readMask == null) readMask = 255;
		this.stencilReadMask = readMask;
		this.stencilRef = referenceValue;
		lime_graphics_opengl_GL.context.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
		lime_graphics_opengl_GL.context.stencilMask(writeMask);
	}
	,setTextureAt: function(sampler,texture) {
		var locationName = "fs" + sampler;
		this.setGLSLTextureAt(locationName,texture,sampler);
	}
	,setTextureParameters: function(texture,wrap,filter,mipfilter) {
		if(!openfl_display3D_Context3D.anisotropySupportTested) {
			var ext = lime_graphics_opengl_GL.context.getExtension("EXT_texture_filter_anisotropic");
			if(ext == null || Reflect.field(ext,"MAX_TEXTURE_MAX_ANISOTROPY_EXT") == null) ext = lime_graphics_opengl_GL.context.getExtension("MOZ_EXT_texture_filter_anisotropic");
			if(ext == null || Reflect.field(ext,"MAX_TEXTURE_MAX_ANISOTROPY_EXT") == null) ext = lime_graphics_opengl_GL.context.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
			openfl_display3D_Context3D.supportsAnisotropy = ext != null;
			if(openfl_display3D_Context3D.supportsAnisotropy) {
				openfl_display3D_Context3D.maxSupportedAnisotropy = lime_graphics_opengl_GL.getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
				lime_graphics_opengl_GL.context.texParameteri(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,openfl_display3D_Context3D.maxSupportedAnisotropy);
			}
			openfl_display3D_Context3D.anisotropySupportTested = true;
		}
		if(js_Boot.__instanceof(texture,openfl_display3D_textures_Texture)) {
			switch(wrap[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
				lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(3553,10242,10497);
				lime_graphics_opengl_GL.context.texParameteri(3553,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 4:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(2,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):2);
				break;
			case 1:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(4,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):4);
				break;
			case 2:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(8,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):8);
				break;
			case 3:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(16,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):16);
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(3553,10241,9987);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(3553,10241,9984);
				break;
			case 2:
				lime_graphics_opengl_GL.context.texParameteri(3553,10241,filter == openfl_display3D_Context3DTextureFilter.NEAREST?9728:9729);
				break;
			}
			var tex = texture;
			if(mipfilter != openfl_display3D_Context3DMipFilter.MIPNONE && !tex.mipmapsGenerated) {
				lime_graphics_opengl_GL.context.generateMipmap(3553);
				tex.mipmapsGenerated = true;
			}
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_RectangleTexture)) {
			lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
			lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
			switch(filter[1]) {
			case 4:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(2,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):2);
				break;
			case 1:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(4,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):4);
				break;
			case 2:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(8,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):8);
				break;
			case 3:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(16,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):16);
				break;
			}
			lime_graphics_opengl_GL.context.texParameteri(3553,10241,filter == openfl_display3D_Context3DTextureFilter.NEAREST?9728:9729);
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_CubeTexture)) {
			switch(wrap[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(34067,10242,33071);
				lime_graphics_opengl_GL.context.texParameteri(34067,10243,33071);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(34067,10242,10497);
				lime_graphics_opengl_GL.context.texParameteri(34067,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 4:
				lime_graphics_opengl_GL.context.texParameteri(34067,10240,9729);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime_graphics_opengl_GL.context.texParameteri(34067,10240,9728);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(2,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):2);
				break;
			case 1:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(4,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):4);
				break;
			case 2:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(8,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):8);
				break;
			case 3:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(16,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):16);
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(34067,10241,9987);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(34067,10241,9984);
				break;
			case 2:
				lime_graphics_opengl_GL.context.texParameteri(34067,10241,filter == openfl_display3D_Context3DTextureFilter.NEAREST?9728:9729);
				break;
			}
			var cubetex = texture;
			if(mipfilter != openfl_display3D_Context3DMipFilter.MIPNONE && !cubetex.mipmapsGenerated) {
				lime_graphics_opengl_GL.context.generateMipmap(34067);
				cubetex.mipmapsGenerated = true;
			}
		} else throw new js__$Boot_HaxeError("Texture of type " + Type.getClassName(texture == null?null:js_Boot.getClass(texture)) + " not supported yet");
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(bufferOffset == null) bufferOffset = 0;
		var locationName = "va" + index;
		this.setGLSLVertexBufferAt(locationName,buffer,bufferOffset,format);
	}
	,__getUniformLocationNameFromAgalRegisterIndex: function(programType,firstRegister) {
		if(programType == openfl_display3D_Context3DProgramType.VERTEX) return "vc" + firstRegister; else if(programType == openfl_display3D_Context3DProgramType.FRAGMENT) return "fc" + firstRegister;
		throw new js__$Boot_HaxeError("Program Type " + Std.string(programType) + " not supported");
	}
	,__updateBlendStatus: function() {
		if(this.blendEnabled) {
			lime_graphics_opengl_GL.context.enable(3042);
			lime_graphics_opengl_GL.context.blendEquation(32774);
			lime_graphics_opengl_GL.context.blendFunc(this.blendSourceFactor,this.blendDestinationFactor);
		} else lime_graphics_opengl_GL.context.disable(3042);
	}
	,__class__: openfl_display3D_Context3D
};
var openfl_display3D__$Context3D_SamplerState = function() {
};
$hxClasses["openfl.display3D._Context3D.SamplerState"] = openfl_display3D__$Context3D_SamplerState;
openfl_display3D__$Context3D_SamplerState.__name__ = ["openfl","display3D","_Context3D","SamplerState"];
openfl_display3D__$Context3D_SamplerState.prototype = {
	__class__: openfl_display3D__$Context3D_SamplerState
};
var openfl_display3D_Context3DBufferUsage = $hxClasses["openfl.display3D.Context3DBufferUsage"] = { __ename__ : true, __constructs__ : ["STATIC_DRAW","DYNAMIC_DRAW"] };
openfl_display3D_Context3DBufferUsage.STATIC_DRAW = ["STATIC_DRAW",0];
openfl_display3D_Context3DBufferUsage.STATIC_DRAW.toString = $estr;
openfl_display3D_Context3DBufferUsage.STATIC_DRAW.__enum__ = openfl_display3D_Context3DBufferUsage;
openfl_display3D_Context3DBufferUsage.DYNAMIC_DRAW = ["DYNAMIC_DRAW",1];
openfl_display3D_Context3DBufferUsage.DYNAMIC_DRAW.toString = $estr;
openfl_display3D_Context3DBufferUsage.DYNAMIC_DRAW.__enum__ = openfl_display3D_Context3DBufferUsage;
var openfl_display3D_Context3DClearMask = function() { };
$hxClasses["openfl.display3D.Context3DClearMask"] = openfl_display3D_Context3DClearMask;
openfl_display3D_Context3DClearMask.__name__ = ["openfl","display3D","Context3DClearMask"];
var openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_"] = openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DCompareMode","Context3DCompareMode_Impl_"];
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$._new = function(a) {
	return a;
};
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.fromInt = function(s) {
	return s;
};
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.toInt = function(this1) {
	return this1;
};
var openfl_display3D_Context3DMipFilter = $hxClasses["openfl.display3D.Context3DMipFilter"] = { __ename__ : true, __constructs__ : ["MIPLINEAR","MIPNEAREST","MIPNONE"] };
openfl_display3D_Context3DMipFilter.MIPLINEAR = ["MIPLINEAR",0];
openfl_display3D_Context3DMipFilter.MIPLINEAR.toString = $estr;
openfl_display3D_Context3DMipFilter.MIPLINEAR.__enum__ = openfl_display3D_Context3DMipFilter;
openfl_display3D_Context3DMipFilter.MIPNEAREST = ["MIPNEAREST",1];
openfl_display3D_Context3DMipFilter.MIPNEAREST.toString = $estr;
openfl_display3D_Context3DMipFilter.MIPNEAREST.__enum__ = openfl_display3D_Context3DMipFilter;
openfl_display3D_Context3DMipFilter.MIPNONE = ["MIPNONE",2];
openfl_display3D_Context3DMipFilter.MIPNONE.toString = $estr;
openfl_display3D_Context3DMipFilter.MIPNONE.__enum__ = openfl_display3D_Context3DMipFilter;
var openfl_display3D_Context3DProgramType = $hxClasses["openfl.display3D.Context3DProgramType"] = { __ename__ : true, __constructs__ : ["VERTEX","FRAGMENT"] };
openfl_display3D_Context3DProgramType.VERTEX = ["VERTEX",0];
openfl_display3D_Context3DProgramType.VERTEX.toString = $estr;
openfl_display3D_Context3DProgramType.VERTEX.__enum__ = openfl_display3D_Context3DProgramType;
openfl_display3D_Context3DProgramType.FRAGMENT = ["FRAGMENT",1];
openfl_display3D_Context3DProgramType.FRAGMENT.toString = $estr;
openfl_display3D_Context3DProgramType.FRAGMENT.__enum__ = openfl_display3D_Context3DProgramType;
var openfl_display3D_Context3DTextureFilter = $hxClasses["openfl.display3D.Context3DTextureFilter"] = { __ename__ : true, __constructs__ : ["ANISOTROPIC2X","ANISOTROPIC4X","ANISOTROPIC8X","ANISOTROPIC16X","LINEAR","NEAREST"] };
openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X = ["ANISOTROPIC2X",0];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X = ["ANISOTROPIC4X",1];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X = ["ANISOTROPIC8X",2];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X = ["ANISOTROPIC16X",3];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.LINEAR = ["LINEAR",4];
openfl_display3D_Context3DTextureFilter.LINEAR.toString = $estr;
openfl_display3D_Context3DTextureFilter.LINEAR.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.NEAREST = ["NEAREST",5];
openfl_display3D_Context3DTextureFilter.NEAREST.toString = $estr;
openfl_display3D_Context3DTextureFilter.NEAREST.__enum__ = openfl_display3D_Context3DTextureFilter;
var openfl_display3D_Context3DTextureFormat = $hxClasses["openfl.display3D.Context3DTextureFormat"] = { __ename__ : true, __constructs__ : ["BGRA","COMPRESSED","COMPRESSED_ALPHA"] };
openfl_display3D_Context3DTextureFormat.BGRA = ["BGRA",0];
openfl_display3D_Context3DTextureFormat.BGRA.toString = $estr;
openfl_display3D_Context3DTextureFormat.BGRA.__enum__ = openfl_display3D_Context3DTextureFormat;
openfl_display3D_Context3DTextureFormat.COMPRESSED = ["COMPRESSED",1];
openfl_display3D_Context3DTextureFormat.COMPRESSED.toString = $estr;
openfl_display3D_Context3DTextureFormat.COMPRESSED.__enum__ = openfl_display3D_Context3DTextureFormat;
openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA = ["COMPRESSED_ALPHA",2];
openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA.toString = $estr;
openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA.__enum__ = openfl_display3D_Context3DTextureFormat;
var openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_"] = openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.__name__ = ["openfl","display3D","_Context3DTriangleFace","Context3DTriangleFace_Impl_"];
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$._new = function(a) {
	return a;
};
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.fromInt = function(s) {
	return s;
};
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.toInt = function(this1) {
	return this1;
};
var openfl_display3D_Context3DVertexBufferFormat = $hxClasses["openfl.display3D.Context3DVertexBufferFormat"] = { __ename__ : true, __constructs__ : ["BYTES_4","FLOAT_1","FLOAT_2","FLOAT_3","FLOAT_4"] };
openfl_display3D_Context3DVertexBufferFormat.BYTES_4 = ["BYTES_4",0];
openfl_display3D_Context3DVertexBufferFormat.BYTES_4.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.BYTES_4.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_1 = ["FLOAT_1",1];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_1.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_1.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_2 = ["FLOAT_2",2];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_2.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_2.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_3 = ["FLOAT_3",3];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_3.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_3.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_4 = ["FLOAT_4",4];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_4.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_4.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
var openfl_display3D_Context3DWrapMode = $hxClasses["openfl.display3D.Context3DWrapMode"] = { __ename__ : true, __constructs__ : ["CLAMP","REPEAT"] };
openfl_display3D_Context3DWrapMode.CLAMP = ["CLAMP",0];
openfl_display3D_Context3DWrapMode.CLAMP.toString = $estr;
openfl_display3D_Context3DWrapMode.CLAMP.__enum__ = openfl_display3D_Context3DWrapMode;
openfl_display3D_Context3DWrapMode.REPEAT = ["REPEAT",1];
openfl_display3D_Context3DWrapMode.REPEAT.toString = $estr;
openfl_display3D_Context3DWrapMode.REPEAT.__enum__ = openfl_display3D_Context3DWrapMode;
var openfl_display3D_IndexBuffer3D = function(context,glBuffer,numIndices,bufferUsage) {
	this.context = context;
	this.glBuffer = glBuffer;
	this.numIndices = numIndices;
	this.bufferUsage = bufferUsage;
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl_display3D_IndexBuffer3D;
openfl_display3D_IndexBuffer3D.__name__ = ["openfl","display3D","IndexBuffer3D"];
openfl_display3D_IndexBuffer3D.prototype = {
	dispose: function() {
		this.context.__deleteIndexBuffer(this);
	}
	,uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		var bytesPerIndex = 2;
		lime_graphics_opengl_GL.context.bindBuffer(34963,this.glBuffer);
		var length = count * bytesPerIndex;
		var offset = byteArrayOffset + startOffset * bytesPerIndex;
		var indices;
		var this1;
		if(length != null) this1 = new Int16Array(length); else this1 = null;
		indices = this1;
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			var val = byteArray.readUnsignedByte();
			indices[i] = val;
			i++;
		}
		lime_graphics_opengl_GL.context.bufferData(34963,indices,this.bufferUsage);
	}
	,uploadFromVector: function(data,startOffset,count) {
		lime_graphics_opengl_GL.context.bindBuffer(34963,this.glBuffer);
		var indices;
		var this1;
		if(count != null) this1 = new Int16Array(count); else this1 = null;
		indices = this1;
		var _g1 = startOffset;
		var _g = startOffset + count;
		while(_g1 < _g) {
			var i = _g1++;
			indices[i] = data.data[i];
		}
		lime_graphics_opengl_GL.context.bufferData(34963,indices,this.bufferUsage);
	}
	,uploadFromInt16Array: function(data) {
		lime_graphics_opengl_GL.context.bindBuffer(34963,this.glBuffer);
		lime_graphics_opengl_GL.context.bufferData(34963,data,this.bufferUsage);
	}
	,__class__: openfl_display3D_IndexBuffer3D
};
var openfl_display3D_Program3D = function(context,program) {
	this.context = context;
	this.glProgram = program;
};
$hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
openfl_display3D_Program3D.__name__ = ["openfl","display3D","Program3D"];
openfl_display3D_Program3D.prototype = {
	dispose: function() {
		this.context.__deleteProgram(this);
	}
	,upload: function(vertexShader,fragmentShader) {
		lime_graphics_opengl_GL.context.attachShader(this.glProgram,vertexShader);
		lime_graphics_opengl_GL.context.attachShader(this.glProgram,fragmentShader);
		lime_graphics_opengl_GL.context.linkProgram(this.glProgram);
		if(lime_graphics_opengl_GL.context.getProgramParameter(this.glProgram,35714) == 0) {
			var result = lime_graphics_opengl_GL.context.getProgramInfoLog(this.glProgram);
			if(result != "") throw new js__$Boot_HaxeError(result);
		}
	}
	,__class__: openfl_display3D_Program3D
};
var openfl_display3D_VertexBuffer3D = function(context,glBuffer,numVertices,data32PerVertex,bufferUsage) {
	this.context = context;
	this.glBuffer = glBuffer;
	this.numVertices = numVertices;
	this.data32PerVertex = data32PerVertex;
	this.bufferUsage = bufferUsage;
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl_display3D_VertexBuffer3D;
openfl_display3D_VertexBuffer3D.__name__ = ["openfl","display3D","VertexBuffer3D"];
openfl_display3D_VertexBuffer3D.prototype = {
	dispose: function() {
		this.context.__deleteVertexBuffer(this);
	}
	,uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		var bytesPerVertex = this.data32PerVertex * 4;
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.glBuffer);
		var length = count * bytesPerVertex;
		var offset = byteArrayOffset + startOffset * bytesPerVertex;
		var float32Array;
		var this1;
		if(length != null) this1 = new Float32Array(length); else this1 = null;
		float32Array = this1;
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			var val = byteArray.readUnsignedByte();
			float32Array[i] = val;
			i++;
		}
		lime_graphics_opengl_GL.context.bufferData(34962,float32Array,this.bufferUsage);
	}
	,uploadFromFloat32Array: function(data) {
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.glBuffer);
		lime_graphics_opengl_GL.context.bufferData(34962,data,this.bufferUsage);
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		var bytesPerVertex = this.data32PerVertex * 4;
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.glBuffer);
		var length = numVertices * this.data32PerVertex;
		var offset = startVertex;
		var float32Array;
		var this1;
		if(length != null) this1 = new Float32Array(length); else this1 = null;
		float32Array = this1;
		var _g1 = startVertex;
		var _g = startVertex + length;
		while(_g1 < _g) {
			var i = _g1++;
			float32Array[i] = data.data[i];
		}
		lime_graphics_opengl_GL.context.bufferData(34962,float32Array,this.bufferUsage);
		float32Array = null;
	}
	,__class__: openfl_display3D_VertexBuffer3D
};
var openfl_display3D_textures_TextureBase = function(context,glTexture,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	openfl_events_EventDispatcher.call(this);
	this.context = context;
	this.width = width;
	this.height = height;
	this.glTexture = glTexture;
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_TextureBase.__name__ = ["openfl","display3D","textures","TextureBase"];
openfl_display3D_textures_TextureBase.__super__ = openfl_events_EventDispatcher;
openfl_display3D_textures_TextureBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	dispose: function() {
		this.context.__deleteTexture(this);
	}
	,__class__: openfl_display3D_textures_TextureBase
});
var openfl_display3D_textures_CubeTexture = function(context,glTexture,size) {
	openfl_display3D_textures_TextureBase.call(this,context,glTexture,size,size);
	this.size = size;
	this.mipmapsGenerated = false;
	this._textures = [];
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		this._textures[i] = lime_graphics_opengl_GL.context.createTexture();
	}
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl_display3D_textures_CubeTexture;
openfl_display3D_textures_CubeTexture.__name__ = ["openfl","display3D","textures","CubeTexture"];
openfl_display3D_textures_CubeTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_CubeTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	glTextureAt: function(index) {
		return this._textures[index];
	}
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
	}
	,uploadFromBitmapData: function(bitmapData,side,miplevel) {
		if(miplevel == null) miplevel = 0;
		var source = bitmapData.image.get_data();
		lime_graphics_opengl_GL.context.bindTexture(34067,this.glTexture);
		switch(side) {
		case 0:
			lime_graphics_opengl_GL.context.texImage2D(34069,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 1:
			lime_graphics_opengl_GL.context.texImage2D(34070,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 2:
			lime_graphics_opengl_GL.context.texImage2D(34071,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 3:
			lime_graphics_opengl_GL.context.texImage2D(34072,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 4:
			lime_graphics_opengl_GL.context.texImage2D(34073,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 5:
			lime_graphics_opengl_GL.context.texImage2D(34074,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		default:
			throw new js__$Boot_HaxeError("unknown side type");
		}
		lime_graphics_opengl_GL.context.bindTexture(34067,null);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,side,miplevel) {
		if(miplevel == null) miplevel = 0;
	}
	,__class__: openfl_display3D_textures_CubeTexture
});
var openfl_display3D_textures_RectangleTexture = function(context,glTexture,optimize,width,height) {
	this.optimizeForRenderToTexture = optimize;
	if(this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
	openfl_display3D_textures_TextureBase.call(this,context,glTexture,width,height);
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl_display3D_textures_RectangleTexture;
openfl_display3D_textures_RectangleTexture.__name__ = ["openfl","display3D","textures","RectangleTexture"];
openfl_display3D_textures_RectangleTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_RectangleTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadFromBitmapData: function(bitmapData,miplevel) {
		if(miplevel == null) miplevel = 0;
		var p = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer(bitmapData.image.get_data().buffer);
		this.width = bitmapData.width;
		this.height = bitmapData.height;
		this.uploadFromByteArray(p,0);
	}
	,uploadFromByteArray: function(data,byteArrayOffset) {
		lime_graphics_opengl_GL.context.bindTexture(3553,this.glTexture);
		if(this.optimizeForRenderToTexture) lime_graphics_opengl_GL.context.pixelStorei(37440,1);
		lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
		lime_graphics_opengl_GL.context.texParameteri(3553,10241,9728);
		lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
		lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
		var source;
		var elements = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data);
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		source = this1;
		data.position = byteArrayOffset;
		var i = 0;
		while(data.position < openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data)) {
			var val = data.readUnsignedByte();
			source[i] = val;
			i++;
		}
		lime_graphics_opengl_GL.context.texImage2D(3553,0,6408,this.width,this.height,0,6408,5121,source);
		lime_graphics_opengl_GL.context.bindTexture(3553,null);
	}
	,__class__: openfl_display3D_textures_RectangleTexture
});
var openfl_display3D_textures_Texture = function(context,glTexture,optimize,width,height) {
	this.optimizeForRenderToTexture = optimize;
	this.mipmapsGenerated = false;
	if(this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
	openfl_display3D_textures_TextureBase.call(this,context,glTexture,width,height);
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl_display3D_textures_Texture;
openfl_display3D_textures_Texture.__name__ = ["openfl","display3D","textures","Texture"];
openfl_display3D_textures_Texture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_Texture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
	}
	,uploadFromBitmapData: function(bitmapData,miplevel) {
		if(miplevel == null) miplevel = 0;
		var image = bitmapData.image;
		if(!image.get_premultiplied() && image.get_transparent()) {
			image = image.clone();
			image.set_premultiplied(true);
		}
		this.width = image.width;
		this.height = image.height;
		this.uploadFromUInt8Array(image.get_data(),miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,miplevel) {
		if(miplevel == null) miplevel = 0;
		var source;
		var elements = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data);
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		source = this1;
		data.position = byteArrayOffset;
		var i = 0;
		while(data.position < openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data)) {
			var val = data.readUnsignedByte();
			source[i] = val;
			i++;
		}
		this.uploadFromUInt8Array(source,miplevel);
	}
	,uploadFromUInt8Array: function(data,miplevel) {
		if(miplevel == null) miplevel = 0;
		lime_graphics_opengl_GL.context.bindTexture(3553,this.glTexture);
		if(this.optimizeForRenderToTexture) {
			lime_graphics_opengl_GL.context.pixelStorei(37440,1);
			lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
			lime_graphics_opengl_GL.context.texParameteri(3553,10241,9728);
			lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
			lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
		}
		lime_graphics_opengl_GL.context.texImage2D(3553,miplevel,6408,this.width,this.height,0,6408,5121,data);
		lime_graphics_opengl_GL.context.bindTexture(3553,null);
	}
	,__class__: openfl_display3D_textures_Texture
});
var openfl_errors_Error = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "";
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
openfl_errors_Error.__name__ = ["openfl","errors","Error"];
openfl_errors_Error.prototype = {
	getStackTrace: function() {
		return haxe_CallStack.toString(haxe_CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) return this.message; else return "Error";
	}
	,__class__: openfl_errors_Error
};
var openfl_errors_ArgumentError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message);
	this.name = "ArgumentError";
};
$hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
openfl_errors_ArgumentError.__name__ = ["openfl","errors","ArgumentError"];
openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_ArgumentError
});
var openfl_errors_IOError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message);
	this.name = "IOError";
};
$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
openfl_errors_IOError.__name__ = ["openfl","errors","IOError"];
openfl_errors_IOError.__super__ = openfl_errors_Error;
openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IOError
});
var openfl_errors_EOFError = function() {
	openfl_errors_IOError.call(this,"End of file was encountered");
	this.name = "EOFError";
	this.errorID = 2030;
};
$hxClasses["openfl.errors.EOFError"] = openfl_errors_EOFError;
openfl_errors_EOFError.__name__ = ["openfl","errors","EOFError"];
openfl_errors_EOFError.__super__ = openfl_errors_IOError;
openfl_errors_EOFError.prototype = $extend(openfl_errors_IOError.prototype,{
	__class__: openfl_errors_EOFError
});
var openfl_errors_RangeError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message,0);
	this.name = "RangeError";
};
$hxClasses["openfl.errors.RangeError"] = openfl_errors_RangeError;
openfl_errors_RangeError.__name__ = ["openfl","errors","RangeError"];
openfl_errors_RangeError.__super__ = openfl_errors_Error;
openfl_errors_RangeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_RangeError
});
var openfl_errors_TypeError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message,0);
	this.name = "TypeError";
};
$hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
openfl_errors_TypeError.__name__ = ["openfl","errors","TypeError"];
openfl_errors_TypeError.__super__ = openfl_errors_Error;
openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_TypeError
});
var openfl_events_ActivityEvent = function(type,bubbles,cancelable,activating) {
	if(activating == null) activating = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.activating = activating;
};
$hxClasses["openfl.events.ActivityEvent"] = openfl_events_ActivityEvent;
openfl_events_ActivityEvent.__name__ = ["openfl","events","ActivityEvent"];
openfl_events_ActivityEvent.__super__ = openfl_events_Event;
openfl_events_ActivityEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_ActivityEvent(this.type,this.bubbles,this.cancelable,this.activating);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ActivityEvent",["type","bubbles","cancelable","activating"]);
	}
	,__class__: openfl_events_ActivityEvent
});
var openfl_events_TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_TextEvent(this.type,this.bubbles,this.cancelable,this.text);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TextEvent",["type","bubbles","cancelable","text"]);
	}
	,__class__: openfl_events_TextEvent
});
var openfl_events_ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	clone: function() {
		var event = new openfl_events_ErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_ErrorEvent
});
var openfl_events__$EventDispatcher_Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl_events__$EventDispatcher_Listener.prototype = {
	match: function(callback,useCapture) {
		return Reflect.compareMethods(this.callback,callback) && this.useCapture == useCapture;
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_EventPhase = $hxClasses["openfl.events.EventPhase"] = { __ename__ : true, __constructs__ : ["CAPTURING_PHASE","AT_TARGET","BUBBLING_PHASE"] };
openfl_events_EventPhase.CAPTURING_PHASE = ["CAPTURING_PHASE",0];
openfl_events_EventPhase.CAPTURING_PHASE.toString = $estr;
openfl_events_EventPhase.CAPTURING_PHASE.__enum__ = openfl_events_EventPhase;
openfl_events_EventPhase.AT_TARGET = ["AT_TARGET",1];
openfl_events_EventPhase.AT_TARGET.toString = $estr;
openfl_events_EventPhase.AT_TARGET.__enum__ = openfl_events_EventPhase;
openfl_events_EventPhase.BUBBLING_PHASE = ["BUBBLING_PHASE",2];
openfl_events_EventPhase.BUBBLING_PHASE.toString = $estr;
openfl_events_EventPhase.BUBBLING_PHASE.__enum__ = openfl_events_EventPhase;
var openfl_events_FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) keyCode = 0;
	if(shiftKey == null) shiftKey = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_FocusEvent(this.type,this.bubbles,this.cancelable,this.relatedObject,this.shiftKey,this.keyCode);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FocusEvent",["type","bubbles","cancelable","relatedObject","shiftKey","keyCode"]);
	}
	,__class__: openfl_events_FocusEvent
});
var openfl_events_FullScreenEvent = function(type,bubbles,cancelable,fullScreen,interactive) {
	if(interactive == null) interactive = false;
	if(fullScreen == null) fullScreen = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_ActivityEvent.call(this,type,bubbles,cancelable);
	this.fullScreen = fullScreen;
	this.interactive = interactive;
};
$hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
openfl_events_FullScreenEvent.__name__ = ["openfl","events","FullScreenEvent"];
openfl_events_FullScreenEvent.__super__ = openfl_events_ActivityEvent;
openfl_events_FullScreenEvent.prototype = $extend(openfl_events_ActivityEvent.prototype,{
	clone: function() {
		var event = new openfl_events_FullScreenEvent(this.type,this.bubbles,this.cancelable,this.fullScreen,this.interactive);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FullscreenEvent",["type","bubbles","cancelable","fullscreen","interactive"]);
	}
	,__class__: openfl_events_FullScreenEvent
});
var openfl_events_GameInputEvent = function(type,bubbles,cancelable,device) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = ["openfl","events","GameInputEvent"];
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_GameInputEvent(this.type,this.bubbles,this.cancelable,this.device);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("GameInputEvent",["type","bubbles","cancelable","device"]);
	}
	,__class__: openfl_events_GameInputEvent
});
var openfl_events_HTTPStatusEvent = function(type,bubbles,cancelable,status,redirected) {
	if(redirected == null) redirected = false;
	if(status == null) status = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.status = status;
	this.redirected = redirected;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
openfl_events_HTTPStatusEvent.__name__ = ["openfl","events","HTTPStatusEvent"];
openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_HTTPStatusEvent(this.type,this.bubbles,null,this.status,this.redirected);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("HTTPStatusEvent",["type","bubbles","cancelable","status","redirected"]);
	}
	,__class__: openfl_events_HTTPStatusEvent
});
var openfl_events_IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_IOErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("IOErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) commandKeyValue = false;
	if(controlKeyValue == null) controlKeyValue = false;
	if(shiftKeyValue == null) shiftKeyValue = false;
	if(altKeyValue == null) altKeyValue = false;
	if(ctrlKeyValue == null) ctrlKeyValue = false;
	if(keyCodeValue == null) keyCodeValue = 0;
	if(charCodeValue == null) charCodeValue = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	if(keyLocationValue != null) this.keyLocation = keyLocationValue; else this.keyLocation = 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_KeyboardEvent(this.type,this.bubbles,this.cancelable,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey,this.controlKey,this.commandKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("KeyboardEvent",["type","bubbles","cancelable","charCode","keyCode","keyLocation","ctrlKey","altKey","shiftKey"]);
	}
	,__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl_events_MouseEvent.__altKey = null;
openfl_events_MouseEvent.__buttonDown = null;
openfl_events_MouseEvent.__commandKey = null;
openfl_events_MouseEvent.__ctrlKey = null;
openfl_events_MouseEvent.__shiftKey = null;
openfl_events_MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) delta = 0;
	switch(type) {
	case "mouseDown":
		openfl_events_MouseEvent.__buttonDown = true;
		break;
	case "mouseUp":
		openfl_events_MouseEvent.__buttonDown = false;
		break;
	default:
	}
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_MouseEvent(this.type,this.bubbles,this.cancelable,this.localX,this.localY,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("MouseEvent",["type","bubbles","cancelable","localX","localY","relatedObject","ctrlKey","altKey","shiftKey","buttonDown","delta"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_MouseEvent
});
var openfl_events_ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) bytesTotal = 0;
	if(bytesLoaded == null) bytesLoaded = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
openfl_events_ProgressEvent.__name__ = ["openfl","events","ProgressEvent"];
openfl_events_ProgressEvent.__super__ = openfl_events_Event;
openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_ProgressEvent(this.type,this.bubbles,this.cancelable,this.bytesLoaded,this.bytesTotal);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ProgressEvent",["type","bubbles","cancelable","bytesLoaded","bytesTotal"]);
	}
	,__class__: openfl_events_ProgressEvent
});
var openfl_events_SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
openfl_events_SecurityErrorEvent.__name__ = ["openfl","events","SecurityErrorEvent"];
openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_SecurityErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("SecurityErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_SecurityErrorEvent
});
var openfl_events_TimerEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.TimerEvent"] = openfl_events_TimerEvent;
openfl_events_TimerEvent.__name__ = ["openfl","events","TimerEvent"];
openfl_events_TimerEvent.__super__ = openfl_events_Event;
openfl_events_TimerEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_TimerEvent(this.type,this.bubbles,this.cancelable);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TimerEvent",["type","bubbles","cancelable"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_TimerEvent
});
var openfl_events_TouchEvent = function(type,bubbles,cancelable,touchPointID,isPrimaryTouchPoint,localX,localY,sizeX,sizeY,pressure,relatedObject,ctrlKey,altKey,shiftKey,commandKey,controlKey,timestamp,touchIntent,samples,isTouchPointCanceled) {
	if(isTouchPointCanceled == null) isTouchPointCanceled = false;
	if(timestamp == null) timestamp = 0;
	if(controlKey == null) controlKey = false;
	if(commandKey == null) commandKey = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(pressure == null) pressure = 0;
	if(sizeY == null) sizeY = 0;
	if(sizeX == null) sizeX = 0;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(isPrimaryTouchPoint == null) isPrimaryTouchPoint = false;
	if(touchPointID == null) touchPointID = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.touchPointID = touchPointID;
	this.isPrimaryTouchPoint = isPrimaryTouchPoint;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.pressure = pressure;
	this.relatedObject = relatedObject;
	this.ctrlKey = ctrlKey;
	this.altKey = altKey;
	this.shiftKey = shiftKey;
	this.commandKey = commandKey;
	this.controlKey = controlKey;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl_events_TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,0,true,local.x,local.y,1,1,1);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_TouchEvent(this.type,this.bubbles,this.cancelable,this.touchPointID,this.isPrimaryTouchPoint,this.localX,this.localY,this.sizeX,this.sizeY,this.pressure,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.commandKey,this.controlKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TouchEvent",["type","bubbles","cancelable","touchPointID","isPrimaryTouchPoint","localX","localY","sizeX","sizeY","pressure","relatedObject","ctrlKey","altKey","shiftKey","commandKey","controlKey"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_TouchEvent
});
var openfl_filters_BitmapFilter = function() {
	this.__saveLastFilter = false;
	this.__passes = 0;
	this.__dirty = true;
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl_filters_BitmapFilter.__tmpRenderTexture = null;
openfl_filters_BitmapFilter.__applyFilters = function(filters,renderSession,source,target,sourceRect,destPoint) {
	var same = target == source && target.__usingPingPongTexture;
	if(same) target.__pingPongTexture.useOldTexture = true;
	if(sourceRect == null) sourceRect = source.rect;
	var lastFilterOutput = null;
	var useLastFilter = false;
	var srcShader = source.__shader;
	var _g = 0;
	while(_g < filters.length) {
		var filter = filters[_g];
		++_g;
		useLastFilter = false;
		if(filter.__saveLastFilter) {
			target.__pingPongTexture.swap();
			target.__drawGL(renderSession,source,null,null,null,sourceRect,true,!target.__usingPingPongTexture,true);
			lastFilterOutput = target.__pingPongTexture.get_oldRenderTexture();
			target.__pingPongTexture.set_oldRenderTexture(openfl_filters_BitmapFilter.__tmpRenderTexture);
		}
		var _g2 = 0;
		var _g1 = filter.__passes;
		while(_g2 < _g1) {
			var pass = _g2++;
			useLastFilter = filter.__saveLastFilter && filter.__useLastFilter(pass);
			if(same && !useLastFilter) target.__pingPongTexture.swap();
			if(useLastFilter) {
				openfl_filters_BitmapFilter.__tmpRenderTexture = target.__pingPongTexture.get_oldRenderTexture();
				target.__pingPongTexture.set_oldRenderTexture(lastFilterOutput);
			}
			source.__shader = filter.__preparePass(pass);
			target.__drawGL(renderSession,source,null,null,null,sourceRect,true,!target.__usingPingPongTexture,!useLastFilter);
		}
	}
	source.__shader = srcShader;
	if(same) target.__pingPongTexture.useOldTexture = false;
};
openfl_filters_BitmapFilter.__expandBounds = function(filters,rect,matrix) {
	var r = openfl_geom_Rectangle.__temp;
	r.setEmpty();
	var _g = 0;
	while(_g < filters.length) {
		var filter = filters[_g];
		++_g;
		filter.__growBounds(r);
	}
	r.__transform(r,matrix);
	rect.__expand(r.x,r.y,r.width,r.height);
};
openfl_filters_BitmapFilter.prototype = {
	clone: function() {
		return new openfl_filters_BitmapFilter();
	}
	,__applyFilter: function(sourceData,targetData,sourceRect,destPoint) {
	}
	,__growBounds: function(rect) {
	}
	,__preparePass: function(pass) {
		return null;
	}
	,__useLastFilter: function(pass) {
		return false;
	}
	,__class__: openfl_filters_BitmapFilter
};
var openfl_filters_BitmapFilterQuality = function() { };
$hxClasses["openfl.filters.BitmapFilterQuality"] = openfl_filters_BitmapFilterQuality;
openfl_filters_BitmapFilterQuality.__name__ = ["openfl","filters","BitmapFilterQuality"];
var openfl_filters_BlurFilter = function(blurX,blurY,quality) {
	if(quality == null) quality = 1;
	if(blurY == null) blurY = 4;
	if(blurX == null) blurX = 4;
	openfl_filters_BitmapFilter.call(this);
	this.blurX = blurX;
	this.blurY = blurY;
	this.set_quality(quality);
	this.__blurShader = new openfl_filters__$BlurFilter_BlurShader();
	this.__blurShader.smooth = true;
};
$hxClasses["openfl.filters.BlurFilter"] = openfl_filters_BlurFilter;
openfl_filters_BlurFilter.__name__ = ["openfl","filters","BlurFilter"];
openfl_filters_BlurFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_BlurFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	clone: function() {
		return new openfl_filters_BlurFilter(this.blurX,this.blurY,this.quality);
	}
	,__growBounds: function(rect) {
		rect.x += -this.blurX * 0.5 * this.quality;
		rect.y += -this.blurY * 0.5 * this.quality;
		rect.width += this.blurX * 0.5 * this.quality;
		rect.height += this.blurY * 0.5 * this.quality;
	}
	,__preparePass: function(pass) {
		var even = pass % 2 == 0;
		var scale = Math.pow(0.5,pass >> 1);
		if(even) this.__blurShader.__uRadius.value[0] = scale * this.blurX; else this.__blurShader.__uRadius.value[0] = 0;
		if(even) this.__blurShader.__uRadius.value[1] = 0; else this.__blurShader.__uRadius.value[1] = scale * this.blurY;
		return this.__blurShader;
	}
	,set_quality: function(value) {
		this.__passes = value * 2;
		return this.quality = value;
	}
	,__class__: openfl_filters_BlurFilter
	,__properties__: {set_quality:"set_quality"}
});
var openfl_filters__$BlurFilter_BlurShader = function() {
	this.__uRadius = new openfl_display_GLShaderParameter("vec2",0);
	this.fragment = ["varying vec2 vBlurCoords[7];","void main(void)","{","vec4 sum = vec4(0.0);","sum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[0]) * 0.00443;","sum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[1]) * 0.05399;","sum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[2]) * 0.24197;","sum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[3]) * 0.39894;","sum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[4]) * 0.24197;","sum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[5]) * 0.05399;","sum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[6]) * 0.00443;","\tgl_FragColor = sum;","}"];
	this.vertex = ["uniform vec2 uRadius;","varying vec2 vBlurCoords[7];","void main(void)","{","vec2 r = uRadius / " + openfl_display_Shader.uTextureSize + ";","vBlurCoords[0] = " + openfl_display_Shader.aTexCoord + " - r * 1.2;","vBlurCoords[1] = " + openfl_display_Shader.aTexCoord + " - r * 0.8;","vBlurCoords[2] = " + openfl_display_Shader.aTexCoord + " - r * 0.4;","vBlurCoords[3] = " + openfl_display_Shader.aTexCoord + ";","vBlurCoords[4] = " + openfl_display_Shader.aTexCoord + " + r * 0.4;","vBlurCoords[5] = " + openfl_display_Shader.aTexCoord + " + r * 0.8;","vBlurCoords[6] = " + openfl_display_Shader.aTexCoord + " + r * 1.2;","" + openfl_display_Shader.vTexCoord + " = " + openfl_display_Shader.aTexCoord + ";","" + openfl_display_Shader.vColor + " = " + openfl_display_Shader.aColor + ";","gl_Position = vec4((" + openfl_display_Shader.uProjectionMatrix + " * vec3(" + openfl_display_Shader.aPosition + ", 1.0)).xy, 0.0, 1.0);","}"];
	openfl_display_Shader.call(this);
	this.data.set("uRadius",this.__uRadius);
	this.__buildVertexCode("uniform vec2 uRadius;\nvarying vec2 vBlurCoords[7];\nvoid main(void)\n{\nvec2 r = uRadius / " + openfl_display_Shader.uTextureSize + ";\nvBlurCoords[0] = " + openfl_display_Shader.aTexCoord + " - r * 1.2;\nvBlurCoords[1] = " + openfl_display_Shader.aTexCoord + " - r * 0.8;\nvBlurCoords[2] = " + openfl_display_Shader.aTexCoord + " - r * 0.4;\nvBlurCoords[3] = " + openfl_display_Shader.aTexCoord + ";\nvBlurCoords[4] = " + openfl_display_Shader.aTexCoord + " + r * 0.4;\nvBlurCoords[5] = " + openfl_display_Shader.aTexCoord + " + r * 0.8;\nvBlurCoords[6] = " + openfl_display_Shader.aTexCoord + " + r * 1.2;\n" + openfl_display_Shader.vTexCoord + " = " + openfl_display_Shader.aTexCoord + ";\n" + openfl_display_Shader.vColor + " = " + openfl_display_Shader.aColor + ";\ngl_Position = vec4((" + openfl_display_Shader.uProjectionMatrix + " * vec3(" + openfl_display_Shader.aPosition + ", 1.0)).xy, 0.0, 1.0);\n}");
	this.__buildFragmentCode("varying vec2 vBlurCoords[7];\nvoid main(void)\n{\nvec4 sum = vec4(0.0);\nsum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[0]) * 0.00443;\nsum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[1]) * 0.05399;\nsum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[2]) * 0.24197;\nsum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[3]) * 0.39894;\nsum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[4]) * 0.24197;\nsum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[5]) * 0.05399;\nsum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[6]) * 0.00443;\n\tgl_FragColor = sum;\n}");
};
$hxClasses["openfl.filters._BlurFilter.BlurShader"] = openfl_filters__$BlurFilter_BlurShader;
openfl_filters__$BlurFilter_BlurShader.__name__ = ["openfl","filters","_BlurFilter","BlurShader"];
openfl_filters__$BlurFilter_BlurShader.__super__ = openfl_display_Shader;
openfl_filters__$BlurFilter_BlurShader.prototype = $extend(openfl_display_Shader.prototype,{
	get_uRadius: function() {
		return this.__uRadius.value;
	}
	,set_uRadius: function(v) {
		return this.__uRadius.set_value(v);
	}
	,__class__: openfl_filters__$BlurFilter_BlurShader
	,__properties__: {set_uRadius:"set_uRadius",get_uRadius:"get_uRadius"}
});
var openfl_filters_DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) {
	if(hideObject == null) hideObject = false;
	if(knockout == null) knockout = false;
	if(inner == null) inner = false;
	if(quality == null) quality = 1;
	if(strength == null) strength = 1;
	if(blurY == null) blurY = 4;
	if(blurX == null) blurX = 4;
	if(alpha == null) alpha = 1;
	if(color == null) color = 0;
	if(angle == null) angle = 45;
	if(distance == null) distance = 4;
	openfl_filters_BitmapFilter.call(this);
	this.distance = distance;
	this.angle = angle;
	this.color = color;
	this.alpha = alpha;
	this.blurX = blurX;
	this.blurY = blurY;
	this.strength = strength;
	this.set_quality(quality);
	this.inner = inner;
	this.__saveLastFilter = !knockout;
	this.knockout = knockout;
	this.__saveLastFilter = !hideObject;
	this.hideObject = hideObject;
	this.__dropShadowShader = new openfl_filters__$DropShadowFilter_DropShadowShader();
	this.__dropShadowShader.smooth = true;
};
$hxClasses["openfl.filters.DropShadowFilter"] = openfl_filters_DropShadowFilter;
openfl_filters_DropShadowFilter.__name__ = ["openfl","filters","DropShadowFilter"];
openfl_filters_DropShadowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_DropShadowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	clone: function() {
		return new openfl_filters_DropShadowFilter(this.distance,this.angle,this.color,this.alpha,this.blurX,this.blurY,this.strength,this.quality,this.inner,this.knockout,this.hideObject);
	}
	,__growBounds: function(rect) {
		var sX = this.distance * Math.cos(this.angle * Math.PI / 180);
		var sY = this.distance * Math.sin(this.angle * Math.PI / 180);
		rect.x += -(Math.abs(sX) + this.blurX * 0.5) * this.quality;
		rect.y += -(Math.abs(sY) + this.blurY * 0.5) * this.quality;
		rect.width += (sX + this.blurX * 0.5) * this.quality;
		rect.height += (sY + this.blurY * 0.5) * this.quality;
	}
	,__preparePass: function(pass) {
		if(pass == this.__passes - 1) return null; else {
			var even = pass % 2 == 0;
			var scale = Math.pow(0.5,pass >> 1);
			if(even) this.__dropShadowShader.__uRadius.value[0] = scale * this.blurX; else this.__dropShadowShader.__uRadius.value[0] = 0;
			if(even) this.__dropShadowShader.__uRadius.value[1] = 0; else this.__dropShadowShader.__uRadius.value[1] = scale * this.blurY;
			if(pass == 0) this.__dropShadowShader.__uShift.value[0] = this.distance * Math.cos(this.angle * Math.PI / 180); else this.__dropShadowShader.__uShift.value[0] = 0;
			if(pass == 0) this.__dropShadowShader.__uShift.value[1] = this.distance * Math.sin(this.angle * Math.PI / 180); else this.__dropShadowShader.__uShift.value[1] = 0;
			this.__dropShadowShader.__uColor.value[0] = (this.color >> 16 & 255) / 255;
			this.__dropShadowShader.__uColor.value[1] = (this.color >> 8 & 255) / 255;
			this.__dropShadowShader.__uColor.value[2] = (this.color & 255) / 255;
			this.__dropShadowShader.__uColor.value[3] = this.alpha;
			return this.__dropShadowShader;
		}
	}
	,__useLastFilter: function(pass) {
		return pass == this.__passes - 1;
	}
	,set_knockout: function(value) {
		this.__saveLastFilter = !value;
		return this.knockout = value;
	}
	,set_hideObject: function(value) {
		this.__saveLastFilter = !value;
		return this.hideObject = value;
	}
	,set_quality: function(value) {
		this.__passes = value * 2 + 1;
		return this.quality = value;
	}
	,__class__: openfl_filters_DropShadowFilter
	,__properties__: {set_quality:"set_quality",set_knockout:"set_knockout",set_hideObject:"set_hideObject"}
});
var openfl_filters__$DropShadowFilter_DropShadowShader = function() {
	this.__uColor = new openfl_display_GLShaderParameter("vec4",0);
	this.__uShift = new openfl_display_GLShaderParameter("vec2",0);
	this.__uRadius = new openfl_display_GLShaderParameter("vec2",0);
	this.fragment = ["uniform vec4 uColor;","varying vec2 vBlurCoords[7];","void main(void)","{","float a = 0.0;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[0]).a * 0.00443;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[1]).a * 0.05399;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[2]).a * 0.24197;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[3]).a * 0.39894;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[4]).a * 0.24197;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[5]).a * 0.05399;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[6]).a * 0.00443;","a *= uColor.a;","\tgl_FragColor = vec4(uColor.rgb * a, a);","}"];
	this.vertex = ["uniform vec2 uRadius;","uniform vec2 uShift;","varying vec2 vBlurCoords[7];","void main(void)","{","vec2 r = uRadius / " + openfl_display_Shader.uTextureSize + ";","vec2 tc = " + openfl_display_Shader.aTexCoord + " - (uShift / " + openfl_display_Shader.uTextureSize + ");","vBlurCoords[0] = tc - r * 1.2;","vBlurCoords[1] = tc - r * 0.8;","vBlurCoords[2] = tc - r * 0.4;","vBlurCoords[3] = tc;","vBlurCoords[4] = tc + r * 0.4;","vBlurCoords[5] = tc + r * 0.8;","vBlurCoords[6] = tc + r * 1.2;","" + openfl_display_Shader.vTexCoord + " = " + openfl_display_Shader.aTexCoord + ";","" + openfl_display_Shader.vColor + " = " + openfl_display_Shader.aColor + ";","gl_Position = vec4((" + openfl_display_Shader.uProjectionMatrix + " * vec3(" + openfl_display_Shader.aPosition + ", 1.0)).xy, 0.0, 1.0);","}"];
	openfl_display_Shader.call(this);
	this.data.set("uRadius",this.__uRadius);
	this.data.set("uShift",this.__uShift);
	this.data.set("uColor",this.__uColor);
	this.__buildVertexCode("uniform vec2 uRadius;\nuniform vec2 uShift;\nvarying vec2 vBlurCoords[7];\nvoid main(void)\n{\nvec2 r = uRadius / " + openfl_display_Shader.uTextureSize + ";\nvec2 tc = " + openfl_display_Shader.aTexCoord + " - (uShift / " + openfl_display_Shader.uTextureSize + ");\nvBlurCoords[0] = tc - r * 1.2;\nvBlurCoords[1] = tc - r * 0.8;\nvBlurCoords[2] = tc - r * 0.4;\nvBlurCoords[3] = tc;\nvBlurCoords[4] = tc + r * 0.4;\nvBlurCoords[5] = tc + r * 0.8;\nvBlurCoords[6] = tc + r * 1.2;\n" + openfl_display_Shader.vTexCoord + " = " + openfl_display_Shader.aTexCoord + ";\n" + openfl_display_Shader.vColor + " = " + openfl_display_Shader.aColor + ";\ngl_Position = vec4((" + openfl_display_Shader.uProjectionMatrix + " * vec3(" + openfl_display_Shader.aPosition + ", 1.0)).xy, 0.0, 1.0);\n}");
	this.__buildFragmentCode("uniform vec4 uColor;\nvarying vec2 vBlurCoords[7];\nvoid main(void)\n{\nfloat a = 0.0;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[0]).a * 0.00443;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[1]).a * 0.05399;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[2]).a * 0.24197;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[3]).a * 0.39894;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[4]).a * 0.24197;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[5]).a * 0.05399;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[6]).a * 0.00443;\na *= uColor.a;\n\tgl_FragColor = vec4(uColor.rgb * a, a);\n}");
};
$hxClasses["openfl.filters._DropShadowFilter.DropShadowShader"] = openfl_filters__$DropShadowFilter_DropShadowShader;
openfl_filters__$DropShadowFilter_DropShadowShader.__name__ = ["openfl","filters","_DropShadowFilter","DropShadowShader"];
openfl_filters__$DropShadowFilter_DropShadowShader.__super__ = openfl_display_Shader;
openfl_filters__$DropShadowFilter_DropShadowShader.prototype = $extend(openfl_display_Shader.prototype,{
	get_uRadius: function() {
		return this.__uRadius.value;
	}
	,set_uRadius: function(v) {
		return this.__uRadius.set_value(v);
	}
	,get_uShift: function() {
		return this.__uShift.value;
	}
	,set_uShift: function(v) {
		return this.__uShift.set_value(v);
	}
	,get_uColor: function() {
		return this.__uColor.value;
	}
	,set_uColor: function(v) {
		return this.__uColor.set_value(v);
	}
	,__class__: openfl_filters__$DropShadowFilter_DropShadowShader
	,__properties__: {set_uColor:"set_uColor",get_uColor:"get_uColor",set_uShift:"set_uShift",get_uShift:"get_uShift",set_uRadius:"set_uRadius",get_uRadius:"get_uRadius"}
});
var openfl_filters_GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) {
	if(knockout == null) knockout = false;
	if(inner == null) inner = false;
	if(quality == null) quality = 1;
	if(strength == null) strength = 2;
	if(blurY == null) blurY = 6;
	if(blurX == null) blurX = 6;
	if(alpha == null) alpha = 1;
	if(color == null) color = 16711680;
	openfl_filters_BitmapFilter.call(this);
	this.color = color;
	this.alpha = alpha;
	this.blurX = blurX;
	this.blurY = blurY;
	this.strength = strength;
	this.set_quality(quality);
	this.inner = inner;
	this.__saveLastFilter = !knockout;
	this.knockout = knockout;
	this.__glowShader = new openfl_filters__$GlowFilter_GlowShader();
	this.__glowShader.smooth = true;
};
$hxClasses["openfl.filters.GlowFilter"] = openfl_filters_GlowFilter;
openfl_filters_GlowFilter.__name__ = ["openfl","filters","GlowFilter"];
openfl_filters_GlowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_GlowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	clone: function() {
		return new openfl_filters_GlowFilter(this.color,this.alpha,this.blurX,this.blurY,this.strength,this.quality,this.inner,this.knockout);
	}
	,__growBounds: function(rect) {
		rect.x += -this.blurX * 0.5 * this.quality;
		rect.y += -this.blurY * 0.5 * this.quality;
		rect.width += this.blurX * 0.5 * this.quality;
		rect.height += this.blurY * 0.5 * this.quality;
	}
	,__preparePass: function(pass) {
		if(pass == this.__passes - 1) return null; else {
			var even = pass % 2 == 0;
			var scale = Math.pow(0.5,pass >> 1);
			if(even) this.__glowShader.__uRadius.value[0] = scale * this.blurX; else this.__glowShader.__uRadius.value[0] = 0;
			if(even) this.__glowShader.__uRadius.value[1] = 0; else this.__glowShader.__uRadius.value[1] = scale * this.blurY;
			this.__glowShader.__uColor.value[0] = (this.color >> 16 & 255) / 255;
			this.__glowShader.__uColor.value[1] = (this.color >> 8 & 255) / 255;
			this.__glowShader.__uColor.value[2] = (this.color & 255) / 255;
			this.__glowShader.__uColor.value[3] = this.alpha;
			return this.__glowShader;
		}
	}
	,__useLastFilter: function(pass) {
		return pass == this.__passes - 1;
	}
	,set_knockout: function(value) {
		this.__saveLastFilter = !value;
		return this.knockout = value;
	}
	,set_quality: function(value) {
		this.__passes = value * 2 + 1;
		return this.quality = value;
	}
	,__class__: openfl_filters_GlowFilter
	,__properties__: {set_quality:"set_quality",set_knockout:"set_knockout"}
});
var openfl_filters__$GlowFilter_GlowShader = function() {
	this.__uColor = new openfl_display_GLShaderParameter("vec4",0);
	this.__uRadius = new openfl_display_GLShaderParameter("vec2",0);
	this.fragment = ["uniform vec4 uColor;","varying vec2 vBlurCoords[7];","void main(void)","{","float a = 0.0;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[0]).a * 0.00443;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[1]).a * 0.05399;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[2]).a * 0.24197;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[3]).a * 0.39894;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[4]).a * 0.24197;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[5]).a * 0.05399;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[6]).a * 0.00443;","a *= uColor.a;","\tgl_FragColor = vec4(uColor.rgb * a, a);","}"];
	this.vertex = ["uniform vec2 uRadius;","varying vec2 vBlurCoords[7];","void main(void)","{","vec2 r = uRadius / " + openfl_display_Shader.uTextureSize + ";","vBlurCoords[0] = " + openfl_display_Shader.aTexCoord + " - r * 1.2;","vBlurCoords[1] = " + openfl_display_Shader.aTexCoord + " - r * 0.8;","vBlurCoords[2] = " + openfl_display_Shader.aTexCoord + " - r * 0.4;","vBlurCoords[3] = " + openfl_display_Shader.aTexCoord + ";","vBlurCoords[4] = " + openfl_display_Shader.aTexCoord + " + r * 0.4;","vBlurCoords[5] = " + openfl_display_Shader.aTexCoord + " + r * 0.8;","vBlurCoords[6] = " + openfl_display_Shader.aTexCoord + " + r * 1.2;","" + openfl_display_Shader.vTexCoord + " = " + openfl_display_Shader.aTexCoord + ";","" + openfl_display_Shader.vColor + " = " + openfl_display_Shader.aColor + ";","gl_Position = vec4((" + openfl_display_Shader.uProjectionMatrix + " * vec3(" + openfl_display_Shader.aPosition + ", 1.0)).xy, 0.0, 1.0);","}"];
	openfl_display_Shader.call(this);
	this.data.set("uRadius",this.__uRadius);
	this.data.set("uColor",this.__uColor);
	this.__buildVertexCode("uniform vec2 uRadius;\nvarying vec2 vBlurCoords[7];\nvoid main(void)\n{\nvec2 r = uRadius / " + openfl_display_Shader.uTextureSize + ";\nvBlurCoords[0] = " + openfl_display_Shader.aTexCoord + " - r * 1.2;\nvBlurCoords[1] = " + openfl_display_Shader.aTexCoord + " - r * 0.8;\nvBlurCoords[2] = " + openfl_display_Shader.aTexCoord + " - r * 0.4;\nvBlurCoords[3] = " + openfl_display_Shader.aTexCoord + ";\nvBlurCoords[4] = " + openfl_display_Shader.aTexCoord + " + r * 0.4;\nvBlurCoords[5] = " + openfl_display_Shader.aTexCoord + " + r * 0.8;\nvBlurCoords[6] = " + openfl_display_Shader.aTexCoord + " + r * 1.2;\n" + openfl_display_Shader.vTexCoord + " = " + openfl_display_Shader.aTexCoord + ";\n" + openfl_display_Shader.vColor + " = " + openfl_display_Shader.aColor + ";\ngl_Position = vec4((" + openfl_display_Shader.uProjectionMatrix + " * vec3(" + openfl_display_Shader.aPosition + ", 1.0)).xy, 0.0, 1.0);\n}");
	this.__buildFragmentCode("uniform vec4 uColor;\nvarying vec2 vBlurCoords[7];\nvoid main(void)\n{\nfloat a = 0.0;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[0]).a * 0.00443;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[1]).a * 0.05399;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[2]).a * 0.24197;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[3]).a * 0.39894;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[4]).a * 0.24197;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[5]).a * 0.05399;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[6]).a * 0.00443;\na *= uColor.a;\n\tgl_FragColor = vec4(uColor.rgb * a, a);\n}");
};
$hxClasses["openfl.filters._GlowFilter.GlowShader"] = openfl_filters__$GlowFilter_GlowShader;
openfl_filters__$GlowFilter_GlowShader.__name__ = ["openfl","filters","_GlowFilter","GlowShader"];
openfl_filters__$GlowFilter_GlowShader.__super__ = openfl_display_Shader;
openfl_filters__$GlowFilter_GlowShader.prototype = $extend(openfl_display_Shader.prototype,{
	get_uRadius: function() {
		return this.__uRadius.value;
	}
	,set_uRadius: function(v) {
		return this.__uRadius.set_value(v);
	}
	,get_uColor: function() {
		return this.__uColor.value;
	}
	,set_uColor: function(v) {
		return this.__uColor.set_value(v);
	}
	,__class__: openfl_filters__$GlowFilter_GlowShader
	,__properties__: {set_uColor:"set_uColor",get_uColor:"get_uColor",set_uRadius:"set_uRadius",get_uRadius:"get_uRadius"}
});
var openfl_geom_Matrix3D = function(v) {
	if(v != null && v.length == 16) this.rawData = v; else {
		var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this.rawData = vectorData;
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl_geom_Matrix3D.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return new openfl_geom_Matrix3D((function($this) {
		var $r;
		var value = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl_geom_Matrix3D.createABCD = function(a,b,c,d,tx,ty) {
	return new openfl_geom_Matrix3D((function($this) {
		var $r;
		var value = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl_geom_Matrix3D.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return new openfl_geom_Matrix3D((function($this) {
		var $r;
		var value = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl_geom_Matrix3D.interpolate = function(thisMat,toMat,percent) {
	var m = new openfl_geom_Matrix3D();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var this1 = m.rawData;
		if(!this1.fixed) {
			if(i >= this1.length) this1.length = i + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[i] = thisMat.rawData.data[i] + (toMat.rawData.data[i] - thisMat.rawData.data[i]) * percent;
	}
	return m;
};
openfl_geom_Matrix3D.__getAxisRotation = function(x,y,z,degrees) {
	var m = new openfl_geom_Matrix3D();
	var a1 = new openfl_geom_Vector3D(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	var this1 = m.rawData;
	if(!this1.fixed) {
		if(0 >= this1.length) this1.length = 1;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	this1.data[0] = c + a1.x * a1.x * t;
	var this3 = m.rawData;
	if(!this3.fixed) {
		if(5 >= this3.length) this3.length = 6;
		if(this3.data.length < this3.length) {
			var data1;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data1 = this4;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
			this3.data = data1;
		}
	}
	this3.data[5] = c + a1.y * a1.y * t;
	var this5 = m.rawData;
	if(!this5.fixed) {
		if(10 >= this5.length) this5.length = 11;
		if(this5.data.length < this5.length) {
			var data2;
			var this6;
			this6 = new Array(this5.data.length + 10);
			data2 = this6;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
			this5.data = data2;
		}
	}
	this5.data[10] = c + a1.z * a1.z * t;
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	var this7 = m.rawData;
	if(!this7.fixed) {
		if(4 >= this7.length) this7.length = 5;
		if(this7.data.length < this7.length) {
			var data3;
			var this8;
			this8 = new Array(this7.data.length + 10);
			data3 = this8;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
			this7.data = data3;
		}
	}
	this7.data[4] = tmp1 + tmp2;
	var this9 = m.rawData;
	if(!this9.fixed) {
		if(1 >= this9.length) this9.length = 2;
		if(this9.data.length < this9.length) {
			var data4;
			var this10;
			this10 = new Array(this9.data.length + 10);
			data4 = this10;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
			this9.data = data4;
		}
	}
	this9.data[1] = tmp1 - tmp2;
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	var this11 = m.rawData;
	if(!this11.fixed) {
		if(8 >= this11.length) this11.length = 9;
		if(this11.data.length < this11.length) {
			var data5;
			var this12;
			this12 = new Array(this11.data.length + 10);
			data5 = this12;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
			this11.data = data5;
		}
	}
	this11.data[8] = tmp1 - tmp2;
	var this13 = m.rawData;
	if(!this13.fixed) {
		if(2 >= this13.length) this13.length = 3;
		if(this13.data.length < this13.length) {
			var data6;
			var this14;
			this14 = new Array(this13.data.length + 10);
			data6 = this14;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
			this13.data = data6;
		}
	}
	this13.data[2] = tmp1 + tmp2;
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	var this15 = m.rawData;
	if(!this15.fixed) {
		if(9 >= this15.length) this15.length = 10;
		if(this15.data.length < this15.length) {
			var data7;
			var this16;
			this16 = new Array(this15.data.length + 10);
			data7 = this16;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
			this15.data = data7;
		}
	}
	this15.data[9] = tmp1 + tmp2;
	var this17 = m.rawData;
	if(!this17.fixed) {
		if(6 >= this17.length) this17.length = 7;
		if(this17.data.length < this17.length) {
			var data8;
			var this18;
			this18 = new Array(this17.data.length + 10);
			data8 = this18;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
			this17.data = data8;
		}
	}
	this17.data[6] = tmp1 - tmp2;
	return m;
};
openfl_geom_Matrix3D.prototype = {
	append: function(lhs) {
		var m111 = this.rawData.data[0];
		var m121 = this.rawData.data[4];
		var m131 = this.rawData.data[8];
		var m141 = this.rawData.data[12];
		var m112 = this.rawData.data[1];
		var m122 = this.rawData.data[5];
		var m132 = this.rawData.data[9];
		var m142 = this.rawData.data[13];
		var m113 = this.rawData.data[2];
		var m123 = this.rawData.data[6];
		var m133 = this.rawData.data[10];
		var m143 = this.rawData.data[14];
		var m114 = this.rawData.data[3];
		var m124 = this.rawData.data[7];
		var m134 = this.rawData.data[11];
		var m144 = this.rawData.data[15];
		var m211 = lhs.rawData.data[0];
		var m221 = lhs.rawData.data[4];
		var m231 = lhs.rawData.data[8];
		var m241 = lhs.rawData.data[12];
		var m212 = lhs.rawData.data[1];
		var m222 = lhs.rawData.data[5];
		var m232 = lhs.rawData.data[9];
		var m242 = lhs.rawData.data[13];
		var m213 = lhs.rawData.data[2];
		var m223 = lhs.rawData.data[6];
		var m233 = lhs.rawData.data[10];
		var m243 = lhs.rawData.data[14];
		var m214 = lhs.rawData.data[3];
		var m224 = lhs.rawData.data[7];
		var m234 = lhs.rawData.data[11];
		var m244 = lhs.rawData.data[15];
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(6 >= this13.length) this13.length = 7;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(7 >= this15.length) this15.length = 8;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(8 >= this17.length) this17.length = 9;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(9 >= this19.length) this19.length = 10;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(11 >= this23.length) this23.length = 12;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(12 >= this25.length) this25.length = 13;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(13 >= this27.length) this27.length = 14;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(14 >= this29.length) this29.length = 15;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,appendRotation: function(degrees,axis,pivotPoint) {
		var m = openfl_geom_Matrix3D.__getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			var p = pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.append(m);
	}
	,appendScale: function(xScale,yScale,zScale) {
		this.append(new openfl_geom_Matrix3D((function($this) {
			var $r;
			var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl_VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this))));
	}
	,appendTranslation: function(x,y,z) {
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(12 >= this1.length) this1.length = 13;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[12] = this.rawData.data[12] + x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(13 >= this3.length) this3.length = 14;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[13] = this.rawData.data[13] + y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(14 >= this5.length) this5.length = 15;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[14] = this.rawData.data[14] + z;
	}
	,clone: function() {
		return new openfl_geom_Matrix3D((function($this) {
			var $r;
			var this1 = $this.rawData;
			var vectorData = new openfl_VectorData();
			vectorData.length = this1.length;
			vectorData.fixed = this1.fixed;
			{
				var this2;
				this2 = new Array(this1.length);
				vectorData.data = this2;
			}
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
			$r = vectorData;
			return $r;
		}(this)));
	}
	,copyColumnFrom: function(column,vector3D) {
		switch(column) {
		case 0:
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = vector3D.x;
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = vector3D.y;
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = vector3D.z;
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = vector3D.w;
			break;
		case 1:
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = vector3D.x;
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = vector3D.y;
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = vector3D.z;
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = vector3D.w;
			break;
		case 2:
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = vector3D.x;
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = vector3D.y;
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = vector3D.z;
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = vector3D.w;
			break;
		case 3:
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = vector3D.x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = vector3D.y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = vector3D.z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = vector3D.w;
			break;
		default:
		}
	}
	,copyColumnTo: function(column,vector3D) {
		switch(column) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[1];
			vector3D.z = this.rawData.data[2];
			vector3D.w = this.rawData.data[3];
			break;
		case 1:
			vector3D.x = this.rawData.data[4];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[6];
			vector3D.w = this.rawData.data[7];
			break;
		case 2:
			vector3D.x = this.rawData.data[8];
			vector3D.y = this.rawData.data[9];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[11];
			break;
		case 3:
			vector3D.x = this.rawData.data[12];
			vector3D.y = this.rawData.data[13];
			vector3D.z = this.rawData.data[14];
			vector3D.w = this.rawData.data[15];
			break;
		default:
		}
	}
	,copyFrom: function(other) {
		var this1 = other.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
		this.rawData = vectorData;
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var length = vector.length - index;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(i >= this1.length) this1.length = i + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = vector.data[i + index];
		}
		if(transpose) this.transpose();
	}
	,copyRawDataTo: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var _g1 = 0;
		var _g = this.rawData.length;
		while(_g1 < _g) {
			var i = _g1++;
			var key = i + index;
			if(!vector.fixed) {
				if(key >= vector.length) vector.length = key + 1;
				if(vector.data.length < vector.length) {
					var data;
					var this1;
					this1 = new Array(vector.data.length + 10);
					data = this1;
					haxe_ds__$Vector_Vector_$Impl_$.blit(vector.data,0,data,0,vector.data.length);
					vector.data = data;
				}
			}
			vector.data[key] = this.rawData.data[i];
		}
		if(transpose) this.transpose();
	}
	,copyRowFrom: function(row,vector3D) {
		switch(row) {
		case 0:
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = vector3D.x;
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(4 >= this3.length) this3.length = 5;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[4] = vector3D.y;
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(8 >= this5.length) this5.length = 9;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[8] = vector3D.z;
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(12 >= this7.length) this7.length = 13;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[12] = vector3D.w;
			break;
		case 1:
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(1 >= this9.length) this9.length = 2;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[1] = vector3D.x;
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = vector3D.y;
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(9 >= this13.length) this13.length = 10;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[9] = vector3D.z;
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(13 >= this15.length) this15.length = 14;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[13] = vector3D.w;
			break;
		case 2:
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(2 >= this17.length) this17.length = 3;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[2] = vector3D.x;
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(6 >= this19.length) this19.length = 7;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[6] = vector3D.y;
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = vector3D.z;
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(14 >= this23.length) this23.length = 15;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[14] = vector3D.w;
			break;
		case 3:
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(3 >= this25.length) this25.length = 4;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[3] = vector3D.x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(7 >= this27.length) this27.length = 8;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[7] = vector3D.y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(11 >= this29.length) this29.length = 12;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[11] = vector3D.z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = vector3D.w;
			break;
		default:
		}
	}
	,copyRowTo: function(row,vector3D) {
		switch(row) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[4];
			vector3D.z = this.rawData.data[8];
			vector3D.w = this.rawData.data[12];
			break;
		case 1:
			vector3D.x = this.rawData.data[1];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[9];
			vector3D.w = this.rawData.data[13];
			break;
		case 2:
			vector3D.x = this.rawData.data[2];
			vector3D.y = this.rawData.data[6];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[14];
			break;
		case 3:
			vector3D.x = this.rawData.data[3];
			vector3D.y = this.rawData.data[7];
			vector3D.z = this.rawData.data[11];
			vector3D.w = this.rawData.data[15];
			break;
		default:
		}
	}
	,copyToMatrix3D: function(other) {
		var this1 = this.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
		other.rawData = vectorData;
	}
	,decompose: function(orientationStyle) {
		if(orientationStyle == null) orientationStyle = openfl_geom_Orientation3D.EULER_ANGLES;
		var vec;
		var this1;
		this1 = new openfl_VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		vec = this1;
		var m = this.clone();
		var mr;
		var this3 = m.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this3.length;
		vectorData.fixed = this3.fixed;
		var this4;
		this4 = new Array(this3.length);
		vectorData.data = this4;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,vectorData.data,0,this3.length);
		mr = vectorData;
		var pos = new openfl_geom_Vector3D(mr.data[12],mr.data[13],mr.data[14]);
		{
			if(!mr.fixed) {
				if(12 >= mr.length) mr.length = 13;
				if(mr.data.length < mr.length) {
					var data;
					var this5;
					this5 = new Array(mr.data.length + 10);
					data = this5;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data,0,mr.data.length);
					mr.data = data;
				}
			}
			mr.data[12] = 0;
		}
		{
			if(!mr.fixed) {
				if(13 >= mr.length) mr.length = 14;
				if(mr.data.length < mr.length) {
					var data1;
					var this6;
					this6 = new Array(mr.data.length + 10);
					data1 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data1,0,mr.data.length);
					mr.data = data1;
				}
			}
			mr.data[13] = 0;
		}
		{
			if(!mr.fixed) {
				if(14 >= mr.length) mr.length = 15;
				if(mr.data.length < mr.length) {
					var data2;
					var this7;
					this7 = new Array(mr.data.length + 10);
					data2 = this7;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data2,0,mr.data.length);
					mr.data = data2;
				}
			}
			mr.data[14] = 0;
		}
		var scale = new openfl_geom_Vector3D();
		scale.x = Math.sqrt(mr.data[0] * mr.data[0] + mr.data[1] * mr.data[1] + mr.data[2] * mr.data[2]);
		scale.y = Math.sqrt(mr.data[4] * mr.data[4] + mr.data[5] * mr.data[5] + mr.data[6] * mr.data[6]);
		scale.z = Math.sqrt(mr.data[8] * mr.data[8] + mr.data[9] * mr.data[9] + mr.data[10] * mr.data[10]);
		if(mr.data[0] * (mr.data[5] * mr.data[10] - mr.data[6] * mr.data[9]) - mr.data[1] * (mr.data[4] * mr.data[10] - mr.data[6] * mr.data[8]) + mr.data[2] * (mr.data[4] * mr.data[9] - mr.data[5] * mr.data[8]) < 0) scale.z = -scale.z;
		{
			if(!mr.fixed) {
				if(0 >= mr.length) mr.length = 1;
				if(mr.data.length < mr.length) {
					var data3;
					var this8;
					this8 = new Array(mr.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data3,0,mr.data.length);
					mr.data = data3;
				}
			}
			mr.data[0] = mr.data[0] / scale.x;
		}
		{
			if(!mr.fixed) {
				if(1 >= mr.length) mr.length = 2;
				if(mr.data.length < mr.length) {
					var data4;
					var this9;
					this9 = new Array(mr.data.length + 10);
					data4 = this9;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data4,0,mr.data.length);
					mr.data = data4;
				}
			}
			mr.data[1] = mr.data[1] / scale.x;
		}
		{
			if(!mr.fixed) {
				if(2 >= mr.length) mr.length = 3;
				if(mr.data.length < mr.length) {
					var data5;
					var this10;
					this10 = new Array(mr.data.length + 10);
					data5 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data5,0,mr.data.length);
					mr.data = data5;
				}
			}
			mr.data[2] = mr.data[2] / scale.x;
		}
		{
			if(!mr.fixed) {
				if(4 >= mr.length) mr.length = 5;
				if(mr.data.length < mr.length) {
					var data6;
					var this11;
					this11 = new Array(mr.data.length + 10);
					data6 = this11;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data6,0,mr.data.length);
					mr.data = data6;
				}
			}
			mr.data[4] = mr.data[4] / scale.y;
		}
		{
			if(!mr.fixed) {
				if(5 >= mr.length) mr.length = 6;
				if(mr.data.length < mr.length) {
					var data7;
					var this12;
					this12 = new Array(mr.data.length + 10);
					data7 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data7,0,mr.data.length);
					mr.data = data7;
				}
			}
			mr.data[5] = mr.data[5] / scale.y;
		}
		{
			if(!mr.fixed) {
				if(6 >= mr.length) mr.length = 7;
				if(mr.data.length < mr.length) {
					var data8;
					var this13;
					this13 = new Array(mr.data.length + 10);
					data8 = this13;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data8,0,mr.data.length);
					mr.data = data8;
				}
			}
			mr.data[6] = mr.data[6] / scale.y;
		}
		{
			if(!mr.fixed) {
				if(8 >= mr.length) mr.length = 9;
				if(mr.data.length < mr.length) {
					var data9;
					var this14;
					this14 = new Array(mr.data.length + 10);
					data9 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data9,0,mr.data.length);
					mr.data = data9;
				}
			}
			mr.data[8] = mr.data[8] / scale.z;
		}
		{
			if(!mr.fixed) {
				if(9 >= mr.length) mr.length = 10;
				if(mr.data.length < mr.length) {
					var data10;
					var this15;
					this15 = new Array(mr.data.length + 10);
					data10 = this15;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data10,0,mr.data.length);
					mr.data = data10;
				}
			}
			mr.data[9] = mr.data[9] / scale.z;
		}
		{
			if(!mr.fixed) {
				if(10 >= mr.length) mr.length = 11;
				if(mr.data.length < mr.length) {
					var data11;
					var this16;
					this16 = new Array(mr.data.length + 10);
					data11 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data11,0,mr.data.length);
					mr.data = data11;
				}
			}
			mr.data[10] = mr.data[10] / scale.z;
		}
		var rot = new openfl_geom_Vector3D();
		if(orientationStyle != null) switch(orientationStyle[1]) {
		case 0:
			rot.w = Math.acos((mr.data[0] + mr.data[5] + mr.data[10] - 1) / 2);
			var len = Math.sqrt((mr.data[6] - mr.data[9]) * (mr.data[6] - mr.data[9]) + (mr.data[8] - mr.data[2]) * (mr.data[8] - mr.data[2]) + (mr.data[1] - mr.data[4]) * (mr.data[1] - mr.data[4]));
			if(len != 0) {
				rot.x = (mr.data[6] - mr.data[9]) / len;
				rot.y = (mr.data[8] - mr.data[2]) / len;
				rot.z = (mr.data[1] - mr.data[4]) / len;
			} else rot.x = rot.y = rot.z = 0;
			break;
		case 2:
			var tr = mr.data[0] + mr.data[5] + mr.data[10];
			if(tr > 0) {
				rot.w = Math.sqrt(1 + tr) / 2;
				rot.x = (mr.data[6] - mr.data[9]) / (4 * rot.w);
				rot.y = (mr.data[8] - mr.data[2]) / (4 * rot.w);
				rot.z = (mr.data[1] - mr.data[4]) / (4 * rot.w);
			} else if(mr.data[0] > mr.data[5] && mr.data[0] > mr.data[10]) {
				rot.x = Math.sqrt(1 + mr.data[0] - mr.data[5] - mr.data[10]) / 2;
				rot.w = (mr.data[6] - mr.data[9]) / (4 * rot.x);
				rot.y = (mr.data[1] + mr.data[4]) / (4 * rot.x);
				rot.z = (mr.data[8] + mr.data[2]) / (4 * rot.x);
			} else if(mr.data[5] > mr.data[10]) {
				rot.y = Math.sqrt(1 + mr.data[5] - mr.data[0] - mr.data[10]) / 2;
				rot.x = (mr.data[1] + mr.data[4]) / (4 * rot.y);
				rot.w = (mr.data[8] - mr.data[2]) / (4 * rot.y);
				rot.z = (mr.data[6] + mr.data[9]) / (4 * rot.y);
			} else {
				rot.z = Math.sqrt(1 + mr.data[10] - mr.data[0] - mr.data[5]) / 2;
				rot.x = (mr.data[8] + mr.data[2]) / (4 * rot.z);
				rot.y = (mr.data[6] + mr.data[9]) / (4 * rot.z);
				rot.w = (mr.data[1] - mr.data[4]) / (4 * rot.z);
			}
			break;
		case 1:
			rot.y = Math.asin(-mr.data[2]);
			if(mr.data[2] != 1 && mr.data[2] != -1) {
				rot.x = Math.atan2(mr.data[6],mr.data[10]);
				rot.z = Math.atan2(mr.data[1],mr.data[0]);
			} else {
				rot.z = 0;
				rot.x = Math.atan2(mr.data[4],mr.data[5]);
			}
			break;
		}
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data12;
				var this17;
				this17 = new Array(vec.data.length + 10);
				data12 = this17;
				haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data,0,data12,0,vec.data.length);
				vec.data = data12;
			}
			vec.data[vec.length - 1] = pos;
		}
		vec.length;
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data13;
				var this18;
				this18 = new Array(vec.data.length + 10);
				data13 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data,0,data13,0,vec.data.length);
				vec.data = data13;
			}
			vec.data[vec.length - 1] = rot;
		}
		vec.length;
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data14;
				var this19;
				this19 = new Array(vec.data.length + 10);
				data14 = this19;
				haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data,0,data14,0,vec.data.length);
				vec.data = data14;
			}
			vec.data[vec.length - 1] = scale;
		}
		vec.length;
		return vec;
	}
	,deltaTransformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[3],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[7],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[11],0);
	}
	,identity: function() {
		{
			var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl_VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
			this.rawData = vectorData;
		}
	}
	,interpolateTo: function(toMat,percent) {
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(i >= this1.length) this1.length = i + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = this.rawData.data[i] + (toMat.rawData.data[i] - this.rawData.data[i]) * percent;
		}
	}
	,invert: function() {
		var d = (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
		var invertable = Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData.data[0];
			var m21 = this.rawData.data[4];
			var m31 = this.rawData.data[8];
			var m41 = this.rawData.data[12];
			var m12 = this.rawData.data[1];
			var m22 = this.rawData.data[5];
			var m32 = this.rawData.data[9];
			var m42 = this.rawData.data[13];
			var m13 = this.rawData.data[2];
			var m23 = this.rawData.data[6];
			var m33 = this.rawData.data[10];
			var m43 = this.rawData.data[14];
			var m14 = this.rawData.data[3];
			var m24 = this.rawData.data[7];
			var m34 = this.rawData.data[11];
			var m44 = this.rawData.data[15];
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
		}
		return invertable;
	}
	,pointAt: function(pos,at,up) {
		if(at == null) at = new openfl_geom_Vector3D(0,0,-1);
		if(up == null) up = new openfl_geom_Vector3D(0,-1,0);
		var dir = new openfl_geom_Vector3D(at.x - pos.x,at.y - pos.y,at.z - pos.z);
		var vup = new openfl_geom_Vector3D(up.x,up.y,up.z,up.w);
		var right;
		dir.normalize();
		vup.normalize();
		var dir2 = new openfl_geom_Vector3D(dir.x,dir.y,dir.z,dir.w);
		dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
		vup = new openfl_geom_Vector3D(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
		if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if(dir.x != 0) vup = new openfl_geom_Vector3D(-dir.y,dir.x,0); else vup = new openfl_geom_Vector3D(1,0,0);
		right = new openfl_geom_Vector3D(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
		right.normalize();
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = right.x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(4 >= this3.length) this3.length = 5;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[4] = right.y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(8 >= this5.length) this5.length = 9;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[8] = right.z;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(12 >= this7.length) this7.length = 13;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[12] = 0.0;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(1 >= this9.length) this9.length = 2;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[1] = vup.x;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = vup.y;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(9 >= this13.length) this13.length = 10;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[9] = vup.z;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(13 >= this15.length) this15.length = 14;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[13] = 0.0;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(2 >= this17.length) this17.length = 3;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[2] = dir.x;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(6 >= this19.length) this19.length = 7;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[6] = dir.y;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = dir.z;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(14 >= this23.length) this23.length = 15;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[14] = 0.0;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(3 >= this25.length) this25.length = 4;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[3] = pos.x;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(7 >= this27.length) this27.length = 8;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[7] = pos.y;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(11 >= this29.length) this29.length = 12;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[11] = pos.z;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = 1.0;
	}
	,prepend: function(rhs) {
		var m111 = rhs.rawData.data[0];
		var m121 = rhs.rawData.data[4];
		var m131 = rhs.rawData.data[8];
		var m141 = rhs.rawData.data[12];
		var m112 = rhs.rawData.data[1];
		var m122 = rhs.rawData.data[5];
		var m132 = rhs.rawData.data[9];
		var m142 = rhs.rawData.data[13];
		var m113 = rhs.rawData.data[2];
		var m123 = rhs.rawData.data[6];
		var m133 = rhs.rawData.data[10];
		var m143 = rhs.rawData.data[14];
		var m114 = rhs.rawData.data[3];
		var m124 = rhs.rawData.data[7];
		var m134 = rhs.rawData.data[11];
		var m144 = rhs.rawData.data[15];
		var m211 = this.rawData.data[0];
		var m221 = this.rawData.data[4];
		var m231 = this.rawData.data[8];
		var m241 = this.rawData.data[12];
		var m212 = this.rawData.data[1];
		var m222 = this.rawData.data[5];
		var m232 = this.rawData.data[9];
		var m242 = this.rawData.data[13];
		var m213 = this.rawData.data[2];
		var m223 = this.rawData.data[6];
		var m233 = this.rawData.data[10];
		var m243 = this.rawData.data[14];
		var m214 = this.rawData.data[3];
		var m224 = this.rawData.data[7];
		var m234 = this.rawData.data[11];
		var m244 = this.rawData.data[15];
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(6 >= this13.length) this13.length = 7;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(7 >= this15.length) this15.length = 8;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(8 >= this17.length) this17.length = 9;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(9 >= this19.length) this19.length = 10;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(11 >= this23.length) this23.length = 12;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(12 >= this25.length) this25.length = 13;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(13 >= this27.length) this27.length = 14;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(14 >= this29.length) this29.length = 15;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,prependRotation: function(degrees,axis,pivotPoint) {
		var m = openfl_geom_Matrix3D.__getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			var p = pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.prepend(m);
	}
	,prependScale: function(xScale,yScale,zScale) {
		this.prepend(new openfl_geom_Matrix3D((function($this) {
			var $r;
			var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl_VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this))));
	}
	,prependTranslation: function(x,y,z) {
		var m = new openfl_geom_Matrix3D();
		m.set_position(new openfl_geom_Vector3D(x,y,z));
		this.prepend(m);
	}
	,recompose: function(components,orientationStyle) {
		if(components.length < 3 || components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].z == 0) return false;
		if(orientationStyle == null) orientationStyle = openfl_geom_Orientation3D.EULER_ANGLES;
		this.identity();
		var scale = [];
		scale[0] = scale[1] = scale[2] = components.data[2].x;
		scale[4] = scale[5] = scale[6] = components.data[2].y;
		scale[8] = scale[9] = scale[10] = components.data[2].z;
		if(orientationStyle != null) switch(orientationStyle[1]) {
		case 1:
			var cx = Math.cos(components.data[1].x);
			var cy = Math.cos(components.data[1].y);
			var cz = Math.cos(components.data[1].z);
			var sx = Math.sin(components.data[1].x);
			var sy = Math.sin(components.data[1].y);
			var sz = Math.sin(components.data[1].z);
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = cy * cz * scale[0];
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = cy * sz * scale[1];
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = -sy * scale[2];
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = 0;
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = (sx * sy * cz - cx * sz) * scale[4];
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = (sx * sy * sz + cx * cz) * scale[5];
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = sx * cy * scale[6];
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = 0;
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = (cx * sy * cz + sx * sz) * scale[8];
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = (cx * sy * sz - sx * cz) * scale[9];
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = cx * cy * scale[10];
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = 0;
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = components.data[0].x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = components.data[0].y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = components.data[0].z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = 1;
			break;
		default:
			var x = components.data[1].x;
			var y = components.data[1].y;
			var z = components.data[1].z;
			var w = components.data[1].w;
			if(Type.enumEq(orientationStyle,openfl_geom_Orientation3D.AXIS_ANGLE)) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			var this33 = this.rawData;
			if(!this33.fixed) {
				if(0 >= this33.length) this33.length = 1;
				if(this33.data.length < this33.length) {
					var data16;
					var this34;
					this34 = new Array(this33.data.length + 10);
					data16 = this34;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this33.data,0,data16,0,this33.data.length);
					this33.data = data16;
				}
			}
			this33.data[0] = (1 - 2 * y * y - 2 * z * z) * scale[0];
			var this35 = this.rawData;
			if(!this35.fixed) {
				if(1 >= this35.length) this35.length = 2;
				if(this35.data.length < this35.length) {
					var data17;
					var this36;
					this36 = new Array(this35.data.length + 10);
					data17 = this36;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this35.data,0,data17,0,this35.data.length);
					this35.data = data17;
				}
			}
			this35.data[1] = (2 * x * y + 2 * w * z) * scale[1];
			var this37 = this.rawData;
			if(!this37.fixed) {
				if(2 >= this37.length) this37.length = 3;
				if(this37.data.length < this37.length) {
					var data18;
					var this38;
					this38 = new Array(this37.data.length + 10);
					data18 = this38;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this37.data,0,data18,0,this37.data.length);
					this37.data = data18;
				}
			}
			this37.data[2] = (2 * x * z - 2 * w * y) * scale[2];
			var this39 = this.rawData;
			if(!this39.fixed) {
				if(3 >= this39.length) this39.length = 4;
				if(this39.data.length < this39.length) {
					var data19;
					var this40;
					this40 = new Array(this39.data.length + 10);
					data19 = this40;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this39.data,0,data19,0,this39.data.length);
					this39.data = data19;
				}
			}
			this39.data[3] = 0;
			var this41 = this.rawData;
			if(!this41.fixed) {
				if(4 >= this41.length) this41.length = 5;
				if(this41.data.length < this41.length) {
					var data20;
					var this42;
					this42 = new Array(this41.data.length + 10);
					data20 = this42;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this41.data,0,data20,0,this41.data.length);
					this41.data = data20;
				}
			}
			this41.data[4] = (2 * x * y - 2 * w * z) * scale[4];
			var this43 = this.rawData;
			if(!this43.fixed) {
				if(5 >= this43.length) this43.length = 6;
				if(this43.data.length < this43.length) {
					var data21;
					var this44;
					this44 = new Array(this43.data.length + 10);
					data21 = this44;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this43.data,0,data21,0,this43.data.length);
					this43.data = data21;
				}
			}
			this43.data[5] = (1 - 2 * x * x - 2 * z * z) * scale[5];
			var this45 = this.rawData;
			if(!this45.fixed) {
				if(6 >= this45.length) this45.length = 7;
				if(this45.data.length < this45.length) {
					var data22;
					var this46;
					this46 = new Array(this45.data.length + 10);
					data22 = this46;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this45.data,0,data22,0,this45.data.length);
					this45.data = data22;
				}
			}
			this45.data[6] = (2 * y * z + 2 * w * x) * scale[6];
			var this47 = this.rawData;
			if(!this47.fixed) {
				if(7 >= this47.length) this47.length = 8;
				if(this47.data.length < this47.length) {
					var data23;
					var this48;
					this48 = new Array(this47.data.length + 10);
					data23 = this48;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this47.data,0,data23,0,this47.data.length);
					this47.data = data23;
				}
			}
			this47.data[7] = 0;
			var this49 = this.rawData;
			if(!this49.fixed) {
				if(8 >= this49.length) this49.length = 9;
				if(this49.data.length < this49.length) {
					var data24;
					var this50;
					this50 = new Array(this49.data.length + 10);
					data24 = this50;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this49.data,0,data24,0,this49.data.length);
					this49.data = data24;
				}
			}
			this49.data[8] = (2 * x * z + 2 * w * y) * scale[8];
			var this51 = this.rawData;
			if(!this51.fixed) {
				if(9 >= this51.length) this51.length = 10;
				if(this51.data.length < this51.length) {
					var data25;
					var this52;
					this52 = new Array(this51.data.length + 10);
					data25 = this52;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this51.data,0,data25,0,this51.data.length);
					this51.data = data25;
				}
			}
			this51.data[9] = (2 * y * z - 2 * w * x) * scale[9];
			var this53 = this.rawData;
			if(!this53.fixed) {
				if(10 >= this53.length) this53.length = 11;
				if(this53.data.length < this53.length) {
					var data26;
					var this54;
					this54 = new Array(this53.data.length + 10);
					data26 = this54;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this53.data,0,data26,0,this53.data.length);
					this53.data = data26;
				}
			}
			this53.data[10] = (1 - 2 * x * x - 2 * y * y) * scale[10];
			var this55 = this.rawData;
			if(!this55.fixed) {
				if(11 >= this55.length) this55.length = 12;
				if(this55.data.length < this55.length) {
					var data27;
					var this56;
					this56 = new Array(this55.data.length + 10);
					data27 = this56;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this55.data,0,data27,0,this55.data.length);
					this55.data = data27;
				}
			}
			this55.data[11] = 0;
			var this57 = this.rawData;
			if(!this57.fixed) {
				if(12 >= this57.length) this57.length = 13;
				if(this57.data.length < this57.length) {
					var data28;
					var this58;
					this58 = new Array(this57.data.length + 10);
					data28 = this58;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this57.data,0,data28,0,this57.data.length);
					this57.data = data28;
				}
			}
			this57.data[12] = components.data[0].x;
			var this59 = this.rawData;
			if(!this59.fixed) {
				if(13 >= this59.length) this59.length = 14;
				if(this59.data.length < this59.length) {
					var data29;
					var this60;
					this60 = new Array(this59.data.length + 10);
					data29 = this60;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this59.data,0,data29,0,this59.data.length);
					this59.data = data29;
				}
			}
			this59.data[13] = components.data[0].y;
			var this61 = this.rawData;
			if(!this61.fixed) {
				if(14 >= this61.length) this61.length = 15;
				if(this61.data.length < this61.length) {
					var data30;
					var this62;
					this62 = new Array(this61.data.length + 10);
					data30 = this62;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this61.data,0,data30,0,this61.data.length);
					this61.data = data30;
				}
			}
			this61.data[14] = components.data[0].z;
			var this63 = this.rawData;
			if(!this63.fixed) {
				if(15 >= this63.length) this63.length = 16;
				if(this63.data.length < this63.length) {
					var data31;
					var this64;
					this64 = new Array(this63.data.length + 10);
					data31 = this64;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this63.data,0,data31,0,this63.data.length);
					this63.data = data31;
				}
			}
			this63.data[15] = 1;
		} else {
			var x = components.data[1].x;
			var y = components.data[1].y;
			var z = components.data[1].z;
			var w = components.data[1].w;
			if(Type.enumEq(orientationStyle,openfl_geom_Orientation3D.AXIS_ANGLE)) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			var this33 = this.rawData;
			if(!this33.fixed) {
				if(0 >= this33.length) this33.length = 1;
				if(this33.data.length < this33.length) {
					var data16;
					var this34;
					this34 = new Array(this33.data.length + 10);
					data16 = this34;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this33.data,0,data16,0,this33.data.length);
					this33.data = data16;
				}
			}
			this33.data[0] = (1 - 2 * y * y - 2 * z * z) * scale[0];
			var this35 = this.rawData;
			if(!this35.fixed) {
				if(1 >= this35.length) this35.length = 2;
				if(this35.data.length < this35.length) {
					var data17;
					var this36;
					this36 = new Array(this35.data.length + 10);
					data17 = this36;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this35.data,0,data17,0,this35.data.length);
					this35.data = data17;
				}
			}
			this35.data[1] = (2 * x * y + 2 * w * z) * scale[1];
			var this37 = this.rawData;
			if(!this37.fixed) {
				if(2 >= this37.length) this37.length = 3;
				if(this37.data.length < this37.length) {
					var data18;
					var this38;
					this38 = new Array(this37.data.length + 10);
					data18 = this38;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this37.data,0,data18,0,this37.data.length);
					this37.data = data18;
				}
			}
			this37.data[2] = (2 * x * z - 2 * w * y) * scale[2];
			var this39 = this.rawData;
			if(!this39.fixed) {
				if(3 >= this39.length) this39.length = 4;
				if(this39.data.length < this39.length) {
					var data19;
					var this40;
					this40 = new Array(this39.data.length + 10);
					data19 = this40;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this39.data,0,data19,0,this39.data.length);
					this39.data = data19;
				}
			}
			this39.data[3] = 0;
			var this41 = this.rawData;
			if(!this41.fixed) {
				if(4 >= this41.length) this41.length = 5;
				if(this41.data.length < this41.length) {
					var data20;
					var this42;
					this42 = new Array(this41.data.length + 10);
					data20 = this42;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this41.data,0,data20,0,this41.data.length);
					this41.data = data20;
				}
			}
			this41.data[4] = (2 * x * y - 2 * w * z) * scale[4];
			var this43 = this.rawData;
			if(!this43.fixed) {
				if(5 >= this43.length) this43.length = 6;
				if(this43.data.length < this43.length) {
					var data21;
					var this44;
					this44 = new Array(this43.data.length + 10);
					data21 = this44;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this43.data,0,data21,0,this43.data.length);
					this43.data = data21;
				}
			}
			this43.data[5] = (1 - 2 * x * x - 2 * z * z) * scale[5];
			var this45 = this.rawData;
			if(!this45.fixed) {
				if(6 >= this45.length) this45.length = 7;
				if(this45.data.length < this45.length) {
					var data22;
					var this46;
					this46 = new Array(this45.data.length + 10);
					data22 = this46;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this45.data,0,data22,0,this45.data.length);
					this45.data = data22;
				}
			}
			this45.data[6] = (2 * y * z + 2 * w * x) * scale[6];
			var this47 = this.rawData;
			if(!this47.fixed) {
				if(7 >= this47.length) this47.length = 8;
				if(this47.data.length < this47.length) {
					var data23;
					var this48;
					this48 = new Array(this47.data.length + 10);
					data23 = this48;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this47.data,0,data23,0,this47.data.length);
					this47.data = data23;
				}
			}
			this47.data[7] = 0;
			var this49 = this.rawData;
			if(!this49.fixed) {
				if(8 >= this49.length) this49.length = 9;
				if(this49.data.length < this49.length) {
					var data24;
					var this50;
					this50 = new Array(this49.data.length + 10);
					data24 = this50;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this49.data,0,data24,0,this49.data.length);
					this49.data = data24;
				}
			}
			this49.data[8] = (2 * x * z + 2 * w * y) * scale[8];
			var this51 = this.rawData;
			if(!this51.fixed) {
				if(9 >= this51.length) this51.length = 10;
				if(this51.data.length < this51.length) {
					var data25;
					var this52;
					this52 = new Array(this51.data.length + 10);
					data25 = this52;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this51.data,0,data25,0,this51.data.length);
					this51.data = data25;
				}
			}
			this51.data[9] = (2 * y * z - 2 * w * x) * scale[9];
			var this53 = this.rawData;
			if(!this53.fixed) {
				if(10 >= this53.length) this53.length = 11;
				if(this53.data.length < this53.length) {
					var data26;
					var this54;
					this54 = new Array(this53.data.length + 10);
					data26 = this54;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this53.data,0,data26,0,this53.data.length);
					this53.data = data26;
				}
			}
			this53.data[10] = (1 - 2 * x * x - 2 * y * y) * scale[10];
			var this55 = this.rawData;
			if(!this55.fixed) {
				if(11 >= this55.length) this55.length = 12;
				if(this55.data.length < this55.length) {
					var data27;
					var this56;
					this56 = new Array(this55.data.length + 10);
					data27 = this56;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this55.data,0,data27,0,this55.data.length);
					this55.data = data27;
				}
			}
			this55.data[11] = 0;
			var this57 = this.rawData;
			if(!this57.fixed) {
				if(12 >= this57.length) this57.length = 13;
				if(this57.data.length < this57.length) {
					var data28;
					var this58;
					this58 = new Array(this57.data.length + 10);
					data28 = this58;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this57.data,0,data28,0,this57.data.length);
					this57.data = data28;
				}
			}
			this57.data[12] = components.data[0].x;
			var this59 = this.rawData;
			if(!this59.fixed) {
				if(13 >= this59.length) this59.length = 14;
				if(this59.data.length < this59.length) {
					var data29;
					var this60;
					this60 = new Array(this59.data.length + 10);
					data29 = this60;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this59.data,0,data29,0,this59.data.length);
					this59.data = data29;
				}
			}
			this59.data[13] = components.data[0].y;
			var this61 = this.rawData;
			if(!this61.fixed) {
				if(14 >= this61.length) this61.length = 15;
				if(this61.data.length < this61.length) {
					var data30;
					var this62;
					this62 = new Array(this61.data.length + 10);
					data30 = this62;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this61.data,0,data30,0,this61.data.length);
					this61.data = data30;
				}
			}
			this61.data[14] = components.data[0].z;
			var this63 = this.rawData;
			if(!this63.fixed) {
				if(15 >= this63.length) this63.length = 16;
				if(this63.data.length < this63.length) {
					var data31;
					var this64;
					this64 = new Array(this63.data.length + 10);
					data31 = this64;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this63.data,0,data31,0,this63.data.length);
					this63.data = data31;
				}
			}
			this63.data[15] = 1;
		}
		if(components.data[2].x == 0) {
			var this65 = this.rawData;
			if(!this65.fixed) {
				if(0 >= this65.length) this65.length = 1;
				if(this65.data.length < this65.length) {
					var data32;
					var this66;
					this66 = new Array(this65.data.length + 10);
					data32 = this66;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this65.data,0,data32,0,this65.data.length);
					this65.data = data32;
				}
			}
			this65.data[0] = 1e-15;
		}
		if(components.data[2].y == 0) {
			var this67 = this.rawData;
			if(!this67.fixed) {
				if(5 >= this67.length) this67.length = 6;
				if(this67.data.length < this67.length) {
					var data33;
					var this68;
					this68 = new Array(this67.data.length + 10);
					data33 = this68;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this67.data,0,data33,0,this67.data.length);
					this67.data = data33;
				}
			}
			this67.data[5] = 1e-15;
		}
		if(components.data[2].z == 0) {
			var this69 = this.rawData;
			if(!this69.fixed) {
				if(10 >= this69.length) this69.length = 11;
				if(this69.data.length < this69.length) {
					var data34;
					var this70;
					this70 = new Array(this69.data.length + 10);
					data34 = this70;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this69.data,0,data34,0,this69.data.length);
					this69.data = data34;
				}
			}
			this69.data[10] = 1e-15;
		}
		return !(components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].y == 0);
	}
	,transformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14],x * this.rawData.data[3] + y * this.rawData.data[7] + z * this.rawData.data[11] + this.rawData.data[15]);
	}
	,transformVectors: function(vin,vout) {
		var i = 0;
		var x;
		var y;
		var z;
		while(i + 3 <= vin.length) {
			x = vin.data[i];
			y = vin.data[i + 1];
			z = vin.data[i + 2];
			{
				if(!vout.fixed) {
					if(i >= vout.length) vout.length = i + 1;
					if(vout.data.length < vout.length) {
						var data;
						var this1;
						this1 = new Array(vout.data.length + 10);
						data = this1;
						haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data,0,data,0,vout.data.length);
						vout.data = data;
					}
				}
				vout.data[i] = x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12];
			}
			var key = i + 1;
			if(!vout.fixed) {
				if(key >= vout.length) vout.length = key + 1;
				if(vout.data.length < vout.length) {
					var data1;
					var this2;
					this2 = new Array(vout.data.length + 10);
					data1 = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data,0,data1,0,vout.data.length);
					vout.data = data1;
				}
			}
			vout.data[key] = x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13];
			var key1 = i + 2;
			if(!vout.fixed) {
				if(key1 >= vout.length) vout.length = key1 + 1;
				if(vout.data.length < vout.length) {
					var data2;
					var this3;
					this3 = new Array(vout.data.length + 10);
					data2 = this3;
					haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data,0,data2,0,vout.data.length);
					vout.data = data2;
				}
			}
			vout.data[key1] = x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14];
			i += 3;
		}
	}
	,transpose: function() {
		var oRawData;
		var this1 = this.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
		oRawData = vectorData;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data,0,this3.data.length);
				this3.data = data;
			}
		}
		this3.data[1] = oRawData.data[4];
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data1;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data1 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data1,0,this5.data.length);
				this5.data = data1;
			}
		}
		this5.data[2] = oRawData.data[8];
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data2;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data2 = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data2,0,this7.data.length);
				this7.data = data2;
			}
		}
		this7.data[3] = oRawData.data[12];
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data3;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data3 = this10;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data3,0,this9.data.length);
				this9.data = data3;
			}
		}
		this9.data[4] = oRawData.data[1];
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(6 >= this11.length) this11.length = 7;
			if(this11.data.length < this11.length) {
				var data4;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data4 = this12;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data4,0,this11.data.length);
				this11.data = data4;
			}
		}
		this11.data[6] = oRawData.data[9];
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(7 >= this13.length) this13.length = 8;
			if(this13.data.length < this13.length) {
				var data5;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data5 = this14;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data5,0,this13.data.length);
				this13.data = data5;
			}
		}
		this13.data[7] = oRawData.data[13];
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(8 >= this15.length) this15.length = 9;
			if(this15.data.length < this15.length) {
				var data6;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data6 = this16;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data6,0,this15.data.length);
				this15.data = data6;
			}
		}
		this15.data[8] = oRawData.data[2];
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(9 >= this17.length) this17.length = 10;
			if(this17.data.length < this17.length) {
				var data7;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data7 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data7,0,this17.data.length);
				this17.data = data7;
			}
		}
		this17.data[9] = oRawData.data[6];
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(11 >= this19.length) this19.length = 12;
			if(this19.data.length < this19.length) {
				var data8;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data8 = this20;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data8,0,this19.data.length);
				this19.data = data8;
			}
		}
		this19.data[11] = oRawData.data[14];
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(12 >= this21.length) this21.length = 13;
			if(this21.data.length < this21.length) {
				var data9;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data9 = this22;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data9,0,this21.data.length);
				this21.data = data9;
			}
		}
		this21.data[12] = oRawData.data[3];
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(13 >= this23.length) this23.length = 14;
			if(this23.data.length < this23.length) {
				var data10;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data10 = this24;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data10,0,this23.data.length);
				this23.data = data10;
			}
		}
		this23.data[13] = oRawData.data[7];
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(14 >= this25.length) this25.length = 15;
			if(this25.data.length < this25.length) {
				var data11;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data11 = this26;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data11,0,this25.data.length);
				this25.data = data11;
			}
		}
		this25.data[14] = oRawData.data[11];
	}
	,get_determinant: function() {
		return (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
	}
	,get_position: function() {
		return new openfl_geom_Vector3D(this.rawData.data[12],this.rawData.data[13],this.rawData.data[14]);
	}
	,set_position: function(val) {
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(12 >= this1.length) this1.length = 13;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[12] = val.x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(13 >= this3.length) this3.length = 14;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[13] = val.y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(14 >= this5.length) this5.length = 15;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[14] = val.z;
		return val;
	}
	,__class__: openfl_geom_Matrix3D
	,__properties__: {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
};
var openfl_geom_Orientation3D = $hxClasses["openfl.geom.Orientation3D"] = { __ename__ : true, __constructs__ : ["AXIS_ANGLE","EULER_ANGLES","QUATERNION"] };
openfl_geom_Orientation3D.AXIS_ANGLE = ["AXIS_ANGLE",0];
openfl_geom_Orientation3D.AXIS_ANGLE.toString = $estr;
openfl_geom_Orientation3D.AXIS_ANGLE.__enum__ = openfl_geom_Orientation3D;
openfl_geom_Orientation3D.EULER_ANGLES = ["EULER_ANGLES",1];
openfl_geom_Orientation3D.EULER_ANGLES.toString = $estr;
openfl_geom_Orientation3D.EULER_ANGLES.__enum__ = openfl_geom_Orientation3D;
openfl_geom_Orientation3D.QUATERNION = ["QUATERNION",2];
openfl_geom_Orientation3D.QUATERNION.toString = $estr;
openfl_geom_Orientation3D.QUATERNION.__enum__ = openfl_geom_Orientation3D;
var openfl_geom_Transform = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = ["openfl","geom","Transform"];
openfl_geom_Transform.prototype = {
	get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		if(!this.__colorTransform.__equals(value)) {
			this.__colorTransform = value;
			if(value != null) this.__displayObject.set_alpha(value.alphaMultiplier);
			this.__displayObject.__setRenderDirty();
		}
		return this.__colorTransform;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) return this.__displayObject.__transform.clone();
		return null;
	}
	,get_concatenatedMatrix: function() {
		if(this.__hasMatrix) return this.__displayObject.__getWorldTransform().clone();
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			var rotation = 180 / Math.PI * Math.atan2(value.d,value.c) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			this.__displayObject.__transform.copyFrom(value);
			this.__displayObject.__setTransformDirty();
		}
		return value;
	}
	,get_matrix3D: function() {
		if(this.__hasMatrix3D) {
			var matrix = this.__displayObject.__transform;
			return new openfl_geom_Matrix3D((function($this) {
				var $r;
				var value = [matrix.a,matrix.b,0.0,0.0,matrix.c,matrix.d,0.0,0.0,0.0,0.0,1.0,0.0,matrix.tx,matrix.ty,0.0,1.0];
				var vectorData = new openfl_VectorData();
				vectorData.length = value.length;
				vectorData.fixed = true;
				{
					var vec;
					var this1;
					this1 = new Array(value.length);
					vec = this1;
					var _g1 = 0;
					var _g = value.length;
					while(_g1 < _g) {
						var i = _g1++;
						vec[i] = value[i];
					}
					vectorData.data = vec;
				}
				$r = vectorData;
				return $r;
			}(this)));
		}
		return null;
	}
	,set_matrix3D: function(value) {
		if(value == null) {
			this.__hasMatrix3D = false;
			return null;
		}
		this.__hasMatrix = false;
		this.__hasMatrix3D = true;
		if(this.__displayObject != null) {
			var rotation = 180 / Math.PI * Math.atan2(value.rawData.data[5],value.rawData.data[4]) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			this.__displayObject.__transform.a = value.rawData.data[0];
			this.__displayObject.__transform.b = value.rawData.data[1];
			this.__displayObject.__transform.c = value.rawData.data[5];
			this.__displayObject.__transform.d = value.rawData.data[6];
			this.__displayObject.__transform.tx = value.rawData.data[12];
			this.__displayObject.__transform.ty = value.rawData.data[13];
			this.__displayObject.__setTransformDirty();
		}
		return value;
	}
	,__class__: openfl_geom_Transform
	,__properties__: {set_matrix3D:"set_matrix3D",get_matrix3D:"get_matrix3D",set_matrix:"set_matrix",get_matrix:"get_matrix",get_concatenatedMatrix:"get_concatenatedMatrix",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
var openfl_geom_Vector3D = function(x,y,z,w) {
	if(w == null) w = 0;
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
openfl_geom_Vector3D.__name__ = ["openfl","geom","Vector3D"];
openfl_geom_Vector3D.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
openfl_geom_Vector3D.X_AXIS = null;
openfl_geom_Vector3D.Y_AXIS = null;
openfl_geom_Vector3D.Z_AXIS = null;
openfl_geom_Vector3D.angleBetween = function(a,b) {
	var la = Math.sqrt(a.x * a.x + a.y * a.y + a.z * a.z);
	var lb = Math.sqrt(b.x * b.x + b.y * b.y + b.z * b.z);
	var dot = a.x * b.x + a.y * b.y + a.z * b.z;
	if(la != 0) dot /= la;
	if(lb != 0) dot /= lb;
	return Math.acos(dot);
};
openfl_geom_Vector3D.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
openfl_geom_Vector3D.get_X_AXIS = function() {
	return new openfl_geom_Vector3D(1,0,0);
};
openfl_geom_Vector3D.get_Y_AXIS = function() {
	return new openfl_geom_Vector3D(0,1,0);
};
openfl_geom_Vector3D.get_Z_AXIS = function() {
	return new openfl_geom_Vector3D(0,0,1);
};
openfl_geom_Vector3D.prototype = {
	add: function(a) {
		return new openfl_geom_Vector3D(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new openfl_geom_Vector3D(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector3D) {
		this.x = sourceVector3D.x;
		this.y = sourceVector3D.y;
		this.z = sourceVector3D.z;
	}
	,crossProduct: function(a) {
		return new openfl_geom_Vector3D(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new openfl_geom_Vector3D(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: openfl_geom_Vector3D
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var openfl_media_ID3Info = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
openfl_media_ID3Info.__name__ = ["openfl","media","ID3Info"];
openfl_media_ID3Info.prototype = {
	__class__: openfl_media_ID3Info
};
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.id3 = null;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) this.load(stream,context);
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = ["openfl","media","Sound"];
openfl_media_Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl_media_Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl_media_Sound.fromFile = function(path) {
	return openfl_media_Sound.fromAudioBuffer(lime_audio_AudioBuffer.fromFile(path));
};
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	close: function() {
		if(openfl_media_Sound.__registeredSounds.exists(this.__soundID)) createjs.Sound.removeSound(this.__soundID);
	}
	,load: function(stream,context) {
		this.url = stream.url;
		this.__soundID = haxe_io_Path.withoutExtension(stream.url);
		if(!openfl_media_Sound.__registeredSounds.exists(this.__soundID)) {
			openfl_media_Sound.__registeredSounds.set(this.__soundID,true);
			createjs.Sound.addEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.addEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			createjs.Sound.registerSound(this.url,this.__soundID);
		} else this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength,forcePlayAsMusic) {
		if(forcePlayAsMusic == null) forcePlayAsMusic = false;
		openfl_Lib.notImplemented("Sound.loadCompressedDataFromByteArray");
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
		openfl_Lib.notImplemented("Sound.loadPCMFromByteArray");
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0.0;
		if(sndTransform == null) sndTransform = new openfl_media_SoundTransform(1,0);
		var pan = sndTransform.pan;
		if(pan == 0) pan = -0.0000001;
		var instance;
		if(loops > 1) instance = createjs.Sound.play(this.__soundID,"any",0,startTime | 0,loops - 1,sndTransform.volume,pan); else instance = createjs.Sound.play(this.__soundID,"any",0,startTime | 0,0,sndTransform.volume,pan);
		return new openfl_media_SoundChannel(instance);
	}
	,get_id3: function() {
		return new openfl_media_ID3Info();
	}
	,get_length: function() {
		if(this.__buffer != null) {
		}
		return 0;
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		if(buffer == null) this.dispatchEvent(new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR)); else {
			this.__buffer = buffer;
			this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
		}
	}
	,SoundJS_onFileLoad: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
		}
	}
	,SoundJS_onFileError: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR));
		}
	}
	,__class__: openfl_media_Sound
	,__properties__: {get_length:"get_length",get_id3:"get_id3"}
});
var openfl_media_SoundChannel = function(soundInstance) {
	openfl_events_EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundInstance != null) {
		this.__soundInstance = soundInstance;
		this.__soundInstance.addEventListener("complete",$bind(this,this.source_onComplete));
		this.__isValid = true;
	}
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	stop: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
	}
	,__dispose: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
		this.__soundInstance = null;
		this.__isValid = false;
	}
	,get_position: function() {
		if(!this.__isValid) return 0;
		return this.__soundInstance.getPosition();
	}
	,set_position: function(value) {
		if(!this.__isValid) return 0;
		this.__soundInstance.setPosition(value | 0);
		return this.__soundInstance.getPosition();
	}
	,get_soundTransform: function() {
		if(!this.__isValid) return new openfl_media_SoundTransform();
		return new openfl_media_SoundTransform(this.__soundInstance.getVolume(),this.__soundInstance.getPan());
	}
	,set_soundTransform: function(value) {
		if(!this.__isValid) return value;
		this.__soundInstance.setVolume(value.volume);
		this.__soundInstance.setPan(value.pan);
		return value;
	}
	,soundInstance_onComplete: function(_) {
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.SOUND_COMPLETE));
	}
	,source_onComplete: function() {
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.SOUND_COMPLETE));
	}
	,__class__: openfl_media_SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
var openfl_media_SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	if(bufferTime == null) bufferTime = 1000;
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
openfl_media_SoundLoaderContext.prototype = {
	__class__: openfl_media_SoundLoaderContext
};
var openfl_media_SoundTransform = function(vol,panning) {
	if(panning == null) panning = 0;
	if(vol == null) vol = 1;
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl_media_SoundTransform.prototype = {
	clone: function() {
		return new openfl_media_SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl_media_SoundTransform
};
var openfl_net_URLLoader = function(request) {
	openfl_events_EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(openfl_net_URLLoaderDataFormat.TEXT);
	if(request != null) this.load(request);
};
$hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
openfl_net_URLLoader.__name__ = ["openfl","net","URLLoader"];
openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	close: function() {
	}
	,getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.onProgress),false);
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				s = null;
			}
			if(s == undefined) s = null;
			if(s != null) self.onStatus(s);
			if(s != null && s >= 200 && s < 400) self.onData(subject.response); else if(s == null) self.onError("Failed to connect or resolve host"); else if(s == 12029) self.onError("Failed to connect to host"); else if(s == 12007) self.onError("Unknown host"); else if(s == 0) {
				self.onError("Unable to make request (may be blocked due to cross-domain permissions)");
				self.onSecurityError("Unable to make request (may be blocked due to cross-domain permissions)");
			} else self.onError("Http Error #" + subject.status);
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js_Boot.__instanceof(data,openfl_utils_ByteArrayData)) {
			var data1 = data;
			var _g = this.dataFormat;
			switch(_g[1]) {
			case 0:
				uri = js_Boot.__cast(data1 , ArrayBuffer);
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js_Boot.__instanceof(data,openfl_net_URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) uri += "&";
				uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open(method,url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(method,url,true);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.onError(e.toString());
			return;
		}
		var _g2 = this.dataFormat;
		switch(_g2[1]) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g3 = 0;
		while(_g3 < requestHeaders.length) {
			var header = requestHeaders[_g3];
			++_g3;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		this.onOpen();
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,onData: function(_) {
		var content = this.getData();
		var _g = this.dataFormat;
		switch(_g[1]) {
		case 0:
			this.data = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		var evt = new openfl_events_Event(openfl_events_Event.COMPLETE);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onError: function(msg) {
		var evt = new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onOpen: function() {
		var evt = new openfl_events_Event(openfl_events_Event.OPEN);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onProgress: function(event) {
		var evt = new openfl_events_ProgressEvent(openfl_events_ProgressEvent.PROGRESS);
		evt.currentTarget = this;
		evt.bytesLoaded = event.loaded;
		evt.bytesTotal = event.total;
		this.dispatchEvent(evt);
	}
	,onSecurityError: function(msg) {
		var evt = new openfl_events_SecurityErrorEvent(openfl_events_SecurityErrorEvent.SECURITY_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onStatus: function(status) {
		var evt = new openfl_events_HTTPStatusEvent(openfl_events_HTTPStatusEvent.HTTP_STATUS,false,false,status);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == openfl_net_URLLoaderDataFormat.BINARY && !Reflect.hasField(window,"ArrayBuffer")) this.dataFormat = openfl_net_URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,__class__: openfl_net_URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
});
var openfl_net_URLLoaderDataFormat = $hxClasses["openfl.net.URLLoaderDataFormat"] = { __ename__ : true, __constructs__ : ["BINARY","TEXT","VARIABLES"] };
openfl_net_URLLoaderDataFormat.BINARY = ["BINARY",0];
openfl_net_URLLoaderDataFormat.BINARY.toString = $estr;
openfl_net_URLLoaderDataFormat.BINARY.__enum__ = openfl_net_URLLoaderDataFormat;
openfl_net_URLLoaderDataFormat.TEXT = ["TEXT",1];
openfl_net_URLLoaderDataFormat.TEXT.toString = $estr;
openfl_net_URLLoaderDataFormat.TEXT.__enum__ = openfl_net_URLLoaderDataFormat;
openfl_net_URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
openfl_net_URLLoaderDataFormat.VARIABLES.toString = $estr;
openfl_net_URLLoaderDataFormat.VARIABLES.__enum__ = openfl_net_URLLoaderDataFormat;
var openfl_net_URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = "GET";
	this.contentType = null;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl_net_URLRequest.prototype = {
	formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == "GET" || this.data == null) return res;
		if(typeof(this.data) == "string" || js_Boot.__instanceof(this.data,openfl_utils_ByteArrayData)) {
			res = res.slice();
			res.push(new openfl_net_URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl_net_URLRequestHeader.prototype = {
	__class__: openfl_net_URLRequestHeader
};
var openfl_net_URLVariables = function(source) {
	if(source != null) this.decode(source);
};
$hxClasses["openfl.net.URLVariables"] = openfl_net_URLVariables;
openfl_net_URLVariables.__name__ = ["openfl","net","URLVariables"];
openfl_net_URLVariables.prototype = {
	decode: function(source) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = source.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) Reflect.setField(this,StringTools.urlDecode(HxOverrides.substr(f1,0,eq)),StringTools.urlDecode(HxOverrides.substr(f1,eq + 1,null))); else if(eq != 0) Reflect.setField(this,decodeURIComponent(f1.split("+").join(" ")),"");
		}
	}
	,toString: function() {
		var result = [];
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,__class__: openfl_net_URLVariables
};
var openfl_system_TouchscreenType = $hxClasses["openfl.system.TouchscreenType"] = { __ename__ : true, __constructs__ : ["FINGER","NONE","STYLUS"] };
openfl_system_TouchscreenType.FINGER = ["FINGER",0];
openfl_system_TouchscreenType.FINGER.toString = $estr;
openfl_system_TouchscreenType.FINGER.__enum__ = openfl_system_TouchscreenType;
openfl_system_TouchscreenType.NONE = ["NONE",1];
openfl_system_TouchscreenType.NONE.toString = $estr;
openfl_system_TouchscreenType.NONE.__enum__ = openfl_system_TouchscreenType;
openfl_system_TouchscreenType.STYLUS = ["STYLUS",2];
openfl_system_TouchscreenType.STYLUS.toString = $estr;
openfl_system_TouchscreenType.STYLUS.__enum__ = openfl_system_TouchscreenType;
var openfl_system_Capabilities = function() { };
$hxClasses["openfl.system.Capabilities"] = openfl_system_Capabilities;
openfl_system_Capabilities.__name__ = ["openfl","system","Capabilities"];
openfl_system_Capabilities.__properties__ = {get_version:"get_version",get_screenResolutionY:"get_screenResolutionY",get_screenResolutionX:"get_screenResolutionX",get_screenDPI:"get_screenDPI",get_pixelAspectRatio:"get_pixelAspectRatio",get_os:"get_os",get_language:"get_language"}
openfl_system_Capabilities.language = null;
openfl_system_Capabilities.os = null;
openfl_system_Capabilities.pixelAspectRatio = null;
openfl_system_Capabilities.screenDPI = null;
openfl_system_Capabilities.screenResolutionX = null;
openfl_system_Capabilities.screenResolutionY = null;
openfl_system_Capabilities.version = null;
openfl_system_Capabilities.hasMultiChannelAudio = function(type) {
	return false;
};
openfl_system_Capabilities.get_os = function() {
	return "HTML5";
};
openfl_system_Capabilities.get_pixelAspectRatio = function() {
	return 1;
};
openfl_system_Capabilities.get_screenDPI = function() {
	if(openfl_system_Capabilities.screenDPI > 0) return openfl_system_Capabilities.screenDPI;
	var body = window.document.getElementsByTagName("body")[0];
	var testDiv = window.document.createElement("div");
	testDiv.style.width = testDiv.style.height = "1in";
	testDiv.style.padding = testDiv.style.margin = "0px";
	testDiv.style.position = "absolute";
	testDiv.style.top = "-100%";
	body.appendChild(testDiv);
	openfl_system_Capabilities.screenDPI = testDiv.offsetWidth;
	body.removeChild(testDiv);
	return openfl_system_Capabilities.screenDPI;
};
openfl_system_Capabilities.get_screenResolutionX = function() {
	var $window = openfl_Lib.application.windows[0];
	if($window != null) {
		var display = $window.get_display();
		if(display != null) return display.currentMode.width;
	}
	return 0;
};
openfl_system_Capabilities.get_screenResolutionY = function() {
	var $window = openfl_Lib.application.windows[0];
	if($window != null) {
		var display = $window.get_display();
		if(display != null) return display.currentMode.height;
	}
	return 0;
};
openfl_system_Capabilities.get_language = function() {
	return navigator.language;
};
openfl_system_Capabilities.get_version = function() {
	var value = "WEB";
	value += " " + StringTools.replace("3.5.2",".",",") + ",0";
	return value;
};
var openfl_system_LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	this.applicationDomain = applicationDomain;
	this.allowCodeImport = true;
	this.allowLoadBytesCodeExecution = true;
};
$hxClasses["openfl.system.LoaderContext"] = openfl_system_LoaderContext;
openfl_system_LoaderContext.__name__ = ["openfl","system","LoaderContext"];
openfl_system_LoaderContext.prototype = {
	__class__: openfl_system_LoaderContext
};
var openfl_system_SecurityDomain = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl_system_SecurityDomain;
openfl_system_SecurityDomain.__name__ = ["openfl","system","SecurityDomain"];
openfl_system_SecurityDomain.prototype = {
	__class__: openfl_system_SecurityDomain
};
var openfl_text_AntiAliasType = $hxClasses["openfl.text.AntiAliasType"] = { __ename__ : true, __constructs__ : ["ADVANCED","NORMAL"] };
openfl_text_AntiAliasType.ADVANCED = ["ADVANCED",0];
openfl_text_AntiAliasType.ADVANCED.toString = $estr;
openfl_text_AntiAliasType.ADVANCED.__enum__ = openfl_text_AntiAliasType;
openfl_text_AntiAliasType.NORMAL = ["NORMAL",1];
openfl_text_AntiAliasType.NORMAL.toString = $estr;
openfl_text_AntiAliasType.NORMAL.__enum__ = openfl_text_AntiAliasType;
var openfl_text_FontStyle = $hxClasses["openfl.text.FontStyle"] = { __ename__ : true, __constructs__ : ["REGULAR","ITALIC","BOLD_ITALIC","BOLD"] };
openfl_text_FontStyle.REGULAR = ["REGULAR",0];
openfl_text_FontStyle.REGULAR.toString = $estr;
openfl_text_FontStyle.REGULAR.__enum__ = openfl_text_FontStyle;
openfl_text_FontStyle.ITALIC = ["ITALIC",1];
openfl_text_FontStyle.ITALIC.toString = $estr;
openfl_text_FontStyle.ITALIC.__enum__ = openfl_text_FontStyle;
openfl_text_FontStyle.BOLD_ITALIC = ["BOLD_ITALIC",2];
openfl_text_FontStyle.BOLD_ITALIC.toString = $estr;
openfl_text_FontStyle.BOLD_ITALIC.__enum__ = openfl_text_FontStyle;
openfl_text_FontStyle.BOLD = ["BOLD",3];
openfl_text_FontStyle.BOLD.toString = $estr;
openfl_text_FontStyle.BOLD.__enum__ = openfl_text_FontStyle;
var openfl_text_FontType = $hxClasses["openfl.text.FontType"] = { __ename__ : true, __constructs__ : ["DEVICE","EMBEDDED","EMBEDDED_CFF"] };
openfl_text_FontType.DEVICE = ["DEVICE",0];
openfl_text_FontType.DEVICE.toString = $estr;
openfl_text_FontType.DEVICE.__enum__ = openfl_text_FontType;
openfl_text_FontType.EMBEDDED = ["EMBEDDED",1];
openfl_text_FontType.EMBEDDED.toString = $estr;
openfl_text_FontType.EMBEDDED.__enum__ = openfl_text_FontType;
openfl_text_FontType.EMBEDDED_CFF = ["EMBEDDED_CFF",2];
openfl_text_FontType.EMBEDDED_CFF.toString = $estr;
openfl_text_FontType.EMBEDDED_CFF.__enum__ = openfl_text_FontType;
var openfl_text_GridFitType = $hxClasses["openfl.text.GridFitType"] = { __ename__ : true, __constructs__ : ["NONE","PIXEL","SUBPIXEL"] };
openfl_text_GridFitType.NONE = ["NONE",0];
openfl_text_GridFitType.NONE.toString = $estr;
openfl_text_GridFitType.NONE.__enum__ = openfl_text_GridFitType;
openfl_text_GridFitType.PIXEL = ["PIXEL",1];
openfl_text_GridFitType.PIXEL.toString = $estr;
openfl_text_GridFitType.PIXEL.__enum__ = openfl_text_GridFitType;
openfl_text_GridFitType.SUBPIXEL = ["SUBPIXEL",2];
openfl_text_GridFitType.SUBPIXEL.toString = $estr;
openfl_text_GridFitType.SUBPIXEL.__enum__ = openfl_text_GridFitType;
var openfl_text_TextField = function() {
	openfl_display_InteractiveObject.call(this);
	this.__caretIndex = -1;
	this.__graphics = new openfl_display_Graphics();
	this.__textEngine = new openfl__$internal_text_TextEngine(this);
	this.__layoutDirty = true;
	this.__tabEnabled = true;
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",openfl_text_TextFormatAlign.LEFT,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
	this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,0,0));
	this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.this_onMouseDown));
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = ["openfl","text","TextField"];
openfl_text_TextField.__defaultTextFormat = null;
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	appendText: function(text) {
		this.__textEngine.text += text;
		this.__textEngine.textFormatRanges[this.__textEngine.textFormatRanges.length - 1].end = this.__textEngine.text.length;
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,getCharBoundaries: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__textEngine.text.length - 1) return null;
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(charIndex >= group.startIndex && charIndex <= group.endIndex) {
				var x = group.offsetX;
				var _g3 = 0;
				var _g2 = charIndex - group.startIndex;
				while(_g3 < _g2) {
					var i = _g3++;
					x += group.advances[i];
				}
				return new openfl_geom_Rectangle(x,group.offsetY,group.advances[charIndex - group.startIndex],group.ascent + group.descent);
			}
		}
		return null;
	}
	,getCharIndexAtPoint: function(x,y) {
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) return -1;
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights[i];
		}
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.length) {
			var group = _g11[_g2];
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) {
				if(x >= group.offsetX && x <= group.offsetX + group.width) {
					var advance = 0.0;
					var _g3 = 0;
					var _g21 = group.advances.length;
					while(_g3 < _g21) {
						var i1 = _g3++;
						advance += group.advances[i1];
						if(x <= group.offsetX + advance) return group.startIndex + i1;
					}
					return group.endIndex;
				}
			}
		}
		return -1;
	}
	,getFirstCharInParagraph: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__textEngine.text.length - 1) return 0;
		var index = this.__textEngine.text.indexOf("\n");
		var startIndex = 0;
		while(index > -1) {
			if(index <= charIndex) startIndex = index + 1; else if(index > charIndex) break;
			index = this.__textEngine.text.indexOf("\n",index + 1);
		}
		return startIndex;
	}
	,getLineIndexAtPoint: function(x,y) {
		this.__updateLayout();
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) return -1;
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights[i];
		}
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.length) {
			var group = _g11[_g2];
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) return group.lineIndex;
		}
		return -1;
	}
	,getLineIndexOfChar: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__textEngine.text.length - 1) return -1;
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.startIndex <= charIndex && group.endIndex >= charIndex) return group.lineIndex;
		}
		return -1;
	}
	,getLineLength: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) return 0;
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) startIndex = group.startIndex;
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) endIndex = this.__textEngine.text.length;
		return endIndex - startIndex;
	}
	,getLineMetrics: function(lineIndex) {
		this.__updateLayout();
		var ascender = this.__textEngine.lineAscents[lineIndex];
		var descender = this.__textEngine.lineDescents[lineIndex];
		var leading = this.__textEngine.lineLeadings[lineIndex];
		var lineHeight = this.__textEngine.lineHeights[lineIndex];
		var lineWidth = this.__textEngine.lineWidths[lineIndex];
		var margin;
		var _g = this.__textFormat.align;
		switch(_g[1]) {
		case 0:case 2:
			margin = 2;
			break;
		case 1:
			margin = this.__textEngine.width - lineWidth - 2;
			break;
		case 3:
			margin = (this.__textEngine.width - lineWidth) / 2;
			break;
		}
		return new openfl_text_TextLineMetrics(margin,lineWidth,lineHeight,ascender,descender,leading);
	}
	,getLineOffset: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) return -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.lineIndex == lineIndex) return group.startIndex;
		}
		return 0;
	}
	,getLineText: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) return null;
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) startIndex = group.startIndex;
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) endIndex = this.__textEngine.text.length;
		return this.__textEngine.text.substring(startIndex,endIndex);
	}
	,getParagraphLength: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__textEngine.text.length - 1) return 0;
		var startIndex = this.getFirstCharInParagraph(charIndex);
		var endIndex = this.__textEngine.text.indexOf("\n",charIndex) + 1;
		if(endIndex == 0) endIndex = this.__textEngine.text.length;
		return endIndex - startIndex;
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		var format = null;
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.start <= beginIndex && group.end >= beginIndex || group.start <= endIndex && group.end >= endIndex) {
				if(format == null) format = group.format.clone(); else {
					if(group.format.font != format.font) format.font = null;
					if(group.format.size != format.size) format.size = null;
					if(group.format.color != format.color) format.color = null;
					if(group.format.bold != format.bold) format.bold = null;
					if(group.format.italic != format.italic) format.italic = null;
					if(group.format.underline != format.underline) format.underline = null;
					if(group.format.url != format.url) format.url = null;
					if(group.format.target != format.target) format.target = null;
					if(group.format.align != format.align) format.align = null;
					if(group.format.leftMargin != format.leftMargin) format.leftMargin = null;
					if(group.format.rightMargin != format.rightMargin) format.rightMargin = null;
					if(group.format.indent != format.indent) format.indent = null;
					if(group.format.leading != format.leading) format.leading = null;
					if(group.format.blockIndent != format.blockIndent) format.blockIndent = null;
					if(group.format.bullet != format.bullet) format.bullet = null;
					if(group.format.kerning != format.kerning) format.kerning = null;
					if(group.format.letterSpacing != format.letterSpacing) format.letterSpacing = null;
					if(group.format.tabStops != format.tabStops) format.tabStops = null;
				}
			}
		}
		return format;
	}
	,replaceSelectedText: function(value) {
		if(value == "" && this.__selectionIndex == this.__caretIndex) return;
		var startIndex;
		if(this.__caretIndex < this.__selectionIndex) startIndex = this.__caretIndex; else startIndex = this.__selectionIndex;
		var endIndex;
		if(this.__caretIndex > this.__selectionIndex) endIndex = this.__caretIndex; else endIndex = this.__selectionIndex;
		this.replaceText(startIndex,endIndex,value);
		this.__caretIndex = startIndex + value.length;
		this.__selectionIndex = this.__caretIndex;
	}
	,replaceText: function(beginIndex,endIndex,newText) {
		if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__textEngine.text.length || newText == null) return;
		this.__textEngine.text = this.__textEngine.text.substring(0,beginIndex) + newText + this.__textEngine.text.substring(endIndex);
		var offset = newText.length - (endIndex - beginIndex);
		var i = 0;
		var range;
		while(i < this.__textEngine.textFormatRanges.length) {
			range = this.__textEngine.textFormatRanges[i];
			if(range.start <= beginIndex && range.end >= endIndex) {
				range.end += offset;
				i++;
			} else if(range.start >= beginIndex && range.end <= endIndex) {
				this.__textEngine.textFormatRanges.splice(i,1);
				offset -= range.end - range.start;
			} else if(range.start > beginIndex && range.start <= endIndex) {
				range.start += offset;
				i++;
			} else i++;
		}
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,setSelection: function(beginIndex,endIndex) {
		this.__selectionIndex = beginIndex;
		this.__caretIndex = endIndex;
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		if(format.font != null) this.__textFormat.font = format.font;
		if(format.size != null) this.__textFormat.size = format.size;
		if(format.color != null) this.__textFormat.color = format.color;
		if(format.bold != null) this.__textFormat.bold = format.bold;
		if(format.italic != null) this.__textFormat.italic = format.italic;
		if(format.underline != null) this.__textFormat.underline = format.underline;
		if(format.url != null) this.__textFormat.url = format.url;
		if(format.target != null) this.__textFormat.target = format.target;
		if(format.align != null) this.__textFormat.align = format.align;
		if(format.leftMargin != null) this.__textFormat.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.__textFormat.rightMargin = format.rightMargin;
		if(format.indent != null) this.__textFormat.indent = format.indent;
		if(format.leading != null) this.__textFormat.leading = format.leading;
		if(format.blockIndent != null) this.__textFormat.blockIndent = format.blockIndent;
		if(format.bullet != null) this.__textFormat.bullet = format.bullet;
		if(format.kerning != null) this.__textFormat.kerning = format.kerning;
		if(format.letterSpacing != null) this.__textFormat.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.__textFormat.tabStops = format.tabStops;
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,__getBounds: function(rect,matrix) {
		this.__updateLayout();
		var bounds = openfl_geom_Rectangle.__temp;
		this.__textEngine.bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__getCursor: function() {
		if(this.__textEngine.selectable) return lime_ui_MouseCursor.TEXT; else return null;
	}
	,__getPosition: function(x,y) {
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights[i];
		}
		if(y > this.__textEngine.textHeight) y = this.__textEngine.textHeight;
		var firstGroup = true;
		var group;
		var nextGroup;
		var _g11 = 0;
		var _g2 = this.__textEngine.layoutGroups.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			group = this.__textEngine.layoutGroups[i1];
			if(i1 < this.__textEngine.layoutGroups.length - 1) nextGroup = this.__textEngine.layoutGroups[i1 + 1]; else nextGroup = null;
			if(firstGroup) {
				if(y < group.offsetY) y = group.offsetY;
				if(x < group.offsetX) x = group.offsetX;
				firstGroup = false;
			}
			if(y >= group.offsetY && y <= group.offsetY + group.height || nextGroup == null) {
				if(x >= group.offsetX && x <= group.offsetX + group.width || (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) {
					var advance = 0.0;
					var _g3 = 0;
					var _g21 = group.advances.length;
					while(_g3 < _g21) {
						var i2 = _g3++;
						advance += group.advances[i2];
						if(x <= group.offsetX + advance) {
							if(x <= group.offsetX + (advance - group.advances[i2]) + group.advances[i2] / 2) return group.startIndex + i2; else if(group.startIndex + i2 < group.endIndex) return group.startIndex + i2 + 1; else return group.endIndex;
						}
					}
					return group.endIndex;
				}
			}
		}
		return this.__textEngine.text.length;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) return false;
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
		this.__getWorldTransform();
		this.__updateLayout();
		var px = this.__worldTransform.__transformInverseX(x,y);
		var py = this.__worldTransform.__transformInverseY(x,y);
		if(this.__textEngine.bounds.contains(px,py)) {
			if(stack != null) stack.push(hitObject);
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		this.__getWorldTransform();
		this.__updateLayout();
		var px = this.__worldTransform.__transformInverseX(x,y);
		var py = this.__worldTransform.__transformInverseY(x,y);
		if(this.__textEngine.bounds.contains(px,py)) return true;
		return false;
	}
	,__renderCairo: function(renderSession) {
		openfl__$internal_renderer_cairo_CairoTextField.render(this,renderSession);
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
	}
	,__renderCanvas: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderSession);
		if(this.__textEngine.antiAliasType == openfl_text_AntiAliasType.ADVANCED && this.__textEngine.gridFitType == openfl_text_GridFitType.PIXEL) {
			var smoothingEnabled = renderSession.context.imageSmoothingEnabled;
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = false;
				renderSession.context.msImageSmoothingEnabled = false;
				renderSession.context.imageSmoothingEnabled = false;
			}
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = true;
				renderSession.context.msImageSmoothingEnabled = true;
				renderSession.context.imageSmoothingEnabled = true;
			}
		} else openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		openfl__$internal_renderer_dom_DOMTextField.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		if(this.__cacheAsBitmap) {
			this.__cacheGL(renderSession);
			return;
		}
		if(this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderSession);
		openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession,this.__textEngine.antiAliasType != openfl_text_AntiAliasType.ADVANCED || this.__textEngine.gridFitType != openfl_text_GridFitType.PIXEL);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
		if(this.__scrollRect != null) renderSession.maskManager.popRect();
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe_Timer.delay($bind(this,this.__startCursorTimer),600);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
	}
	,__startTextInput: function() {
		if(this.__caretIndex < 0) {
			this.__caretIndex = this.__textEngine.text.length;
			this.__selectionIndex = this.__caretIndex;
		}
		if(this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(true);
			if(!this.__inputEnabled) {
				this.stage.window.backend.setEnableTextEvents(true);
				if(!this.stage.window.onTextInput.has($bind(this,this.window_onTextInput))) {
					this.stage.window.onTextInput.add($bind(this,this.window_onTextInput));
					this.stage.window.onKeyDown.add($bind(this,this.window_onKeyDown));
				}
				this.__inputEnabled = true;
				this.__startCursorTimer();
			}
		}
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) {
			this.__cursorTimer.stop();
			this.__cursorTimer = null;
		}
		if(this.__showCursor) {
			this.__showCursor = false;
			this.__dirty = true;
		}
	}
	,__stopTextInput: function() {
		if(this.__inputEnabled && this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(false);
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
			this.__stopCursorTimer();
		}
	}
	,__updateLayout: function() {
		if(this.__layoutDirty) {
			this.__textEngine.update();
			if(this.__textEngine.autoSize != openfl_text_TextFieldAutoSize.NONE) {
				var cacheWidth = this.__textEngine.width;
				var cacheHeight = this.__textEngine.height;
				var _g = this.__textEngine.autoSize;
				switch(_g[1]) {
				case 1:case 3:case 0:
					if(!this.__textEngine.wordWrap) this.__textEngine.width = this.__textEngine.textWidth + 4;
					this.__textEngine.height = this.__textEngine.textHeight + 4;
					break;
				default:
				}
				if(this.__textEngine.width != cacheWidth) {
					var _g1 = this.__textEngine.autoSize;
					switch(_g1[1]) {
					case 3:
						var _g11 = this;
						_g11.set_x(_g11.get_x() + (cacheWidth - this.__textEngine.width));
						break;
					case 0:
						var _g12 = this;
						_g12.set_x(_g12.get_x() + (cacheWidth - this.__textEngine.width) / 2);
						break;
					default:
					}
				}
				this.__textEngine.getBounds();
			}
			this.__layoutDirty = false;
		}
	}
	,get_antiAliasType: function() {
		return this.__textEngine.antiAliasType;
	}
	,set_antiAliasType: function(value) {
		if(value != this.__textEngine.antiAliasType) {
		}
		return this.__textEngine.antiAliasType = value;
	}
	,get_autoSize: function() {
		return this.__textEngine.autoSize;
	}
	,set_autoSize: function(value) {
		if(value != this.__textEngine.autoSize) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.autoSize = value;
	}
	,get_background: function() {
		return this.__textEngine.background;
	}
	,set_background: function(value) {
		if(value != this.__textEngine.background) this.__dirty = true;
		return this.__textEngine.background = value;
	}
	,get_backgroundColor: function() {
		return this.__textEngine.backgroundColor;
	}
	,set_backgroundColor: function(value) {
		if(value != this.__textEngine.backgroundColor) this.__dirty = true;
		return this.__textEngine.backgroundColor = value;
	}
	,get_border: function() {
		return this.__textEngine.border;
	}
	,set_border: function(value) {
		if(value != this.__textEngine.border) this.__dirty = true;
		return this.__textEngine.border = value;
	}
	,get_borderColor: function() {
		return this.__textEngine.borderColor;
	}
	,set_borderColor: function(value) {
		if(value != this.__textEngine.borderColor) this.__dirty = true;
		return this.__textEngine.borderColor = value;
	}
	,get_bottomScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.bottomScrollV;
	}
	,get_caretIndex: function() {
		return this.__caretIndex;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		this.__layoutDirty = true;
		this.__dirty = true;
		return value;
	}
	,get_displayAsPassword: function() {
		return this.__textEngine.displayAsPassword;
	}
	,set_displayAsPassword: function(value) {
		if(value != this.__textEngine.displayAsPassword) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.displayAsPassword = value;
	}
	,get_embedFonts: function() {
		return this.__textEngine.embedFonts;
	}
	,set_embedFonts: function(value) {
		return this.__textEngine.embedFonts = value;
	}
	,get_gridFitType: function() {
		return this.__textEngine.gridFitType;
	}
	,set_gridFitType: function(value) {
		return this.__textEngine.gridFitType = value;
	}
	,get_height: function() {
		this.__updateLayout();
		return this.__textEngine.height;
	}
	,set_height: function(value) {
		if(this.get_scaleY() != 1 || value != this.__textEngine.height) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.set_scaleY(1);
		return this.__textEngine.height = value;
	}
	,get_htmlText: function() {
		return this.__textEngine.text;
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__textEngine.text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.__isHTML = true;
		if(this.__div == null) {
			value = new EReg("<br>","g").replace(value,"\n");
			value = new EReg("<br/>","g").replace(value,"\n");
			var segments = value.split("<font");
			if(segments.length == 1) {
				value = new EReg("<.*?>","g").replace(value,"");
				if(this.__textEngine.textFormatRanges.length > 1) this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.length - 1);
				var range = this.__textEngine.textFormatRanges[0];
				range.format = this.__textFormat;
				range.start = 0;
				range.end = value.length;
				return this.__textEngine.text = value;
			} else {
				this.__textEngine.textFormatRanges.splice(0,this.__textEngine.textFormatRanges.length);
				value = "";
				var _g = 0;
				while(_g < segments.length) {
					var segment = segments[_g];
					++_g;
					if(segment == "") continue;
					var closeFontIndex = segment.indexOf("</font>");
					if(closeFontIndex > -1) {
						var start = segment.indexOf(">") + 1;
						var end = closeFontIndex;
						var format = this.__textFormat.clone();
						var faceIndex = segment.indexOf("face=");
						var colorIndex = segment.indexOf("color=");
						var sizeIndex = segment.indexOf("size=");
						if(faceIndex > -1 && faceIndex < start) {
							var len = segment.indexOf("\"",faceIndex);
							format.font = HxOverrides.substr(segment,faceIndex + 6,len);
						}
						if(colorIndex > -1 && colorIndex < start) format.color = Std.parseInt("0x" + HxOverrides.substr(segment,colorIndex + 8,6));
						if(sizeIndex > -1 && sizeIndex < start) format.size = Std.parseInt((function($this) {
							var $r;
							var len1 = segment.indexOf("\"",sizeIndex);
							$r = HxOverrides.substr(segment,sizeIndex + 6,len1);
							return $r;
						}(this)));
						var sub = segment.substring(start,end);
						sub = new EReg("<.*?>","g").replace(sub,"");
						this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length));
						value += sub;
						if(closeFontIndex + 7 < segment.length) {
							sub = HxOverrides.substr(segment,closeFontIndex + 7,null);
							this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,value.length,value.length + sub.length));
							value += sub;
						}
					} else {
						this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,value.length,value.length + segment.length));
						value += segment;
					}
				}
			}
		}
		return this.__textEngine.text = value;
	}
	,get_length: function() {
		if(this.__textEngine.text != null) return this.__textEngine.text.length;
		return 0;
	}
	,get_maxChars: function() {
		return this.__textEngine.maxChars;
	}
	,set_maxChars: function(value) {
		if(value != this.__textEngine.maxChars) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.maxChars = value;
	}
	,get_maxScrollH: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollH;
	}
	,get_maxScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollV;
	}
	,get_multiline: function() {
		return this.__textEngine.multiline;
	}
	,set_multiline: function(value) {
		if(value != this.__textEngine.multiline) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.multiline = value;
	}
	,get_numLines: function() {
		this.__updateLayout();
		return this.__textEngine.numLines;
	}
	,get_restrict: function() {
		return this.__textEngine.restrict;
	}
	,set_restrict: function(value) {
		return this.__textEngine.restrict = value;
	}
	,get_scrollH: function() {
		return this.__textEngine.scrollH;
	}
	,set_scrollH: function(value) {
		if(value > this.__textEngine.maxScrollH) value = this.__textEngine.maxScrollH;
		if(value < 0) value = 0;
		if(value != this.__textEngine.scrollH) this.__dirty = true;
		return this.__textEngine.scrollH = value;
	}
	,get_scrollV: function() {
		return this.__textEngine.scrollV;
	}
	,set_scrollV: function(value) {
		if(value > this.__textEngine.maxScrollV) value = this.__textEngine.maxScrollV;
		if(value < 1) value = 1;
		if(value != this.__textEngine.scrollV) this.__dirty = true;
		return this.__textEngine.scrollV = value;
	}
	,get_selectable: function() {
		return this.__textEngine.selectable;
	}
	,set_selectable: function(value) {
		if(value != this.__textEngine.selectable && this.get_type() == openfl_text_TextFieldType.INPUT) {
			if(this.stage != null && this.stage.get_focus() == this) this.__startTextInput(); else if(!value) this.__stopTextInput();
		}
		return this.__textEngine.selectable = value;
	}
	,get_selectionBeginIndex: function() {
		return Std["int"](Math.min(this.__caretIndex,this.__selectionIndex));
	}
	,get_selectionEndIndex: function() {
		return Std["int"](Math.max(this.__caretIndex,this.__selectionIndex));
	}
	,get_sharpness: function() {
		return this.__textEngine.sharpness;
	}
	,set_sharpness: function(value) {
		if(value != this.__textEngine.sharpness) this.__dirty = true;
		return this.__textEngine.sharpness = value;
	}
	,get_text: function() {
		return this.__textEngine.text;
	}
	,set_text: function(value) {
		if(this.__isHTML || this.__textEngine.text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
		} else return value;
		if(this.__textEngine.textFormatRanges.length > 1) this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.length - 1);
		var range = this.__textEngine.textFormatRanges[0];
		range.format = this.__textFormat;
		range.start = 0;
		range.end = value.length;
		this.__isHTML = false;
		return this.__textEngine.text = value;
	}
	,get_textColor: function() {
		return this.__textFormat.color;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) this.__dirty = true;
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.length) {
			var range = _g1[_g];
			++_g;
			range.format.color = value;
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		this.__updateLayout();
		return this.__textEngine.textWidth;
	}
	,get_textHeight: function() {
		this.__updateLayout();
		return this.__textEngine.textHeight;
	}
	,get_type: function() {
		return this.__textEngine.type;
	}
	,set_type: function(value) {
		if(value != this.__textEngine.type) {
			if(value == openfl_text_TextFieldType.INPUT) {
				this.addEventListener(openfl_events_FocusEvent.FOCUS_IN,$bind(this,this.this_onFocusIn));
				this.addEventListener(openfl_events_FocusEvent.FOCUS_OUT,$bind(this,this.this_onFocusOut));
				this.addEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.this_onAddedToStage));
				this.this_onFocusIn(null);
			} else {
				this.removeEventListener(openfl_events_FocusEvent.FOCUS_IN,$bind(this,this.this_onFocusIn));
				this.removeEventListener(openfl_events_FocusEvent.FOCUS_OUT,$bind(this,this.this_onFocusOut));
				this.removeEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.this_onAddedToStage));
				this.__stopTextInput();
			}
			this.__dirty = true;
		}
		return this.__textEngine.type = value;
	}
	,get_width: function() {
		this.__updateLayout();
		return this.__textEngine.width;
	}
	,set_width: function(value) {
		if(this.get_scaleX() != 1 || this.__textEngine.width != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.set_scaleX(1);
		return this.__textEngine.width = value;
	}
	,get_wordWrap: function() {
		return this.__textEngine.wordWrap;
	}
	,set_wordWrap: function(value) {
		if(value != this.__textEngine.wordWrap) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.wordWrap = value;
	}
	,stage_onMouseMove: function(event) {
		if(this.stage == null) return;
		if(this.__textEngine.selectable && this.__selectionIndex >= 0) {
			this.__updateLayout();
			var position = this.__getPosition(this.get_mouseX(),this.get_mouseY());
			if(position != this.__caretIndex) {
				this.__caretIndex = position;
				this.__dirty = true;
			}
		}
	}
	,stage_onMouseUp: function(event) {
		if(this.stage == null) return;
		this.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			this.__getWorldTransform();
			this.__updateLayout();
			var px = this.__worldTransform.__transformInverseX(this.get_x(),this.get_y());
			var py = this.__worldTransform.__transformInverseY(this.get_x(),this.get_y());
			var upPos = this.__getPosition(this.get_mouseX(),this.get_mouseY());
			var leftPos;
			var rightPos;
			leftPos = Std["int"](Math.min(this.__selectionIndex,upPos));
			rightPos = Std["int"](Math.max(this.__selectionIndex,upPos));
			this.__selectionIndex = leftPos;
			this.__caretIndex = rightPos;
			if(this.__inputEnabled) {
				this.this_onFocusIn(null);
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
		}
	}
	,this_onAddedToStage: function(event) {
		this.this_onFocusIn(null);
	}
	,this_onFocusIn: function(event) {
		if(this.get_selectable() && this.get_type() == openfl_text_TextFieldType.INPUT && this.stage != null && this.stage.get_focus() == this) this.__startTextInput();
	}
	,this_onFocusOut: function(event) {
		this.__stopTextInput();
	}
	,this_onMouseDown: function(event) {
		if(!this.get_selectable()) return;
		this.__updateLayout();
		this.__caretIndex = this.__getPosition(this.get_mouseX(),this.get_mouseY());
		this.__selectionIndex = this.__caretIndex;
		this.__dirty = true;
		this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
	}
	,window_onKeyDown: function(key,modifier) {
		switch(key) {
		case 8:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) this.__selectionIndex = this.__caretIndex - 1;
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE,true));
			}
			break;
		case 127:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex < this.__textEngine.text.length) this.__selectionIndex = this.__caretIndex + 1;
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE,true));
			}
			break;
		case 1073741904:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				if(this.__caretIndex > 0) this.__caretIndex--;
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					if(this.__caretIndex > 0) this.__caretIndex--;
				} else this.__caretIndex = Std["int"](Math.min(this.__caretIndex,this.__selectionIndex));
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741903:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				if(this.__caretIndex < this.__textEngine.text.length) this.__caretIndex++;
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					if(this.__caretIndex < this.__textEngine.text.length) this.__caretIndex++;
				} else this.__caretIndex = Std["int"](Math.max(this.__caretIndex,this.__selectionIndex));
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 99:
			if(modifier == 64 || modifier == 128) lime_system_Clipboard.set_text(this.__textEngine.text.substring(this.__caretIndex,this.__selectionIndex));
			break;
		case 120:
			if(modifier == 64 || modifier == 128) {
				lime_system_Clipboard.set_text(this.__textEngine.text.substring(this.__caretIndex,this.__selectionIndex));
				if(this.__caretIndex != this.__selectionIndex) {
					this.replaceSelectedText("");
					this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE,true));
				}
			}
			break;
		case 118:
			if(modifier == 64 || modifier == 128) {
				var text = lime_system_Clipboard.get_text();
				if(text != null) this.replaceSelectedText(text); else this.replaceSelectedText("");
				this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE,true));
			}
			break;
		default:
		}
	}
	,window_onTextInput: function(value) {
		this.replaceSelectedText(value);
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE,true));
	}
	,__class__: openfl_text_TextField
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_type:"get_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_textColor:"set_textColor",get_textColor:"get_textColor",set_text:"set_text",get_text:"get_text",set_sharpness:"set_sharpness",get_sharpness:"get_sharpness",get_selectionEndIndex:"get_selectionEndIndex",get_selectionBeginIndex:"get_selectionBeginIndex",set_selectable:"set_selectable",get_selectable:"get_selectable",set_scrollV:"set_scrollV",get_scrollV:"get_scrollV",set_scrollH:"set_scrollH",get_scrollH:"get_scrollH",set_restrict:"set_restrict",get_restrict:"get_restrict",get_numLines:"get_numLines",set_multiline:"set_multiline",get_multiline:"get_multiline",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",get_length:"get_length",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_gridFitType:"set_gridFitType",get_gridFitType:"get_gridFitType",set_embedFonts:"set_embedFonts",get_embedFonts:"get_embedFonts",set_displayAsPassword:"set_displayAsPassword",get_displayAsPassword:"get_displayAsPassword",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretIndex:"get_caretIndex",get_bottomScrollV:"get_bottomScrollV",set_borderColor:"set_borderColor",get_borderColor:"get_borderColor",set_border:"set_border",get_border:"get_border",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_background:"set_background",get_background:"get_background",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_antiAliasType:"set_antiAliasType",get_antiAliasType:"get_antiAliasType"})
});
var openfl_text_TextFieldAutoSize = $hxClasses["openfl.text.TextFieldAutoSize"] = { __ename__ : true, __constructs__ : ["CENTER","LEFT","NONE","RIGHT"] };
openfl_text_TextFieldAutoSize.CENTER = ["CENTER",0];
openfl_text_TextFieldAutoSize.CENTER.toString = $estr;
openfl_text_TextFieldAutoSize.CENTER.__enum__ = openfl_text_TextFieldAutoSize;
openfl_text_TextFieldAutoSize.LEFT = ["LEFT",1];
openfl_text_TextFieldAutoSize.LEFT.toString = $estr;
openfl_text_TextFieldAutoSize.LEFT.__enum__ = openfl_text_TextFieldAutoSize;
openfl_text_TextFieldAutoSize.NONE = ["NONE",2];
openfl_text_TextFieldAutoSize.NONE.toString = $estr;
openfl_text_TextFieldAutoSize.NONE.__enum__ = openfl_text_TextFieldAutoSize;
openfl_text_TextFieldAutoSize.RIGHT = ["RIGHT",3];
openfl_text_TextFieldAutoSize.RIGHT.toString = $estr;
openfl_text_TextFieldAutoSize.RIGHT.__enum__ = openfl_text_TextFieldAutoSize;
var openfl_text_TextFieldType = $hxClasses["openfl.text.TextFieldType"] = { __ename__ : true, __constructs__ : ["DYNAMIC","INPUT"] };
openfl_text_TextFieldType.DYNAMIC = ["DYNAMIC",0];
openfl_text_TextFieldType.DYNAMIC.toString = $estr;
openfl_text_TextFieldType.DYNAMIC.__enum__ = openfl_text_TextFieldType;
openfl_text_TextFieldType.INPUT = ["INPUT",1];
openfl_text_TextFieldType.INPUT.toString = $estr;
openfl_text_TextFieldType.INPUT.__enum__ = openfl_text_TextFieldType;
var openfl_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl_text_TextFormat.prototype = {
	clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) this.font = format.font;
		if(format.size != null) this.size = format.size;
		if(format.color != null) this.color = format.color;
		if(format.bold != null) this.bold = format.bold;
		if(format.italic != null) this.italic = format.italic;
		if(format.underline != null) this.underline = format.underline;
		if(format.url != null) this.url = format.url;
		if(format.target != null) this.target = format.target;
		if(format.align != null) this.align = format.align;
		if(format.leftMargin != null) this.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.rightMargin = format.rightMargin;
		if(format.indent != null) this.indent = format.indent;
		if(format.leading != null) this.leading = format.leading;
		if(format.blockIndent != null) this.blockIndent = format.blockIndent;
		if(format.bullet != null) this.bullet = format.bullet;
		if(format.kerning != null) this.kerning = format.kerning;
		if(format.letterSpacing != null) this.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.tabStops = format.tabStops;
	}
	,__class__: openfl_text_TextFormat
};
var openfl_text_TextFormatAlign = $hxClasses["openfl.text.TextFormatAlign"] = { __ename__ : true, __constructs__ : ["LEFT","RIGHT","JUSTIFY","CENTER"] };
openfl_text_TextFormatAlign.LEFT = ["LEFT",0];
openfl_text_TextFormatAlign.LEFT.toString = $estr;
openfl_text_TextFormatAlign.LEFT.__enum__ = openfl_text_TextFormatAlign;
openfl_text_TextFormatAlign.RIGHT = ["RIGHT",1];
openfl_text_TextFormatAlign.RIGHT.toString = $estr;
openfl_text_TextFormatAlign.RIGHT.__enum__ = openfl_text_TextFormatAlign;
openfl_text_TextFormatAlign.JUSTIFY = ["JUSTIFY",2];
openfl_text_TextFormatAlign.JUSTIFY.toString = $estr;
openfl_text_TextFormatAlign.JUSTIFY.__enum__ = openfl_text_TextFormatAlign;
openfl_text_TextFormatAlign.CENTER = ["CENTER",3];
openfl_text_TextFormatAlign.CENTER.toString = $estr;
openfl_text_TextFormatAlign.CENTER.__enum__ = openfl_text_TextFormatAlign;
var openfl_text_TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl_text_TextLineMetrics;
openfl_text_TextLineMetrics.__name__ = ["openfl","text","TextLineMetrics"];
openfl_text_TextLineMetrics.prototype = {
	__class__: openfl_text_TextLineMetrics
};
var openfl_ui_GameInput = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_ui_GameInput.__instances.push(this);
};
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = ["openfl","ui","GameInput"];
openfl_ui_GameInput.getDeviceAt = function(index) {
	if(index >= 0 && index < openfl_ui_GameInput.__deviceList.length) return openfl_ui_GameInput.__deviceList[index];
	return null;
};
openfl_ui_GameInput.__getDevice = function(gamepad) {
	if(gamepad == null) return null;
	if(!(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null)) {
		var device = new openfl_ui_GameInputDevice(gamepad.get_guid(),gamepad.get_name());
		openfl_ui_GameInput.__deviceList.push(device);
		openfl_ui_GameInput.__devices.set(gamepad,device);
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
	}
	return openfl_ui_GameInput.__devices.h[gamepad.__id__];
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	if(device.enabled) {
		if(!device.__axis.h.hasOwnProperty(axis)) {
			var control1 = new openfl_ui_GameInputControl(device,"AXIS_" + (function($this) {
				var $r;
				switch(axis) {
				case 0:
					$r = "LEFT_X";
					break;
				case 1:
					$r = "LEFT_Y";
					break;
				case 2:
					$r = "RIGHT_X";
					break;
				case 3:
					$r = "RIGHT_Y";
					break;
				case 4:
					$r = "TRIGGER_LEFT";
					break;
				case 5:
					$r = "TRIGGER_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + axis + ")";
				}
				return $r;
			}(this)),-1,1);
			device.__axis.h[axis] = control1;
			device.__controls.push(control1);
		}
		var control = device.__axis.h[axis];
		control.value = value;
		control.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + (function($this) {
				var $r;
				switch(button) {
				case 0:
					$r = "A";
					break;
				case 1:
					$r = "B";
					break;
				case 2:
					$r = "X";
					break;
				case 3:
					$r = "Y";
					break;
				case 4:
					$r = "BACK";
					break;
				case 5:
					$r = "GUIDE";
					break;
				case 6:
					$r = "START";
					break;
				case 7:
					$r = "LEFT_STICK";
					break;
				case 8:
					$r = "RIGHT_STICK";
					break;
				case 9:
					$r = "LEFT_SHOULDER";
					break;
				case 10:
					$r = "RIGHT_SHOULDER";
					break;
				case 11:
					$r = "DPAD_UP";
					break;
				case 12:
					$r = "DPAD_DOWN";
					break;
				case 13:
					$r = "DPAD_LEFT";
					break;
				case 14:
					$r = "DPAD_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + button + ")";
				}
				return $r;
			}(this)),0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 1;
		control.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + (function($this) {
				var $r;
				switch(button) {
				case 0:
					$r = "A";
					break;
				case 1:
					$r = "B";
					break;
				case 2:
					$r = "X";
					break;
				case 3:
					$r = "Y";
					break;
				case 4:
					$r = "BACK";
					break;
				case 5:
					$r = "GUIDE";
					break;
				case 6:
					$r = "START";
					break;
				case 7:
					$r = "LEFT_STICK";
					break;
				case 8:
					$r = "RIGHT_STICK";
					break;
				case 9:
					$r = "LEFT_SHOULDER";
					break;
				case 10:
					$r = "RIGHT_SHOULDER";
					break;
				case 11:
					$r = "DPAD_UP";
					break;
				case 12:
					$r = "DPAD_DOWN";
					break;
				case 13:
					$r = "DPAD_LEFT";
					break;
				case 14:
					$r = "DPAD_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + button + ")";
				}
				return $r;
			}(this)),0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 0;
		control.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent(openfl_events_GameInputEvent.DEVICE_ADDED,null,null,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device != null) {
		if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null) {
			var x = openfl_ui_GameInput.__devices.h[gamepad.__id__];
			HxOverrides.remove(openfl_ui_GameInput.__deviceList,x);
			openfl_ui_GameInput.__devices.remove(gamepad);
		}
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent(openfl_events_GameInputEvent.DEVICE_REMOVED,null,null,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_ui_GameInput
});
var openfl_ui_GameInputControl = function(device,id,minValue,maxValue,value) {
	if(value == null) value = 0;
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = ["openfl","ui","GameInputControl"];
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = function(id,name) {
	this.__controls = [];
	this.__button = new haxe_ds_IntMap();
	this.__axis = new haxe_ds_IntMap();
	this.id = id;
	this.name = name;
	var control;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"AXIS_" + i,-1,1);
		this.__axis.h[i] = control;
		this.__controls.push(control);
	}
	var _g1 = 0;
	while(_g1 < 15) {
		var i1 = _g1++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i1,0,1);
		this.__button.h[i1] = control;
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = ["openfl","ui","GameInputDevice"];
openfl_ui_GameInputDevice.prototype = {
	getCachedSamples: function(data,append) {
		if(append == null) append = false;
		return 0;
	}
	,getControlAt: function(i) {
		if(i >= 0 && i < this.__controls.length) return this.__controls[i];
		return null;
	}
	,startCachingSamples: function(numSamples,controls) {
	}
	,stopCachingSamples: function() {
	}
	,get_numControls: function() {
		return this.__controls.length;
	}
	,__class__: openfl_ui_GameInputDevice
	,__properties__: {get_numControls:"get_numControls"}
};
var openfl_ui_Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl_ui_Keyboard.capsLock = null;
openfl_ui_Keyboard.numLock = null;
openfl_ui_Keyboard.isAccessible = function() {
	return false;
};
openfl_ui_Keyboard.__convertKeyCode = function(key) {
	switch(key) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 49;
	case 34:
		return 222;
	case 35:
		return 51;
	case 36:
		return 52;
	case 37:
		return 53;
	case 38:
		return 55;
	case 39:
		return 222;
	case 40:
		return 57;
	case 41:
		return 48;
	case 42:
		return 56;
	case 44:
		return 188;
	case 45:
		return 189;
	case 46:
		return 190;
	case 47:
		return 191;
	case 48:
		return 48;
	case 49:
		return 49;
	case 50:
		return 50;
	case 51:
		return 51;
	case 52:
		return 52;
	case 53:
		return 53;
	case 54:
		return 54;
	case 55:
		return 55;
	case 56:
		return 56;
	case 57:
		return 57;
	case 58:
		return 186;
	case 59:
		return 186;
	case 60:
		return 60;
	case 61:
		return 187;
	case 62:
		return 190;
	case 63:
		return 191;
	case 64:
		return 50;
	case 91:
		return 219;
	case 92:
		return 220;
	case 93:
		return 221;
	case 94:
		return 54;
	case 95:
		return 189;
	case 96:
		return 192;
	case 97:
		return 65;
	case 98:
		return 66;
	case 99:
		return 67;
	case 100:
		return 68;
	case 101:
		return 69;
	case 102:
		return 70;
	case 103:
		return 71;
	case 104:
		return 72;
	case 105:
		return 73;
	case 106:
		return 74;
	case 107:
		return 75;
	case 108:
		return 76;
	case 109:
		return 77;
	case 110:
		return 78;
	case 111:
		return 79;
	case 112:
		return 80;
	case 113:
		return 81;
	case 114:
		return 82;
	case 115:
		return 83;
	case 116:
		return 84;
	case 117:
		return 85;
	case 118:
		return 86;
	case 119:
		return 87;
	case 120:
		return 88;
	case 121:
		return 89;
	case 122:
		return 90;
	case 127:
		return 46;
	case 1073741881:
		return 20;
	case 1073741882:
		return 112;
	case 1073741883:
		return 113;
	case 1073741884:
		return 114;
	case 1073741885:
		return 115;
	case 1073741886:
		return 116;
	case 1073741887:
		return 117;
	case 1073741888:
		return 118;
	case 1073741889:
		return 119;
	case 1073741890:
		return 120;
	case 1073741891:
		return 121;
	case 1073741892:
		return 122;
	case 1073741893:
		return 123;
	case 1073741894:
		return 301;
	case 1073741895:
		return 145;
	case 1073741896:
		return 19;
	case 1073741897:
		return 45;
	case 1073741898:
		return 36;
	case 1073741899:
		return 33;
	case 1073741901:
		return 35;
	case 1073741902:
		return 34;
	case 1073741903:
		return 39;
	case 1073741904:
		return 37;
	case 1073741905:
		return 40;
	case 1073741906:
		return 38;
	case 1073741907:
		return 144;
	case 1073741908:
		return 111;
	case 1073741909:
		return 106;
	case 1073741910:
		return 109;
	case 1073741911:
		return 107;
	case 1073741912:
		return 108;
	case 1073741913:
		return 97;
	case 1073741914:
		return 98;
	case 1073741915:
		return 99;
	case 1073741916:
		return 100;
	case 1073741917:
		return 101;
	case 1073741918:
		return 102;
	case 1073741919:
		return 103;
	case 1073741920:
		return 104;
	case 1073741921:
		return 105;
	case 1073741922:
		return 96;
	case 1073741923:
		return 110;
	case 1073741925:
		return 302;
	case 1073741928:
		return 124;
	case 1073741929:
		return 125;
	case 1073741930:
		return 126;
	case 1073741982:
		return 13;
	case 1073742044:
		return 110;
	case 1073742048:
		return 17;
	case 1073742049:
		return 16;
	case 1073742050:
		return 18;
	case 1073742051:
		return 15;
	case 1073742052:
		return 17;
	case 1073742053:
		return 16;
	case 1073742054:
		return 18;
	case 1073742055:
		return 15;
	default:
		return key;
	}
};
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) shift = false;
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) return key - 48 + 48;
		if(key >= 65 && key <= 90) return key - 65 + 97;
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) return key - 65 + 65;
	}
	if(key >= 96 && key <= 105) return key - 96 + 48;
	switch(key) {
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	case 46:
		return 127;
	case 13:
		return 13;
	case 8:
		return 8;
	}
	return 0;
};
openfl_ui_Keyboard.__getKeyLocation = function(key) {
	switch(key) {
	case 1073742048:case 1073742049:case 1073742050:case 1073742051:
		return 1;
	case 1073742052:case 1073742053:case 1073742054:case 1073742055:
		return 2;
	case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
		return 3;
	default:
		return 0;
	}
};
var openfl_utils__$ByteArray_ByteArray_$Impl_$ = {};
$hxClasses["openfl.utils._ByteArray.ByteArray_Impl_"] = openfl_utils__$ByteArray_ByteArray_$Impl_$;
openfl_utils__$ByteArray_ByteArray_$Impl_$.__name__ = ["openfl","utils","_ByteArray","ByteArray_Impl_"];
openfl_utils__$ByteArray_ByteArray_$Impl_$.__properties__ = {set_length:"set_length",get_length:"get_length"}
openfl_utils__$ByteArray_ByteArray_$Impl_$.defaultObjectEncoding = null;
openfl_utils__$ByteArray_ByteArray_$Impl_$._new = function(length) {
	if(length == null) length = 0;
	return new openfl_utils_ByteArrayData(length);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get = function(this1,index) {
	return this1.b[index];
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set = function(this1,index,value) {
	this1.b[index] = value & 255;
	return value;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer = function(buffer) {
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(buffer));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes = function(bytes) {
	if(js_Boot.__instanceof(bytes,openfl_utils_ByteArrayData)) return bytes; else return openfl_utils_ByteArrayData.fromBytes(bytes);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytesData = function(bytesData) {
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(bytesData));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes = function(byteArray) {
	return byteArray;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytesData = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toLimeBytes = function(byteArray) {
	return new lime_utils_Bytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(byteArray),byteArray.b.bufferValue);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length = function(this1) {
	return this1.__length;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length = function(this1,value) {
	if(value > 0) this1.__resize(value);
	this1.__length = value;
	return value;
};
var openfl_utils_IDataOutput = function() { };
$hxClasses["openfl.utils.IDataOutput"] = openfl_utils_IDataOutput;
openfl_utils_IDataOutput.__name__ = ["openfl","utils","IDataOutput"];
openfl_utils_IDataOutput.prototype = {
	__class__: openfl_utils_IDataOutput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian"}
};
var openfl_utils_IDataInput = function() { };
$hxClasses["openfl.utils.IDataInput"] = openfl_utils_IDataInput;
openfl_utils_IDataInput.__name__ = ["openfl","utils","IDataInput"];
openfl_utils_IDataInput.prototype = {
	__class__: openfl_utils_IDataInput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
var openfl_utils_ByteArrayData = function(length) {
	if(length == null) length = 0;
	var bytes = haxe_io_Bytes.alloc(length);
	haxe_io_Bytes.call(this,bytes.b.buffer);
	this.__length = length;
	this.__endian = "bigEndian";
	this.position = 0;
};
$hxClasses["openfl.utils.ByteArrayData"] = openfl_utils_ByteArrayData;
openfl_utils_ByteArrayData.__name__ = ["openfl","utils","ByteArrayData"];
openfl_utils_ByteArrayData.__interfaces__ = [openfl_utils_IDataOutput,openfl_utils_IDataInput];
openfl_utils_ByteArrayData.fromBytes = function(bytes) {
	var result = new openfl_utils_ByteArrayData();
	result.__fromBytes(bytes);
	return result;
};
openfl_utils_ByteArrayData.__super__ = haxe_io_Bytes;
openfl_utils_ByteArrayData.prototype = $extend(haxe_io_Bytes.prototype,{
	clear: function() {
		this.__length = 0;
		this.position = 0;
	}
	,compress: function(algorithm) {
		this.__length = this.length;
		this.position = this.__length;
	}
	,deflate: function() {
		this.compress(openfl_utils_CompressionAlgorithm.DEFLATE);
	}
	,inflate: function() {
		this.uncompress(openfl_utils_CompressionAlgorithm.DEFLATE);
	}
	,readBoolean: function() {
		if(this.position < this.length) return this.get(this.position++) != 0; else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
			return false;
		}
	}
	,readByte: function() {
		var value = this.readUnsignedByte();
		if((value & 128) != 0) return value - 256; else return value;
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(length == 0) length = this.__length - this.position;
		if(this.position + length > this.__length) throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		if(bytes.__length < offset + length) bytes.__resize(offset + length);
		bytes.blit(offset,this,this.position,length);
		this.position += length;
	}
	,readDouble: function() {
		if(this.position + 8 > this.__length) throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		this.position += 8;
		return this.getDouble(this.position - 8);
	}
	,readFloat: function() {
		if(this.position + 4 > this.__length) throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		this.position += 4;
		return this.getFloat(this.position - 4);
	}
	,readInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == "littleEndian") return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1; else return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var value;
		if(this.__endian == "littleEndian") value = ch2 << 8 | ch1; else value = ch1 << 8 | ch2;
		if((value & 32768) != 0) return value - 65536; else return value;
	}
	,readUnsignedByte: function() {
		if(this.position < this.__length) return this.get(this.position++); else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
			return 0;
		}
	}
	,readUnsignedInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == "littleEndian") return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1; else return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
	}
	,readUnsignedShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		if(this.__endian == "littleEndian") return (ch2 << 8) + ch1; else return ch1 << 8 | ch2;
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(length) {
		if(this.position + length > this.__length) throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		this.position += length;
		return this.getString(this.position - length,length);
	}
	,uncompress: function(algorithm) {
		this.__length = this.length;
		this.position = 0;
	}
	,writeBoolean: function(value) {
		this.writeByte(value?1:0);
	}
	,writeByte: function(value) {
		this.__resize(this.position + 1);
		this.set(this.position++,value & 255);
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) == 0) return;
		if(length == 0) {
			var a = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes);
			length = a - offset;
		}
		this.__resize(this.position + length);
		this.blit(this.position,bytes,offset,length);
		this.position = this.position + length;
	}
	,writeDouble: function(value) {
		this.__resize(this.position + 8);
		this.setDouble(this.position,value);
		this.position += 8;
	}
	,writeFloat: function(value) {
		this.__resize(this.position + 4);
		this.setFloat(this.position,value);
		this.position += 4;
	}
	,writeInt: function(value) {
		this.__resize(this.position + 4);
		if(this.__endian == "littleEndian") {
			this.set(this.position++,value);
			this.set(this.position++,value >> 8);
			this.set(this.position++,value >> 16);
			this.set(this.position++,value >> 24);
		} else {
			this.set(this.position++,value >> 24);
			this.set(this.position++,value >> 16);
			this.set(this.position++,value >> 8);
			this.set(this.position++,value);
		}
	}
	,writeMultiByte: function(value,charSet) {
		this.writeUTFBytes(value);
	}
	,writeShort: function(value) {
		this.__resize(this.position + 2);
		if(this.__endian == "littleEndian") {
			this.set(this.position++,value);
			this.set(this.position++,value >> 8);
		} else {
			this.set(this.position++,value >> 8);
			this.set(this.position++,value);
		}
	}
	,writeUnsignedInt: function(value) {
		this.writeInt(value);
	}
	,writeUTF: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeShort(bytes.length);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
	}
	,writeUTFBytes: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(haxe_io_Bytes.ofString(value)));
	}
	,__fromBytes: function(bytes) {
		this.b = bytes.b;
		this.length = bytes.length;
		this.data = bytes.data;
		this.__length = bytes.length;
	}
	,__resize: function(size) {
		if(size > this.length) {
			var bytes = haxe_io_Bytes.alloc((size + 1) * 3 >> 1);
			bytes.blit(0,this,0,this.length);
			this.b = bytes.b;
			this.length = bytes.length;
			this.data = bytes.data;
		}
		if(this.__length < size) this.__length = size;
	}
	,__setData: function(bytes) {
		this.b = bytes.b;
		this.length = bytes.length;
		this.data = bytes.data;
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		return this.__endian;
	}
	,set_endian: function(value) {
		return this.__endian = value;
	}
	,__class__: openfl_utils_ByteArrayData
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
});
var openfl_utils_CompressionAlgorithm = $hxClasses["openfl.utils.CompressionAlgorithm"] = { __ename__ : true, __constructs__ : ["DEFLATE","ZLIB","LZMA","GZIP"] };
openfl_utils_CompressionAlgorithm.DEFLATE = ["DEFLATE",0];
openfl_utils_CompressionAlgorithm.DEFLATE.toString = $estr;
openfl_utils_CompressionAlgorithm.DEFLATE.__enum__ = openfl_utils_CompressionAlgorithm;
openfl_utils_CompressionAlgorithm.ZLIB = ["ZLIB",1];
openfl_utils_CompressionAlgorithm.ZLIB.toString = $estr;
openfl_utils_CompressionAlgorithm.ZLIB.__enum__ = openfl_utils_CompressionAlgorithm;
openfl_utils_CompressionAlgorithm.LZMA = ["LZMA",2];
openfl_utils_CompressionAlgorithm.LZMA.toString = $estr;
openfl_utils_CompressionAlgorithm.LZMA.__enum__ = openfl_utils_CompressionAlgorithm;
openfl_utils_CompressionAlgorithm.GZIP = ["GZIP",3];
openfl_utils_CompressionAlgorithm.GZIP.toString = $estr;
openfl_utils_CompressionAlgorithm.GZIP.__enum__ = openfl_utils_CompressionAlgorithm;
var openfl_utils__$Object_Object_$Impl_$ = {};
$hxClasses["openfl.utils._Object.Object_Impl_"] = openfl_utils__$Object_Object_$Impl_$;
openfl_utils__$Object_Object_$Impl_$.__name__ = ["openfl","utils","_Object","Object_Impl_"];
openfl_utils__$Object_Object_$Impl_$._new = function() {
	return { };
};
openfl_utils__$Object_Object_$Impl_$.hasOwnProperty = function(this1,name) {
	return this1 != null && Object.prototype.hasOwnProperty.call(this1,name);
};
openfl_utils__$Object_Object_$Impl_$.isPrototypeOf = function(this1,theClass) {
	var c;
	if(this1 == null) c = null; else c = js_Boot.getClass(this1);
	while(c != null) {
		if(c == theClass) return true;
		c = Type.getSuperClass(c);
	}
	return false;
};
openfl_utils__$Object_Object_$Impl_$.iterator = function(this1) {
	var fields = Reflect.fields(this1);
	if(fields == null) fields = [];
	return HxOverrides.iter(fields);
};
openfl_utils__$Object_Object_$Impl_$.propertyIsEnumerable = function(this1,name) {
	return this1 != null && Object.prototype.hasOwnProperty.call(this1,name) && Std["is"](Reflect.field(this1,name),haxe_lang_Iterable);
};
openfl_utils__$Object_Object_$Impl_$.toLocaleString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.toString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.valueOf = function(this1) {
	return this1;
};
openfl_utils__$Object_Object_$Impl_$.__get = function(this1,key) {
	return Reflect.field(this1,key);
};
openfl_utils__$Object_Object_$Impl_$.__set = function(this1,key,value) {
	this1[key] = value;
	return value;
};
var haxe_lang_Iterator = function() { };
$hxClasses["haxe.lang.Iterator"] = haxe_lang_Iterator;
haxe_lang_Iterator.__name__ = ["haxe","lang","Iterator"];
haxe_lang_Iterator.prototype = {
	__class__: haxe_lang_Iterator
};
var haxe_lang_Iterable = function() { };
$hxClasses["haxe.lang.Iterable"] = haxe_lang_Iterable;
haxe_lang_Iterable.__name__ = ["haxe","lang","Iterable"];
haxe_lang_Iterable.prototype = {
	__class__: haxe_lang_Iterable
};
var openfl_utils_Timer = function(delay,repeatCount) {
	if(repeatCount == null) repeatCount = 0;
	if(isNaN(delay) || delay < 0) throw new js__$Boot_HaxeError(new openfl_errors_Error("The delay specified is negative or not a finite number"));
	openfl_events_EventDispatcher.call(this);
	this.__delay = delay;
	this.set_repeatCount(repeatCount);
	this.running = false;
	this.currentCount = 0;
};
$hxClasses["openfl.utils.Timer"] = openfl_utils_Timer;
openfl_utils_Timer.__name__ = ["openfl","utils","Timer"];
openfl_utils_Timer.__super__ = openfl_events_EventDispatcher;
openfl_utils_Timer.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	reset: function() {
		if(this.running) this.stop();
		this.currentCount = 0;
	}
	,start: function() {
		if(!this.running) {
			this.running = true;
			this.__timerID = window.setInterval($bind(this,this.timer_onTimer),this.__delay | 0);
		}
	}
	,stop: function() {
		this.running = false;
		if(this.__timerID != null) {
			window.clearInterval(this.__timerID);
			this.__timerID = null;
		}
	}
	,get_delay: function() {
		return this.__delay;
	}
	,set_delay: function(value) {
		this.__delay = value;
		if(this.running) {
			this.stop();
			this.start();
		}
		return this.__delay;
	}
	,set_repeatCount: function(v) {
		if(this.running && v != 0 && v <= this.currentCount) this.stop();
		this.repeatCount = v;
		return v;
	}
	,timer_onTimer: function() {
		this.currentCount++;
		if(this.repeatCount > 0 && this.currentCount >= this.repeatCount) {
			this.stop();
			this.dispatchEvent(new openfl_events_TimerEvent(openfl_events_TimerEvent.TIMER));
			this.dispatchEvent(new openfl_events_TimerEvent(openfl_events_TimerEvent.TIMER_COMPLETE));
		} else this.dispatchEvent(new openfl_events_TimerEvent(openfl_events_TimerEvent.TIMER));
	}
	,__class__: openfl_utils_Timer
	,__properties__: {set_repeatCount:"set_repeatCount",set_delay:"set_delay",get_delay:"get_delay"}
});
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
if(Array.prototype.indexOf) HxOverrides.indexOf = function(a,o,i) {
	return Array.prototype.indexOf.call(a,o,i);
};
$hxClasses.Math = Math;
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
$hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
haxe_Resource.content = [];
var __map_reserved = {}
var ArrayBuffer = (Function("return typeof ArrayBuffer != 'undefined' ? ArrayBuffer : null"))() || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
var DataView = (Function("return typeof DataView != 'undefined' ? DataView : null"))() || js_html_compat_DataView;
var Uint8Array = (Function("return typeof Uint8Array != 'undefined' ? Uint8Array : null"))() || js_html_compat_Uint8Array._new;
var this1;
this1 = new Uint32Array(256);
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	var val = Math.ceil(i * 257.003921568627447);
	lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[i] = val;
}
var this2;
this2 = new Uint8Array(510);
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i2] = 255;
}
lime_system_CFFI.available = false;
lime_system_CFFI.enabled = false;
if(window.createjs != null) createjs.Sound.alternateExtensions = ["ogg","mp3","wav"];
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__worldRenderDirty = 0;
openfl_display_DisplayObject.__worldTransformDirty = 0;
openfl_display_DisplayObject.__cacheAsBitmapMode = false;
CollectionTagGeneral.tagObject = null;
openfl_text_Font.__registeredFonts = [];
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var x = new haxe__$Int64__$_$_$Int64(0,0);
	$r = x;
	return $r;
}(this));
haxe_ui_toolkit_core_StyleableDisplayObject.__meta__ = { fields : { baseStyle : { clonable : null}, style : { clonable : null}}};
haxe_ui_toolkit_controls_Button.STATE_NORMAL = "normal";
haxe_ui_toolkit_controls_Button.STATE_OVER = "over";
haxe_ui_toolkit_controls_Button.STATE_DOWN = "down";
haxe_ui_toolkit_controls_Button.STATE_DISABLED = "disabled";
haxe_ui_richtext_RTFToolButton.__meta__ = { obj : { exclude : null}};
haxe_ui_toolkit_containers_CalendarView.MONTH_NAMES = ["January","Febuary","March","April","May","June","July","August","September","October","November","December"];
haxe_ui_toolkit_containers_TableViewRow.STATE_NORMAL = "normal";
haxe_ui_toolkit_containers_TableViewRow.STATE_OVER = "over";
haxe_ui_toolkit_containers_TableViewRow.STATE_SELECTED = "selected";
haxe_ui_toolkit_controls_CheckBox.STATE_NORMAL = "normal";
haxe_ui_toolkit_controls_CheckBox.STATE_OVER = "over";
haxe_ui_toolkit_controls_CheckBox.STATE_DOWN = "down";
haxe_ui_toolkit_controls_Link.STATE_NORMAL = "normal";
haxe_ui_toolkit_controls_Link.STATE_OVER = "over";
haxe_ui_toolkit_controls_Link.STATE_DOWN = "down";
haxe_ui_toolkit_controls_OptionBox.STATE_NORMAL = "normal";
haxe_ui_toolkit_controls_OptionBox.STATE_OVER = "over";
haxe_ui_toolkit_controls_OptionBox.STATE_DOWN = "down";
haxe_ui_toolkit_core_Macros.componentClasses = new haxe_ds_StringMap();
haxe_ui_toolkit_core_Macros.dataSourceClasses = new haxe_ds_StringMap();
haxe_ui_toolkit_core_Macros.themeResources = new haxe_ds_StringMap();
haxe_ui_toolkit_core_PopupButton.OK = 1;
haxe_ui_toolkit_core_PopupButton.YES = 16;
haxe_ui_toolkit_core_PopupButton.NO = 256;
haxe_ui_toolkit_core_PopupButton.CANCEL = 4096;
haxe_ui_toolkit_core_PopupButton.CONFIRM = 65536;
haxe_ui_toolkit_core_PopupButton.CLOSE = 1048576;
haxe_ui_toolkit_core_PopupButton.CUSTOM = 16777216;
haxe_ui_toolkit_core_Dismiss.ESCAPE = 1;
haxe_ui_toolkit_core_Dismiss.ENTER = 16;
haxe_ui_toolkit_core_Dismiss.ANYKEY = 256;
haxe_ui_toolkit_core_Dismiss.CLICK_OUTSIDE = 4096;
haxe_ui_toolkit_core_Dismiss.CLICK_INSIDE = 65536;
haxe_ui_toolkit_core_Dismiss.CLICK = 69632;
haxe_ui_toolkit_core__$ToolTipManager_ToolTipPosition_$Impl_$.Top = "top";
haxe_ui_toolkit_core__$ToolTipManager_ToolTipPosition_$Impl_$.Bottom = "bottom";
haxe_ui_toolkit_core__$ToolTipManager_ToolTipPosition_$Impl_$.Left = "left";
haxe_ui_toolkit_core__$ToolTipManager_ToolTipPosition_$Impl_$.Right = "right";
haxe_ui_toolkit_core__$ToolTipManager_ToolTipRelativeTo_$Impl_$.Cursor = "cursor";
haxe_ui_toolkit_core__$ToolTipManager_ToolTipRelativeTo_$Impl_$.Target = "target";
haxe_ui_toolkit_core_Toolkit.DPI_THRESHOLD = 160;
haxe_ui_toolkit_core_Toolkit._versionInfo = new haxe_ds_StringMap();
haxe_ui_toolkit_core_Toolkit.useDefaultTheme = true;
haxe_ui_toolkit_core_Toolkit.autoScale = true;
haxe_ui_toolkit_core_Toolkit._defaultTransition = "slide";
haxe_ui_toolkit_core_Toolkit._defaultTransitionTime = .3;
haxe_ui_toolkit_core_Toolkit._scaleFactor = 0;
haxe_ui_toolkit_core_base_HorizontalAlign.LEFT = "left";
haxe_ui_toolkit_core_base_HorizontalAlign.RIGHT = "right";
haxe_ui_toolkit_core_base_HorizontalAlign.CENTER = "center";
haxe_ui_toolkit_core_base_State.NORMAL = "normal";
haxe_ui_toolkit_core_base_State.OVER = "over";
haxe_ui_toolkit_core_base_State.DOWN = "down";
haxe_ui_toolkit_core_base_State.DISABLED = "disabled";
haxe_ui_toolkit_core_base_VerticalAlign.TOP = "top";
haxe_ui_toolkit_core_base_VerticalAlign.BOTTOM = "bottom";
haxe_ui_toolkit_core_base_VerticalAlign.CENTER = "center";
haxe_ui_toolkit_core_interfaces_Direction.HORIZONTAL = "horizontal";
haxe_ui_toolkit_core_interfaces_Direction.VERTICAL = "vertical";
haxe_ui_toolkit_core_interfaces_InvalidationFlag.LAYOUT = 1;
haxe_ui_toolkit_core_interfaces_InvalidationFlag.DISPLAY = 16;
haxe_ui_toolkit_core_interfaces_InvalidationFlag.SIZE = 256;
haxe_ui_toolkit_core_interfaces_InvalidationFlag.STATE = 4096;
haxe_ui_toolkit_core_interfaces_InvalidationFlag.DATA = 65536;
haxe_ui_toolkit_core_interfaces_InvalidationFlag.STYLE = 1048576;
haxe_ui_toolkit_core_interfaces_InvalidationFlag.ALL = 1118481;
haxe_ui_toolkit_core_renderers_ItemRenderer.STATE_NORMAL = "normal";
haxe_ui_toolkit_core_renderers_ItemRenderer.STATE_OVER = "over";
haxe_ui_toolkit_core_renderers_ItemRenderer.STATE_SELECTED = "selected";
haxe_ui_toolkit_core_renderers_ItemRenderer.STATE_DISABLED = "disabled";
haxe_ui_toolkit_data_DataSource.SAFE_NUM = 2147483647;
haxe_ui_toolkit_data_DataSource.clsId = 0;
openfl_events_Event.ACTIVATE = "activate";
openfl_events_Event.ADDED = "added";
openfl_events_Event.ADDED_TO_STAGE = "addedToStage";
openfl_events_Event.CANCEL = "cancel";
openfl_events_Event.CHANGE = "change";
openfl_events_Event.CLOSE = "close";
openfl_events_Event.COMPLETE = "complete";
openfl_events_Event.CONNECT = "connect";
openfl_events_Event.CONTEXT3D_CREATE = "context3DCreate";
openfl_events_Event.DEACTIVATE = "deactivate";
openfl_events_Event.ENTER_FRAME = "enterFrame";
openfl_events_Event.ID3 = "id3";
openfl_events_Event.INIT = "init";
openfl_events_Event.MOUSE_LEAVE = "mouseLeave";
openfl_events_Event.OPEN = "open";
openfl_events_Event.REMOVED = "removed";
openfl_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl_events_Event.RENDER = "render";
openfl_events_Event.RESIZE = "resize";
openfl_events_Event.SCROLL = "scroll";
openfl_events_Event.SELECT = "select";
openfl_events_Event.SOUND_COMPLETE = "soundComplete";
openfl_events_Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl_events_Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl_events_Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl_events_Event.UNLOAD = "unload";
haxe_ui_toolkit_events_MenuEvent.SELECT = openfl_events_Event.SELECT;
haxe_ui_toolkit_events_MenuEvent.OPEN = openfl_events_Event.OPEN;
haxe_ui_toolkit_events_UIEvent.PREFIX = "haxeui_";
haxe_ui_toolkit_events_UIEvent.INIT = "haxeui_" + "init";
haxe_ui_toolkit_events_UIEvent.RESIZE = "haxeui_" + "resize";
haxe_ui_toolkit_events_UIEvent.READY = "haxeui_" + "ready";
haxe_ui_toolkit_events_UIEvent.CLICK = "haxeui_" + "click";
haxe_ui_toolkit_events_UIEvent.MOUSE_DOWN = "haxeui_" + "mouseDown";
haxe_ui_toolkit_events_UIEvent.MOUSE_UP = "haxeui_" + "mouseUp";
haxe_ui_toolkit_events_UIEvent.MOUSE_OVER = "haxeui_" + "mouseOver";
haxe_ui_toolkit_events_UIEvent.MOUSE_OUT = "haxeui_" + "mouseOut";
haxe_ui_toolkit_events_UIEvent.MOUSE_MOVE = "haxeui_" + "mouseMove";
haxe_ui_toolkit_events_UIEvent.DOUBLE_CLICK = "haxeui_" + "doubleClick";
haxe_ui_toolkit_events_UIEvent.ROLL_OVER = "haxeui_" + "rollOver";
haxe_ui_toolkit_events_UIEvent.ROLL_OUT = "haxeui_" + "rollOut";
haxe_ui_toolkit_events_UIEvent.CHANGE = "haxeui_" + "change";
haxe_ui_toolkit_events_UIEvent.SCROLL = "haxeui_" + "scroll";
haxe_ui_toolkit_events_UIEvent.SCROLL_START = "haxeui_" + "scrollStart";
haxe_ui_toolkit_events_UIEvent.SCROLL_STOP = "haxeui_" + "scrollStop";
haxe_ui_toolkit_events_UIEvent.REFRESH = "haxeui_" + "refresh";
haxe_ui_toolkit_events_UIEvent.ADDED = "haxeui_" + "added";
haxe_ui_toolkit_events_UIEvent.ADDED_TO_STAGE = "haxeui_" + "addedToStage";
haxe_ui_toolkit_events_UIEvent.REMOVED = "haxeui_" + "removed";
haxe_ui_toolkit_events_UIEvent.REMOVED_FROM_STAGE = "haxeui_" + "removedFromStage";
haxe_ui_toolkit_events_UIEvent.ACTIVATE = "haxeui_" + "activate";
haxe_ui_toolkit_events_UIEvent.DEACTIVATE = "haxeui_" + "deactivate";
haxe_ui_toolkit_events_UIEvent.GLYPH_CLICK = "haxeui_" + "glyphClick";
haxe_ui_toolkit_events_UIEvent.COMPONENT_EVENT = "haxeui_" + "componentEvent";
haxe_ui_toolkit_events_UIEvent.MENU_SELECT = "haxeui_" + "menuSelect";
haxe_ui_toolkit_events_UIEvent.MENU_OPEN = "haxeui_" + "menuOpen";
haxe_ui_toolkit_text_TextDisplay.X_PADDING = 0;
haxe_ui_toolkit_text_TextDisplay.Y_PADDING = 2;
haxe_ui_toolkit_themes_Theme.assets = new haxe_ds_StringMap();
haxe_ui_toolkit_util_FilterParser.filterParamDefaults = { blur : ["4","4","1"], dropShadow : ["4","45","0","1","4","4","1","1","false","false","false"], glow : ["16711680","1","6","6","2","1","false","false"]};
haxe_ui_toolkit_util_Identifier._objectCount = new haxe_ds_StringMap();
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved.lt != null) h.setReserved("lt","<"); else h.h["lt"] = "<";
	if(__map_reserved.gt != null) h.setReserved("gt",">"); else h.h["gt"] = ">";
	if(__map_reserved.amp != null) h.setReserved("amp","&"); else h.h["amp"] = "&";
	if(__map_reserved.quot != null) h.setReserved("quot","\""); else h.h["quot"] = "\"";
	if(__map_reserved.apos != null) h.setReserved("apos","'"); else h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
hscript_Parser.p1 = 0;
hscript_Parser.readPos = 0;
hscript_Parser.tokenMin = 0;
hscript_Parser.tokenMax = 0;
js_Boot.__toStr = {}.toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
lime_Assets.cache = new lime_AssetCache();
lime_Assets.libraries = new haxe_ds_StringMap();
lime_Assets.onChange = new lime_app_Event_$Void_$Void();
lime_Assets.initialized = false;
lime__$backend_html5_HTML5Window.windowID = 0;
lime_app_Preloader.images = new haxe_ds_StringMap();
lime_app_Preloader.loaders = new haxe_ds_StringMap();
lime_audio_openal_AL.NONE = 0;
lime_audio_openal_AL.FALSE = 0;
lime_audio_openal_AL.TRUE = 1;
lime_audio_openal_AL.SOURCE_RELATIVE = 514;
lime_audio_openal_AL.CONE_INNER_ANGLE = 4097;
lime_audio_openal_AL.CONE_OUTER_ANGLE = 4098;
lime_audio_openal_AL.PITCH = 4099;
lime_audio_openal_AL.POSITION = 4100;
lime_audio_openal_AL.DIRECTION = 4101;
lime_audio_openal_AL.VELOCITY = 4102;
lime_audio_openal_AL.LOOPING = 4103;
lime_audio_openal_AL.BUFFER = 4105;
lime_audio_openal_AL.GAIN = 4106;
lime_audio_openal_AL.MIN_GAIN = 4109;
lime_audio_openal_AL.MAX_GAIN = 4110;
lime_audio_openal_AL.ORIENTATION = 4111;
lime_audio_openal_AL.SOURCE_STATE = 4112;
lime_audio_openal_AL.INITIAL = 4113;
lime_audio_openal_AL.PLAYING = 4114;
lime_audio_openal_AL.PAUSED = 4115;
lime_audio_openal_AL.STOPPED = 4116;
lime_audio_openal_AL.BUFFERS_QUEUED = 4117;
lime_audio_openal_AL.BUFFERS_PROCESSED = 4118;
lime_audio_openal_AL.REFERENCE_DISTANCE = 4128;
lime_audio_openal_AL.ROLLOFF_FACTOR = 4129;
lime_audio_openal_AL.CONE_OUTER_GAIN = 4130;
lime_audio_openal_AL.MAX_DISTANCE = 4131;
lime_audio_openal_AL.SEC_OFFSET = 4132;
lime_audio_openal_AL.SAMPLE_OFFSET = 4133;
lime_audio_openal_AL.BYTE_OFFSET = 4134;
lime_audio_openal_AL.SOURCE_TYPE = 4135;
lime_audio_openal_AL.STATIC = 4136;
lime_audio_openal_AL.STREAMING = 4137;
lime_audio_openal_AL.UNDETERMINED = 4144;
lime_audio_openal_AL.FORMAT_MONO8 = 4352;
lime_audio_openal_AL.FORMAT_MONO16 = 4353;
lime_audio_openal_AL.FORMAT_STEREO8 = 4354;
lime_audio_openal_AL.FORMAT_STEREO16 = 4355;
lime_audio_openal_AL.FREQUENCY = 8193;
lime_audio_openal_AL.BITS = 8194;
lime_audio_openal_AL.CHANNELS = 8195;
lime_audio_openal_AL.SIZE = 8196;
lime_audio_openal_AL.NO_ERROR = 0;
lime_audio_openal_AL.INVALID_NAME = 40961;
lime_audio_openal_AL.INVALID_ENUM = 40962;
lime_audio_openal_AL.INVALID_VALUE = 40963;
lime_audio_openal_AL.INVALID_OPERATION = 40964;
lime_audio_openal_AL.OUT_OF_MEMORY = 40965;
lime_audio_openal_AL.VENDOR = 45057;
lime_audio_openal_AL.VERSION = 45058;
lime_audio_openal_AL.RENDERER = 45059;
lime_audio_openal_AL.EXTENSIONS = 45060;
lime_audio_openal_AL.DOPPLER_FACTOR = 49152;
lime_audio_openal_AL.SPEED_OF_SOUND = 49155;
lime_audio_openal_AL.DOPPLER_VELOCITY = 49153;
lime_audio_openal_AL.DISTANCE_MODEL = 53248;
lime_audio_openal_AL.INVERSE_DISTANCE = 53249;
lime_audio_openal_AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime_audio_openal_AL.LINEAR_DISTANCE = 53251;
lime_audio_openal_AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime_audio_openal_AL.EXPONENT_DISTANCE = 53253;
lime_audio_openal_AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime_audio_openal_ALC.FALSE = 0;
lime_audio_openal_ALC.TRUE = 1;
lime_audio_openal_ALC.FREQUENCY = 4103;
lime_audio_openal_ALC.REFRESH = 4104;
lime_audio_openal_ALC.SYNC = 4105;
lime_audio_openal_ALC.MONO_SOURCES = 4112;
lime_audio_openal_ALC.STEREO_SOURCES = 4113;
lime_audio_openal_ALC.NO_ERROR = 0;
lime_audio_openal_ALC.INVALID_DEVICE = 40961;
lime_audio_openal_ALC.INVALID_CONTEXT = 40962;
lime_audio_openal_ALC.INVALID_ENUM = 40963;
lime_audio_openal_ALC.INVALID_VALUE = 40964;
lime_audio_openal_ALC.OUT_OF_MEMORY = 40965;
lime_audio_openal_ALC.ATTRIBUTES_SIZE = 4098;
lime_audio_openal_ALC.ALL_ATTRIBUTES = 4099;
lime_audio_openal_ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime_audio_openal_ALC.DEVICE_SPECIFIER = 4101;
lime_audio_openal_ALC.EXTENSIONS = 4102;
lime_audio_openal_ALC.ENUMERATE_ALL_EXT = 1;
lime_audio_openal_ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime_audio_openal_ALC.ALL_DEVICES_SPECIFIER = 4115;
lime_graphics_Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.FT_LOAD_FORCE_AUTOHINT = 32;
lime_graphics_opengl_GL.DEPTH_BUFFER_BIT = 256;
lime_graphics_opengl_GL.STENCIL_BUFFER_BIT = 1024;
lime_graphics_opengl_GL.COLOR_BUFFER_BIT = 16384;
lime_graphics_opengl_GL.POINTS = 0;
lime_graphics_opengl_GL.LINES = 1;
lime_graphics_opengl_GL.LINE_LOOP = 2;
lime_graphics_opengl_GL.LINE_STRIP = 3;
lime_graphics_opengl_GL.TRIANGLES = 4;
lime_graphics_opengl_GL.TRIANGLE_STRIP = 5;
lime_graphics_opengl_GL.TRIANGLE_FAN = 6;
lime_graphics_opengl_GL.ZERO = 0;
lime_graphics_opengl_GL.ONE = 1;
lime_graphics_opengl_GL.SRC_COLOR = 768;
lime_graphics_opengl_GL.ONE_MINUS_SRC_COLOR = 769;
lime_graphics_opengl_GL.SRC_ALPHA = 770;
lime_graphics_opengl_GL.ONE_MINUS_SRC_ALPHA = 771;
lime_graphics_opengl_GL.DST_ALPHA = 772;
lime_graphics_opengl_GL.ONE_MINUS_DST_ALPHA = 773;
lime_graphics_opengl_GL.DST_COLOR = 774;
lime_graphics_opengl_GL.ONE_MINUS_DST_COLOR = 775;
lime_graphics_opengl_GL.SRC_ALPHA_SATURATE = 776;
lime_graphics_opengl_GL.FUNC_ADD = 32774;
lime_graphics_opengl_GL.BLEND_EQUATION = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_RGB = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_ALPHA = 34877;
lime_graphics_opengl_GL.FUNC_SUBTRACT = 32778;
lime_graphics_opengl_GL.FUNC_REVERSE_SUBTRACT = 32779;
lime_graphics_opengl_GL.BLEND_DST_RGB = 32968;
lime_graphics_opengl_GL.BLEND_SRC_RGB = 32969;
lime_graphics_opengl_GL.BLEND_DST_ALPHA = 32970;
lime_graphics_opengl_GL.BLEND_SRC_ALPHA = 32971;
lime_graphics_opengl_GL.CONSTANT_COLOR = 32769;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime_graphics_opengl_GL.CONSTANT_ALPHA = 32771;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime_graphics_opengl_GL.BLEND_COLOR = 32773;
lime_graphics_opengl_GL.ARRAY_BUFFER = 34962;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER = 34963;
lime_graphics_opengl_GL.ARRAY_BUFFER_BINDING = 34964;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime_graphics_opengl_GL.STREAM_DRAW = 35040;
lime_graphics_opengl_GL.STATIC_DRAW = 35044;
lime_graphics_opengl_GL.DYNAMIC_DRAW = 35048;
lime_graphics_opengl_GL.BUFFER_SIZE = 34660;
lime_graphics_opengl_GL.BUFFER_USAGE = 34661;
lime_graphics_opengl_GL.CURRENT_VERTEX_ATTRIB = 34342;
lime_graphics_opengl_GL.FRONT = 1028;
lime_graphics_opengl_GL.BACK = 1029;
lime_graphics_opengl_GL.FRONT_AND_BACK = 1032;
lime_graphics_opengl_GL.CULL_FACE = 2884;
lime_graphics_opengl_GL.BLEND = 3042;
lime_graphics_opengl_GL.DITHER = 3024;
lime_graphics_opengl_GL.STENCIL_TEST = 2960;
lime_graphics_opengl_GL.DEPTH_TEST = 2929;
lime_graphics_opengl_GL.SCISSOR_TEST = 3089;
lime_graphics_opengl_GL.POLYGON_OFFSET_FILL = 32823;
lime_graphics_opengl_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime_graphics_opengl_GL.SAMPLE_COVERAGE = 32928;
lime_graphics_opengl_GL.NO_ERROR = 0;
lime_graphics_opengl_GL.INVALID_ENUM = 1280;
lime_graphics_opengl_GL.INVALID_VALUE = 1281;
lime_graphics_opengl_GL.INVALID_OPERATION = 1282;
lime_graphics_opengl_GL.OUT_OF_MEMORY = 1285;
lime_graphics_opengl_GL.CW = 2304;
lime_graphics_opengl_GL.CCW = 2305;
lime_graphics_opengl_GL.LINE_WIDTH = 2849;
lime_graphics_opengl_GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime_graphics_opengl_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime_graphics_opengl_GL.CULL_FACE_MODE = 2885;
lime_graphics_opengl_GL.FRONT_FACE = 2886;
lime_graphics_opengl_GL.DEPTH_RANGE = 2928;
lime_graphics_opengl_GL.DEPTH_WRITEMASK = 2930;
lime_graphics_opengl_GL.DEPTH_CLEAR_VALUE = 2931;
lime_graphics_opengl_GL.DEPTH_FUNC = 2932;
lime_graphics_opengl_GL.STENCIL_CLEAR_VALUE = 2961;
lime_graphics_opengl_GL.STENCIL_FUNC = 2962;
lime_graphics_opengl_GL.STENCIL_FAIL = 2964;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime_graphics_opengl_GL.STENCIL_REF = 2967;
lime_graphics_opengl_GL.STENCIL_VALUE_MASK = 2963;
lime_graphics_opengl_GL.STENCIL_WRITEMASK = 2968;
lime_graphics_opengl_GL.STENCIL_BACK_FUNC = 34816;
lime_graphics_opengl_GL.STENCIL_BACK_FAIL = 34817;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime_graphics_opengl_GL.STENCIL_BACK_REF = 36003;
lime_graphics_opengl_GL.STENCIL_BACK_VALUE_MASK = 36004;
lime_graphics_opengl_GL.STENCIL_BACK_WRITEMASK = 36005;
lime_graphics_opengl_GL.VIEWPORT = 2978;
lime_graphics_opengl_GL.SCISSOR_BOX = 3088;
lime_graphics_opengl_GL.COLOR_CLEAR_VALUE = 3106;
lime_graphics_opengl_GL.COLOR_WRITEMASK = 3107;
lime_graphics_opengl_GL.UNPACK_ALIGNMENT = 3317;
lime_graphics_opengl_GL.PACK_ALIGNMENT = 3333;
lime_graphics_opengl_GL.MAX_TEXTURE_SIZE = 3379;
lime_graphics_opengl_GL.MAX_VIEWPORT_DIMS = 3386;
lime_graphics_opengl_GL.SUBPIXEL_BITS = 3408;
lime_graphics_opengl_GL.RED_BITS = 3410;
lime_graphics_opengl_GL.GREEN_BITS = 3411;
lime_graphics_opengl_GL.BLUE_BITS = 3412;
lime_graphics_opengl_GL.ALPHA_BITS = 3413;
lime_graphics_opengl_GL.DEPTH_BITS = 3414;
lime_graphics_opengl_GL.STENCIL_BITS = 3415;
lime_graphics_opengl_GL.POLYGON_OFFSET_UNITS = 10752;
lime_graphics_opengl_GL.POLYGON_OFFSET_FACTOR = 32824;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D = 32873;
lime_graphics_opengl_GL.SAMPLE_BUFFERS = 32936;
lime_graphics_opengl_GL.SAMPLES = 32937;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_VALUE = 32938;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_INVERT = 32939;
lime_graphics_opengl_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime_graphics_opengl_GL.DONT_CARE = 4352;
lime_graphics_opengl_GL.FASTEST = 4353;
lime_graphics_opengl_GL.NICEST = 4354;
lime_graphics_opengl_GL.GENERATE_MIPMAP_HINT = 33170;
lime_graphics_opengl_GL.BYTE = 5120;
lime_graphics_opengl_GL.UNSIGNED_BYTE = 5121;
lime_graphics_opengl_GL.SHORT = 5122;
lime_graphics_opengl_GL.UNSIGNED_SHORT = 5123;
lime_graphics_opengl_GL.INT = 5124;
lime_graphics_opengl_GL.UNSIGNED_INT = 5125;
lime_graphics_opengl_GL.FLOAT = 5126;
lime_graphics_opengl_GL.DEPTH_COMPONENT = 6402;
lime_graphics_opengl_GL.ALPHA = 6406;
lime_graphics_opengl_GL.RGB = 6407;
lime_graphics_opengl_GL.RGBA = 6408;
lime_graphics_opengl_GL.BGR_EXT = 32992;
lime_graphics_opengl_GL.BGRA_EXT = 32993;
lime_graphics_opengl_GL.LUMINANCE = 6409;
lime_graphics_opengl_GL.LUMINANCE_ALPHA = 6410;
lime_graphics_opengl_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime_graphics_opengl_GL.FRAGMENT_SHADER = 35632;
lime_graphics_opengl_GL.VERTEX_SHADER = 35633;
lime_graphics_opengl_GL.MAX_VERTEX_ATTRIBS = 34921;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime_graphics_opengl_GL.MAX_VARYING_VECTORS = 36348;
lime_graphics_opengl_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime_graphics_opengl_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime_graphics_opengl_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime_graphics_opengl_GL.SHADER_TYPE = 35663;
lime_graphics_opengl_GL.DELETE_STATUS = 35712;
lime_graphics_opengl_GL.LINK_STATUS = 35714;
lime_graphics_opengl_GL.VALIDATE_STATUS = 35715;
lime_graphics_opengl_GL.ATTACHED_SHADERS = 35717;
lime_graphics_opengl_GL.ACTIVE_UNIFORMS = 35718;
lime_graphics_opengl_GL.ACTIVE_ATTRIBUTES = 35721;
lime_graphics_opengl_GL.SHADING_LANGUAGE_VERSION = 35724;
lime_graphics_opengl_GL.CURRENT_PROGRAM = 35725;
lime_graphics_opengl_GL.NEVER = 512;
lime_graphics_opengl_GL.LESS = 513;
lime_graphics_opengl_GL.EQUAL = 514;
lime_graphics_opengl_GL.LEQUAL = 515;
lime_graphics_opengl_GL.GREATER = 516;
lime_graphics_opengl_GL.NOTEQUAL = 517;
lime_graphics_opengl_GL.GEQUAL = 518;
lime_graphics_opengl_GL.ALWAYS = 519;
lime_graphics_opengl_GL.KEEP = 7680;
lime_graphics_opengl_GL.REPLACE = 7681;
lime_graphics_opengl_GL.INCR = 7682;
lime_graphics_opengl_GL.DECR = 7683;
lime_graphics_opengl_GL.INVERT = 5386;
lime_graphics_opengl_GL.INCR_WRAP = 34055;
lime_graphics_opengl_GL.DECR_WRAP = 34056;
lime_graphics_opengl_GL.VENDOR = 7936;
lime_graphics_opengl_GL.RENDERER = 7937;
lime_graphics_opengl_GL.VERSION = 7938;
lime_graphics_opengl_GL.NEAREST = 9728;
lime_graphics_opengl_GL.LINEAR = 9729;
lime_graphics_opengl_GL.NEAREST_MIPMAP_NEAREST = 9984;
lime_graphics_opengl_GL.LINEAR_MIPMAP_NEAREST = 9985;
lime_graphics_opengl_GL.NEAREST_MIPMAP_LINEAR = 9986;
lime_graphics_opengl_GL.LINEAR_MIPMAP_LINEAR = 9987;
lime_graphics_opengl_GL.TEXTURE_MAG_FILTER = 10240;
lime_graphics_opengl_GL.TEXTURE_MIN_FILTER = 10241;
lime_graphics_opengl_GL.TEXTURE_WRAP_S = 10242;
lime_graphics_opengl_GL.TEXTURE_WRAP_T = 10243;
lime_graphics_opengl_GL.TEXTURE_2D = 3553;
lime_graphics_opengl_GL.TEXTURE = 5890;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP = 34067;
lime_graphics_opengl_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime_graphics_opengl_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime_graphics_opengl_GL.TEXTURE0 = 33984;
lime_graphics_opengl_GL.TEXTURE1 = 33985;
lime_graphics_opengl_GL.TEXTURE2 = 33986;
lime_graphics_opengl_GL.TEXTURE3 = 33987;
lime_graphics_opengl_GL.TEXTURE4 = 33988;
lime_graphics_opengl_GL.TEXTURE5 = 33989;
lime_graphics_opengl_GL.TEXTURE6 = 33990;
lime_graphics_opengl_GL.TEXTURE7 = 33991;
lime_graphics_opengl_GL.TEXTURE8 = 33992;
lime_graphics_opengl_GL.TEXTURE9 = 33993;
lime_graphics_opengl_GL.TEXTURE10 = 33994;
lime_graphics_opengl_GL.TEXTURE11 = 33995;
lime_graphics_opengl_GL.TEXTURE12 = 33996;
lime_graphics_opengl_GL.TEXTURE13 = 33997;
lime_graphics_opengl_GL.TEXTURE14 = 33998;
lime_graphics_opengl_GL.TEXTURE15 = 33999;
lime_graphics_opengl_GL.TEXTURE16 = 34000;
lime_graphics_opengl_GL.TEXTURE17 = 34001;
lime_graphics_opengl_GL.TEXTURE18 = 34002;
lime_graphics_opengl_GL.TEXTURE19 = 34003;
lime_graphics_opengl_GL.TEXTURE20 = 34004;
lime_graphics_opengl_GL.TEXTURE21 = 34005;
lime_graphics_opengl_GL.TEXTURE22 = 34006;
lime_graphics_opengl_GL.TEXTURE23 = 34007;
lime_graphics_opengl_GL.TEXTURE24 = 34008;
lime_graphics_opengl_GL.TEXTURE25 = 34009;
lime_graphics_opengl_GL.TEXTURE26 = 34010;
lime_graphics_opengl_GL.TEXTURE27 = 34011;
lime_graphics_opengl_GL.TEXTURE28 = 34012;
lime_graphics_opengl_GL.TEXTURE29 = 34013;
lime_graphics_opengl_GL.TEXTURE30 = 34014;
lime_graphics_opengl_GL.TEXTURE31 = 34015;
lime_graphics_opengl_GL.ACTIVE_TEXTURE = 34016;
lime_graphics_opengl_GL.REPEAT = 10497;
lime_graphics_opengl_GL.CLAMP_TO_EDGE = 33071;
lime_graphics_opengl_GL.MIRRORED_REPEAT = 33648;
lime_graphics_opengl_GL.FLOAT_VEC2 = 35664;
lime_graphics_opengl_GL.FLOAT_VEC3 = 35665;
lime_graphics_opengl_GL.FLOAT_VEC4 = 35666;
lime_graphics_opengl_GL.INT_VEC2 = 35667;
lime_graphics_opengl_GL.INT_VEC3 = 35668;
lime_graphics_opengl_GL.INT_VEC4 = 35669;
lime_graphics_opengl_GL.BOOL = 35670;
lime_graphics_opengl_GL.BOOL_VEC2 = 35671;
lime_graphics_opengl_GL.BOOL_VEC3 = 35672;
lime_graphics_opengl_GL.BOOL_VEC4 = 35673;
lime_graphics_opengl_GL.FLOAT_MAT2 = 35674;
lime_graphics_opengl_GL.FLOAT_MAT3 = 35675;
lime_graphics_opengl_GL.FLOAT_MAT4 = 35676;
lime_graphics_opengl_GL.SAMPLER_2D = 35678;
lime_graphics_opengl_GL.SAMPLER_CUBE = 35680;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime_graphics_opengl_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime_graphics_opengl_GL.POINT_SPRITE = 34913;
lime_graphics_opengl_GL.COMPILE_STATUS = 35713;
lime_graphics_opengl_GL.LOW_FLOAT = 36336;
lime_graphics_opengl_GL.MEDIUM_FLOAT = 36337;
lime_graphics_opengl_GL.HIGH_FLOAT = 36338;
lime_graphics_opengl_GL.LOW_INT = 36339;
lime_graphics_opengl_GL.MEDIUM_INT = 36340;
lime_graphics_opengl_GL.HIGH_INT = 36341;
lime_graphics_opengl_GL.FRAMEBUFFER = 36160;
lime_graphics_opengl_GL.RENDERBUFFER = 36161;
lime_graphics_opengl_GL.RGBA4 = 32854;
lime_graphics_opengl_GL.RGB5_A1 = 32855;
lime_graphics_opengl_GL.RGB565 = 36194;
lime_graphics_opengl_GL.DEPTH_COMPONENT16 = 33189;
lime_graphics_opengl_GL.STENCIL_INDEX = 6401;
lime_graphics_opengl_GL.STENCIL_INDEX8 = 36168;
lime_graphics_opengl_GL.DEPTH_STENCIL = 34041;
lime_graphics_opengl_GL.RENDERBUFFER_WIDTH = 36162;
lime_graphics_opengl_GL.RENDERBUFFER_HEIGHT = 36163;
lime_graphics_opengl_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime_graphics_opengl_GL.RENDERBUFFER_RED_SIZE = 36176;
lime_graphics_opengl_GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime_graphics_opengl_GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime_graphics_opengl_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime_graphics_opengl_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime_graphics_opengl_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime_graphics_opengl_GL.COLOR_ATTACHMENT0 = 36064;
lime_graphics_opengl_GL.DEPTH_ATTACHMENT = 36096;
lime_graphics_opengl_GL.STENCIL_ATTACHMENT = 36128;
lime_graphics_opengl_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime_graphics_opengl_GL.NONE = 0;
lime_graphics_opengl_GL.FRAMEBUFFER_COMPLETE = 36053;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime_graphics_opengl_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime_graphics_opengl_GL.FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.RENDERBUFFER_BINDING = 36007;
lime_graphics_opengl_GL.MAX_RENDERBUFFER_SIZE = 34024;
lime_graphics_opengl_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime_graphics_opengl_GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime_graphics_opengl_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime_graphics_opengl_GL.CONTEXT_LOST_WEBGL = 37442;
lime_graphics_opengl_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime_graphics_opengl_GL.BROWSER_DEFAULT_WEBGL = 37444;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime_math_Matrix3.__identity = new lime_math_Matrix3();
lime_math__$Matrix4_Matrix4_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_SSL = 1;
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_WIN32 = 2;
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_ALL = 3;
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_NOTHING = 0;
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_DEFAULT = 3;
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_ACK_EINTR = 4;
lime_system_BackgroundWorker.MESSAGE_COMPLETE = "__COMPLETE__";
lime_system_BackgroundWorker.MESSAGE_ERROR = "__ERROR__";
lime_system_CFFI.__moduleNames = null;
lime_system_CFFI.lime_cffi_set_finalizer = lime_system_CFFI.load("lime","lime_cffi_set_finalizer",1,false);
lime_text__$TextDirection_TextDirection_$Impl_$.INVALID = 0;
lime_text__$TextDirection_TextDirection_$Impl_$.LEFT_TO_RIGHT = 4;
lime_text__$TextDirection_TextDirection_$Impl_$.RIGHT_TO_LEFT = 5;
lime_text__$TextDirection_TextDirection_$Impl_$.TOP_TO_BOTTOM = 6;
lime_text__$TextDirection_TextDirection_$Impl_$.BOTTOM_TO_TOP = 7;
lime_text__$TextScript_TextScript_$Impl_$.COMMON = "Zyyy";
lime_text__$TextScript_TextScript_$Impl_$.INHERITED = "Zinh";
lime_text__$TextScript_TextScript_$Impl_$.UNKNOWN = "Zzzz";
lime_text__$TextScript_TextScript_$Impl_$.ARABIC = "Arab";
lime_text__$TextScript_TextScript_$Impl_$.ARMENIAN = "Armn";
lime_text__$TextScript_TextScript_$Impl_$.BENGALI = "Beng";
lime_text__$TextScript_TextScript_$Impl_$.CYRILLIC = "Cyrl";
lime_text__$TextScript_TextScript_$Impl_$.DEVANAGARI = "Deva";
lime_text__$TextScript_TextScript_$Impl_$.GEORGIAN = "Geor";
lime_text__$TextScript_TextScript_$Impl_$.GREEK = "Grek";
lime_text__$TextScript_TextScript_$Impl_$.GUJARATI = "Gujr";
lime_text__$TextScript_TextScript_$Impl_$.GURMUKHI = "Guru";
lime_text__$TextScript_TextScript_$Impl_$.HANGUL = "Hang";
lime_text__$TextScript_TextScript_$Impl_$.HAN = "Hani";
lime_text__$TextScript_TextScript_$Impl_$.HEBREW = "Hebr";
lime_text__$TextScript_TextScript_$Impl_$.HIRAGANA = "Hira";
lime_text__$TextScript_TextScript_$Impl_$.KANNADA = "Knda";
lime_text__$TextScript_TextScript_$Impl_$.KATAKANA = "Kana";
lime_text__$TextScript_TextScript_$Impl_$.LAO = "Laoo";
lime_text__$TextScript_TextScript_$Impl_$.LATIN = "Latn";
lime_text__$TextScript_TextScript_$Impl_$.MALAYALAM = "Mlym";
lime_text__$TextScript_TextScript_$Impl_$.ORIYA = "Orya";
lime_text__$TextScript_TextScript_$Impl_$.TAMIL = "Taml";
lime_text__$TextScript_TextScript_$Impl_$.TELUGA = "Telu";
lime_text__$TextScript_TextScript_$Impl_$.THAI = "Thai";
lime_text__$TextScript_TextScript_$Impl_$.TIBETAN = "Tibt";
lime_text__$TextScript_TextScript_$Impl_$.BOPOMOFO = "Bopo";
lime_text__$TextScript_TextScript_$Impl_$.BRAILLE = "Brai";
lime_text__$TextScript_TextScript_$Impl_$.CANADIAN_SYLLABICS = "Cans";
lime_text__$TextScript_TextScript_$Impl_$.CHEROKEE = "Cher";
lime_text__$TextScript_TextScript_$Impl_$.ETHIOPIC = "Ethi";
lime_text__$TextScript_TextScript_$Impl_$.KHMER = "Khmr";
lime_text__$TextScript_TextScript_$Impl_$.MONGOLIAN = "Mong";
lime_text__$TextScript_TextScript_$Impl_$.MYANMAR = "Mymr";
lime_text__$TextScript_TextScript_$Impl_$.OGHAM = "Ogam";
lime_text__$TextScript_TextScript_$Impl_$.RUNIC = "Runr";
lime_text__$TextScript_TextScript_$Impl_$.SINHALA = "Sinh";
lime_text__$TextScript_TextScript_$Impl_$.SYRIAC = "Syrc";
lime_text__$TextScript_TextScript_$Impl_$.THAANA = "Thaa";
lime_text__$TextScript_TextScript_$Impl_$.YI = "Yiii";
lime_text__$TextScript_TextScript_$Impl_$.DESERET = "Dsrt";
lime_text__$TextScript_TextScript_$Impl_$.GOTHIC = "Goth";
lime_text__$TextScript_TextScript_$Impl_$.OLD_ITALIC = "Ital";
lime_text__$TextScript_TextScript_$Impl_$.BUHID = "Buhd";
lime_text__$TextScript_TextScript_$Impl_$.HANUNOO = "Hano";
lime_text__$TextScript_TextScript_$Impl_$.TAGALOG = "Tglg";
lime_text__$TextScript_TextScript_$Impl_$.TAGBANWA = "Tagb";
lime_text__$TextScript_TextScript_$Impl_$.CYPRIOT = "Cprt";
lime_text__$TextScript_TextScript_$Impl_$.LIMBU = "Limb";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_B = "Linb";
lime_text__$TextScript_TextScript_$Impl_$.OSMANYA = "Osma";
lime_text__$TextScript_TextScript_$Impl_$.SHAVIAN = "Shaw";
lime_text__$TextScript_TextScript_$Impl_$.TAI_LE = "Tale";
lime_text__$TextScript_TextScript_$Impl_$.UGARITIC = "Ugar";
lime_text__$TextScript_TextScript_$Impl_$.BUGINESE = "Bugi";
lime_text__$TextScript_TextScript_$Impl_$.COPTIC = "Copt";
lime_text__$TextScript_TextScript_$Impl_$.GLAGOLITIC = "Glag";
lime_text__$TextScript_TextScript_$Impl_$.KHAROSHTHI = "Khar";
lime_text__$TextScript_TextScript_$Impl_$.NEW_TAI_LUE = "Talu";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERSIAN = "Xpeo";
lime_text__$TextScript_TextScript_$Impl_$.SYLOTI_NAGRI = "Sylo";
lime_text__$TextScript_TextScript_$Impl_$.TIFINAGH = "Tfng";
lime_text__$TextScript_TextScript_$Impl_$.BALINESE = "Bali";
lime_text__$TextScript_TextScript_$Impl_$.CUNEIFORM = "Xsux";
lime_text__$TextScript_TextScript_$Impl_$.NKO = "Nkoo";
lime_text__$TextScript_TextScript_$Impl_$.PHAGS_PA = "Phag";
lime_text__$TextScript_TextScript_$Impl_$.PHOENICIAN = "Phnx";
lime_text__$TextScript_TextScript_$Impl_$.CARIAN = "Cari";
lime_text__$TextScript_TextScript_$Impl_$.CHAM = "Cham";
lime_text__$TextScript_TextScript_$Impl_$.KAYAH_LI = "Kali";
lime_text__$TextScript_TextScript_$Impl_$.LEPCHA = "Lepc";
lime_text__$TextScript_TextScript_$Impl_$.LYCIAN = "Lyci";
lime_text__$TextScript_TextScript_$Impl_$.LYDIAN = "Lydi";
lime_text__$TextScript_TextScript_$Impl_$.OL_CHIKI = "Olck";
lime_text__$TextScript_TextScript_$Impl_$.REJANG = "Rjng";
lime_text__$TextScript_TextScript_$Impl_$.SAURASHTRA = "Saur";
lime_text__$TextScript_TextScript_$Impl_$.SUNDANESE = "Sund";
lime_text__$TextScript_TextScript_$Impl_$.VAI = "Vaii";
lime_text__$TextScript_TextScript_$Impl_$.AVESTAN = "Avst";
lime_text__$TextScript_TextScript_$Impl_$.BAMUM = "Bamu";
lime_text__$TextScript_TextScript_$Impl_$.EGYPTIAN_HIEROGLYPHS = "Egyp";
lime_text__$TextScript_TextScript_$Impl_$.IMPERIAL_ARAMAIC = "Armi";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PAHLAVI = "Phli";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PARTHIAN = "Prti";
lime_text__$TextScript_TextScript_$Impl_$.JAVANESE = "Java";
lime_text__$TextScript_TextScript_$Impl_$.KAITHI = "Kthi";
lime_text__$TextScript_TextScript_$Impl_$.LISU = "Lisu";
lime_text__$TextScript_TextScript_$Impl_$.MEETEI_MAYEK = "Mtei";
lime_text__$TextScript_TextScript_$Impl_$.OLD_SOUTH_ARABIAN = "Sarb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_TURKIC = "Orkh";
lime_text__$TextScript_TextScript_$Impl_$.SAMARITAN = "Samr";
lime_text__$TextScript_TextScript_$Impl_$.TAI_THAM = "Lana";
lime_text__$TextScript_TextScript_$Impl_$.TAI_VIET = "Tavt";
lime_text__$TextScript_TextScript_$Impl_$.BATAK = "Batk";
lime_text__$TextScript_TextScript_$Impl_$.BRAHMI = "Brah";
lime_text__$TextScript_TextScript_$Impl_$.MANDAIC = "Mand";
lime_text__$TextScript_TextScript_$Impl_$.CHAKMA = "Cakm";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_CURSIVE = "Merc";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_HIEROGLYPHS = "Mero";
lime_text__$TextScript_TextScript_$Impl_$.MIAO = "Plrd";
lime_text__$TextScript_TextScript_$Impl_$.SHARADA = "Shrd";
lime_text__$TextScript_TextScript_$Impl_$.SORA_SOMPENG = "Sora";
lime_text__$TextScript_TextScript_$Impl_$.TAKRI = "Takr";
lime_text__$TextScript_TextScript_$Impl_$.BASSA_VAH = "Bass";
lime_text__$TextScript_TextScript_$Impl_$.CAUCASIAN_ALBANIAN = "Aghb";
lime_text__$TextScript_TextScript_$Impl_$.DUPLOYAN = "Dupl";
lime_text__$TextScript_TextScript_$Impl_$.ELBASAN = "Elba";
lime_text__$TextScript_TextScript_$Impl_$.GRANTHA = "Gran";
lime_text__$TextScript_TextScript_$Impl_$.KHOJKI = "Khoj";
lime_text__$TextScript_TextScript_$Impl_$.KHUDAWADI = "Sind";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_A = "Lina";
lime_text__$TextScript_TextScript_$Impl_$.MAHAJANI = "Mahj";
lime_text__$TextScript_TextScript_$Impl_$.MANICHAEAN = "Mani";
lime_text__$TextScript_TextScript_$Impl_$.MENDE_KIKAKUI = "Mend";
lime_text__$TextScript_TextScript_$Impl_$.MODI = "Modi";
lime_text__$TextScript_TextScript_$Impl_$.MRO = "Mroo";
lime_text__$TextScript_TextScript_$Impl_$.NABATAEAN = "Nbat";
lime_text__$TextScript_TextScript_$Impl_$.OLD_NORTH_ARABIAN = "Narb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERMIC = "Perm";
lime_text__$TextScript_TextScript_$Impl_$.PAHAWH_HMONG = "Hmng";
lime_text__$TextScript_TextScript_$Impl_$.PALMYRENE = "Palm";
lime_text__$TextScript_TextScript_$Impl_$.PAU_CIN_HAU = "Pauc";
lime_text__$TextScript_TextScript_$Impl_$.PSALTER_PAHLAVI = "Phlp";
lime_text__$TextScript_TextScript_$Impl_$.SIDDHAM = "Sidd";
lime_text__$TextScript_TextScript_$Impl_$.TIRHUTA = "Tirh";
lime_text__$TextScript_TextScript_$Impl_$.WARANG_CITI = "Wara";
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app_Event_$lime_$ui_$Gamepad_$Void();
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_X = 0;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_Y = 1;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_X = 2;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_Y = 3;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_LEFT = 4;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_RIGHT = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.A = 0;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.B = 1;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.X = 2;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.Y = 3;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.BACK = 4;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.GUIDE = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.START = 6;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_STICK = 7;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_STICK = 8;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_SHOULDER = 9;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_SHOULDER = 10;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_UP = 11;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_DOWN = 12;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_LEFT = 13;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_RIGHT = 14;
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app_Event_$lime_$ui_$Joystick_$Void();
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.CENTER = 0;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN = 4;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.LEFT = 8;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.RIGHT = 2;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP = 1;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_LEFT = 12;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_RIGHT = 6;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_LEFT = 9;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_RIGHT = 3;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNKNOWN = 0;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSPACE = 8;
lime_ui__$KeyCode_KeyCode_$Impl_$.TAB = 9;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN = 13;
lime_ui__$KeyCode_KeyCode_$Impl_$.ESCAPE = 27;
lime_ui__$KeyCode_KeyCode_$Impl_$.SPACE = 32;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXCLAMATION = 33;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUOTE = 34;
lime_ui__$KeyCode_KeyCode_$Impl_$.HASH = 35;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOLLAR = 36;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERCENT = 37;
lime_ui__$KeyCode_KeyCode_$Impl_$.AMPERSAND = 38;
lime_ui__$KeyCode_KeyCode_$Impl_$.SINGLE_QUOTE = 39;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_PARENTHESIS = 40;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_PARENTHESIS = 41;
lime_ui__$KeyCode_KeyCode_$Impl_$.ASTERISK = 42;
lime_ui__$KeyCode_KeyCode_$Impl_$.PLUS = 43;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMMA = 44;
lime_ui__$KeyCode_KeyCode_$Impl_$.MINUS = 45;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERIOD = 46;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLASH = 47;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_0 = 48;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_1 = 49;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_2 = 50;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_3 = 51;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_4 = 52;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_5 = 53;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_6 = 54;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_7 = 55;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_8 = 56;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_9 = 57;
lime_ui__$KeyCode_KeyCode_$Impl_$.COLON = 58;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEMICOLON = 59;
lime_ui__$KeyCode_KeyCode_$Impl_$.LESS_THAN = 60;
lime_ui__$KeyCode_KeyCode_$Impl_$.EQUALS = 61;
lime_ui__$KeyCode_KeyCode_$Impl_$.GREATER_THAN = 62;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUESTION = 63;
lime_ui__$KeyCode_KeyCode_$Impl_$.AT = 64;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_BRACKET = 91;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSLASH = 92;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_BRACKET = 93;
lime_ui__$KeyCode_KeyCode_$Impl_$.CARET = 94;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDERSCORE = 95;
lime_ui__$KeyCode_KeyCode_$Impl_$.GRAVE = 96;
lime_ui__$KeyCode_KeyCode_$Impl_$.A = 97;
lime_ui__$KeyCode_KeyCode_$Impl_$.B = 98;
lime_ui__$KeyCode_KeyCode_$Impl_$.C = 99;
lime_ui__$KeyCode_KeyCode_$Impl_$.D = 100;
lime_ui__$KeyCode_KeyCode_$Impl_$.E = 101;
lime_ui__$KeyCode_KeyCode_$Impl_$.F = 102;
lime_ui__$KeyCode_KeyCode_$Impl_$.G = 103;
lime_ui__$KeyCode_KeyCode_$Impl_$.H = 104;
lime_ui__$KeyCode_KeyCode_$Impl_$.I = 105;
lime_ui__$KeyCode_KeyCode_$Impl_$.J = 106;
lime_ui__$KeyCode_KeyCode_$Impl_$.K = 107;
lime_ui__$KeyCode_KeyCode_$Impl_$.L = 108;
lime_ui__$KeyCode_KeyCode_$Impl_$.M = 109;
lime_ui__$KeyCode_KeyCode_$Impl_$.N = 110;
lime_ui__$KeyCode_KeyCode_$Impl_$.O = 111;
lime_ui__$KeyCode_KeyCode_$Impl_$.P = 112;
lime_ui__$KeyCode_KeyCode_$Impl_$.Q = 113;
lime_ui__$KeyCode_KeyCode_$Impl_$.R = 114;
lime_ui__$KeyCode_KeyCode_$Impl_$.S = 115;
lime_ui__$KeyCode_KeyCode_$Impl_$.T = 116;
lime_ui__$KeyCode_KeyCode_$Impl_$.U = 117;
lime_ui__$KeyCode_KeyCode_$Impl_$.V = 118;
lime_ui__$KeyCode_KeyCode_$Impl_$.W = 119;
lime_ui__$KeyCode_KeyCode_$Impl_$.X = 120;
lime_ui__$KeyCode_KeyCode_$Impl_$.Y = 121;
lime_ui__$KeyCode_KeyCode_$Impl_$.Z = 122;
lime_ui__$KeyCode_KeyCode_$Impl_$.DELETE = 127;
lime_ui__$KeyCode_KeyCode_$Impl_$.CAPS_LOCK = 1073741881;
lime_ui__$KeyCode_KeyCode_$Impl_$.F1 = 1073741882;
lime_ui__$KeyCode_KeyCode_$Impl_$.F2 = 1073741883;
lime_ui__$KeyCode_KeyCode_$Impl_$.F3 = 1073741884;
lime_ui__$KeyCode_KeyCode_$Impl_$.F4 = 1073741885;
lime_ui__$KeyCode_KeyCode_$Impl_$.F5 = 1073741886;
lime_ui__$KeyCode_KeyCode_$Impl_$.F6 = 1073741887;
lime_ui__$KeyCode_KeyCode_$Impl_$.F7 = 1073741888;
lime_ui__$KeyCode_KeyCode_$Impl_$.F8 = 1073741889;
lime_ui__$KeyCode_KeyCode_$Impl_$.F9 = 1073741890;
lime_ui__$KeyCode_KeyCode_$Impl_$.F10 = 1073741891;
lime_ui__$KeyCode_KeyCode_$Impl_$.F11 = 1073741892;
lime_ui__$KeyCode_KeyCode_$Impl_$.F12 = 1073741893;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRINT_SCREEN = 1073741894;
lime_ui__$KeyCode_KeyCode_$Impl_$.SCROLL_LOCK = 1073741895;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAUSE = 1073741896;
lime_ui__$KeyCode_KeyCode_$Impl_$.INSERT = 1073741897;
lime_ui__$KeyCode_KeyCode_$Impl_$.HOME = 1073741898;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_UP = 1073741899;
lime_ui__$KeyCode_KeyCode_$Impl_$.END = 1073741901;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_DOWN = 1073741902;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT = 1073741903;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT = 1073741904;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOWN = 1073741905;
lime_ui__$KeyCode_KeyCode_$Impl_$.UP = 1073741906;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUM_LOCK = 1073741907;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DIVIDE = 1073741908;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MULTIPLY = 1073741909;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MINUS = 1073741910;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS = 1073741911;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_ENTER = 1073741912;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_1 = 1073741913;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_2 = 1073741914;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_3 = 1073741915;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_4 = 1073741916;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_5 = 1073741917;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_6 = 1073741918;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_7 = 1073741919;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_8 = 1073741920;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_9 = 1073741921;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_0 = 1073741922;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERIOD = 1073741923;
lime_ui__$KeyCode_KeyCode_$Impl_$.APPLICATION = 1073741925;
lime_ui__$KeyCode_KeyCode_$Impl_$.POWER = 1073741926;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EQUALS = 1073741927;
lime_ui__$KeyCode_KeyCode_$Impl_$.F13 = 1073741928;
lime_ui__$KeyCode_KeyCode_$Impl_$.F14 = 1073741929;
lime_ui__$KeyCode_KeyCode_$Impl_$.F15 = 1073741930;
lime_ui__$KeyCode_KeyCode_$Impl_$.F16 = 1073741931;
lime_ui__$KeyCode_KeyCode_$Impl_$.F17 = 1073741932;
lime_ui__$KeyCode_KeyCode_$Impl_$.F18 = 1073741933;
lime_ui__$KeyCode_KeyCode_$Impl_$.F19 = 1073741934;
lime_ui__$KeyCode_KeyCode_$Impl_$.F20 = 1073741935;
lime_ui__$KeyCode_KeyCode_$Impl_$.F21 = 1073741936;
lime_ui__$KeyCode_KeyCode_$Impl_$.F22 = 1073741937;
lime_ui__$KeyCode_KeyCode_$Impl_$.F23 = 1073741938;
lime_ui__$KeyCode_KeyCode_$Impl_$.F24 = 1073741939;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXECUTE = 1073741940;
lime_ui__$KeyCode_KeyCode_$Impl_$.HELP = 1073741941;
lime_ui__$KeyCode_KeyCode_$Impl_$.MENU = 1073741942;
lime_ui__$KeyCode_KeyCode_$Impl_$.SELECT = 1073741943;
lime_ui__$KeyCode_KeyCode_$Impl_$.STOP = 1073741944;
lime_ui__$KeyCode_KeyCode_$Impl_$.AGAIN = 1073741945;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDO = 1073741946;
lime_ui__$KeyCode_KeyCode_$Impl_$.CUT = 1073741947;
lime_ui__$KeyCode_KeyCode_$Impl_$.COPY = 1073741948;
lime_ui__$KeyCode_KeyCode_$Impl_$.PASTE = 1073741949;
lime_ui__$KeyCode_KeyCode_$Impl_$.FIND = 1073741950;
lime_ui__$KeyCode_KeyCode_$Impl_$.MUTE = 1073741951;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_UP = 1073741952;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_DOWN = 1073741953;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COMMA = 1073741957;
lime_ui__$KeyCode_KeyCode_$Impl_$.ALT_ERASE = 1073741977;
lime_ui__$KeyCode_KeyCode_$Impl_$.SYSTEM_REQUEST = 1073741978;
lime_ui__$KeyCode_KeyCode_$Impl_$.CANCEL = 1073741979;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR = 1073741980;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRIOR = 1073741981;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN2 = 1073741982;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEPARATOR = 1073741983;
lime_ui__$KeyCode_KeyCode_$Impl_$.OUT = 1073741984;
lime_ui__$KeyCode_KeyCode_$Impl_$.OPER = 1073741985;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR_AGAIN = 1073741986;
lime_ui__$KeyCode_KeyCode_$Impl_$.CRSEL = 1073741987;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXSEL = 1073741988;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_00 = 1073742000;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_000 = 1073742001;
lime_ui__$KeyCode_KeyCode_$Impl_$.THOUSAND_SEPARATOR = 1073742002;
lime_ui__$KeyCode_KeyCode_$Impl_$.DECIMAL_SEPARATOR = 1073742003;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_UNIT = 1073742004;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_SUBUNIT = 1073742005;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_PARENTHESIS = 1073742006;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_BRACE = 1073742008;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_BRACE = 1073742009;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_TAB = 1073742010;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BACKSPACE = 1073742011;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_A = 1073742012;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_B = 1073742013;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_C = 1073742014;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_D = 1073742015;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_E = 1073742016;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_F = 1073742017;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_XOR = 1073742018;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_POWER = 1073742019;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERCENT = 1073742020;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LESS_THAN = 1073742021;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_GREATER_THAN = 1073742022;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AMPERSAND = 1073742023;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_VERTICAL_BAR = 1073742025;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COLON = 1073742027;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HASH = 1073742028;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_SPACE = 1073742029;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AT = 1073742030;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EXCLAMATION = 1073742031;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_STORE = 1073742032;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_RECALL = 1073742033;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_CLEAR = 1073742034;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_ADD = 1073742035;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_SUBTRACT = 1073742036;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_MULTIPLY = 1073742037;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_DIVIDE = 1073742038;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS_MINUS = 1073742039;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR = 1073742040;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR_ENTRY = 1073742041;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BINARY = 1073742042;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_OCTAL = 1073742043;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DECIMAL = 1073742044;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HEXADECIMAL = 1073742045;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_CTRL = 1073742048;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_SHIFT = 1073742049;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_ALT = 1073742050;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_META = 1073742051;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_CTRL = 1073742052;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_SHIFT = 1073742053;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_ALT = 1073742054;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_META = 1073742055;
lime_ui__$KeyCode_KeyCode_$Impl_$.MODE = 1073742081;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_NEXT = 1073742082;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PREVIOUS = 1073742083;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_STOP = 1073742084;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PLAY = 1073742085;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_MUTE = 1073742086;
lime_ui__$KeyCode_KeyCode_$Impl_$.MEDIA_SELECT = 1073742087;
lime_ui__$KeyCode_KeyCode_$Impl_$.WWW = 1073742088;
lime_ui__$KeyCode_KeyCode_$Impl_$.MAIL = 1073742089;
lime_ui__$KeyCode_KeyCode_$Impl_$.CALCULATOR = 1073742090;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMPUTER = 1073742091;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_SEARCH = 1073742092;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_HOME = 1073742093;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BACK = 1073742094;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_FORWARD = 1073742095;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_STOP = 1073742096;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_REFRESH = 1073742097;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BOOKMARKS = 1073742098;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_DOWN = 1073742099;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_UP = 1073742100;
lime_ui__$KeyCode_KeyCode_$Impl_$.DISPLAY_SWITCH = 1073742101;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_TOGGLE = 1073742102;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_DOWN = 1073742103;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_UP = 1073742104;
lime_ui__$KeyCode_KeyCode_$Impl_$.EJECT = 1073742105;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLEEP = 1073742106;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NONE = 0;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_SHIFT = 1;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_SHIFT = 2;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_CTRL = 64;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_CTRL = 128;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_ALT = 256;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_ALT = 512;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_META = 1024;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_META = 2048;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NUM_LOCK = 4096;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CAPS_LOCK = 8192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.MODE = 16384;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CTRL = 192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.SHIFT = 3;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.ALT = 768;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.META = 3072;
lime_ui_Touch.onEnd = new lime_app_Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app_Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app_Event_$lime_$ui_$Touch_$Void();
lime_utils_Bytes.cffi_lime_bytes_from_data_pointer = (function($this) {
	var $r;
	var inValue = lime_system_CFFI.load("lime","lime_bytes_from_data_pointer",2,false);
	$r = inValue;
	return $r;
}(this));
lime_utils_Bytes.cffi_lime_bytes_get_data_pointer = (function($this) {
	var $r;
	var inValue = lime_system_CFFI.load("lime","lime_bytes_get_data_pointer",1,false);
	$r = inValue;
	return $r;
}(this));
lime_utils_Bytes.cffi_lime_bytes_read_file = (function($this) {
	var $r;
	var inValue = lime_system_CFFI.load("lime","lime_bytes_read_file",1,false);
	$r = inValue;
	return $r;
}(this));
lime_utils__$Float32Array_Float32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$Int16Array_Int16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
lime_utils__$Int32Array_Int32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$UInt16Array_UInt16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.BYTES_PER_ELEMENT = 1;
motion_actuators_SimpleActuator.actuators = [];
motion_actuators_SimpleActuator.actuatorsLength = 0;
motion_actuators_SimpleActuator.addedEvent = false;
motion_Actuate.defaultActuator = motion_actuators_SimpleActuator;
motion_Actuate.defaultEase = motion_easing_Expo.get_easeOut();
motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
openfl_Assets.cache = new openfl_AssetCache();
openfl_Assets.dispatcher = new openfl_events_EventDispatcher();
openfl_display_LoaderInfo.__rootURL = window.document.URL;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
openfl_geom_Matrix.__temp = new openfl_geom_Matrix();
openfl_Lib.current = new openfl_display_MovieClip();
openfl_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl__$internal_renderer_GraphicsPaths.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_GraphicsPaths.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_cairo_CairoGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_cairo_CairoGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_cairo_CairoGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_opengl_GLBitmap.fbData = [];
openfl__$internal_renderer_opengl_GLRenderer.glContextId = 0;
openfl__$internal_renderer_opengl_GLRenderer.glContexts = [];
openfl__$internal_renderer_opengl_shaders2_Shader.UID = 0;
openfl__$internal_renderer_opengl_shaders2_DefaultShader.VERTEX_SRC = ["attribute vec2 " + "openfl_aPosition" + ";","attribute vec2 " + "openfl_aTexCoord0" + ";","attribute vec4 " + "openfl_aColor" + ";","uniform mat3 " + "openfl_uProjectionMatrix" + ";","uniform bool " + "openfl_uUseColorTransform" + ";","varying vec2 " + "openfl_vTexCoord" + ";","varying vec4 " + "openfl_vColor" + ";","void main(void) {","   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);","   " + "openfl_vTexCoord" + " = " + "openfl_aTexCoord0" + ";","   if(" + "openfl_uUseColorTransform" + ")","   \t" + "openfl_vColor" + " = " + "openfl_aColor" + ";","   else","   \t" + "openfl_vColor" + " = vec4(" + "openfl_aColor" + ".rgb * " + "openfl_aColor" + ".a, " + "openfl_aColor" + ".a);","}"];
openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex = 0;
openfl_geom_Rectangle.__temp = new openfl_geom_Rectangle();
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.fillVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aPosition")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.drawTrianglesVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aPosition"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aTexCoord0"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5121,true,"openfl_aColor")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.primitiveVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aPosition"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5126,false,"openfl_aColor")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.graphicsDataPool = [];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool = [];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectPosition = new openfl_geom_Point();
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds = new openfl_geom_Rectangle();
openfl__$internal_renderer_opengl_utils_ShaderManager.compiledShadersCache = new haxe_ds_StringMap();
openfl__$internal_renderer_opengl_utils_SpriteBatch.VERTS_PER_SPRITE = 4;
openfl__$internal_text_TextEngine.UTF8_TAB = 9;
openfl__$internal_text_TextEngine.UTF8_ENDLINE = 10;
openfl__$internal_text_TextEngine.UTF8_SPACE = 32;
openfl__$internal_text_TextEngine.UTF8_HYPHEN = 45;
openfl__$internal_text_TextEngine.__defaultFonts = new haxe_ds_StringMap();
openfl_display_BitmapData.__isGLES = null;
openfl_display_BitmapDataChannel.ALPHA = 8;
openfl_display_BitmapDataChannel.BLUE = 4;
openfl_display_BitmapDataChannel.GREEN = 2;
openfl_display_BitmapDataChannel.RED = 1;
openfl_display_Graphics.TILE_SCALE = 1;
openfl_display_Graphics.TILE_ROTATION = 2;
openfl_display_Graphics.TILE_RGB = 4;
openfl_display_Graphics.TILE_ALPHA = 8;
openfl_display_Graphics.TILE_TRANS_2x2 = 16;
openfl_display_Graphics.TILE_RECT = 32;
openfl_display_Graphics.TILE_ORIGIN = 64;
openfl_display_Graphics.TILE_BLEND_NORMAL = 0;
openfl_display_Graphics.TILE_BLEND_ADD = 65536;
openfl_display_Graphics.TILE_BLEND_MULTIPLY = 131072;
openfl_display_Graphics.TILE_BLEND_SCREEN = 262144;
openfl_display_Graphics.TILE_BLEND_SUBTRACT = 524288;
openfl_display_Graphics.TILE_BLEND_DARKEN = 1048576;
openfl_display_Graphics.TILE_BLEND_LIGHTEN = 2097152;
openfl_display_Graphics.TILE_BLEND_OVERLAY = 4194304;
openfl_display_Graphics.TILE_BLEND_HARDLIGHT = 8388608;
openfl_display_Graphics.TILE_BLEND_DIFFERENCE = 16777216;
openfl_display_Graphics.TILE_BLEND_INVERT = 33554432;
openfl_display_GraphicsPathCommand.LINE_TO = 2;
openfl_display_GraphicsPathCommand.MOVE_TO = 1;
openfl_display_GraphicsPathCommand.CURVE_TO = 3;
openfl_display_GraphicsPathCommand.WIDE_LINE_TO = 5;
openfl_display_GraphicsPathCommand.WIDE_MOVE_TO = 4;
openfl_display_GraphicsPathCommand.NO_OP = 0;
openfl_display_GraphicsPathCommand.CUBIC_CURVE_TO = 6;
openfl_display_OpenGLView.CONTEXT_LOST = "glcontextlost";
openfl_display_OpenGLView.CONTEXT_RESTORED = "glcontextrestored";
openfl_display_Shader.uniformRegex = new EReg("^\\s*uniform\\s+(sampler(?:2D|Cube)|[bi]?vec[234]|float|int|bool|mat[234])\\s+(\\w+)\\s*(?:\\[(\\d+)\\])?\\s*;.*$","gmi");
openfl_display_Shader.aPosition = "openfl_aPosition";
openfl_display_Shader.aTexCoord = "openfl_aTexCoord0";
openfl_display_Shader.aColor = "openfl_aColor";
openfl_display_Shader.uSampler = "openfl_uSampler0";
openfl_display_Shader.uProjectionMatrix = "openfl_uProjectionMatrix";
openfl_display_Shader.uColorMultiplier = "openfl_uColorMultiplier";
openfl_display_Shader.uColorOffset = "openfl_uColorOffset";
openfl_display_Shader.uObjectSize = "openfl_uObjectSize";
openfl_display_Shader.uTextureSize = "openfl_uTextureSize";
openfl_display_Shader.vTexCoord = "openfl_vTexCoord";
openfl_display_Shader.vColor = "openfl_vColor";
openfl_display_Shader.vertexHeader = ["attribute vec2 " + openfl_display_Shader.aPosition + ";","attribute vec2 " + openfl_display_Shader.aTexCoord + ";","attribute vec4 " + openfl_display_Shader.aColor + ";","uniform mat3 " + openfl_display_Shader.uProjectionMatrix + ";","uniform vec2 " + openfl_display_Shader.uObjectSize + ";","uniform vec2 " + openfl_display_Shader.uTextureSize + ";","varying vec2 " + openfl_display_Shader.vTexCoord + ";","varying vec4 " + openfl_display_Shader.vColor + ";"];
openfl_display_Shader.fragmentHeader = ["uniform sampler2D " + openfl_display_Shader.uSampler + ";","uniform vec4 " + openfl_display_Shader.uColorMultiplier + ";","uniform vec4 " + openfl_display_Shader.uColorOffset + ";","uniform vec2 " + openfl_display_Shader.uObjectSize + ";","uniform vec2 " + openfl_display_Shader.uTextureSize + ";","varying vec2 " + openfl_display_Shader.vTexCoord + ";","varying vec4 " + openfl_display_Shader.vColor + ";","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}"];
openfl_display_Tilesheet.TILE_SCALE = 1;
openfl_display_Tilesheet.TILE_ROTATION = 2;
openfl_display_Tilesheet.TILE_RGB = 4;
openfl_display_Tilesheet.TILE_ALPHA = 8;
openfl_display_Tilesheet.TILE_TRANS_2x2 = 16;
openfl_display_Tilesheet.TILE_RECT = 32;
openfl_display_Tilesheet.TILE_ORIGIN = 64;
openfl_display_Tilesheet.TILE_BLEND_NORMAL = 0;
openfl_display_Tilesheet.TILE_BLEND_ADD = 65536;
openfl_display_Tilesheet.TILE_BLEND_MULTIPLY = 131072;
openfl_display_Tilesheet.TILE_BLEND_SCREEN = 262144;
openfl_display_Tilesheet.TILE_BLEND_SUBTRACT = 524288;
openfl_display_Tilesheet.TILE_BLEND_DARKEN = 1048576;
openfl_display_Tilesheet.TILE_BLEND_LIGHTEN = 2097152;
openfl_display_Tilesheet.TILE_BLEND_OVERLAY = 4194304;
openfl_display_Tilesheet.TILE_BLEND_HARDLIGHT = 8388608;
openfl_display_Tilesheet.TILE_BLEND_DIFFERENCE = 16777216;
openfl_display_Tilesheet.TILE_BLEND_INVERT = 33554432;
openfl_display_Tilesheet.__defaultPoint = new openfl_geom_Point(0,0);
openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT = 34046;
openfl_display3D_Context3D.MAX_SAMPLERS = 8;
openfl_display3D_Context3D.MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
openfl_display3D_Context3D.anisotropySupportTested = false;
openfl_display3D_Context3D.supportsAnisotropy = false;
openfl_display3D_Context3D.maxSupportedAnisotropy = 256;
openfl_display3D_Context3DClearMask.ALL = 17664;
openfl_display3D_Context3DClearMask.COLOR = 16384;
openfl_display3D_Context3DClearMask.DEPTH = 256;
openfl_display3D_Context3DClearMask.STENCIL = 1024;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.ALWAYS = 519;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.EQUAL = 514;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER = 516;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER_EQUAL = 518;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS = 513;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS_EQUAL = 515;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NEVER = 512;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NOT_EQUAL = 517;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.BACK = 1028;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT = 1029;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT_AND_BACK = 1032;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.NONE = 0;
openfl_errors_Error.DEFAULT_TO_STRING = "Error";
openfl_events_ActivityEvent.ACTIVITY = "activity";
openfl_events_TextEvent.LINK = "link";
openfl_events_TextEvent.TEXT_INPUT = "textInput";
openfl_events_ErrorEvent.ERROR = "error";
openfl_events_FocusEvent.FOCUS_IN = "focusIn";
openfl_events_FocusEvent.FOCUS_OUT = "focusOut";
openfl_events_FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl_events_FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl_events_FullScreenEvent.FULL_SCREEN = "fullScreen";
openfl_events_FullScreenEvent.FULL_SCREEN_INTERACTIVE_ACCEPTED = "fullScreenInteractiveAccepted";
openfl_events_GameInputEvent.DEVICE_ADDED = "deviceAdded";
openfl_events_GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
openfl_events_GameInputEvent.DEVICE_UNUSABLE = "deviceUnusable";
openfl_events_HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
openfl_events_HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl_events_IOErrorEvent.IO_ERROR = "ioError";
openfl_events_KeyboardEvent.KEY_DOWN = "keyDown";
openfl_events_KeyboardEvent.KEY_UP = "keyUp";
openfl_events_MouseEvent.CLICK = "click";
openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl_events_MouseEvent.ROLL_OUT = "rollOut";
openfl_events_MouseEvent.ROLL_OVER = "rollOver";
openfl_events_ProgressEvent.PROGRESS = "progress";
openfl_events_ProgressEvent.SOCKET_DATA = "socketData";
openfl_events_SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl_events_TimerEvent.TIMER = "timer";
openfl_events_TimerEvent.TIMER_COMPLETE = "timerComplete";
openfl_events_TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl_events_TouchEvent.TOUCH_END = "touchEnd";
openfl_events_TouchEvent.TOUCH_MOVE = "touchMove";
openfl_events_TouchEvent.TOUCH_OUT = "touchOut";
openfl_events_TouchEvent.TOUCH_OVER = "touchOver";
openfl_events_TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl_events_TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl_events_TouchEvent.TOUCH_TAP = "touchTap";
openfl_filters_BitmapFilterQuality.HIGH = 3;
openfl_filters_BitmapFilterQuality.MEDIUM = 2;
openfl_filters_BitmapFilterQuality.LOW = 1;
openfl_filters__$BlurFilter_BlurShader.__meta__ = { fields : { vertex : { vertex : null}, fragment : { fragment : null}, get_uRadius : { noCompletion : null}, set_uRadius : { noCompletion : null}}};
openfl_filters__$DropShadowFilter_DropShadowShader.__meta__ = { fields : { vertex : { vertex : null}, fragment : { fragment : null}, get_uRadius : { noCompletion : null}, set_uRadius : { noCompletion : null}, get_uShift : { noCompletion : null}, set_uShift : { noCompletion : null}, get_uColor : { noCompletion : null}, set_uColor : { noCompletion : null}}};
openfl_filters__$GlowFilter_GlowShader.__meta__ = { fields : { vertex : { vertex : null}, fragment : { fragment : null}, get_uRadius : { noCompletion : null}, set_uRadius : { noCompletion : null}, get_uColor : { noCompletion : null}, set_uColor : { noCompletion : null}}};
openfl_media_Sound.__registeredSounds = new haxe_ds_StringMap();
openfl_system_Capabilities.avHardwareDisable = true;
openfl_system_Capabilities.cpuArchitecture = "";
openfl_system_Capabilities.hasAccessibility = false;
openfl_system_Capabilities.hasAudio = true;
openfl_system_Capabilities.hasAudioEncoder = false;
openfl_system_Capabilities.hasEmbeddedVideo = false;
openfl_system_Capabilities.hasIME = false;
openfl_system_Capabilities.hasMP3 = false;
openfl_system_Capabilities.hasPrinting = false;
openfl_system_Capabilities.hasScreenBroadcast = false;
openfl_system_Capabilities.hasScreenPlayback = false;
openfl_system_Capabilities.hasStreamingAudio = false;
openfl_system_Capabilities.hasStreamingVideo = false;
openfl_system_Capabilities.hasTLS = true;
openfl_system_Capabilities.hasVideoEncoder = false;
openfl_system_Capabilities.isDebugger = false;
openfl_system_Capabilities.isEmbeddedInAcrobat = false;
openfl_system_Capabilities.localFileReadDisable = true;
openfl_system_Capabilities.manufacturer = "OpenFL Contributors";
openfl_system_Capabilities.maxLevelIDC = 0;
openfl_system_Capabilities.playerType = "OpenFL";
openfl_system_Capabilities.screenColor = "color";
openfl_system_Capabilities.serverString = "";
openfl_system_Capabilities.supports32BitProcesses = false;
openfl_system_Capabilities.supports64BitProcesses = false;
openfl_system_Capabilities.touchscreenType = openfl_system_TouchscreenType.FINGER;
openfl_system_SecurityDomain.currentDomain = new openfl_system_SecurityDomain();
openfl_ui_GameInput.isSupported = true;
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__deviceList = [];
openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
openfl_ui_GameInput.__instances = [];
openfl_ui_GameInputDevice.MAX_BUFFER_SIZE = 32000;
openfl_ui_Keyboard.NUMBER_0 = 48;
openfl_ui_Keyboard.NUMBER_1 = 49;
openfl_ui_Keyboard.NUMBER_2 = 50;
openfl_ui_Keyboard.NUMBER_3 = 51;
openfl_ui_Keyboard.NUMBER_4 = 52;
openfl_ui_Keyboard.NUMBER_5 = 53;
openfl_ui_Keyboard.NUMBER_6 = 54;
openfl_ui_Keyboard.NUMBER_7 = 55;
openfl_ui_Keyboard.NUMBER_8 = 56;
openfl_ui_Keyboard.NUMBER_9 = 57;
openfl_ui_Keyboard.A = 65;
openfl_ui_Keyboard.B = 66;
openfl_ui_Keyboard.C = 67;
openfl_ui_Keyboard.D = 68;
openfl_ui_Keyboard.E = 69;
openfl_ui_Keyboard.F = 70;
openfl_ui_Keyboard.G = 71;
openfl_ui_Keyboard.H = 72;
openfl_ui_Keyboard.I = 73;
openfl_ui_Keyboard.J = 74;
openfl_ui_Keyboard.K = 75;
openfl_ui_Keyboard.L = 76;
openfl_ui_Keyboard.M = 77;
openfl_ui_Keyboard.N = 78;
openfl_ui_Keyboard.O = 79;
openfl_ui_Keyboard.P = 80;
openfl_ui_Keyboard.Q = 81;
openfl_ui_Keyboard.R = 82;
openfl_ui_Keyboard.S = 83;
openfl_ui_Keyboard.T = 84;
openfl_ui_Keyboard.U = 85;
openfl_ui_Keyboard.V = 86;
openfl_ui_Keyboard.W = 87;
openfl_ui_Keyboard.X = 88;
openfl_ui_Keyboard.Y = 89;
openfl_ui_Keyboard.Z = 90;
openfl_ui_Keyboard.NUMPAD_0 = 96;
openfl_ui_Keyboard.NUMPAD_1 = 97;
openfl_ui_Keyboard.NUMPAD_2 = 98;
openfl_ui_Keyboard.NUMPAD_3 = 99;
openfl_ui_Keyboard.NUMPAD_4 = 100;
openfl_ui_Keyboard.NUMPAD_5 = 101;
openfl_ui_Keyboard.NUMPAD_6 = 102;
openfl_ui_Keyboard.NUMPAD_7 = 103;
openfl_ui_Keyboard.NUMPAD_8 = 104;
openfl_ui_Keyboard.NUMPAD_9 = 105;
openfl_ui_Keyboard.NUMPAD_MULTIPLY = 106;
openfl_ui_Keyboard.NUMPAD_ADD = 107;
openfl_ui_Keyboard.NUMPAD_ENTER = 108;
openfl_ui_Keyboard.NUMPAD_SUBTRACT = 109;
openfl_ui_Keyboard.NUMPAD_DECIMAL = 110;
openfl_ui_Keyboard.NUMPAD_DIVIDE = 111;
openfl_ui_Keyboard.F1 = 112;
openfl_ui_Keyboard.F2 = 113;
openfl_ui_Keyboard.F3 = 114;
openfl_ui_Keyboard.F4 = 115;
openfl_ui_Keyboard.F5 = 116;
openfl_ui_Keyboard.F6 = 117;
openfl_ui_Keyboard.F7 = 118;
openfl_ui_Keyboard.F8 = 119;
openfl_ui_Keyboard.F9 = 120;
openfl_ui_Keyboard.F10 = 121;
openfl_ui_Keyboard.F11 = 122;
openfl_ui_Keyboard.F12 = 123;
openfl_ui_Keyboard.F13 = 124;
openfl_ui_Keyboard.F14 = 125;
openfl_ui_Keyboard.F15 = 126;
openfl_ui_Keyboard.BACKSPACE = 8;
openfl_ui_Keyboard.TAB = 9;
openfl_ui_Keyboard.ALTERNATE = 18;
openfl_ui_Keyboard.ENTER = 13;
openfl_ui_Keyboard.COMMAND = 15;
openfl_ui_Keyboard.SHIFT = 16;
openfl_ui_Keyboard.CONTROL = 17;
openfl_ui_Keyboard.BREAK = 19;
openfl_ui_Keyboard.CAPS_LOCK = 20;
openfl_ui_Keyboard.NUMPAD = 21;
openfl_ui_Keyboard.ESCAPE = 27;
openfl_ui_Keyboard.SPACE = 32;
openfl_ui_Keyboard.PAGE_UP = 33;
openfl_ui_Keyboard.PAGE_DOWN = 34;
openfl_ui_Keyboard.END = 35;
openfl_ui_Keyboard.HOME = 36;
openfl_ui_Keyboard.LEFT = 37;
openfl_ui_Keyboard.RIGHT = 39;
openfl_ui_Keyboard.UP = 38;
openfl_ui_Keyboard.DOWN = 40;
openfl_ui_Keyboard.INSERT = 45;
openfl_ui_Keyboard.DELETE = 46;
openfl_ui_Keyboard.NUMLOCK = 144;
openfl_ui_Keyboard.SEMICOLON = 186;
openfl_ui_Keyboard.EQUAL = 187;
openfl_ui_Keyboard.COMMA = 188;
openfl_ui_Keyboard.MINUS = 189;
openfl_ui_Keyboard.PERIOD = 190;
openfl_ui_Keyboard.SLASH = 191;
openfl_ui_Keyboard.BACKQUOTE = 192;
openfl_ui_Keyboard.LEFTBRACKET = 219;
openfl_ui_Keyboard.BACKSLASH = 220;
openfl_ui_Keyboard.RIGHTBRACKET = 221;
openfl_ui_Keyboard.QUOTE = 222;
ApplicationMain.main();
})(typeof console != "undefined" ? console : {log:function(){}}, typeof window != "undefined" ? window : exports);
